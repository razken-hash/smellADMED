[
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class XMLException extends ArchivaException{public XMLException(String message,Throwable cause){super(message,cause);}public XMLException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class LatinEntitiesTest extends TestCase{public void testResolveEntity(){assertEquals(\"\\u00a9\",LatinEntities.resolveEntity(\"&copy;\"));assertEquals(\"\\u221e\",LatinEntities.resolveEntity(\"&infin;\"));assertEquals(\"\\u00f8\",LatinEntities.resolveEntity(\"&oslash;\"));assertEquals(\"\",LatinEntities.resolveEntity(\"\"));assertEquals(\"&amp;\",LatinEntities.resolveEntity(\"&amp;\"));assertEquals(null,LatinEntities.resolveEntity(null));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class XMLWriterTest extends AbstractArchivaXmlTestCase{public void testWrite()throws Exception{StringBuffer expected=new StringBuffer();expected.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\");expected.append(\"\\n\");expected.append(\"<basic>\\n\");expected.append(\"<names>\\n\");expected.append(\"<name>\").append(TRYGVIS).append(\"</name>\\n\");expected.append(\"<name>\").append(INFINITE_ARCHIVA).append(\"</name>\\n\");expected.append(\"</names>\\n\");expected.append(\"</basic>\\n\");Element basic=DocumentHelper.createElement(\"basic\");Document doc=DocumentHelper.createDocument(basic);Element names=basic.addElement(\"names\");names.addElement(\"name\").setText(TRYGVIS);names.addElement(\"name\").setText(INFINITE_ARCHIVA);StringWriter actual=new StringWriter();XMLWriter.write(doc,actual);assertEquals(\"Comparision of contents:\",expected.toString(),actual.toString());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class IndexMergerException extends Exception{public IndexMergerException(String message,Throwable t){super(message,t);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class OptionalQuery extends AbstractCompoundQuery{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RequiredQuery extends AbstractCompoundQuery{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryServletProxiedRelocatedTest extends AbstractRepositoryServletProxiedTestCase{public void testGetProxiedReleaseArtifactPolicyOncePass()throws Exception{setupCentralRemoteRepo();setupCleanInternalRepo();String resourcePath=\"org/apache/archiva/test/1.0/test-1.0.jar\";String expectedRemoteContents=\"archiva-test-1.0|jar-remote-contents\";populateRepo(remoteCentral,resourcePath,expectedRemoteContents);resourcePath=\"archiva/test/1.0/test-1.0.pom\";String pom=\"<project>\"+\"<modelVersion>4.0.0</modelVersion>\"+\"<groupId>archiva</groupId>\"+\"<artifactId>test</artifactId>\"+\"<version>1.0</version>\"+\"<distributionManagement>\"+\"<relocation>\"+\"<groupId>org.apache.archiva</groupId>\"+\"</relocation>\"+\"</distributionManagement>\"+\"</project>\";populateRepo(remoteCentral,resourcePath,pom);resourcePath=\"archiva/jars/test-1.0.jar\";setupReleaseConnector(REPOID_INTERNAL,remoteCentral,ReleasesPolicy.ONCE);saveConfiguration();HttpUnitOptions.setExceptionsThrownOnErrorStatus(false);WebRequest request=new GetMethodWebRequest(\"http://machine.com/repository/internal/\"+resourcePath);WebResponse response=sc.getResponse(request);assertResponseOK(response);assertEquals(\"Expected remote file contents\",expectedRemoteContents,response.getText());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class UnauthenticatedDavResourceFactory extends ArchivaDavResourceFactory{@Override protected boolean isAuthorized(DavServletRequest request,String repositoryId)throws DavException{return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class UnauthenticatedDavSessionProvider extends ArchivaDavSessionProvider{public UnauthenticatedDavSessionProvider(WebApplicationContext applicationContext){super(applicationContext);}@Override public boolean attachSession(WebdavRequest request)throws DavException{return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class UnauthenticatedRepositoryServlet extends RepositoryServlet{@Override public synchronized void initServers(ServletConfig servletConfig){super.initServers(servletConfig);WebApplicationContext wac=WebApplicationContextUtils.getRequiredWebApplicationContext(servletConfig.getServletContext());UnauthenticatedDavSessionProvider sessionProvider=new UnauthenticatedDavSessionProvider(wac);setDavSessionProvider(sessionProvider);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryConversionException extends Exception{public RepositoryConversionException(String message,Throwable cause){super(message,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(locations={\"classpath*:/META-INF/spring-context.xml\",\"classpath:/spring-context.xml\"})public abstract class AbstractRepositoryAdminTest extends TestCase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryAdminException extends Exception{public RepositoryAdminException(String message,Throwable cause){super(message,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArchivaRestServiceException extends Exception{public ArchivaRestServiceException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class App{public static void main(String[]args){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultRepositoryQueryLayer implements RepositoryQueryLayer{public boolean containsArtifact(Artifact artifact){return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryMetadata{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ChecksumMetadataReporter extends ChecksumArtifactReporter implements MetadataReportProcessor{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class AllFilter<T>implements Filter<T>{public boolean accept(T value){return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryTaskJob extends AbstractJob{public void execute(JobExecutionContext context)throws JobExecutionException{JobDataMap dataMap=context.getJobDetail().getJobDataMap();setJobDataMap(dataMap);TaskQueue taskQueue=(TaskQueue)dataMap.get(RepositoryArchivaTaskScheduler.TASK_QUEUE);String repositoryId=(String)dataMap.get(RepositoryArchivaTaskScheduler.TASK_REPOSITORY);RepositoryTask task=new RepositoryTask();task.setRepositoryId(repositoryId);try{taskQueue.put(task);}catch(TaskQueueException e){throw new JobExecutionException(e);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class PlexusSisuBridgeException extends Exception{public PlexusSisuBridgeException(String message,Throwable throwable){super(message,throwable);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class CronExpressionValidator extends FieldValidatorSupport{public void validate(Object obj)throws ValidationException{String cron=(String)getFieldValue(\"cron\",obj);org.codehaus.redback.components.scheduler.CronExpressionValidator cronExpressionValidator=new org.codehaus.redback.components.scheduler.CronExpressionValidator();ValidatorContext ctxt=getValidatorContext();if(!cronExpressionValidator.validate(String.valueOf(cron))){ctxt.addActionError(\"Invalid cron expression value(s)\");return;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class IntervalValidator extends ValidatorSupport{public void validate(Object obj)throws ValidationException{String snapshotsPolicy=(String)getFieldValue(\"snapshotsPolicy\",obj);String releasesPolicy=(String)getFieldValue(\"releasesPolicy\",obj);Integer snapshotsInterval=(Integer)getFieldValue(\"snapshotsInterval\",obj);Integer releasesInterval=(Integer)getFieldValue(\"releasesInterval\",obj);ValidatorContext ctxt=getValidatorContext();if(!snapshotsPolicy.equals(\"interval\")){if(snapshotsInterval.intValue()!=0){ctxt.addActionError(\"Snapshots Interval must be set to zero.\");}}if(!releasesPolicy.equals(\"interval\")){if(releasesInterval.intValue()!=0){ctxt.addActionError(\"Releases Interval must be set to zero.\");}}if(ctxt.hasActionErrors()){return;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class SyncedRepositoryValidator extends ValidatorSupport{public void validate(Object obj)throws ValidationException{String method=(String)getFieldValue(\"method\",obj);ValidatorContext ctxt=getValidatorContext();if(method.equals(\"rsync\")){String rsyncHost=(String)getFieldValue(\"rsyncHost\",obj);if(rsyncHost==null || rsyncHost.equals(\"\")){ctxt.addActionError(\"Rsync host is required.\");}String rsyncDirectory=(String)getFieldValue(\"rsyncDirectory\",obj);if(rsyncDirectory==null || rsyncDirectory.equals(\"\")){ctxt.addActionError(\"Rsync directory is required.\");}String rsyncMethod=(String)getFieldValue(\"rsyncMethod\",obj);if(rsyncMethod==null || rsyncMethod.equals(\"\")){ctxt.addActionError(\"Rsync method is required.\");}else{if(!rsyncMethod.equals(\"anonymous\")&& !rsyncMethod.equals(\"ssh\")){ctxt.addActionError(\"Invalid rsync method\");}}String username=(String)getFieldValue(\"username\",obj);if(username==null || username.equals(\"\")){ctxt.addActionError(\"Username is required.\");}}else if(method.equals(\"svn\")){String svnUrl=(String)getFieldValue(\"svnUrl\",obj);if(svnUrl==null || svnUrl.equals(\"\")){ctxt.addActionError(\"SVN url is required.\");}String username=(String)getFieldValue(\"username\",obj);if(username==null || username.equals(\"\")){ctxt.addActionError(\"Username is required.\");}}else if(method.equals(\"cvs\")){String cvsRoot=(String)getFieldValue(\"cvsRoot\",obj);if(cvsRoot==null || cvsRoot.equals(\"\")){ctxt.addActionError(\"CVS root is required.\");}}else if(method.equals(\"file\")){String directory=(String)getFieldValue(\"directory\",obj);if(directory==null || directory.equals(\"\")){ctxt.addActionError(\"Directory is required.\");}}if(ctxt.hasActionErrors()){return;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ValidatorUtil{public static void assertFieldErrors(Map<String,List<String>>expectedFieldErrors,Map<String,List<String>>actualFieldErrors){if(expectedFieldErrors!=null){Assert.assertNotNull(actualFieldErrors);Assert.assertEquals(\"expected \"+expectedFieldErrors+SystemUtils.LINE_SEPARATOR+\",found \"+actualFieldErrors,expectedFieldErrors.size(),actualFieldErrors.size());for(Map.Entry<String,List<String>>expectedEntry : expectedFieldErrors.entrySet()){if(expectedEntry.getValue()!=null){Assert.assertNotNull(\"actual with key \"+expectedEntry.getKey()+\" is null\",actualFieldErrors.get(expectedEntry.getKey()));Assert.assertEquals(expectedEntry.getValue().size(),actualFieldErrors.get(expectedEntry.getKey()).size());for(int i=0;i<expectedEntry.getValue().size();i++){Assert.assertEquals(expectedEntry.getValue().get(i),actualFieldErrors.get(expectedEntry.getKey()).get(i));}}else{Assert.assertNull(actualFieldErrors.get(expectedEntry.getKey()));}}}else{Assert.assertNull(actualFieldErrors);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArchivaXworkUser{public static String getActivePrincipal(Map<String,Object>sessionMap){if(sessionMap==null){return ArchivaRoleConstants.PRINCIPAL_GUEST;}SecuritySession securitySession=(SecuritySession)sessionMap.get(SecuritySystemConstants.SECURITY_SESSION_KEY);if(securitySession==null){securitySession=(SecuritySession)sessionMap.get(SecuritySession.ROLE);}if(securitySession==null){return ArchivaRoleConstants.PRINCIPAL_GUEST;}User user=securitySession.getUser();if(user==null){return ArchivaRoleConstants.PRINCIPAL_GUEST;}return(String)user.getPrincipal();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArchivaAdministrationServiceTest extends AbstractArchivaRestTest{@Test public void getAllLegacyPaths()throws Exception{assertNotNull(getArchivaAdministrationService().getLegacyArtifactPaths());assertFalse(getArchivaAdministrationService().getLegacyArtifactPaths().isEmpty());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultRepositoryQueryLayerFactory implements RepositoryQueryLayerFactory{public RepositoryQueryLayer createRepositoryQueryLayer(ArtifactRepository repository){return new DefaultRepositoryQueryLayer(repository);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryConversionException extends Exception{public RepositoryConversionException(String message){super(message);}public RepositoryConversionException(String message,Throwable cause){super(message,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryFileFilter implements java.io.FileFilter{public boolean accept(java.io.File pathname){if(pathname.isDirectory()){if(\".svn\".equals(pathname.getName()))return false;if(\"CVS\".equals(pathname.getName()))return false;}else{String name=pathname.getName();if(name.endsWith(\".md5\"))return false;if(name.endsWith(\".sha1\"))return false;}return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ProxyConnectorServiceTest extends AbstractArchivaRestTest{@Test public void getAllproxyConnectors()throws Exception{assertTrue(getProxyConnectorService().getProxyConnectors()!=null);assertTrue(getProxyConnectorService().getProxyConnectors().size()>0);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArchivaNexusIndexerUtil{public static final List<? extends IndexCreator>FULL_INDEX=Arrays.<IndexCreator>asList(new MinimalArtifactInfoIndexCreator(),new JarFileContentsIndexCreator(),new MavenPluginArtifactInfoIndexCreator());}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArtifactHealth{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArchivaTaskQueue extends DefaultTaskQueue{public ArchivaTaskQueue(){super();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MetadataResolutionException extends Exception{public MetadataResolutionException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class MavenRepositoryMetadataReader{private MavenRepositoryMetadataReader(){}public static MavenRepositoryMetadata read(File metadataFile)throws XMLException{XMLReader xml=new XMLReader(\"metadata\",metadataFile);xml.removeNamespaces();MavenRepositoryMetadata metadata=new MavenRepositoryMetadata();metadata.setGroupId(xml.getElementText(\"//metadata/groupId\"));metadata.setArtifactId(xml.getElementText(\"//metadata/artifactId\"));metadata.setVersion(xml.getElementText(\"//metadata/version\"));metadata.setLastUpdated(xml.getElementText(\"//metadata/versioning/lastUpdated\"));metadata.setLatestVersion(xml.getElementText(\"//metadata/versioning/latest\"));metadata.setReleasedVersion(xml.getElementText(\"//metadata/versioning/release\"));metadata.setAvailableVersions(xml.getElementListText(\"//metadata/versioning/versions/version\"));Element snapshotElem=xml.getElement(\"//metadata/versioning/snapshot\");if(snapshotElem!=null){MavenRepositoryMetadata.Snapshot snapshot=new MavenRepositoryMetadata.Snapshot();snapshot.setTimestamp(snapshotElem.elementTextTrim(\"timestamp\"));String tmp=snapshotElem.elementTextTrim(\"buildNumber\");if(NumberUtils.isNumber(tmp)){snapshot.setBuildNumber(NumberUtils.toInt(tmp));}metadata.setSnapshotVersion(snapshot);}for(Element plugin : xml.getElementList(\"//metadata/plugins/plugin\")){MavenRepositoryMetadata.Plugin p=new MavenRepositoryMetadata.Plugin();p.setPrefix(plugin.elementTextTrim(\"prefix\"));p.setArtifactId(plugin.elementTextTrim(\"artifactId\"));p.setName(plugin.elementTextTrim(\"name\"));metadata.addPlugin(p);}return metadata;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MetadataResolverException extends Exception{public MetadataResolverException(String message,Exception cause){super(message,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Failure extends ReportError{public Failure(Artifact artifact,String reason){super(artifact,reason);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Success extends ReportResult{public Success(Artifact artifact){super(artifact);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Warning extends ReportError{public Warning(Artifact artifact,String reason){super(artifact,reason);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryComparator implements Comparator<AbstractRepository>{public int compare(AbstractRepository o1,AbstractRepository o2){if(o1==null && o2==null){return 0;}if(o1==null){return-1;}if(o2==null){return 1;}return o1.getId().compareToIgnoreCase(o2.getId());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class TestBadMetadataReportProcessor extends BadMetadataReportProcessor{public TestBadMetadataReportProcessor(ArtifactFactory factory,RepositoryQueryLayer layer){artifactFactory=factory;repositoryQueryLayer=layer;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ValidatorUtil{public static void assertFieldErrors(Map<String,List<String>>expectedFieldErrors,Map<String,List<String>>actualFieldErrors){if(expectedFieldErrors!=null){Assert.assertNotNull(actualFieldErrors);Assert.assertEquals(expectedFieldErrors.size(),actualFieldErrors.size());for(Map.Entry<String,List<String>>expectedEntry : expectedFieldErrors.entrySet()){if(expectedEntry.getValue()!=null){Assert.assertNotNull(actualFieldErrors.get(expectedEntry.getKey()));Assert.assertEquals(expectedEntry.getValue().size(),actualFieldErrors.get(expectedEntry.getKey()).size());for(int i=0;i<expectedEntry.getValue().size();i++){Assert.assertEquals(expectedEntry.getValue().get(i),actualFieldErrors.get(expectedEntry.getKey()).get(i));}}else{Assert.assertNull(actualFieldErrors.get(expectedEntry.getKey()));}}}else{Assert.assertNull(actualFieldErrors);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryAdminException extends Exception{public RepositoryAdminException(String s){super(s);}public RepositoryAdminException(String message,Throwable cause){super(message,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MavenProjectInfoReportsPluginDependencyGraphTest extends AbstractDependencyGraphFactoryTestCase{public void testResolvedDepsToNodes()throws GraphTaskException{MemoryRepositoryDependencyGraphBuilder graphBuilder=new MemoryRepositoryDependencyGraphBuilder();MemoryRepository repository=new MavenProjectInfoReportsPluginMemoryRepository();graphBuilder.setMemoryRepository(repository);DependencyGraphFactory factory=new DependencyGraphFactory();factory.setGraphBuilder(graphBuilder);factory.setDesiredScope(DependencyScope.TEST);VersionedReference rootRef=toVersionedReference(\"org.apache.maven.plugins:maven-project-info-reports-plugin:2.1-SNAPSHOT\");DependencyGraph graph=factory.getGraph(rootRef);assertNotNull(\"Graph shouldn't be null.\",graph);String expectedRootRef=\"org.apache.maven.plugins:maven-project-info-reports-plugin:2.1-SNAPSHOT\";List expectedNodes=new ArrayList();expectedNodes.clear();expectedNodes.add(\"classworlds:classworlds:1.1-alpha-2::jar\");expectedNodes.add(\"com.jcraft:jsch:0.1.27::jar\");expectedNodes.add(\"commons-beanutils:commons-beanutils:1.7.0::jar\");expectedNodes.add(\"commons-cli:commons-cli:1.0::jar\");expectedNodes.add(\"commons-collections:commons-collections:3.1::jar\");expectedNodes.add(\"commons-digester:commons-digester:1.6::jar\");expectedNodes.add(\"commons-logging:commons-logging:1.0.4::jar\");expectedNodes.add(\"commons-validator:commons-validator:1.2.0::jar\");expectedNodes.add(\"httpunit:httpunit:1.6::jar\");expectedNodes.add(\"jakarta-regexp:jakarta-regexp:1.4::jar\");expectedNodes.add(\"javax.servlet:servlet-api:2.3::jar\");expectedNodes.add(\"jtidy:jtidy:4aug2000r7-dev::jar\");expectedNodes.add(\"junit:junit:3.8.1::jar\");expectedNodes.add(\"nekohtml:nekohtml:0.9.1::jar\");expectedNodes.add(\"org.apache.bcel:bcel:5.2::jar\");expectedNodes.add(\"org.apache.maven:maven-artifact:2.0.4::jar\");expectedNodes.add(\"org.apache.maven:maven-artifact-manager:2.0.2::jar\");expectedNodes.add(\"org.apache.maven:maven-core:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-error-diagnostics:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-model:2.0.4::jar\");expectedNodes.add(\"org.apache.maven:maven-monitor:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-plugin-api:2.0.4::jar\");expectedNodes.add(\"org.apache.maven:maven-plugin-descriptor:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-plugin-parameter-documenter:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-plugin-registry:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-profile:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-project:2.0.4::jar\");expectedNodes.add(\"org.apache.maven:maven-repository-metadata:2.0::jar\");expectedNodes.add(\"org.apache.maven:maven-settings:2.0.4::jar\");expectedNodes.add(\"org.apache.maven.doxia:doxia-core:1.0-alpha-8::jar\");expectedNodes.add(\"org.apache.maven.doxia:doxia-decoration-model:1.0-alpha-8::jar\");expectedNodes.add(\"org.apache.maven.doxia:doxia-sink-api:1.0-alpha-8::jar\");expectedNodes.add(\"org.apache.maven.doxia:doxia-site-renderer:1.0-alpha-8::jar\");expectedNodes.add(\"org.apache.maven.reporting:maven-reporting-api:2.0.4::jar\");expectedNodes.add(\"org.apache.maven.reporting:maven-reporting-impl:2.0.4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-api:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-manager-plexus:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-clearcase:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-cvs-commons:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-cvsexe:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-perforce:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-starteam:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-svn-commons:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.scm:maven-scm-provider-svnexe:1.0-beta-4::jar\");expectedNodes.add(\"org.apache.maven.shared:maven-dependency-tree:1.0-alpha-2::jar\");expectedNodes.add(\"org.apache.maven.shared:maven-plugin-testing-harness:1.0::jar\");expectedNodes.add(\"org.apache.maven.shared:maven-shared-jar:1.0-SNAPSHOT::jar\");expectedNodes.add(\"org.apache.maven.wagon:wagon-file:1.0-beta-2::jar\");expectedNodes.add(\"org.apache.maven.wagon:wagon-http-lightweight:1.0-beta-2::jar\");expectedNodes.add(\"org.apache.maven.wagon:wagon-http-shared:1.0-beta-2::jar\");expectedNodes.add(\"org.apache.maven.wagon:wagon-provider-api:1.0-beta-2::jar\");expectedNodes.add(\"org.apache.maven.wagon:wagon-ssh:1.0-beta-2::jar\");expectedNodes.add(\"org.apache.maven.wagon:wagon-ssh-common:1.0-beta-2::jar\");expectedNodes.add(\"org.codehaus.plexus:plexus-container-default:1.0-alpha-9::jar\");expectedNodes.add(\"org.codehaus.plexus:plexus-digest:1.0::jar\");expectedNodes.add(\"org.codehaus.plexus:plexus-i18n:1.0-beta-6::jar\");expectedNodes.add(\"org.codehaus.plexus:plexus-interactivity-api:1.0-alpha-4::jar\");expectedNodes.add(\"org.codehaus.plexus:plexus-utils:1.1::jar\");expectedNodes.add(\"org.codehaus.plexus:plexus-velocity:1.1.3::jar\");expectedNodes.add(\"oro:oro:2.0.7::jar\");expectedNodes.add(\"plexus:plexus-utils:1.0.2::jar\");expectedNodes.add(\"regexp:regexp:1.3::jar\");expectedNodes.add(\"rhino:js:1.5R4.1::jar\");expectedNodes.add(\"velocity:velocity:1.4::jar\");expectedNodes.add(\"velocity:velocity-dep:1.4::jar\");expectedNodes.add(\"xerces:xercesImpl:2.6.2::jar\");expectedNodes.add(\"xerces:xmlParserAPIs:2.2.1::jar\");expectedNodes.add(\"xml-apis:xml-apis:1.0.b2::jar\");assertGraph(graph,expectedRootRef,expectedNodes);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MkColMethodWebRequest extends HeaderOnlyWebRequest{public MkColMethodWebRequest(String urlString){super(urlString);}@Override public String getMethod(){return \"MKCOL\";}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ProxyRepository extends DefaultArtifactRepository{private Checksum checksum;public ProxyRepository(String id,String url,ArtifactRepositoryLayout layout){super(id,url,layout);}public void setChecksum(String algorithm){this.checksum=new Checksum(algorithm);}public Checksum getChecksum(){return checksum;}public ChecksumObserver getChecksumObserver()throws NoSuchAlgorithmException{return new ChecksumObserver(checksum.getAlgorithm());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DummyProfileActivator implements ProfileActivator{public boolean isActive(Profile profile,ProfileActivationContext context,ModelProblemCollector problems){return false;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryGroupServiceTest extends AbstractArchivaRestTest{@Test public void addAndDelete()throws Exception{RepositoryGroupService service=getRepositoryGroupService();WebClient.client(service).header(\"Authorization\",authorizationHeader);WebClient.getConfig(service).getHttpConduit().getClient().setReceiveTimeout(300000);assertTrue(service.getRepositoriesGroups().isEmpty());ManagedRepositoriesService managedRepositoriesService=getManagedRepositoriesService();WebClient.client(managedRepositoriesService).header(\"Authorization\",authorizationHeader);WebClient.getConfig(service).getHttpConduit().getClient().setReceiveTimeout(300000);ManagedRepository managedRepository=getTestManagedRepository();managedRepositoriesService.addManagedRepository(managedRepository);RepositoryGroup repositoryGroup=new RepositoryGroup(\"one\",Arrays.asList(managedRepository.getId()));service.addRepositoryGroup(repositoryGroup);assertFalse(service.getRepositoriesGroups().isEmpty());assertEquals(1,service.getRepositoriesGroups().size());service.deleteRepositoryGroup(\"one\");assertTrue(service.getRepositoriesGroups().isEmpty());assertEquals(0,service.getRepositoriesGroups().size());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class CronExpressionValidator extends FieldValidatorSupport{public void validate(Object obj)throws ValidationException{String cron=(String)getFieldValue(\"cron\",obj);org.codehaus.plexus.scheduler.CronExpressionValidator cronExpressionValidator=new org.codehaus.plexus.scheduler.CronExpressionValidator();ValidatorContext ctxt=getValidatorContext();if(!cronExpressionValidator.validate(String.valueOf(cron))){ctxt.addActionError(\"Invalid cron expression value(s)\");return;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class SearchUtil{public static final String BYTECODE_KEYWORD=\"bytecode:\";public static boolean isBytecodeSearch(String queryString){if(queryString.startsWith(BYTECODE_KEYWORD)){return true;}return false;}public static String removeBytecodeKeyword(String queryString){String qString=StringUtils.uncapitalize(queryString);qString=StringUtils.remove(queryString,BYTECODE_KEYWORD);return qString;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MockServletAuthenticator extends ArchivaServletAuthenticator{@Override public boolean isAuthorized(String principal,String repoId,boolean isWriteRequest)throws UnauthorizedException{return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MetadataRepositoryException extends Exception{public MetadataRepositoryException(String message){super(message);}public MetadataRepositoryException(String s,Throwable throwable){super(s,throwable);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class StubRepositoryContentConsumers extends RepositoryContentConsumers{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class NexusRepositorySearchOSGITest extends AbstractNexusRepositorySearch{@Test public void searchFelixWithSymbolicName()throws Exception{createIndex(TEST_REPO_1,Collections.<File>emptyList(),true);List<String>selectedRepos=Arrays.asList(TEST_REPO_1);archivaConfigControl.expectAndReturn(archivaConfig.getConfiguration(),config);archivaConfigControl.replay();SearchFields searchFields=new SearchFields();searchFields.setBundleSymbolicName(\"org.apache.felix.bundlerepository\");searchFields.setBundleVersion(\"1.6.6\");searchFields.setRepositories(selectedRepos);SearchResults results=search.search(\"user\",searchFields,null);archivaConfigControl.verify();assertNotNull(results);assertEquals(1,results.getTotalHits());SearchResultHit hit=results.getHits().get(0);assertEquals(\"org.apache.felix\",hit.getGroupId());assertEquals(\"org.apache.felix.bundlerepository\",hit.getArtifactId());assertEquals(\"1.6.6\",hit.getVersions().get(0));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class PingServiceImpl implements TestService{public String ping(){return \"pong\";}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class AccessDeniedException extends ArchivaSecurityException{public AccessDeniedException(String message,Throwable cause){super(message,cause);}public AccessDeniedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass",
            "RefusedBequest"
        ],
        "source_code": "public class ArchivaRoleConstants{public static final String DELIMITER=\"-\";public static final String SYSTEM_ADMINISTRATOR_ROLE=\"System Administrator\";public static final String USER_ADMINISTRATOR_ROLE=\"User Administrator\";public static final String GLOBAL_REPOSITORY_MANAGER_ROLE=\"Global Repository Manager\";public static final String GLOBAL_REPOSITORY_OBSERVER_ROLE=\"Global Repository Observer\";public static final String REGISTERED_USER_ROLE=\"Registered User\";public static final String GUEST_ROLE=\"Guest\";public static final String REPOSITORY_MANAGER_ROLE_PREFIX=\"Repository Manager\";public static final String REPOSITORY_OBSERVER_ROLE_PREFIX=\"Repository Observer\";public static final String OPERATION_MANAGE_USERS=\"archiva-manage-users\";public static final String OPERATION_MANAGE_CONFIGURATION=\"archiva-manage-configuration\";public static final String OPERATION_ACTIVE_GUEST=\"archiva-guest\";public static final String OPERATION_RUN_INDEXER=\"archiva-run-indexer\";public static final String OPERATION_REGENERATE_INDEX=\"archiva-regenerate-index\";public static final String OPERATION_ACCESS_REPORT=\"archiva-access-reports\";public static final String OPERATION_ADD_REPOSITORY=\"archiva-add-repository\";public static final String OPERATION_REPOSITORY_ACCESS=\"archiva-read-repository\";public static final String OPERATION_DELETE_REPOSITORY=\"archiva-delete-repository\";public static final String OPERATION_EDIT_REPOSITORY=\"archiva-edit-repository\";public static final String OPERATION_REPOSITORY_UPLOAD=\"archiva-upload-repository\";public static final String OPERATION_REPOSITORY_DELETE=\"archiva-delete-artifact\";public static final String OPERATION_VIEW_AUDIT_LOG=\"archiva-view-audit-logs\";public static final String TEMPLATE_REPOSITORY_MANAGER=\"archiva-repository-manager\";public static final String TEMPLATE_REPOSITORY_OBSERVER=\"archiva-repository-observer\";public static final String TEMPLATE_GLOBAL_REPOSITORY_OBSERVER=\"archiva-global-repository-observer\";public static final String TEMPLATE_SYSTEM_ADMIN=\"archiva-system-administrator\";public static final String TEMPLATE_GUEST=\"archiva-guest\";public static String toRepositoryObserverRoleName(String repoId){return REPOSITORY_OBSERVER_ROLE_PREFIX+\"-\"+repoId;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ArchivaSecurityException extends ArchivaException{public ArchivaSecurityException(String message,Throwable cause){super(message,cause);}public ArchivaSecurityException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class ArchivaXworkUser{private ArchivaXworkUser(){}public static String getActivePrincipal(Map<String,?>sessionMap){if(sessionMap==null){return UserManager.GUEST_USERNAME;}SecuritySession securitySession=(SecuritySession)sessionMap.get(SecuritySystemConstants.SECURITY_SESSION_KEY);if(securitySession==null){return UserManager.GUEST_USERNAME;}User user=securitySession.getUser();if(user==null){return UserManager.GUEST_USERNAME;}return(String)user.getPrincipal();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class PrincipalNotFoundException extends ArchivaSecurityException{public PrincipalNotFoundException(String message,Throwable cause){super(message,cause);}public PrincipalNotFoundException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DownloadRemoteIndexException extends Exception{public DownloadRemoteIndexException(String message,Throwable exception){super(message,exception);}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/*==========================================================================**Copyright(C)2004-2006,Pier Fumagalli<http://could.it/>**All rights reserved.**==========================================================================****Licensed under the Apache License,Version 2.0(the \"License\").You may**not use this file except in compliance with the License.You may obtain a**copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.****Unless required by applicable law or agreed to in writing,software**distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT**WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.See the**License for the specific language governing permissions and limitations**under the License.****==========================================================================*/public class DAVServlet implements Servlet,DAVListener{protected DAVRepository repository=null;protected DAVLogger logger=null;protected DAVProcessor processor=null;private ServletContext context=null;private ServletConfig config=null;public DAVServlet(){super();}public void init(ServletConfig config)throws ServletException{this.config=config;this.context=config.getServletContext();boolean debug=\"true\".equals(config.getInitParameter(\"debugEnabled\"));this.logger=new DAVLogger(config,debug);String rootPath=config.getInitParameter(\"rootPath\");if(rootPath==null)throw new ServletException(\"Parameter \\\"rootPath\\\" not specified\");try{File root=new File(rootPath);boolean unixAbsolute=rootPath.startsWith(\"/\");boolean localAbsolute=root.isAbsolute();if(!unixAbsolute && !localAbsolute){URL url=this.context.getResource(\"/\"+rootPath);if(!\"file\".equals(url.getProtocol())){throw new ServletException(\"Invalid root \\\"\"+url+\"\\\"\");}else{root=new File(url.getPath());}}String repositoryClass=config.getInitParameter(\"repositoryClass\");if(repositoryClass!=null){this.repository=DAVServlet.newRepository(repositoryClass,root);}else{if(\"true\".equalsIgnoreCase(config.getInitParameter(\"xmlOnly\"))){this.repository=new XMLRepository(root);}else{this.repository=new DAVRepository(root);}}this.processor=new DAVProcessor(this.repository);this.repository.addListener(this);this.logger.log(\"Initialized from \"+root.getPath());}catch(MalformedURLException e){throw new ServletException(\"Can't resolve \\\"\"+rootPath+\"\\\"\",e);}catch(IOException e){String msg=\"Can't initialize repository at \\\"\"+rootPath+\"\\\"\";throw new ServletException(msg,e);}final String key=getRepositoryKey(config.getServletName());this.context.setAttribute(key,this.repository);}public DAVRepository getRepository(File root)throws IOException{return new XMLRepository(root);}public void destroy(){this.repository.removeListener(this);}public ServletConfig getServletConfig(){return(this.config);}public ServletContext getServletContext(){return(this.context);}public String getServletInfo(){return DAVUtilities.SERVLET_INFORMATION;}public void service(ServletRequest request,ServletResponse response)throws ServletException,IOException{HttpServletRequest req=(HttpServletRequest)request;HttpServletResponse res=(HttpServletResponse)response;res.setHeader(\"Server\",this.context.getServerInfo()+' '+DAVUtilities.SERVLET_SIGNATURE);DAVTransaction transaction=new DAVTransaction(req,res);try{this.processor.process(transaction);}catch(RuntimeException exception){final String header=req.getMethod()+' '+req.getRequestURI()+' '+req.getProtocol();this.context.log(\"Error processing: \"+header);this.context.log(\"Exception processing DAV transaction\",exception);throw exception;}}public void notify(DAVResource resource,int event){String message=\"Unknown event\";switch(event){case DAVListener.COLLECTION_CREATED: message=\"Collection created\";break;case DAVListener.COLLECTION_REMOVED: message=\"Collection removed\";break;case DAVListener.RESOURCE_CREATED: message=\"Resource created\";break;case DAVListener.RESOURCE_REMOVED: message=\"Resource removed\";break;case DAVListener.RESOURCE_MODIFIED: message=\"Resource modified\";break;}this.logger.debug(message+\": \\\"\"+resource.getRelativePath()+\"\\\"\");}public static String getRepositoryKey(String servletName){if(servletName==null)throw new NullPointerException();return DAVRepository.class.getName()+\".\"+servletName;}static DAVRepository newRepository(String repositoryClass,File root)throws ServletException{try{Class c=Class.forName(repositoryClass);Constructor ctor=c.getConstructor(new Class[]{File.class});DAVRepository repo=(DAVRepository)ctor.newInstance(new Object[]{root});return repo;}catch(ClassNotFoundException e){throw new ServletException(e);}catch(LinkageError le){throw new ServletException(le);}catch(NoSuchMethodException ns){throw new ServletException(ns);}catch(InvocationTargetException it){throw new ServletException(it);}catch(IllegalAccessException ia){throw new ServletException(ia);}catch(InstantiationException ie){throw new ServletException(ie);}}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/*==========================================================================**Copyright(C)2004-2006,Pier Fumagalli<http://could.it/>**All rights reserved.**==========================================================================****Licensed under the Apache License,Version 2.0(the \"License\").You may**not use this file except in compliance with the License.You may obtain a**copy of the License at<http://www.apache.org/licenses/LICENSE-2.0>.****Unless required by applicable law or agreed to in writing,software**distributed under the License is distributed on an \"AS IS\" BASIS,WITHOUT**WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.See the**License for the specific language governing permissions and limitations**under the License.****==========================================================================*/public class DAVServlet extends it.could.webdav.DAVServlet{public DAVServlet(){super();}public void init(ServletConfig config)throws ServletException{final ServletContext context=config.getServletContext();context.log(\"The class \\\"\"+this.getClass().getName()+\"\\\" is deprecated\");context.log(\"Modify the \\\"web.xml\\\" deployment descriptor to use \\\"\"+it.could.webdav.DAVServlet.class.getName()+\"\\\"\");super.init(config);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryQueryLayerException extends Exception{public RepositoryQueryLayerException(String message,Throwable cause){super(message,cause);}public RepositoryQueryLayerException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DummyLifecycleBindingsInjector implements LifecycleBindingsInjector{public void injectLifecycleBindings(Model model,ModelBuildingRequest modelBuildingRequest,ModelProblemCollector modelProblemCollector){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class FileUtil{public static String getBasedir(){String basedir=System.getProperty(\"basedir\");if(basedir==null){basedir=new File(\"\").getAbsolutePath();}return basedir;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class GlobalRepoConfiguration extends FileRepoConfiguration{public GlobalRepoConfiguration(String basePath){super(\"global\",\"file:///\"+basePath,\"Global Repository\",false,true,false,0);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MavenProxyRepoConfiguration extends RepoConfiguration{public MavenProxyRepoConfiguration(String key,String url,String description,boolean copy,boolean hardFail,boolean cacheFailures,long cachePeriod){super(key,url,description,copy,hardFail,cacheFailures,cachePeriod);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@RunWith(JUnit4.class)public class DownloadMergedIndexTest extends TestCase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@Service(\"RepositorySessionFactory#mock\")public class MockRepositorySessionFactory implements RepositorySessionFactory{public RepositorySession createSession(){return new RepositorySession(null,null){@Override public void close(){return;}@Override public void save(){}@Override public MetadataRepository getRepository(){return new MetadataRepository(){public void updateProject(String repositoryId,ProjectMetadata project)throws MetadataRepositoryException{}public void updateArtifact(String repositoryId,String namespace,String projectId,String projectVersion,ArtifactMetadata artifactMeta)throws MetadataRepositoryException{}public void updateProjectVersion(String repositoryId,String namespace,String projectId,ProjectVersionMetadata versionMetadata)throws MetadataRepositoryException{}public void updateNamespace(String repositoryId,String namespace)throws MetadataRepositoryException{}public List<String>getMetadataFacets(String repositoryId,String facetId)throws MetadataRepositoryException{return Collections.emptyList();}public MetadataFacet getMetadataFacet(String repositoryId,String facetId,String name)throws MetadataRepositoryException{return null;}public void addMetadataFacet(String repositoryId,MetadataFacet metadataFacet)throws MetadataRepositoryException{}public void removeMetadataFacets(String repositoryId,String facetId)throws MetadataRepositoryException{}public void removeMetadataFacet(String repositoryId,String facetId,String name)throws MetadataRepositoryException{}public List<ArtifactMetadata>getArtifactsByDateRange(String repositoryId,Date startTime,Date endTime)throws MetadataRepositoryException{return null;}public Collection<String>getRepositories()throws MetadataRepositoryException{return null;}public List<ArtifactMetadata>getArtifactsByChecksum(String repositoryId,String checksum)throws MetadataRepositoryException{return null;}public void removeArtifact(String repositoryId,String namespace,String project,String version,String id)throws MetadataRepositoryException{}public void removeRepository(String repositoryId)throws MetadataRepositoryException{}public List<ArtifactMetadata>getArtifacts(String repositoryId)throws MetadataRepositoryException{return null;}public ProjectMetadata getProject(String repoId,String namespace,String projectId)throws MetadataResolutionException{return null;}public ProjectVersionMetadata getProjectVersion(String repoId,String namespace,String projectId,String projectVersion)throws MetadataResolutionException{return null;}public Collection<String>getArtifactVersions(String repoId,String namespace,String projectId,String projectVersion)throws MetadataResolutionException{return null;}public Collection<ProjectVersionReference>getProjectReferences(String repoId,String namespace,String projectId,String projectVersion)throws MetadataResolutionException{return null;}public Collection<String>getRootNamespaces(String repoId)throws MetadataResolutionException{return null;}public Collection<String>getNamespaces(String repoId,String namespace)throws MetadataResolutionException{return null;}public Collection<String>getProjects(String repoId,String namespace)throws MetadataResolutionException{return null;}public Collection<String>getProjectVersions(String repoId,String namespace,String projectId)throws MetadataResolutionException{return null;}public Collection<ArtifactMetadata>getArtifacts(String repoId,String namespace,String projectId,String projectVersion)throws MetadataResolutionException{return null;}public void save()throws MetadataRepositoryException{}public void close(){}public void revert()throws MetadataRepositoryException{}public boolean canObtainAccess(Class<?>aClass){return false;}public Object obtainAccess(Class<?>aClass){return null;}};}};}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryContentConsumersStub extends RepositoryContentConsumers{public RepositoryContentConsumersStub(ArchivaConfiguration archivaConfiguration){super(archivaConfiguration);}@Override public Date getStartTime(){Date startTimeForTest=new Date(System.currentTimeMillis());startTimeForTest.setTime(12345678);return startTimeForTest;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@Service(\"pingService#rest\")public class DefaultPingService implements PingService{public String ping(){return \"Yeah Baby It rocks!\";}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryStorageMetadataInvalidException extends RepositoryStorageMetadataException{public RepositoryStorageMetadataInvalidException(String id,String msg){super(id,msg);}public RepositoryStorageMetadataInvalidException(String id,String msg,Throwable throwable){super(id,msg,throwable);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class RepositoryStorageMetadataNotFoundException extends RepositoryStorageMetadataException{public RepositoryStorageMetadataNotFoundException(String msg){super(\"missing-pom\",msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public abstract class LookupSubtable{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGOMException extends SVGException{public SVGOMException(short code,String message){super(code,message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGOMEvent extends AbstractEvent implements SVGEvent{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class CDATASectionWrapper extends TextWrapper implements CDATASection{public CDATASectionWrapper(DocumentWrapper dw,CDATASection c){super(dw,c);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class CommentWrapper extends CharacterDataWrapper implements Comment{public CommentWrapper(DocumentWrapper dw,Comment c){super(dw,c);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DocumentFragmentWrapper extends NodeWrapper implements DocumentFragment{public DocumentFragmentWrapper(DocumentWrapper dw,DocumentFragment df){super(dw,df);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class EntityReferenceWrapper extends NodeWrapper implements EntityReference{public EntityReferenceWrapper(DocumentWrapper dw,EntityReference er){super(dw,er);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class XMLStreamNormalizingReader extends StreamNormalizingReader{public XMLStreamNormalizingReader(InputStream is)throws IOException{PushbackInputStream pbis=new PushbackInputStream(is,128);byte[]buf=new byte[4];int len=pbis.read(buf);if(len>0){pbis.unread(buf,0,len);}if(len==4){switch(buf[0]& 0x00FF){case 0: if(buf[1]==0x003c && buf[2]==0x0000 && buf[3]==0x003f){charDecoder=new UTF16Decoder(pbis,true);return;}break;case '<': switch(buf[1]& 0x00FF){case 0: if(buf[2]==0x003f && buf[3]==0x0000){charDecoder=new UTF16Decoder(pbis,false);return;}break;case '?': if(buf[2]=='x' && buf[3]=='m'){Reader r=XMLUtilities.createXMLDeclarationReader(pbis,\"UTF8\");String enc=XMLUtilities.getXMLDeclarationEncoding(r,\"UTF-8\");charDecoder=createCharDecoder(pbis,enc);return;}}break;case 0x004C: if(buf[1]==0x006f &&(buf[2]& 0x00FF)==0x00a7 &&(buf[3]& 0x00FF)==0x0094){Reader r=XMLUtilities.createXMLDeclarationReader(pbis,\"CP037\");String enc=XMLUtilities.getXMLDeclarationEncoding(r,\"EBCDIC-CP-US\");charDecoder=createCharDecoder(pbis,enc);return;}break;case 0x00FE: if((buf[1]& 0x00FF)==0x00FF){charDecoder=createCharDecoder(pbis,\"UTF-16\");return;}break;case 0x00FF: if((buf[1]& 0x00FF)==0x00FE){charDecoder=createCharDecoder(pbis,\"UTF-16\");return;}}}charDecoder=createCharDecoder(pbis,\"UTF-8\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGAccuracyTestValidator extends DefaultTestSuite{public SVGAccuracyTestValidator(){addTest(new NullPainter());addTest(new PainterWithException());addTest(new NullReferenceURL());addTest(new InexistantReferenceURL());addTest(new DiffWithReferenceImage());addTest(new SameAsReferenceImage());}static class NullPainter extends TestReportValidator{public TestReport runImpl()throws Exception{Painter painter=null;URL refURL=new URL(\"http\",\"dummyHost\",\"dummyFile.svg\");Test t=new SVGAccuracyTest(painter,refURL);setConfig(t,false,SVGAccuracyTest.ERROR_CANNOT_GENERATE_SVG);return super.runImpl();}}static class PainterWithException extends TestReportValidator implements Painter{public void paint(Graphics2D g){g.setComposite(null);g.fillRect(0,0,20,20);}public TestReport runImpl()throws Exception{Painter painter=this;URL refURL=new URL(\"http\",\"dummyHost\",\"dummyFile.svg\");Test t=new SVGAccuracyTest(painter,refURL);setConfig(t,false,SVGAccuracyTest.ERROR_CANNOT_GENERATE_SVG);return super.runImpl();}}static class ValidPainterTest extends TestReportValidator implements Painter{public void paint(Graphics2D g){g.setPaint(Color.red);g.fillRect(0,0,40,40);}}static class NullReferenceURL extends ValidPainterTest{public TestReport runImpl()throws Exception{Test t=new SVGAccuracyTest(this,null);setConfig(t,false,SVGAccuracyTest.ERROR_CANNOT_OPEN_REFERENCE_SVG_FILE);return super.runImpl();}}static class InexistantReferenceURL extends ValidPainterTest{public TestReport runImpl()throws Exception{Test t=new SVGAccuracyTest(this,new URL(\"http\",\"dummyHost\",\"dummyFile.svg\"));setConfig(t,false,SVGAccuracyTest.ERROR_CANNOT_OPEN_REFERENCE_SVG_FILE);return super.runImpl();}}static class DiffWithReferenceImage extends ValidPainterTest{public TestReport runImpl()throws Exception{File tmpFile=File.createTempFile(\"EmptySVGReference\",null);tmpFile.deleteOnExit();Test t=new SVGAccuracyTest(this,tmpFile.toURL());setConfig(t,false,SVGAccuracyTest.ERROR_GENERATED_SVG_INACCURATE);return super.runImpl();}}static class SameAsReferenceImage extends ValidPainterTest{public TestReport runImpl()throws Exception{File tmpFile=File.createTempFile(\"SVGReference\",null);tmpFile.deleteOnExit();SVGAccuracyTest t=new SVGAccuracyTest(this,tmpFile.toURL());t.setSaveSVG(tmpFile);setConfig(t,false,SVGAccuracyTest.ERROR_GENERATED_SVG_INACCURATE);super.runImpl();setConfig(t,true,null);return super.runImpl();}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class Main{public static void writeImage(Transcoder transcoder,String uri,String output){try{InputSource isource=new InputSource(uri);OutputStream ostream=new BufferedOutputStream(new FileOutputStream(output));transcoder.transcodeToStream(isource,ostream);ostream.flush();ostream.close();}catch(IOException ex){}}public static void error(String msg){System.err.println(msg);}public static void usage(PrintStream out){out.println(\"usage: rasterizer[options][@files]\");out.println(\"-d<directory>Destination directory for output files\");out.println(\"-m<mimetype>Mime type for output files\");}public static void main(String[]args){String mimeType=\"image/jpg\";String directory=null;List svgFiles=new LinkedList();int i=0;while(i<args.length){if(args[i].equals(\"-d\")){if(i+1<args.length){i++;directory=args[i++];continue;}else{error(\"option-d requires an argument\");usage(System.err);System.exit(1);}}else if(args[i].equals(\"-m\")){if(i+1<args.length){i++;mimeType=args[i++];continue;}else{error(\"option-m requires an argument\");usage(System.err);System.exit(1);}}else if(args[i].equals(\"-help\")){usage(System.out);System.exit(0);}else{svgFiles.add(args[i++]);continue;}}TranscoderFactory factory=ConcreteTranscoderFactory.getTranscoderFactoryImplementation();Transcoder t=factory.createTranscoder(mimeType);if(t==null){error(\"No transcoder found for mime type : \"+mimeType);System.exit(1);}for(Iterator iter=svgFiles.iterator();iter.hasNext();){String s=(String)iter.next();File f=new File(s);String uri=f.getName();if(uri.endsWith(\".svg\")){uri=uri.substring(0,uri.lastIndexOf(\".svg\"));int k=mimeType.lastIndexOf('/');if(k>0){String ext=mimeType.substring(k+1);if(ext.length()>0){uri+=\".\"+ext;}}else{uri+=\".\"+mimeType;}}if(directory==null){directory=f.getParent();}File output=new File(directory,uri);try{writeImage(t,f.toURL().toString(),output.getAbsolutePath());}catch(MalformedURLException ex){error(\"Bad svg file : \"+s);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DefaultBridgeContext extends SVGBridgeContext{public DefaultBridgeContext(String parser,SVGDocument svgDocument){setDocumentLoader(new BufferedDocumentLoader(new SVGDocumentLoader(parser)));setGVTFactory(ConcreteGVTFactory.getGVTFactoryImplementation());setParserFactory(new ParserFactory());setUserAgent(new DefaultUserAgent());setViewCSS((ViewCSS)svgDocument.getRootElement());setGraphicsNodeRableFactory(new ConcreteGraphicsNodeRableFactory());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public abstract class AbstractTranscoder implements Transcoder{static{CSSDocumentHandler.setParserClassName(\"org.w3c.flute.parser.Parser\");}protected TranscodingHints hints=new TranscodingHints();public AbstractTranscoder(){hints.put(TranscodingHints.KEY_XML_PARSER_CLASSNAME,\"org.apache.crimson.parser.XMLReaderImpl\");hints.put(TranscodingHints.KEY_BACKGROUND,Color.white);hints.put(TranscodingHints.KEY_GVT_BUILDER,new org.apache.batik.refimpl.bridge.ConcreteGVTBuilder());}public void transcodeToStream(InputSource isource,OutputStream ostream)throws TranscoderException{SVGDocumentFactory f=new SVGDocumentFactory(getParserClassName());try{transcodeToStream(f.createDocument(isource.getSystemId(),isource),ostream);}catch(DOMException ex){throw new TranscoderException(ex.getMessage(),ex);}catch(SAXException ex){throw new TranscoderException(ex.getMessage(),ex);}}public TranscodingHints getTranscodingHints(){return new TranscodingHints(hints);}public void addTranscodingHint(TranscodingHints.Key key,Object value){hints.put(key,value);}public void setTranscodingHints(Map hints){hints.putAll(hints);}protected GVTBuilder getGVTBuilder(){return(GVTBuilder)hints.get(TranscodingHints.KEY_GVT_BUILDER);}protected Paint getBackgroundPaint(){return(Paint)hints.get(TranscodingHints.KEY_BACKGROUND);}protected String getParserClassName(){return(String)hints.get(TranscodingHints.KEY_XML_PARSER_CLASSNAME);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DynamicGVTBuilder extends GVTBuilder{public DynamicGVTBuilder(){}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public abstract class UnitProcessor{public final static short HORIZONTAL_LENGTH=2;public final static short VERTICAL_LENGTH=1;public final static short OTHER_LENGTH=0;protected UnitProcessor(){}public static Context createContext(BridgeContext ctx,Element e){return new DefaultContext(ctx,e);}public static float svgHorizontalCoordinateToObjectBoundingBox(String s,String attr,Context ctx){return svgToObjectBoundingBox(s,attr,HORIZONTAL_LENGTH,ctx);}public static float svgVerticalCoordinateToObjectBoundingBox(String s,String attr,Context ctx){return svgToObjectBoundingBox(s,attr,VERTICAL_LENGTH,ctx);}public static float svgOtherCoordinateToObjectBoundingBox(String s,String attr,Context ctx){return svgToObjectBoundingBox(s,attr,OTHER_LENGTH,ctx);}public static float svgHorizontalLengthToObjectBoundingBox(String s,String attr,Context ctx){return svgLengthToObjectBoundingBox(s,attr,HORIZONTAL_LENGTH,ctx);}public static float svgVerticalLengthToObjectBoundingBox(String s,String attr,Context ctx){return svgLengthToObjectBoundingBox(s,attr,VERTICAL_LENGTH,ctx);}public static float svgOtherLengthToObjectBoundingBox(String s,String attr,Context ctx){return svgLengthToObjectBoundingBox(s,attr,OTHER_LENGTH,ctx);}public static float svgLengthToObjectBoundingBox(String s,String attr,short d,Context ctx){float v=svgToObjectBoundingBox(s,attr,d,ctx);if(v<0){throw new BridgeException(ctx.getElement(),ErrorConstants.ERR_LENGTH_NEGATIVE,new Object[]{attr,s});}return v;}public static float svgToObjectBoundingBox(String s,String attr,short d,Context ctx){try{LengthParser lengthParser=new LengthParser();UnitResolver ur=new UnitResolver();lengthParser.setLengthHandler(ur);lengthParser.parse(new StringReader(s));return svgToObjectBoundingBox(ur.value,ur.unit,d,ctx);}catch(ParseException ex){throw new BridgeException(ctx.getElement(),ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,s,ex});}}public static float svgToObjectBoundingBox(float value,short type,short d,Context ctx){switch(type){case CSSPrimitiveValue.CSS_NUMBER: return value;case CSSPrimitiveValue.CSS_PERCENTAGE: return value/100f;case CSSPrimitiveValue.CSS_PX: case CSSPrimitiveValue.CSS_MM: case CSSPrimitiveValue.CSS_CM: case CSSPrimitiveValue.CSS_IN: case CSSPrimitiveValue.CSS_PT: case CSSPrimitiveValue.CSS_PC: case CSSPrimitiveValue.CSS_EMS: case CSSPrimitiveValue.CSS_EXS: return svgToUserSpace(value,type,d,ctx);default: throw new Error();}}public static float svgHorizontalLengthToUserSpace(String s,String attr,Context ctx){return svgLengthToUserSpace(s,attr,HORIZONTAL_LENGTH,ctx);}public static float svgVerticalLengthToUserSpace(String s,String attr,Context ctx){return svgLengthToUserSpace(s,attr,VERTICAL_LENGTH,ctx);}public static float svgOtherLengthToUserSpace(String s,String attr,Context ctx){return svgLengthToUserSpace(s,attr,OTHER_LENGTH,ctx);}public static float svgHorizontalCoordinateToUserSpace(String s,String attr,Context ctx){return svgToUserSpace(s,attr,HORIZONTAL_LENGTH,ctx);}public static float svgVerticalCoordinateToUserSpace(String s,String attr,Context ctx){return svgToUserSpace(s,attr,VERTICAL_LENGTH,ctx);}public static float svgOtherCoordinateToUserSpace(String s,String attr,Context ctx){return svgToUserSpace(s,attr,OTHER_LENGTH,ctx);}public static float svgLengthToUserSpace(String s,String attr,short d,Context ctx){float v=svgToUserSpace(s,attr,d,ctx);if(v<0){throw new BridgeException(ctx.getElement(),ErrorConstants.ERR_LENGTH_NEGATIVE,new Object[]{attr,s});}else{return v;}}public static float svgToUserSpace(String s,String attr,short d,Context ctx){try{LengthParser lengthParser=new LengthParser();UnitResolver ur=new UnitResolver();lengthParser.setLengthHandler(ur);lengthParser.parse(new StringReader(s));return svgToUserSpace(ur.value,ur.unit,d,ctx);}catch(ParseException ex){throw new BridgeException(ctx.getElement(),ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,s,ex});}}public static float svgToUserSpace(float v,short type,short d,Context ctx){switch(type){case CSSPrimitiveValue.CSS_NUMBER: case CSSPrimitiveValue.CSS_PX: return v;case CSSPrimitiveValue.CSS_MM: return(v/ctx.getPixelToMM());case CSSPrimitiveValue.CSS_CM: return(v*10f/ctx.getPixelToMM());case CSSPrimitiveValue.CSS_IN: return(v*25.4f/ctx.getPixelToMM());case CSSPrimitiveValue.CSS_PT: return(v*25.4f/(72f*ctx.getPixelToMM()));case CSSPrimitiveValue.CSS_PC: return(v*25.4f/(6f*ctx.getPixelToMM()));case CSSPrimitiveValue.CSS_EMS: return emsToPixels(v,d,ctx);case CSSPrimitiveValue.CSS_EXS: return exsToPixels(v,d,ctx);case CSSPrimitiveValue.CSS_PERCENTAGE: return percentagesToPixels(v,d,ctx);default: throw new Error();}}public static float userSpaceToSVG(float v,short type,short d,Context ctx){switch(type){case SVGLength.SVG_LENGTHTYPE_NUMBER: case SVGLength.SVG_LENGTHTYPE_PX: return v;case SVGLength.SVG_LENGTHTYPE_MM: return(v*ctx.getPixelToMM());case SVGLength.SVG_LENGTHTYPE_CM: return(v*ctx.getPixelToMM()/10f);case SVGLength.SVG_LENGTHTYPE_IN: return(v*ctx.getPixelToMM()/25.4f);case SVGLength.SVG_LENGTHTYPE_PT: return(v*(72f*ctx.getPixelToMM())/25.4f);case SVGLength.SVG_LENGTHTYPE_PC: return(v*(6f*ctx.getPixelToMM())/25.4f);case SVGLength.SVG_LENGTHTYPE_EMS: return pixelsToEms(v,d,ctx);case SVGLength.SVG_LENGTHTYPE_EXS: return pixelsToExs(v,d,ctx);case SVGLength.SVG_LENGTHTYPE_PERCENTAGE: return pixelsToPercentages(v,d,ctx);default: throw new Error();}}public static float cssOtherCoordinateToUserSpace(CSSValue v,String prop,Context ctx){CSSPrimitiveValue pv=(CSSPrimitiveValue)v;short type=pv.getPrimitiveType();return cssToUserSpace(pv.getFloatValue(type),type,OTHER_LENGTH,ctx);}public static float cssHorizontalCoordinateToUserSpace(CSSValue v,String prop,Context ctx){CSSPrimitiveValue pv=(CSSPrimitiveValue)v;short type=pv.getPrimitiveType();return cssToUserSpace(pv.getFloatValue(type),type,HORIZONTAL_LENGTH,ctx);}public static float cssVerticalCoordinateToUserSpace(CSSValue v,String prop,Context ctx){CSSPrimitiveValue pv=(CSSPrimitiveValue)v;short type=pv.getPrimitiveType();return cssToUserSpace(pv.getFloatValue(type),type,VERTICAL_LENGTH,ctx);}public static float cssOtherLengthToUserSpace(CSSValue v,String prop,Context ctx){CSSPrimitiveValue pv=(CSSPrimitiveValue)v;short type=pv.getPrimitiveType();return cssLengthToUserSpace(pv.getFloatValue(type),prop,type,OTHER_LENGTH,ctx);}public static float cssHorizontalLengthToUserSpace(CSSValue v,String prop,Context ctx){CSSPrimitiveValue pv=(CSSPrimitiveValue)v;short type=pv.getPrimitiveType();return cssLengthToUserSpace(pv.getFloatValue(type),prop,type,HORIZONTAL_LENGTH,ctx);}public static float cssVerticalLengthToUserSpace(CSSValue v,String prop,Context ctx){CSSPrimitiveValue pv=(CSSPrimitiveValue)v;short type=pv.getPrimitiveType();return cssLengthToUserSpace(pv.getFloatValue(type),prop,type,VERTICAL_LENGTH,ctx);}public static float cssLengthToUserSpace(float v,String prop,short type,short d,Context ctx){float vv=cssToUserSpace(v,type,d,ctx);if(vv<0){throw new BridgeException(ctx.getElement(),ErrorConstants.ERR_CSS_LENGTH_NEGATIVE,new Object[]{prop});}return vv;}public static float cssToUserSpace(float v,short type,short d,Context ctx){switch(type){case CSSPrimitiveValue.CSS_NUMBER: case CSSPrimitiveValue.CSS_PX: return v;case CSSPrimitiveValue.CSS_MM: return(v/ctx.getPixelToMM());case CSSPrimitiveValue.CSS_CM: return(v*10f/ctx.getPixelToMM());case CSSPrimitiveValue.CSS_IN: return(v*25.4f/ctx.getPixelToMM());case CSSPrimitiveValue.CSS_PT: return(v*25.4f/(72f*ctx.getPixelToMM()));case CSSPrimitiveValue.CSS_PC: return(v*25.4f/(6f*ctx.getPixelToMM()));case CSSPrimitiveValue.CSS_EMS: return emsToPixels(v,d,ctx);case CSSPrimitiveValue.CSS_EXS: return exsToPixels(v,d,ctx);case CSSPrimitiveValue.CSS_PERCENTAGE: return percentagesToPixels(v,d,ctx);default: throw new Error();}}protected static float percentagesToPixels(float v,short d,Context ctx){if(d==HORIZONTAL_LENGTH){float w=ctx.getViewportWidth();return w*v/100f;}else if(d==VERTICAL_LENGTH){float h=ctx.getViewportHeight();return h*v/100f;}else{double w=ctx.getViewportWidth();double h=ctx.getViewportHeight();double vpp=Math.sqrt(w*w+h*h)/Math.sqrt(2);return(float)(vpp*v/100d);}}protected static float pixelsToPercentages(float v,short d,Context ctx){if(d==HORIZONTAL_LENGTH){float w=ctx.getViewportWidth();return v*100f/w;}else if(d==VERTICAL_LENGTH){float h=ctx.getViewportHeight();return v*100f/h;}else{double w=ctx.getViewportWidth();double h=ctx.getViewportHeight();double vpp=Math.sqrt(w*w+h*h)/Math.sqrt(2);return(float)(v*100d/vpp);}}protected static float pixelsToEms(float v,short d,Context ctx){CSSPrimitiveValue fontSize=ctx.getFontSize();short type=fontSize.getPrimitiveType();return v/cssToUserSpace(fontSize.getFloatValue(type),type,d,ctx);}protected static float emsToPixels(float v,short d,Context ctx){CSSPrimitiveValue fontSize=ctx.getFontSize();short type=fontSize.getPrimitiveType();return v*cssToUserSpace(fontSize.getFloatValue(type),type,d,ctx);}protected static float pixelsToExs(float v,short d,Context ctx){CSSPrimitiveValue fontSize=ctx.getFontSize();short type=fontSize.getPrimitiveType();float fs=cssToUserSpace(fontSize.getFloatValue(type),type,d,ctx);float xh=ctx.getXHeight();return v/xh/fs;}protected static float exsToPixels(float v,short d,Context ctx){CSSPrimitiveValue fontSize=ctx.getFontSize();short type=fontSize.getPrimitiveType();float fs=cssToUserSpace(fontSize.getFloatValue(type),type,d,ctx);float xh=ctx.getXHeight();return v*xh*fs;}public static class UnitResolver implements LengthHandler{public float value;public short unit=SVGLength.SVG_LENGTHTYPE_NUMBER;public void startLength()throws ParseException{}public void lengthValue(float v)throws ParseException{this.value=v;}public void em()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_EMS;}public void ex()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_EXS;}public void in()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_IN;}public void cm()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_CM;}public void mm()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_MM;}public void pc()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_PC;}public void pt()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_PT;}public void px()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_PX;}public void percentage()throws ParseException{this.unit=SVGLength.SVG_LENGTHTYPE_PERCENTAGE;}public void endLength()throws ParseException{}}public interface Context{Element getElement();float getPixelToMM();float getMediumFontSize();CSSPrimitiveValue getFontSize();float getXHeight();float getViewportWidth();float getViewportHeight();}public static class DefaultContext implements Context{protected Element e;protected BridgeContext ctx;public DefaultContext(BridgeContext ctx,Element e){this.ctx=ctx;this.e=e;}public Element getElement(){return e;}public float getPixelToMM(){return ctx.getUserAgent().getPixelToMM();}public float getMediumFontSize(){return 9f;}public CSSPrimitiveValue getFontSize(){return(CSSPrimitiveValue)CSSUtilities.getComputedStyle(e).getPropertyCSSValue(CSSConstants.CSS_FONT_SIZE_PROPERTY);}public float getXHeight(){return 0.5f;}public float getViewportWidth(){return ctx.getViewport(e).getWidth();}public float getViewportHeight(){return ctx.getViewport(e).getHeight();}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DefaultSVGCSSContext extends DefaultCommonCSSContext implements SVGCSSContext{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGColorFactory extends ColorFactory{{factories.put(\"aliceblue\",new RGBColorFactory(240,248,255));factories.put(\"antiquewhite\",new RGBColorFactory(250,235,215));factories.put(\"aquamarine\",new RGBColorFactory(127,255,212));factories.put(\"azure\",new RGBColorFactory(240,255,255));factories.put(\"beige\",new RGBColorFactory(245,245,220));factories.put(\"bisque\",new RGBColorFactory(255,228,196));factories.put(\"blanchedalmond\",new RGBColorFactory(255,235,205));factories.put(\"blueviolet\",new RGBColorFactory(138,43,226));factories.put(\"brown\",new RGBColorFactory(165,42,42));factories.put(\"burlywood\",new RGBColorFactory(222,184,135));factories.put(\"cadetblue\",new RGBColorFactory(95,158,160));factories.put(\"chartreuse\",new RGBColorFactory(127,255,0));factories.put(\"chocolate\",new RGBColorFactory(210,105,30));factories.put(\"coral\",new RGBColorFactory(255,127,80));factories.put(\"cornflowerblue\",new RGBColorFactory(100,149,237));factories.put(\"cornsilk\",new RGBColorFactory(255,248,220));factories.put(\"crimson\",new RGBColorFactory(220,20,60));factories.put(\"cyan\",new RGBColorFactory(0,255,255));factories.put(\"darkblue\",new RGBColorFactory(0,0,139));factories.put(\"darkcyan\",new RGBColorFactory(0,139,139));factories.put(\"darkgoldenrod\",new RGBColorFactory(184,134,11));factories.put(\"darkgray\",new RGBColorFactory(169,169,169));factories.put(\"darkgreen\",new RGBColorFactory(0,100,0));factories.put(\"darkgrey\",new RGBColorFactory(169,169,169));factories.put(\"darkkhaki\",new RGBColorFactory(189,183,107));factories.put(\"darkmagenta\",new RGBColorFactory(139,0,139));factories.put(\"darkolivegreen\",new RGBColorFactory(85,107,47));factories.put(\"darkorange\",new RGBColorFactory(255,140,0));factories.put(\"darkorchid\",new RGBColorFactory(153,50,204));factories.put(\"darkred\",new RGBColorFactory(139,0,0));factories.put(\"darksalmon\",new RGBColorFactory(233,150,122));factories.put(\"darkseagreen\",new RGBColorFactory(143,188,143));factories.put(\"darkslateblue\",new RGBColorFactory(72,61,139));factories.put(\"darkslategray\",new RGBColorFactory(47,79,79));factories.put(\"darkslategrey\",new RGBColorFactory(47,79,79));factories.put(\"darkturquoise\",new RGBColorFactory(0,206,209));factories.put(\"darkviolet\",new RGBColorFactory(148,0,211));factories.put(\"deeppink\",new RGBColorFactory(255,20,147));factories.put(\"deepskyblue\",new RGBColorFactory(0,191,255));factories.put(\"dimgray\",new RGBColorFactory(105,105,105));factories.put(\"dimgrey\",new RGBColorFactory(105,105,105));factories.put(\"dodgerblue\",new RGBColorFactory(30,144,255));factories.put(\"firebrick\",new RGBColorFactory(178,34,34));factories.put(\"floralwhite\",new RGBColorFactory(255,250,240));factories.put(\"forestgreen\",new RGBColorFactory(34,139,34));factories.put(\"gainsboro\",new RGBColorFactory(220,200,200));factories.put(\"ghostwhite\",new RGBColorFactory(248,248,255));factories.put(\"gold\",new RGBColorFactory(255,215,0));factories.put(\"goldenrod\",new RGBColorFactory(218,165,32));factories.put(\"grey\",new RGBColorFactory(128,128,128));factories.put(\"greenyellow\",new RGBColorFactory(173,255,47));factories.put(\"honeydew\",new RGBColorFactory(240,255,240));factories.put(\"hotpink\",new RGBColorFactory(255,105,180));factories.put(\"indianred\",new RGBColorFactory(205,92,92));factories.put(\"indigo\",new RGBColorFactory(75,0,130));factories.put(\"ivory\",new RGBColorFactory(255,255,240));factories.put(\"khaki\",new RGBColorFactory(240,230,140));factories.put(\"lavender\",new RGBColorFactory(230,230,250));factories.put(\"lavenderblush\",new RGBColorFactory(255,240,255));factories.put(\"lawngreen\",new RGBColorFactory(124,252,0));factories.put(\"lemonchiffon\",new RGBColorFactory(255,250,205));factories.put(\"lightblue\",new RGBColorFactory(173,216,230));factories.put(\"lightcoral\",new RGBColorFactory(240,128,128));factories.put(\"lightcyan\",new RGBColorFactory(224,255,255));factories.put(\"lightgoldenrodyellow\",new RGBColorFactory(250,250,210));factories.put(\"lightgray\",new RGBColorFactory(211,211,211));factories.put(\"lightgreen\",new RGBColorFactory(144,238,144));factories.put(\"lightgrey\",new RGBColorFactory(211,211,211));factories.put(\"lightpink\",new RGBColorFactory(255,182,193));factories.put(\"lightsalmon\",new RGBColorFactory(255,160,122));factories.put(\"lightseagreen\",new RGBColorFactory(32,178,170));factories.put(\"lightskyblue\",new RGBColorFactory(135,206,250));factories.put(\"lightslategray\",new RGBColorFactory(119,136,153));factories.put(\"lightslategrey\",new RGBColorFactory(119,136,153));factories.put(\"lightsteelblue\",new RGBColorFactory(176,196,222));factories.put(\"lightyellow\",new RGBColorFactory(255,255,224));factories.put(\"limegreen\",new RGBColorFactory(50,205,50));factories.put(\"linen\",new RGBColorFactory(250,240,230));factories.put(\"magenta\",new RGBColorFactory(255,0,255));factories.put(\"mediumaquamarine\",new RGBColorFactory(102,205,170));factories.put(\"mediumblue\",new RGBColorFactory(0,0,205));factories.put(\"mediumorchid\",new RGBColorFactory(186,85,211));factories.put(\"mediumpurple\",new RGBColorFactory(147,112,219));factories.put(\"mediumseagreen\",new RGBColorFactory(60,179,113));factories.put(\"mediumslateblue\",new RGBColorFactory(123,104,238));factories.put(\"mediumspringgreen\",new RGBColorFactory(0,250,154));factories.put(\"mediumturquoise\",new RGBColorFactory(72,209,204));factories.put(\"mediumvioletred\",new RGBColorFactory(199,21,133));factories.put(\"midnightblue\",new RGBColorFactory(25,25,112));factories.put(\"mintcream\",new RGBColorFactory(245,255,250));factories.put(\"mistyrose\",new RGBColorFactory(255,228,225));factories.put(\"moccasin\",new RGBColorFactory(255,228,181));factories.put(\"navajowhite\",new RGBColorFactory(255,222,173));factories.put(\"oldlace\",new RGBColorFactory(253,245,230));factories.put(\"olivedrab\",new RGBColorFactory(107,142,35));factories.put(\"orange\",new RGBColorFactory(255,165,0));factories.put(\"orangered\",new RGBColorFactory(255,69,0));factories.put(\"orchid\",new RGBColorFactory(218,112,214));factories.put(\"palegoldenrod\",new RGBColorFactory(238,232,170));factories.put(\"palegreen\",new RGBColorFactory(152,251,152));factories.put(\"paleturquoise\",new RGBColorFactory(175,238,238));factories.put(\"palevioletred\",new RGBColorFactory(219,112,147));factories.put(\"papayawhip\",new RGBColorFactory(255,239,213));factories.put(\"peachpuff\",new RGBColorFactory(255,218,185));factories.put(\"peru\",new RGBColorFactory(205,133,63));factories.put(\"pink\",new RGBColorFactory(255,192,203));factories.put(\"plum\",new RGBColorFactory(221,160,221));factories.put(\"powderblue\",new RGBColorFactory(176,224,230));factories.put(\"purple\",new RGBColorFactory(128,0,128));factories.put(\"rosybrown\",new RGBColorFactory(188,143,143));factories.put(\"royalblue\",new RGBColorFactory(65,105,225));factories.put(\"saddlebrown\",new RGBColorFactory(139,69,19));factories.put(\"salmon\",new RGBColorFactory(250,69,114));factories.put(\"sandybrown\",new RGBColorFactory(244,164,96));factories.put(\"seagreen\",new RGBColorFactory(46,139,87));factories.put(\"seashell\",new RGBColorFactory(255,245,238));factories.put(\"sienna\",new RGBColorFactory(160,82,45));factories.put(\"skyblue\",new RGBColorFactory(135,206,235));factories.put(\"slateblue\",new RGBColorFactory(106,90,205));factories.put(\"slategray\",new RGBColorFactory(112,128,144));factories.put(\"slategrey\",new RGBColorFactory(112,128,144));factories.put(\"snow\",new RGBColorFactory(255,250,250));factories.put(\"springgreen\",new RGBColorFactory(0,255,127));factories.put(\"steelblue\",new RGBColorFactory(70,130,180));factories.put(\"tan\",new RGBColorFactory(210,180,140));factories.put(\"thistle\",new RGBColorFactory(216,91,216));factories.put(\"tomato\",new RGBColorFactory(255,99,71));factories.put(\"turquoise\",new RGBColorFactory(64,224,208));factories.put(\"violet\",new RGBColorFactory(238,130,238));factories.put(\"wheat\",new RGBColorFactory(245,222,179));factories.put(\"whitesmoke\",new RGBColorFactory(245,245,245));factories.put(\"yellowgreen\",new RGBColorFactory(154,205,50));}public SVGColorFactory(Parser p,String prop){super(p,prop);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGValueFactoryMap extends CommonValueFactoryMap{public SVGValueFactoryMap(Parser p){super(p);put(\"alignment-baseline\",new AlignmentBaselineFactory(p));put(\"baseline-shift\",new BaselineShiftFactory(p));put(\"clip-path\",new ClipPathFactory(p));put(\"clip-rule\",new ClipRuleFactory(p));put(\"color\",new SVGColorFactory(p,\"color\"));put(\"color-interpolation\",new ColorInterpolationFactory(p));put(\"color-rendering\",new ColorRenderingFactory(p));put(\"dominant-baseline\",new DominantBaselineFactory(p));put(\"enable-background\",new EnableBackgroundFactory(p));put(\"fill\",new PaintFactory(p,\"fill\"));put(\"fill-opacity\",new OpacityFactory(p,\"fill-opacity\"));put(\"fill-rule\",new FillRuleFactory(p));put(\"filter\",new FilterFactory(p));put(\"flood-color\",new SimpleColorFactory(p,\"flood-color\"));put(\"flood-opacity\",new OpacityFactory(p,\"flood-opacity\"));put(\"font-size\",new SVGFontSizeFactory(p));put(\"glyph-orientation-horizontal\",new GlyphOrientationHorizontalFactory(p));put(\"glyph-orientation-vertical\",new GlyphOrientationVerticalFactory(p));put(\"image-rendering\",new ImageRenderingFactory(p));put(\"lighting-color\",new SimpleColorFactory(p,\"lighting-color\"));put(\"marker-end\",new MarkerFactory(p,\"marker-end\"));put(\"marker-mid\",new MarkerFactory(p,\"marker-mid\"));put(\"marker-start\",new MarkerFactory(p,\"marker-start\"));put(\"mask\",new MaskFactory(p));put(\"opacity\",new OpacityFactory(p,\"opacity\"));put(\"pointer-events\",new PointerEventsFactory(p));put(\"shape-rendering\",new ShapeRenderingFactory(p));put(\"stop-color\",new SimpleColorFactory(p,\"stop-color\"));put(\"stop-opacity\",new OpacityFactory(p,\"stop-opacity\"));put(\"stroke\",new PaintFactory(p,\"stroke\"));put(\"stroke-dasharray\",new StrokeDasharrayFactory(p));put(\"stroke-dashoffset\",new StrokeDashoffsetFactory(p));put(\"stroke-linecap\",new StrokeLinecapFactory(p));put(\"stroke-linejoin\",new StrokeLinejoinFactory(p));put(\"stroke-miterlimit\",new StrokeMiterlimitFactory(p));put(\"stroke-opacity\",new OpacityFactory(p,\"stroke-opacity\"));put(\"stroke-width\",new StrokeWidthFactory(p));put(\"text-anchor\",new TextAnchorFactory(p));put(\"text-rendering\",new TextRenderingFactory(p));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGViewCSS extends CommonViewCSS{public SVGViewCSS(DocumentView doc,SVGCSSContext ctx){super(doc,ctx);addRelativeValueResolver(new AlignmentBaselineResolver());addRelativeValueResolver(new BaselineShiftResolver());addRelativeValueResolver(new ClipPathResolver());addRelativeValueResolver(new ClipRuleResolver());addRelativeValueResolver(new ColorInterpolationResolver());addRelativeValueResolver(new ColorRenderingResolver());addRelativeValueResolver(new DominantBaselineResolver());addRelativeValueResolver(new EnableBackgroundResolver());addRelativeValueResolver(new FillResolver());addRelativeValueResolver(new FillRuleResolver());addRelativeValueResolver(new FilterResolver());addRelativeValueResolver(new OpacityResolver(\"fill-opacity\",true));addRelativeValueResolver(new SimpleColorResolver(\"flood-color\"));addRelativeValueResolver(new OpacityResolver(\"flood-opacity\",false));addRelativeValueResolver(new GlyphOrientationHorizontalResolver());addRelativeValueResolver(new GlyphOrientationVerticalResolver());addRelativeValueResolver(new ImageRenderingResolver());addRelativeValueResolver(new LightingColorResolver());addRelativeValueResolver(new MarkerResolver(\"marker-end\"));addRelativeValueResolver(new MarkerResolver(\"marker-mid\"));addRelativeValueResolver(new MarkerResolver(\"marker-start\"));addRelativeValueResolver(new MaskResolver());addRelativeValueResolver(new OpacityResolver(\"opacity\",false));addRelativeValueResolver(new PointerEventsResolver());addRelativeValueResolver(new ShapeRenderingResolver());addRelativeValueResolver(new SimpleColorResolver(\"stop-color\"));addRelativeValueResolver(new OpacityResolver(\"stop-opacity\",false));addRelativeValueResolver(new StrokeResolver());addRelativeValueResolver(new StrokeDasharrayResolver());addRelativeValueResolver(new StrokeDashoffsetResolver());addRelativeValueResolver(new StrokeLinecapResolver());addRelativeValueResolver(new StrokeLinejoinResolver());addRelativeValueResolver(new StrokeMiterlimitResolver());addRelativeValueResolver(new StrokeWidthResolver());addRelativeValueResolver(new OpacityResolver(\"stroke-opacity\",true));addRelativeValueResolver(new TextAnchorResolver());addRelativeValueResolver(new TextRenderingResolver());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SimpleColorFactory extends SVGColorFactory{public final static ImmutableValue CURRENT_COLOR=new ImmutableString(CSSPrimitiveValue.CSS_IDENT,\"currentcolor\");static{values.put(\"currentcolor\",CURRENT_COLOR);}public SimpleColorFactory(Parser p,String prop){super(p,prop);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public abstract class CommonViewCSS extends AbstractViewCSS{protected CommonViewCSS(DocumentView doc,CommonCSSContext ctx){super(doc);addRelativeValueResolver(new ClipResolver());addRelativeValueResolver(new ColorResolver(ctx));addRelativeValueResolver(new CursorResolver());addRelativeValueResolver(new DirectionResolver());addRelativeValueResolver(new DisplayResolver());addRelativeValueResolver(new FontFamilyResolver(ctx));addRelativeValueResolver(new FontSizeResolver());addRelativeValueResolver(new FontSizeAdjustResolver());addRelativeValueResolver(new FontStretchResolver());addRelativeValueResolver(new FontStyleResolver());addRelativeValueResolver(new FontVariantResolver());addRelativeValueResolver(new FontWeightResolver());addRelativeValueResolver(new SpacingResolver(\"letter-spacing\"));addRelativeValueResolver(new OverflowResolver());addRelativeValueResolver(new TextDecorationResolver());addRelativeValueResolver(new UnicodeBidiResolver());addRelativeValueResolver(new VisibilityResolver());addRelativeValueResolver(new SpacingResolver(\"word-spacing\"));}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public abstract class AbstractElement extends AbstractParentChildNode implements Element{protected NamedNodeMap attributes;protected AbstractElement(){}protected AbstractElement(String name,AbstractDocument owner){ownerDocument=owner;if(!DOMUtilities.isValidName(name)){throw createDOMException(DOMException.INVALID_CHARACTER_ERR,\"xml.name\",new Object[]{name});}}public short getNodeType(){return ELEMENT_NODE;}public boolean hasAttributes(){return true;}public NamedNodeMap getAttributes(){return(attributes==null)? attributes=createAttributes(): attributes;}public String getTagName(){return getNodeName();}public boolean hasAttribute(String name){return attributes!=null && attributes.getNamedItem(name)!=null;}public String getAttribute(String name){if(attributes==null){return \"\";}Attr attr=(Attr)attributes.getNamedItem(name);return(attr==null)? \"\" : attr.getValue();}public void setAttribute(String name,String value)throws DOMException{if(attributes==null){attributes=createAttributes();}Attr attr=getOwnerDocument().createAttribute(name);attr.setValue(value);attributes.setNamedItem(attr);}public void removeAttribute(String name)throws DOMException{if(attributes==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{name});}attributes.removeNamedItem(name);}public Attr getAttributeNode(String name){if(attributes==null){return null;}return(Attr)attributes.getNamedItem(name);}public Attr setAttributeNode(Attr newAttr)throws DOMException{if(newAttr==null){return null;}if(attributes==null){attributes=createAttributes();}return(Attr)attributes.setNamedItem(newAttr);}public Attr removeAttributeNode(Attr oldAttr)throws DOMException{if(oldAttr==null){return null;}if(attributes==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{oldAttr.getName()});}return(Attr)attributes.removeNamedItem(oldAttr.getNodeName());}public NodeList getElementsByTagName(String name){Node n=getFirstChild();if(n==null || name==null){return EMPTY_NODE_LIST;}Nodes result=new Nodes();getElementsByTagName(this,name,result);return result;}public void normalize(){super.normalize();if(attributes!=null){NamedNodeMap map=getAttributes();for(int i=map.getLength()-1;i>=0;i--){map.item(i).normalize();}}}public boolean hasAttributeNS(String namespaceURI,String localName){return attributes!=null && attributes.getNamedItemNS(namespaceURI,localName)!=null;}public String getAttributeNS(String namespaceURI,String localName){if(attributes==null){return \"\";}Attr attr=(Attr)attributes.getNamedItemNS(namespaceURI,localName);return(attr==null)? \"\" : attr.getValue();}public void setAttributeNS(String namespaceURI,String qualifiedName,String value)throws DOMException{if(attributes==null){attributes=createAttributes();}Attr attr=getOwnerDocument().createAttributeNS(namespaceURI,qualifiedName);attr.setValue(value);attributes.setNamedItemNS(attr);}public void removeAttributeNS(String namespaceURI,String localName)throws DOMException{if(attributes==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{localName});}attributes.removeNamedItemNS(namespaceURI,localName);}public Attr getAttributeNodeNS(String namespaceURI,String localName){if(attributes==null){return null;}return(Attr)attributes.getNamedItemNS(namespaceURI,localName);}public Attr setAttributeNodeNS(Attr newAttr)throws DOMException{if(newAttr==null){return null;}if(attributes==null){attributes=createAttributes();}return(Attr)attributes.setNamedItemNS(newAttr);}public NodeList getElementsByTagNameNS(String namespaceURI,String localName){Node n=getFirstChild();if(n==null || localName==null){return EMPTY_NODE_LIST;}Nodes result=new Nodes();getElementsByTagNameNS(this,namespaceURI,localName,result);return result;}protected NamedNodeMap createAttributes(){return new NamedNodeHashMap();}protected static void getElementsByTagName(Node node,String name,Nodes list){if(node.getNodeType()==ELEMENT_NODE){if(name.equals(\"*\")|| name.equals(node.getNodeName())){list.append(node);}}for(Node n=node.getFirstChild();n!=null;n=n.getNextSibling()){getElementsByTagName(n,name,list);}}protected static void getElementsByTagNameNS(Node node,String ns,String name,Nodes list){if(node.getNodeType()==ELEMENT_NODE){if(stringMatches(ns,node.getNamespaceURI())&&(name.equals(\"*\")|| name.equals(node.getLocalName()))){list.append(node);}}for(Node n=node.getFirstChild();n!=null;n=n.getNextSibling()){getElementsByTagNameNS(n,ns,name,list);}}private static boolean stringMatches(String s1,String s2){if(s1==null && s2==null){return true;}if(s1==null || s2==null){return false;}if(s1.equals(\"*\")){return true;}return s1.equals(s2);}protected Node export(Node n,AbstractDocument d){super.export(n,d);AbstractElement ae=(AbstractElement)n;if(attributes!=null){NamedNodeMap map=attributes;for(int i=map.getLength()-1;i>=0;i--){AbstractAttr aa=(AbstractAttr)map.item(i);if(aa.getSpecified()){Attr attr=(Attr)aa.deepExport(aa.cloneNode(false),d);if(aa instanceof AbstractAttrNS){ae.setAttributeNodeNS(attr);}else{ae.setAttributeNode(attr);}}}}return n;}protected Node deepExport(Node n,AbstractDocument d){super.deepExport(n,d);AbstractElement ae=(AbstractElement)n;if(attributes!=null){NamedNodeMap map=attributes;for(int i=map.getLength()-1;i>=0;i--){AbstractAttr aa=(AbstractAttr)map.item(i);if(aa.getSpecified()){Attr attr=(Attr)aa.deepExport(aa.cloneNode(false),d);if(aa instanceof AbstractAttrNS){ae.setAttributeNodeNS(attr);}else{ae.setAttributeNode(attr);}}}}return n;}protected Node copyInto(Node n){super.copyInto(n);AbstractElement ae=(AbstractElement)n;if(attributes!=null){NamedNodeMap map=attributes;for(int i=map.getLength()-1;i>=0;i--){AbstractAttr aa=(AbstractAttr)map.item(i).cloneNode(false);if(aa instanceof AbstractAttrNS){ae.setAttributeNodeNS(aa);}else{ae.setAttributeNode(aa);}}}return n;}protected Node deepCopyInto(Node n){super.deepCopyInto(n);AbstractElement ae=(AbstractElement)n;if(attributes!=null){NamedNodeMap map=attributes;for(int i=map.getLength()-1;i>=0;i--){AbstractAttr aa=(AbstractAttr)map.item(i).cloneNode(true);if(aa instanceof AbstractAttrNS){ae.setAttributeNodeNS(aa);}else{ae.setAttributeNode(aa);}}}return n;}protected void checkChildType(Node n){switch(n.getNodeType()){case ELEMENT_NODE: case PROCESSING_INSTRUCTION_NODE: case COMMENT_NODE: case TEXT_NODE: case CDATA_SECTION_NODE: case ENTITY_REFERENCE_NODE: case DOCUMENT_FRAGMENT_NODE: break;default: throw createDOMException(DOMException.HIERARCHY_REQUEST_ERR,\"child.type\",new Object[]{new Integer(getNodeType()),getNodeName(),new Integer(n.getNodeType()),n.getNodeName()});}}protected void fireDOMAttrModifiedEvent(String name,String oldv,String newv){AbstractDocument doc=getCurrentDocument();if(doc.getEventsEnabled()&& !oldv.equals(newv)){DocumentEvent de=(DocumentEvent)doc;MutationEvent ev=(MutationEvent)de.createEvent(\"MutationEvents\");ev.initMutationEvent(\"DOMAttrModified\",true,false,null,oldv,newv,name);dispatchEvent(ev);}}public class NamedNodeHashMap implements NamedNodeMap{protected HashTable table=new HashTable();protected HashTable tableNS;public String namespaceURI;public NamedNodeHashMap(){}public Node getNamedItem(String name){if(name==null){return null;}return(Node)table.get(name);}public Node setNamedItem(Node arg)throws DOMException{if(arg==null){return null;}checkNode(arg);return setNamedItem(arg.getNodeName(),arg);}public Node removeNamedItem(String name)throws DOMException{if(isReadonly()){throw createDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,\"readonly.node.map\",new Object[]{});}if(name==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{\"\"});}AbstractAttr n=(AbstractAttr)table.remove(name);if(n==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{name});}n.setOwnerElement(null);fireDOMAttrModifiedEvent(name,n.getNodeValue(),\"\");return n;}public Node item(int index){int i=table.size();if(index<i){return(Node)table.item(index);}index-=i;if(tableNS!=null){for(int k=0;k<tableNS.size();k++){NamedNodeHashMap hm=(NamedNodeHashMap)tableNS.item(k);i=hm.getLength();if(index<i){return(Node)hm.item(index);}index-=i;}}return null;}public int getLength(){int result=table.size();if(tableNS!=null){for(int i=0;i<tableNS.size();i++){NamedNodeHashMap hm=(NamedNodeHashMap)tableNS.item(i);result+=hm.getLength();}}return result;}public Node getNamedItemNS(String namespaceURI,String localName){if(namespaceURI==null){return getNamedItem(localName);}if(tableNS==null){return null;}NamedNodeHashMap attr;attr=(NamedNodeHashMap)tableNS.get(namespaceURI);if(attr==null){return null;}return attr.getNamedItem(localName);}public Node setNamedItemNS(Node arg)throws DOMException{if(arg==null){return null;}String nsURI=arg.getNamespaceURI();if(nsURI==null){return setNamedItem(arg);}checkNode(arg);if(tableNS==null){tableNS=new HashTable();}NamedNodeHashMap attr=(NamedNodeHashMap)tableNS.get(nsURI);if(attr==null){tableNS.put(nsURI,attr=new NamedNodeHashMap());attr.namespaceURI=nsURI;}return attr.setNamedItem(arg.getLocalName(),arg);}public Node removeNamedItemNS(String namespaceURI,String localName)throws DOMException{if(namespaceURI==null){return removeNamedItem(localName);}if(isReadonly()){throw createDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,\"readonly.node.map\",new Object[]{});}if(localName==null || tableNS==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{localName});}NamedNodeHashMap attr;attr=(NamedNodeHashMap)tableNS.get(namespaceURI);if(attr==null){throw createDOMException(DOMException.NOT_FOUND_ERR,\"attribute.missing\",new Object[]{localName});}return attr.removeNamedItem(localName);}public Node setNamedItem(String name,Node arg)throws DOMException{((AbstractAttr)arg).setOwnerElement(AbstractElement.this);AbstractAttr result=(AbstractAttr)table.put(name,arg);if(result!=null){result.setOwnerElement(null);fireDOMAttrModifiedEvent(name,result.getNodeValue(),arg.getNodeValue());}else{fireDOMAttrModifiedEvent(name,\"\",arg.getNodeValue());}return result;}protected void checkNode(Node arg){if(isReadonly()){throw createDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,\"readonly.node.map\",new Object[]{});}if(getOwnerDocument()!=arg.getOwnerDocument()){throw createDOMException(DOMException.WRONG_DOCUMENT_ERR,\"node.from.wrong.document\",new Object[]{new Integer(arg.getNodeType()),arg.getNodeName()});}if(arg.getNodeType()==ATTRIBUTE_NODE &&((Attr)arg).getOwnerElement()!=null){throw createDOMException(DOMException.WRONG_DOCUMENT_ERR,\"inuse.attribute\",new Object[]{arg.getNodeName()});}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DefaultSVGContext extends DefaultSVGCSSContext implements SVGContext{protected ParserFactory parserFactory;protected UserAgent userAgent;public ParserFactory getParserFactory(){return parserFactory;}public void setParserFactory(ParserFactory pf){parserFactory=pf;}public UserAgent getUserAgent(){return userAgent;}public void setUserAgent(UserAgent ua){userAgent=ua;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public interface RootGraphicsNode extends CompositeGraphicsNode{void addGlobalPropertyChangeListener(PropertyChangeListener l);void addGlobalPropertyChangeListener(String propertyName,PropertyChangeListener l);void removeGlobalPropertyChangeListener(PropertyChangeListener l);}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DefaultStyleAttributeParser extends StyleAttributeParser{public DefaultStyleAttributeParser(String s)throws ParseException{super(s);putCSSValueFactory(null,\"clip\",new ClipFactory());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGBridgeContext extends ConcreteBridgeContext implements SVGConstants{public SVGBridgeContext(){putBridge(SVG_NAMESPACE_URI,TAG_CIRCLE,new SVGCircleElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_ELLIPSE,new SVGEllipseElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_FILTER,new SVGFilterElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_FE_FLOOD,new SVGFeFloodElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_FE_GAUSSIAN_BLUR,new SVGFeGaussianBlurElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_G,new SVGGElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_LINE,new SVGLineElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_PATH,new SVGPathElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_POLYLINE,new SVGPolylineElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_POLYGON,new SVGPolygonElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_RECT,new SVGRectElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_SVG,new SVGSVGElementBridge());putBridge(SVG_NAMESPACE_URI,TAG_TEXT,new SVGTextElementBridge());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**(c)COPYRIGHT 1999 World Wide Web Consortium*(Massachusetts Institute of Technology,Institut National de Recherche*en Informatique et en Automatique,Keio University).*All Rights Reserved.http://www.w3.org/Consortium/Legal/**$Id$*/public class JumpException extends RuntimeException{public JumpException(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "//SAXNotRecognizedException.java-unrecognized feature or value.public class SAXNotRecognizedException extends SAXException{public SAXNotRecognizedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "//SAXNotSupportedException.java-unsupported feature or value.public class SAXNotSupportedException extends SAXException{public SAXNotSupportedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "//DefaultHandler.java-default implementation of the core handlers.public class DefaultHandler implements EntityResolver,DTDHandler,ContentHandler,ErrorHandler{public InputSource resolveEntity(String publicId,String systemId)throws SAXException{return null;}public void notationDecl(String name,String publicId,String systemId)throws SAXException{}public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName)throws SAXException{}public void setDocumentLocator(Locator locator){}public void startDocument()throws SAXException{}public void endDocument()throws SAXException{}public void startPrefixMapping(String prefix,String uri)throws SAXException{}public void endPrefixMapping(String prefix)throws SAXException{}public void startElement(String uri,String localName,String qName,Attributes attributes)throws SAXException{}public void endElement(String uri,String localName,String qName)throws SAXException{}public void characters(char[]ch,int start,int length)throws SAXException{}public void ignorableWhitespace(char[]ch,int start,int length)throws SAXException{}public void processingInstruction(String target,String data)throws SAXException{}public void skippedEntity(String name)throws SAXException{}public void warning(SAXParseException e)throws SAXException{}public void error(SAXParseException e)throws SAXException{}public void fatalError(SAXParseException e)throws SAXException{throw e;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DummyValidTest extends AbstractTest{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DummyValidTestSuite extends DefaultTestSuite{public DummyValidTestSuite(){addTest(new DummyValidTest(){{setId(\"1\");}});addTest(new DummyValidTest(){{setId(\"2\");}});}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class SVGAccuracyTestProcessor extends XMLTestReportProcessor{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class DOMEvent extends AbstractEvent{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class InterruptedBridgeException extends BridgeException{public InterruptedBridgeException(){super(\"\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public abstract class AbstractTranscoder extends TranscoderSupport implements Transcoder{protected AbstractTranscoder(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class IllegalAttributeValueException extends RuntimeException{public IllegalAttributeValueException(String msg){super(msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************************Copyright(C)The Apache Software Foundation.All rights reserved.**-------------------------------------------------------------------------**This software is published under the terms of the Apache Software License**version 1.1,a copy of which has been included with this distribution in**the LICENSE file.******************************************************************************/public class MissingAttributeException extends RuntimeException{public MissingAttributeException(String msg){super(msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable1 extends _DefaultsTable1{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable2 extends _DefaultsTable2{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable3 extends _DefaultsTable3{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable4 extends _DefaultsTable4{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class _DefaultsTable4 extends PersistentObject{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class AbstractAddress extends _AbstractAddress{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class HomeAddress extends _HomeAddress{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class CyclicChild extends _CyclicChild{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class CyclicParent extends _CyclicParent{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Entity1 extends _Entity1{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Qualified1 extends _Qualified1{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Qualified2 extends _Qualified2{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.****************************************************************/public class Embeddable1 extends _Embeddable1{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.****************************************************************/@Entity public class Entity3{@Id protected int id;protected String key;@ManyToOne protected Entity4 entity4;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.****************************************************************/public class ExtendedTypeEntity extends _ExtendedTypeEntity{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable1 extends _DefaultsTable1{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable2 extends _DefaultsTable2{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable3 extends _DefaultsTable3{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DefaultsTable4 extends _DefaultsTable4{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class _DefaultsTable4 extends org.apache.cayenne.CayenneDataObject{public static final String ID_PK_COLUMN=\"id\";}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class IdMapToMany extends _IdMapToMany{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class IdMapToManyTarget extends _IdMapToManyTarget{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class IdMapToMany extends _IdMapToMany{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class IdMapToManyTarget extends _IdMapToManyTarget{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class FlattenedCircular extends _FlattenedCircular{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ClientMtMeaningfulPk extends _ClientMtMeaningfulPk{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MtMeaningfulPk extends _MtMeaningfulPk{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Entity1 extends _Entity1{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Entity2 extends _Entity2{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Entity3 extends _Entity3{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/******************************************************************Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.****************************************************************/public class Main{private static Log logObj=LogFactory.getLog(Main.class);public static void main(String[]args){Main main=new Main();main.configureLogging();if(!main.checkJDKVersion()){System.exit(1);}File projectFile=projectFileFromArgs(args);main.runModeler(projectFile);}protected static File projectFileFromArgs(String[]args){if(args.length==1){File f=new File(args[0]);if(f.isDirectory()){f=new File(f,Configuration.DEFAULT_DOMAIN_FILE);}if(f.isFile()&& Configuration.DEFAULT_DOMAIN_FILE.equals(f.getName())){return f;}}return null;}protected void runModeler(File projectFile){logObj.info(\"Starting CayenneModeler.\");configureLookAndFeel();Application.instance=new Application(projectFile);Runnable runnable=new Runnable(){public void run(){Application.instance.startup();}};SwingUtilities.invokeLater(runnable);}protected boolean checkJDKVersion(){try{Class.forName(\"javax.swing.SpringLayout\");return true;}catch(Exception ex){logObj.fatal(\"CayenneModeler requires JDK 1.4.\");logObj.fatal(\"Found : '\"+System.getProperty(\"java.version\")+\"' at \"+System.getProperty(\"java.home\"));JOptionPane.showMessageDialog(null,\"Unsupported JDK at \"+System.getProperty(\"java.home\")+\".Set JAVA_HOME to the JDK1.4 location.\",\"Unsupported JDK Version\",JOptionPane.ERROR_MESSAGE);return false;}}protected void configureLogging(){ModelerPreferences prefs=ModelerPreferences.getPreferences();boolean logfileEnabled=prefs.getBoolean(ModelerPreferences.EDITOR_LOGFILE_ENABLED,true);prefs.setProperty(ModelerPreferences.EDITOR_LOGFILE_ENABLED,String.valueOf(logfileEnabled));if(logfileEnabled){String defaultPath=getLogFile().getPath();String logfilePath=prefs.getString(ModelerPreferences.EDITOR_LOGFILE,defaultPath);try{File logfile=new File(logfilePath);if(logfile!=null){if(!logfile.exists()){File parent=logfile.getParentFile();if(parent!=null){parent.mkdirs();}if(!logfile.createNewFile()){return;}}prefs.setProperty(ModelerPreferences.EDITOR_LOGFILE,logfilePath);}}catch(IOException ioex){logObj.warn(\"Error setting logging-\"+logfilePath,ioex);}}}protected String getLookAndFeelName(){ModelerPreferences prefs=ModelerPreferences.getPreferences();return prefs.getString(ModelerPreferences.EDITOR_LAFNAME,ModelerConstants.DEFAULT_LAF_NAME);}protected String getThemeName(){ModelerPreferences prefs=ModelerPreferences.getPreferences();return prefs.getString(ModelerPreferences.EDITOR_THEMENAME,ModelerConstants.DEFAULT_THEME_NAME);}protected void configureLookAndFeel(){ModelerPreferences prefs=ModelerPreferences.getPreferences();String lfName=getLookAndFeelName();String themeName=getThemeName();try{Class lf=Class.forName(lfName);if(PlasticLookAndFeel.class.isAssignableFrom(lf)){PlasticTheme foundTheme=themeWithName(themeName);if(foundTheme==null){logObj.warn(\"Could not set selected theme '\"+themeName+\"'-using default '\"+ModelerConstants.DEFAULT_THEME_NAME+\"'.\");themeName=ModelerConstants.DEFAULT_THEME_NAME;foundTheme=themeWithName(themeName);}PlasticLookAndFeel.setMyCurrentTheme(foundTheme);}UIManager.setLookAndFeel(lfName);}catch(Exception e){logObj.warn(\"Could not set selected LookAndFeel '\"+lfName+\"'-using default '\"+ModelerConstants.DEFAULT_LAF_NAME+\"'.\");lfName=ModelerConstants.DEFAULT_LAF_NAME;themeName=ModelerConstants.DEFAULT_THEME_NAME;PlasticTheme defaultTheme=themeWithName(themeName);PlasticLookAndFeel.setMyCurrentTheme(defaultTheme);try{UIManager.setLookAndFeel(lfName);}catch(Exception retry){}}finally{prefs.setProperty(ModelerPreferences.EDITOR_LAFNAME,UIManager.getLookAndFeel().getClass().getName());prefs.setProperty(ModelerPreferences.EDITOR_THEMENAME,themeName);}}protected PlasticTheme themeWithName(String themeName){List availableThemes=PlasticLookAndFeel.getInstalledThemes();for(Iterator i=availableThemes.iterator();i.hasNext();){PlasticTheme aTheme=(PlasticTheme)i.next();if(themeName.equals(aTheme.getName())){return aTheme;}}return null;}protected File getLogFile(){if(!CayenneUserDir.getInstance().canWrite()){return null;}return CayenneUserDir.getInstance().resolveFile(\"modeler.log\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public abstract class AbstractAspectalizable implements Aspectalizable{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class InvalidEventTypeException extends RuntimeException{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public final class LayoutEventImpl extends AbstractActionEvent implements LayoutEvent{public LayoutEventImpl(Object target,int action){super(target,action);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class LayoutRemoveEvent extends AbstractActionEvent implements LayoutEvent{public LayoutRemoveEvent(Object target,int action){super(target,action);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public final class ColumnLayout extends CompositeLayout{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public final class RowLayout extends CompositeLayout{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public final class TabLayout extends CompositeLayout{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class JXFormsTransformer extends JXFormsGenerator.TransformerAdapter{}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ValidationError extends org.apache.cocoon.forms.validation.ValidationError{public ValidationError(String errorMessage,boolean i18n){super(errorMessage,i18n);}public ValidationError(String errorMessageKey){super(errorMessageKey);}public ValidationError(String errorMessageKey,String[]parameters){super(errorMessageKey,parameters);}public ValidationError(String errorMessageKey,String[]parameters,boolean[]keys){super(errorMessageKey,parameters,keys);}public ValidationError(XMLizable errorMessage){super(errorMessage);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class AddRowActionDefinition extends RepeaterActionDefinition{public AddRowActionDefinition(String repeaterName){super(repeaterName);this.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){Repeater repeater=((RepeaterAction)event.getSource()).getRepeater();repeater.addRow();}});}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DuplicateIdException extends Exception{public DuplicateIdException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class RowAction extends Action{public RowAction(RowActionDefinition definition){super(definition);}public static class MoveUpAction extends RowAction{public MoveUpAction(RowActionDefinition.MoveUpDefinition definition){super(definition);}public void generateSaxFragment(ContentHandler contentHandler,Locale locale)throws SAXException{Repeater.RepeaterRow row=Repeater.getParentRow(this);if(((Repeater)row.getParent()).indexOf(row)>0){super.generateSaxFragment(contentHandler,locale);}}}public static class MoveDownAction extends RowAction{public MoveDownAction(RowActionDefinition.MoveDownDefinition definition){super(definition);}public void generateSaxFragment(ContentHandler contentHandler,Locale locale)throws SAXException{Repeater.RepeaterRow row=Repeater.getParentRow(this);Repeater repeater=(Repeater)row.getParent();if(repeater.indexOf(row)<repeater.getSize()-1){super.generateSaxFragment(contentHandler,locale);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class LenientNotOKBean extends LenientBaseBean{public LenientNotOKBean(String initVal){super(initVal);}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ValidationError{private XMLizable saxFragment;public ValidationError(String errorMessage,boolean i18n){if(i18n){saxFragment=new I18nMessage(errorMessage);}else{saxFragment=new StringMessage(errorMessage);}}public ValidationError(String errorMessageKey){this.saxFragment=new I18nMessage(errorMessageKey);}public ValidationError(String errorMessageKey,String[]parameters){this.saxFragment=new I18nMessage(errorMessageKey,parameters);}public ValidationError(String errorMessageKey,String[]parameters,boolean[]keys){this.saxFragment=new I18nMessage(errorMessageKey,parameters,keys);}public ValidationError(XMLizable errorMessage){this.saxFragment=errorMessage;}public void generateSaxFragment(ContentHandler contentHandler)throws SAXException{if(saxFragment!=null){saxFragment.toSAX(contentHandler);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class AddRowActionDefinition extends RepeaterActionDefinition{public AddRowActionDefinition(String repeaterName){super(repeaterName);this.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){Repeater repeater=((RepeaterAction)event.getSource()).getRepeater();repeater.addRow();}});}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Folder{public static final int READ_ONLY=1;public static final int READ_WRITE=2;public static final int HOLDS_FOLDERS=2;public static final int HOLDS_MESSAGES=1;public void open(int mode){throw new NoSuchMethodError(\"This is a mock object\");}public boolean isOpen(){throw new NoSuchMethodError(\"This is a mock object\");}public void close(boolean b){throw new NoSuchMethodError(\"This is a mock object\");}public Message[]getMessages(){throw new NoSuchMethodError(\"This is a mock object\");}public void fetch(Message[]m,FetchProfile profile){throw new NoSuchMethodError(\"This is a mock object\");}public Folder[]list(String pattern){throw new NoSuchMethodError(\"This is a mock object\");}public String getFullName(){throw new NoSuchMethodError(\"This is a mock object\");}public Message getMessage(int id){throw new NoSuchMethodError(\"This is a mock object\");}public Message[]search(javax.mail.search.SearchTerm term){throw new NoSuchMethodError(\"This is a mock object\");}public String getName(){throw new NoSuchMethodError(\"This is a mock object\");}public URLName getURLName(){throw new NoSuchMethodError(\"This is a mock object\");}public boolean isSubscribed(){throw new NoSuchMethodError(\"This is a mock object\");}public int getType(){throw new NoSuchMethodError(\"This is a mock object\");}public boolean hasNewMessages(){throw new NoSuchMethodError(\"This is a mock object\");}public int getMessageCount(){throw new NoSuchMethodError(\"This is a mock object\");}public int getNewMessageCount(){throw new NoSuchMethodError(\"This is a mock object\");}public int getDeletedMessageCount(){throw new NoSuchMethodError(\"This is a mock object\");}public int getUnreadMessageCount(){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2002-2004 The Apache Software Foundation*Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or*implied.**See the License for the specific language governing permissions and*limitations under the License.*/public class CocoonServiceSelector extends AbstractServiceManager implements ServiceSelector,Serviceable,Configurable{private ServiceManager serviceManager;protected CocoonServiceSelector parentSelector;protected ServiceManager parentLocator;protected String roleName;protected String defaultHint;public CocoonServiceSelector(){super(null);}public Object select(Object hint)throws ServiceException{if(!this.initialized){if(this.getLogger().isWarnEnabled()){}}if(this.disposed){throw new IllegalStateException(\"You cannot select a Component from a disposed ComponentSelector\");}if(hint==null){hint=this.defaultHint;}AbstractComponentHandler handler=(AbstractComponentHandler)this.componentHandlers.get(hint);if(null==handler){if(this.parentSelector!=null){return this.parentSelector.select(hint);}final String message=this.roleName+\": ComponentSelector could not find the component for hint[\"+hint+\"]\";if(this.getLogger().isDebugEnabled()){}throw new ServiceException(hint.toString(),message);}Object component=null;try{component=handler.get();}catch(final ServiceException ce){throw ce;}catch(final Exception e){final String message=this.roleName+\": ComponentSelector could not access the Component for hint[\"+hint+\"]\";if(this.getLogger().isDebugEnabled()){}throw new ServiceException(hint.toString(),message,e);}if(null==component){if(this.parentSelector!=null){component=this.parentSelector.select(hint);}else{final String message=this.roleName+\": ComponentSelector could not find the component for hint[\"+hint+\"]\";if(this.getLogger().isDebugEnabled()){}throw new ServiceException(hint.toString(),message);}}this.componentMapping.put(component,handler);return component;}public boolean isSelectable(Object hint){if(!this.initialized)return false;if(this.disposed)return false;if(hint==null){hint=this.defaultHint;}boolean exists=false;try{AbstractComponentHandler handler=(AbstractComponentHandler)this.componentHandlers.get(hint);exists=(handler!=null);}catch(Throwable t){}if(!exists && this.parentSelector!=null){exists=this.parentSelector.isSelectable(hint);}return exists;}public void release(final Object component){if(null==component){return;}if(this.parentSelector!=null && this.parentSelector.canRelease(component)){this.parentSelector.release(component);}else{final AbstractComponentHandler handler=(AbstractComponentHandler)this.componentMapping.get(component);if(null==handler){return;}if(!(handler instanceof ThreadSafeComponentHandler)){this.componentMapping.remove(component);}try{handler.put(component);}catch(Exception e){if(this.getLogger().isDebugEnabled()){}}}}public void service(final ServiceManager componentManager)throws ServiceException{this.serviceManager=componentManager;}public void configure(final Configuration config)throws ConfigurationException{this.roleName=getRoleName(config);this.defaultHint=config.getAttribute(this.getDefaultHintAttributeName(),null);String compInstanceName=getComponentInstanceName();Configuration[]instances=config.getChildren();for(int i=0;i<instances.length;i++){Configuration instance=instances[i];Object hint=instance.getAttribute(\"name\").trim();String classAttr=instance.getAttribute(getClassAttributeName(),null);String className;if(compInstanceName==null){if(classAttr==null){className=this.roleManager.getDefaultClassNameForHint(roleName,instance.getName());}else{className=classAttr.trim();}}else{if(compInstanceName.equals(instance.getName())){className=(classAttr==null)? null : classAttr.trim();}else{className=this.roleManager.getDefaultClassNameForHint(roleName,instance.getName());}}if(className==null){String message=\"Unable to determine class name for component named '\"+hint+\"' at \"+instance.getLocation();throw new ConfigurationException(message);}this.addComponent(className,hint,instance);}}public void initialize()throws Exception{super.initialize();List keys=new ArrayList(this.componentHandlers.keySet());for(int i=0;i<keys.size();i++){final Object key=keys.get(i);final AbstractComponentHandler handler=(AbstractComponentHandler)this.componentHandlers.get(key);try{handler.initialize();}catch(Exception e){if(this.getLogger().isDebugEnabled()){}}}}public void dispose(){Iterator keys=this.componentHandlers.keySet().iterator();List keyList=new ArrayList();while(keys.hasNext()){Object key=keys.next();AbstractComponentHandler handler=(AbstractComponentHandler)this.componentHandlers.get(key);handler.dispose();keyList.add(key);}keys=keyList.iterator();while(keys.hasNext()){this.componentHandlers.remove(keys.next());}keyList.clear();if(this.parentLocator!=null){this.parentLocator.release(this.parentSelector);this.parentLocator=null;this.parentSelector=null;}super.dispose();}protected Map getComponentHandlers(){return this.componentHandlers;}public void addComponent(final Object hint,final Class component,final Configuration configuration)throws ServiceException{if(this.initialized){throw new ServiceException(hint.toString(),\"Cannot add components to an initialized ComponentSelector\",null);}try{final AbstractComponentHandler handler=getComponentHandler(this.roleName,component,configuration,this.serviceManager);handler.initialize();this.componentHandlers.put(hint,handler);if(this.getLogger().isDebugEnabled()){}}catch(ServiceException se){throw se;}catch(final Exception e){final String message=\"Could not set up Component for hint[\"+hint+\"]\";if(this.getLogger().isErrorEnabled()){}throw new ServiceException(hint.toString(),message,e);}}protected String getComponentInstanceName(){return null;}protected String getClassAttributeName(){return \"class\";}protected String getDefaultHintAttributeName(){return \"default\";}protected String getRoleName(Configuration config){String name=config.getAttribute(\"role\",null);if(name==null && this.roleManager!=null){name=this.roleManager.getRoleForName(config.getName());}return name;}public String getDefaultHint(){return this.defaultHint;}protected boolean hasDeclaredComponent(Object hint){if(hint==null){hint=this.defaultHint;}return this.isSelectable(hint);}public void setParentLocator(ServiceManager locator,String role)throws ServiceException{if(this.parentSelector!=null){throw new ServiceException(null,\"Parent selector is already set\");}this.parentLocator=locator;Object parent=locator.lookup(role);if(parent instanceof CocoonServiceSelector){this.parentSelector=(CocoonServiceSelector)parent;}else{throw new IllegalArgumentException(\"Parent selector is not an extended component selector(\"+parent+\")\");}}protected boolean canRelease(Object component){if(this.parentSelector!=null && this.parentSelector.canRelease(component)){return true;}return this.componentMapping.containsKey(component);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class CompiledEncoder extends CompiledCharset implements Encoder{protected CompiledEncoder(String name){super(name,new String[0]);this.compile();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Authenticator{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public interface BodyPart extends Part{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Provider{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class URLName{public URLName(String url){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ParseException extends Exception{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class FromStringTerm extends SearchTerm{public FromStringTerm(String term){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class OrTerm extends SearchTerm{public OrTerm(SearchTerm a,SearchTerm b){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class SearchTerm{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class SubjectTerm extends SearchTerm{public SubjectTerm(String term){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class Report extends Assert{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class PyObject{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class Constants{public static final String VERSION=\"1.2\";}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class CopletJXPathEvent extends JXPathEvent implements CopletInstanceEvent{public CopletJXPathEvent(CopletInstanceData target,String path,Object value){super(target,path,value);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ECMConfigurationFileNotSetException extends RuntimeException{public ECMConfigurationFileNotSetException(String msg){super(msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Constants extends FormsConstants{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CreateEvent extends WidgetEvent{public CreateEvent(Widget source){super(source);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DuplicateIdException extends Exception{public DuplicateIdException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class RowAction extends Action{public RowAction(RowActionDefinition definition){super(definition);}public static class MoveUpAction extends RowAction{public MoveUpAction(RowActionDefinition.MoveUpDefinition definition){super(definition);}public void generateSaxFragment(ContentHandler contentHandler,Locale locale)throws SAXException{Repeater.RepeaterRow row=Repeater.getParentRow(this);if(((Repeater)row.getParent()).indexOf(row)>0){super.generateSaxFragment(contentHandler,locale);}}}public static class MoveDownAction extends RowAction{public MoveDownAction(RowActionDefinition.MoveDownDefinition definition){super(definition);}public void generateSaxFragment(ContentHandler contentHandler,Locale locale)throws SAXException{Repeater.RepeaterRow row=Repeater.getParentRow(this);Repeater repeater=(Repeater)row.getParent();if(repeater.indexOf(row)<repeater.getSize()-1){super.generateSaxFragment(contentHandler,locale);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class LenientNotOKBean extends LenientBaseBean{public LenientNotOKBean(String initVal){super(initVal);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class RowAction extends Action{public RowAction(RowActionDefinition definition){super(definition);}public static class MoveUpAction extends RowAction{public MoveUpAction(RowActionDefinition.MoveUpDefinition definition){super(definition);}public void generateSaxFragment(ContentHandler contentHandler,Locale locale)throws SAXException{Repeater.RepeaterRow row=Repeater.getParentRow(this);if(((Repeater)row.getParent()).indexOf(row)>0){super.generateSaxFragment(contentHandler,locale);}}}public static class MoveDownAction extends RowAction{public MoveDownAction(RowActionDefinition.MoveDownDefinition definition){super(definition);}public void generateSaxFragment(ContentHandler contentHandler,Locale locale)throws SAXException{Repeater.RepeaterRow row=Repeater.getParentRow(this);Repeater repeater=(Repeater)row.getParent();if(repeater.indexOf(row)<repeater.getSize()-1){super.generateSaxFragment(contentHandler,locale);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class JexlContext{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CreateEvent extends WidgetEvent{public CreateEvent(Widget source){super(source);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class DefaultThreadManager extends org.apache.avalon.cornerstone.blocks.threads.DefaultThreadManager implements Component,ThreadSafe{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class DefaultTimeScheduler extends org.apache.avalon.cornerstone.blocks.scheduler.DefaultTimeScheduler implements Component,ThreadSafe{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class Report extends Assert{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class ChangeCopletInstanceAspectDataEvent extends ChangeAspectDataEvent implements CopletInstanceEvent{public ChangeCopletInstanceAspectDataEvent(CopletInstanceData target,String aspectName,Object data){super(target,aspectName,data);}public CopletInstanceData getCopletInstanceData(){return(CopletInstanceData)this.getTarget();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/abstract class AbstractOSGiTestCase extends TestCase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Characters extends DataEvent implements Evaluation{public Characters(char data){super(data);}public Characters(char[]data){super(data);}public Characters(char[]data,int start,int length){super(data,start,length);}public Characters(String data){super(data);}public Characters(Locator locator,char data){super(locator,data);}public Characters(Locator locator,char[]data){super(locator,data);}public Characters(Locator locator,char[]data,int start,int length){super(locator,data,start,length);}public Characters(Locator locator,String data){super(locator,data);}public boolean merge(Event event){if(event instanceof Characters){super.mergeData((DataEvent)event);return(true);}return(false);}public String evaluate(JXPathContext context){return(this.getStringValue());}public void process(Runtime runtime,JXPathContext context)throws SAXException{runtime.characters(this.getArrayValue());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2002 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPMergedRegions extends BaseElementProcessor{public EPMergedRegions(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)2004 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/public class Basket implements Serializable{protected List items=new ArrayList();public Basket(){}public Object getItem(int index){return this.items.get(index);}public void addItem(Object item){this.items.add(item);}public Iterator getIterator(){return this.items.iterator();}public void removeItem(Object item){this.items.remove(item);}public int size(){return this.items.size();}public int contentSize(){int size=0;Iterator i=this.items.iterator();while(i.hasNext()){Object item=i.next();if(item instanceof ContentItem){int v=((ContentItem)item).size();if(v!=-1){size+=v;}}}return size;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)2004 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/public abstract class BasketEvent implements Event{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)2004 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/public class RefreshBasketEvent extends BasketEvent{public RefreshBasketEvent(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)2004 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/public class SaveBasketEvent extends BasketEvent{public SaveBasketEvent(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class ProfileException extends RuntimeException{public ProfileException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class JXTemplateTransformer extends TransformerAdapter{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Subst{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Otherwise extends Instruction{public Otherwise(ParsingContext parsingContext,StartElement raw,Attributes attrs,Stack stack)throws SAXException{super(raw);if(stack.size()!=0 &&(stack.peek()instanceof Choose)){Choose startChoose=(Choose)stack.peek();startChoose.setOtherwise(this);}else{throw new SAXParseException(\"<otherwise>must be within<choose>\",getLocation(),null);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ContinuationHelper extends AbstractContinuable{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class Report extends Assert{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class JXFormsTransformer extends JXFormsGenerator.TransformerAdapter{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class FileAlreadyDeployedException extends DeploymentException{public FileAlreadyDeployedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class NoRuleFoundException extends RuntimeException{public NoRuleFoundException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DummyClass{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**File LenientNotOKBean.java*created by mpo*on Dec 26,2003 | 4:01:40 PM**(c)2003-Outerthought BVBA*/public class LenientNotOKBean extends LenientBaseBean{public LenientNotOKBean(String initVal){super(initVal);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class JellyException extends Exception{public JellyException(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class JellyTagException extends JellyException{public JellyTagException(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPAttribute extends BaseElementProcessor{public EPAttribute(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPAttributes extends BaseElementProcessor{public EPAttributes(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPCells extends BaseElementProcessor{public EPCells(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPItem extends BaseElementProcessor{public EPItem(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPMargins extends BaseElementProcessor{public EPMargins(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2002,2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPMergedRegions extends BaseElementProcessor{public EPMergedRegions(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPNames extends BaseElementProcessor{public EPNames(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPObjects extends BaseElementProcessor{public EPObjects(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPPrintInformation extends BaseElementProcessor{public EPPrintInformation(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPSheetName extends BaseElementProcessor{public EPSheetName(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPSheetNameIndex extends BaseElementProcessor{public EPSheetNameIndex(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPSheets extends BaseElementProcessor{public EPSheets(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPStyleBorder extends BaseElementProcessor{public EPStyleBorder(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EPSummary extends BaseElementProcessor{public EPSummary(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EP_Default_ extends BaseElementProcessor{public EP_Default_(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EP_Name extends BaseElementProcessor{public EP_Name(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EP_ValString extends BaseElementProcessor{public EP_ValString(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class EP_Value extends BaseElementProcessor{public EP_Value(){super(null);}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class ValidationError{private Object saxFragment;private String errorMessage;private boolean i18n;private String[]errorMessageParameters;private boolean[]keys;public ValidationError(String errorMessage,boolean i18n){this.errorMessage=errorMessage;this.i18n=i18n;}public ValidationError(String errorMessageKey){this.errorMessage=errorMessageKey;this.i18n=true;}public ValidationError(String errorMessageKey,String[]parameters){this.errorMessage=errorMessageKey;this.errorMessageParameters=parameters;this.keys=null;this.i18n=true;}public ValidationError(String errorMessageKey,String[]parameters,boolean[]keys){this.errorMessage=errorMessageKey;this.errorMessageParameters=parameters;this.keys=keys;this.i18n=true;}public ValidationError(Object errorMessage){this.saxFragment=errorMessage;}public void generateSaxFragment(ContentHandler contentHandler)throws SAXException{if(saxFragment!=null){XMLByteStreamInterpreter byteStreamInterpreter=new XMLByteStreamInterpreter();byteStreamInterpreter.setContentHandler(contentHandler);byteStreamInterpreter.deserialize(saxFragment);}else if(errorMessageParameters!=null){contentHandler.startPrefixMapping(\"i18n\",I18nTransformer.I18N_NAMESPACE_URI);contentHandler.startElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TRANSLATE_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TRANSLATE_ELEMENT,Constants.EMPTY_ATTRS);AttributesImpl i18nAttrs=new AttributesImpl();i18nAttrs.addAttribute(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_CATALOGUE_ATTRIBUTE,\"i18n:\"+I18nTransformer.I18N_CATALOGUE_ATTRIBUTE,\"CDATA\",\"woody\");contentHandler.startElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TEXT_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TEXT_ELEMENT,i18nAttrs);contentHandler.characters(errorMessage.toCharArray(),0,errorMessage.length());contentHandler.endElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TEXT_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TEXT_ELEMENT);for(int i=0;i<errorMessageParameters.length;i++){contentHandler.startElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_PARAM_ELEMENT,\"i18n:\"+I18nTransformer.I18N_PARAM_ELEMENT,Constants.EMPTY_ATTRS);if(keys!=null && keys[i])contentHandler.startElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TEXT_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TEXT_ELEMENT,i18nAttrs);contentHandler.characters(errorMessageParameters[i].toCharArray(),0,errorMessageParameters[i].length());if(keys!=null && keys[i])contentHandler.endElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TEXT_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TEXT_ELEMENT);contentHandler.endElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_PARAM_ELEMENT,\"i18n:\"+I18nTransformer.I18N_PARAM_ELEMENT);}contentHandler.endElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TRANSLATE_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TRANSLATE_ELEMENT);contentHandler.endPrefixMapping(\"i18n\");}else if(i18n){contentHandler.startPrefixMapping(\"i18n\",I18nTransformer.I18N_NAMESPACE_URI);AttributesImpl i18nAttrs=new AttributesImpl();i18nAttrs.addAttribute(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_CATALOGUE_ATTRIBUTE,\"i18n:\"+I18nTransformer.I18N_CATALOGUE_ATTRIBUTE,\"CDATA\",\"woody\");contentHandler.startElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TEXT_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TEXT_ELEMENT,i18nAttrs);contentHandler.characters(errorMessage.toCharArray(),0,errorMessage.length());contentHandler.endElement(I18nTransformer.I18N_NAMESPACE_URI,I18nTransformer.I18N_TEXT_ELEMENT,\"i18n:\"+I18nTransformer.I18N_TEXT_ELEMENT);contentHandler.endPrefixMapping(\"i18n\");}else{contentHandler.characters(errorMessage.toCharArray(),0,errorMessage.length());}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class DuplicateIdException extends Exception{public DuplicateIdException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class PersistenceManager{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class JellyTagException extends JellyException{public JellyTagException(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class OraUpdateAction extends DatabaseUpdateAction{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public abstract class Address{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class MessagingException extends Exception{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class AddressException extends MessagingException{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class InternetAddress extends Address{public InternetAddress(String from){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class MimeMessage extends Message{public MimeMessage(Session session){throw new NoSuchMethodError(\"This is a mock object\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPAttribute extends BaseElementProcessor{public EPAttribute(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPAttributes extends BaseElementProcessor{public EPAttributes(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPCells extends BaseElementProcessor{public EPCells(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPItem extends BaseElementProcessor{public EPItem(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPMargins extends BaseElementProcessor{public EPMargins(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPNames extends BaseElementProcessor{public EPNames(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPObjects extends BaseElementProcessor{public EPObjects(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPPrintInformation extends BaseElementProcessor{public EPPrintInformation(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPSheetName extends BaseElementProcessor{public EPSheetName(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPSheetNameIndex extends BaseElementProcessor{public EPSheetNameIndex(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPSheets extends BaseElementProcessor{public EPSheets(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPStyleBorder extends BaseElementProcessor{public EPStyleBorder(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EPSummary extends BaseElementProcessor{public EPSummary(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EP_Default_ extends BaseElementProcessor{public EP_Default_(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EP_Name extends BaseElementProcessor{public EP_Name(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EP_Paper extends BaseElementProcessor{public EP_Paper(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EP_ValString extends BaseElementProcessor{public EP_ValString(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class EP_Value extends BaseElementProcessor{public EP_Value(){super(null);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class Context{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class PyCode{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class PySystemState{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class SessionTransformer extends SessionPostTransformer{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class PooledJaxpParser extends JaxpParser{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": ""
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class DestinationNotFoundException extends IOException{public DestinationNotFoundException(String filename){super(\"Destination not found for: \"+filename);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class NonStaticClassLoaderManager implements ClassLoaderManager,ThreadSafe{private RepositoryClassLoader instance=new RepositoryClassLoader();private Set fileSet=Collections.synchronizedSet(new HashSet());public void addDirectory(File directoryName)throws IOException{if(!this.fileSet.contains(directoryName)){this.fileSet.add(directoryName);this.instance.addDirectory(directoryName);}}public Class loadClass(String className)throws ClassNotFoundException{return this.instance.loadClass(className);}public void reinstantiate(){if(this.fileSet.isEmpty()){this.instance=new RepositoryClassLoader();}else{this.instance=new RepositoryClassLoader(new Vector(this.fileSet));}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/public class ThreadManagerComponent extends DefaultThreadManager implements Component{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/public class TimeSchedulerComponent extends DefaultTimeScheduler implements Component{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class Report extends Assert{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class FileSavingEnvironment extends AbstractCommandLineEnvironment{public FileSavingEnvironment(String uri,File context,Map attributes,Map parameters,Map links,CommandlineContext cliContext,OutputStream stream,Logger log)throws MalformedURLException{super(uri,null,context,stream,log);this.objectModel.put(Constants.LINK_OBJECT,links);this.objectModel.put(ObjectModelHelper.REQUEST_OBJECT,new CommandLineRequest(this,null,uri,null,attributes,parameters));this.objectModel.put(ObjectModelHelper.RESPONSE_OBJECT,new CommandLineResponse());this.objectModel.put(ObjectModelHelper.CONTEXT_OBJECT,cliContext);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class FileGeneratorTestCase extends AbstractGeneratorTestCase{public FileGeneratorTestCase(String name){super(name==null ? \"FileGenerator Testcase\" : name);String generator=\"file\";HashMap objectmodel=new HashMap();String src=\"resource://org/apache/cocoon/generation/FileGeneratorTestCase.source.xml\";Parameters parameters=new Parameters();String result=\"resource://org/apache/cocoon/generation/FileGeneratorTestCase.source.xml\";addTestStep(generator,objectmodel,src,parameters,result,EQUAL);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UserDidLoginEvent extends UserEvent{public UserDidLoginEvent(PortalUser pu){super(pu);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UserIsAccessingEvent extends UserEvent{public UserIsAccessingEvent(PortalUser pu){super(pu);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UserWillLogoutEvent extends UserEvent{public UserWillLogoutEvent(PortalUser pu){super(pu);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2002,2004-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CompositeLayoutImpl extends CompositeLayout{public CompositeLayoutImpl(String id,String name){super(id,name);}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ParameterImpl implements java.io.Serializable{protected String name;protected String value;public ParameterImpl(){}public String getName(){return name;}public String getValue(){return value;}public void setName(String name){this.name=name;}public void setValue(String value){this.value=value;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Basket extends ContentStore{public Basket(String id){super(id);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Briefcase extends ContentStore{public Briefcase(String id){super(id);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Folder extends ContentStore{public Folder(String id){super(id);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004-2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class RefreshBasketEvent extends ContentStoreEvent{public RefreshBasketEvent(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class CompiledEncoder extends CompiledCharset implements Encoder{protected CompiledEncoder(String name){super(name,new String[0]);this.compile();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class TextGeneratorTestCase extends AbstractGeneratorTestCase{public TextGeneratorTestCase(String name){super(name);String generator=\"text\";HashMap objectmodel=new HashMap();String src=\"resource://org/apache/cocoon/generation/texttest-input1.txt\";Parameters parameters=new Parameters();String result=\"resource://org/apache/cocoon/generation/texttest-result1.xml\";addTestStep(generator,objectmodel,src,parameters,result,EQUAL);src=\"resource://org/apache/cocoon/generation/texttest-input2.txt\";result=\"resource://org/apache/cocoon/generation/texttest-result2.xml\";addTestStep(generator,objectmodel,src,parameters,result,EQUAL);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class LexicalTransformerTestCase extends AbstractTransformerTestCase{public LexicalTransformerTestCase(String name){super(name);String transformer=\"lexer\";HashMap objectmodel=new HashMap();String src=\"resource://org/apache/cocoon/transformation/lexertest-lexicon1.xml\";Parameters parameters=new Parameters();String input=\"resource://org/apache/cocoon/transformation/lexertest-input1.xml\";String result=\"resource://org/apache/cocoon/transformation/lexertest-result1.xml\";addTestStep(transformer,objectmodel,src,parameters,input,result,EQUAL);src=\"resource://org/apache/cocoon/transformation/lexertest-lexicon2.xml\";input=\"resource://org/apache/cocoon/transformation/lexertest-input2.xml\";result=\"resource://org/apache/cocoon/transformation/lexertest-result2.xml\";addTestStep(transformer,objectmodel,src,parameters,input,result,EQUAL);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class ParserTransformerTestCase extends AbstractTransformerTestCase{public ParserTransformerTestCase(String name){super(name);String transformer=\"parser\";HashMap objectmodel=new HashMap();String src=\"resource://org/apache/cocoon/transformation/parsertest-grammar1.xml\";Parameters parameters=new Parameters();String input=\"resource://org/apache/cocoon/transformation/parsertest-input1.xml\";String result=\"resource://org/apache/cocoon/transformation/parsertest-result1.xml\";addTestStep(transformer,objectmodel,src,parameters,input,result,EQUAL);transformer=\"recovery-parser\";src=\"resource://org/apache/cocoon/transformation/parsertest-grammar1.xml\";input=\"resource://org/apache/cocoon/transformation/parsertest-input2.xml\";result=\"resource://org/apache/cocoon/transformation/parsertest-result2.xml\";addTestStep(transformer,objectmodel,src,parameters,input,result,EQUAL);src=\"resource://org/apache/cocoon/transformation/parsertest-grammar1.xml\";input=\"resource://org/apache/cocoon/transformation/parsertest-input3.xml\";result=\"resource://org/apache/cocoon/transformation/parsertest-result3.xml\";}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class PatternTransformerTestCase extends AbstractTransformerTestCase{public PatternTransformerTestCase(String name){super(name);String transformer=\"pattern\";HashMap objectmodel=new HashMap();String src=\"resource://org/apache/cocoon/transformation/patterntest-lexicon1.xml\";Parameters parameters=new Parameters();String input=\"resource://org/apache/cocoon/transformation/patterntest-input1.xml\";String result=\"resource://org/apache/cocoon/transformation/patterntest-result1.xml\";addTestStep(transformer,objectmodel,src,parameters,input,result,EQUAL);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*============================================================================The Apache Software License,Version 1.1============================================================================Copyright(C)1999-2003 The Apache Software Foundation.All rights reserved.Redistribution and use in source and binary forms,with or without modifica-tion,are permitted provided that the following conditions are met: 1.Redistributions of source code must retain the above copyright notice,this list of conditions and the following disclaimer.2.Redistributions in binary form must reproduce the above copyright notice,this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.3.The end-user documentation included with the redistribution,if any,must include the following acknowledgment: \"This product includes software developed by the Apache Software Foundation(http://www.apache.org/).\" Alternately,this acknowledgment may appear in the software itself,if and wherever such third-party acknowledgments normally appear.4.The names \"Apache Cocoon\" and \"Apache Software Foundation\" must not be used to endorse or promote products derived from this software without prior written permission.For written permission,please contact apache@apache.org.5.Products derived from this software may not be called \"Apache\",nor may \"Apache\" appear in their name,without prior written permission of the Apache Software Foundation.THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLU-DING,BUT NOT LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.This software consists of voluntary contributions made by many individuals on behalf of the Apache Software Foundation and was originally created by Stefano Mazzocchi<stefano@apache.org>.For more information on the Apache Software Foundation,please see<http://www.apache.org/>.*/public class Authenticator extends AbstractLogEnabled{private boolean isValidAuthenticationFragment(Document authenticationFragment)throws ProcessingException{if(this.getLogger().isDebugEnabled()){}boolean isValid=false;if(authenticationFragment.hasChildNodes()==true && authenticationFragment.getChildNodes().getLength()==1){Node child=authenticationFragment.getFirstChild();if(child.getNodeType()==Node.ELEMENT_NODE && child.getNodeName().equals(\"authentication\")==true){if(child.hasChildNodes()==true){NodeList children=child.getChildNodes();boolean found=false;int i=0;int l=children.getLength();while(found==false && i<l){child=children.item(i);if(child.getNodeType()==Node.ELEMENT_NODE && child.getNodeName().equals(\"ID\")==true){found=true;}else{i++;}}if(found==true){child.normalize();if(child.hasChildNodes()==true && child.getChildNodes().getLength()==1 && child.getChildNodes().item(0).getNodeType()==Node.TEXT_NODE){String value=child.getChildNodes().item(0).getNodeValue().trim();if(value.length()>0)isValid=true;}}}}}if(this.getLogger().isDebugEnabled()){}return isValid;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*ValidationException.java Author: Bj\u00f6rn L\u00fctkemeier<bluetkemeier@s-und-n.de>Date: April 23,2003*/public class ValidationException extends Exception{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class AnnotationGen{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ElementNameValuePairGen{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class SimpleElementValueGen extends ElementValueGen{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class SimpleClassWithDefaultConstructor{public SimpleClassWithDefaultConstructor(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class GenericArray extends java.lang.Object implements java.lang.Cloneable,java.io.Serializable{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@CombinedAnnotation({@SimpleAnnotation(id=4)})public class AnnotatedWithCombinedAnnotation{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@AnnotationEnumElement(enumval=SimpleEnum.Red)public class AnnotatedWithEnumClass{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@ComplexAnnotation(ival=4,bval=2,cval='5',fval=3.0f,dval=33.4,zval=false,jval=56,sval=99)public class ComplexAnnotatedClass{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@SimpleAnnotation(id=4)public class SimpleAnnotatedClass{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "@MarkerAnnotationInvisible @MarkerAnnotation public class MarkedType{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class CalendarConverter extends DateTimeConverter{public CalendarConverter(){super(Calendar.class);}public CalendarConverter(Object defaultValue){super(Calendar.class,defaultValue);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class DateConverter extends DateTimeConverter{public DateConverter(){super(Date.class);}public DateConverter(Object defaultValue){super(Date.class,defaultValue);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons/beanutils/src/java/org/apache/commons/beanutils/WrapDynaBean.java,v 1.3 2002/01/23 22:35:58 sanders Exp $*$Revision: 1.3 $*$Date: 2002/01/23 22:35:58 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ConvertingWrapDynaBean extends WrapDynaBean{public ConvertingWrapDynaBean(Object instance){super(instance);}public void set(String name,Object value){DynaProperty descriptor=getDynaProperty(name);try{BeanUtils.setProperty(instance,name,value);}catch(Throwable t){throw new IllegalArgumentException(\"Property '\"+name+\"' has no write method\");}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/BeanAccessLanguageException.java,v 1.1 2003/05/12 21:42:56 rdonkin Exp $*$Revision: 1.1 $*$Date: 2003/05/12 21:42:56 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class BeanAccessLanguageException extends IllegalArgumentException{public BeanAccessLanguageException(){super();}public BeanAccessLanguageException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/NestedNullException.java,v 1.1 2003/05/12 21:42:56 rdonkin Exp $*$Revision: 1.1 $*$Date: 2003/05/12 21:42:56 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class NestedNullException extends BeanAccessLanguageException{public NestedNullException(){super();}public NestedNullException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class BetaBean extends AbstractChild{public BetaBean(String name){setName(name);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/ThrowExceptionConverter.java,v 1.1 2003/03/15 11:38:12 rdonkin Exp $*$Revision: 1.1 $*$Date: 2003/03/15 11:38:12 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ThrowExceptionConverter implements Converter{public Object convert(Class type,Object value){throw new PassTestException();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/priv/PrivateBeanSubclass.java,v 1.1 2001/10/14 01:15:07 craigmcc Exp $*$Revision: 1.1 $*$Date: 2001/10/14 01:15:07 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/class PrivateBeanSubclass extends PrivateBean{PrivateBeanSubclass(){super();}public String getBar(){return(super.getBar());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Jira381TestCase extends TestCase{public Jira381TestCase(String name){super(name);}public void testIssue_BEANUTILS_381_getMatchingAccessibleMethod(){Class target=TestServiceBean.class;String methodName=\"performOp\";Class[]runtimeClasses=new Class[]{TestObjectSubclass.class};Method returned=MethodUtils.getMatchingAccessibleMethod(target,methodName,runtimeClasses);assertEquals(target,returned.getDeclaringClass());assertEquals(methodName,returned.getName());assertEquals(TestObject.class,returned.getParameterTypes()[0]);}public class TestServiceBean{public void performOp(Object o){}public void performOp(TestObject o){}}public class TestObject{}public class TestObjectSubclass extends TestObject{}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/locale/LocaleConvertTestSuite.java,v 1.1 2003/03/09 21:25:17 rdonkin Exp $*$Revision: 1.1 $*$Date: 2003/03/09 21:25:17 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class LocaleConvertTestSuite{public static Test suite(){TestSuite testSuite=new TestSuite();testSuite.addTestSuite(LocaleConvertUtilsTestCase.class);testSuite.addTestSuite(DateLocaleConverterTestCase.class);return testSuite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/priv/PrivateBeanFactory.java,v 1.1 2001/05/07 02:09:02 craigmcc Exp $*$Revision: 1.1 $*$Date: 2001/05/07 02:09:02 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class PrivateBeanFactory{public static PrivateDirect create(){return(new PrivateBean());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/BigDecimalConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class BigDecimalConverter implements Converter{public BigDecimalConverter(){this(null);}public BigDecimalConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new BigDecimal((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/BigIntegerConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class BigIntegerConverter implements Converter{public BigIntegerConverter(){this(null);}public BigIntegerConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new BigInteger((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/ByteConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class ByteConverter implements Converter{public ByteConverter(){this(null);}public ByteConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new Byte((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/DoubleConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class DoubleConverter implements Converter{public DoubleConverter(){this(null);}public DoubleConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new Double((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/FloatConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class FloatConverter implements Converter{public FloatConverter(){this(null);}public FloatConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new Float((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/IntegerConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class IntegerConverter implements Converter{public IntegerConverter(){this(null);}public IntegerConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new Integer((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/LongConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class LongConverter implements Converter{public LongConverter(){this(null);}public LongConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new Long((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/ShortConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class ShortConverter implements Converter{public ShortConverter(){this(null);}public ShortConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(new Short((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/SqlDateConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class SqlDateConverter implements Converter{public SqlDateConverter(){this(null);}public SqlDateConverter(Object defaultValue){this.defaultValue=defaultValue;}private Object defaultValue=null;public Object convert(Class type,Object value){if(value==null){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(\"No value specified\");}}try{return(Date.valueOf((String)value));}catch(Exception e){if(defaultValue!=null){return(defaultValue);}else{throw new ConversionException(e);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/converters/StringConverter.java,v 1.1 2002/03/18 16:32:43 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/03/18 16:32:43 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class StringConverter implements Converter{public Object convert(Class type,Object value){if(value==null){return((String)null);}else{return(value.toString());}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/ConversionException.java,v 1.1 2001/12/24 23:27:04 craigmcc Exp $*$Revision: 1.1 $*$Date: 2001/12/24 23:27:04 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ConversionException extends RuntimeException{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/converters/ConverterTestSuite.java,v 1.1 2003/03/26 20:24:40 rdonkin Exp $*$Revision: 1.1 $*$Date: 2003/03/26 20:24:40 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ConverterTestSuite{public static Test suite(){TestSuite testSuite=new TestSuite();testSuite.addTestSuite(ByteConverterTestCase.class);testSuite.addTestSuite(DoubleConverterTestCase.class);testSuite.addTestSuite(FloatConverterTestCase.class);testSuite.addTestSuite(IntegerConverterTestCase.class);testSuite.addTestSuite(LongConverterTestCase.class);testSuite.addTestSuite(ShortConverterTestCase.class);testSuite.addTestSuite(StringArrayConverterTestCase.class);return testSuite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/converters/StringArrayConverterTestCase.java,v 1.1 2003/03/26 20:24:40 rdonkin Exp $*$Revision: 1.1 $*$Date: 2003/03/26 20:24:40 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class StringArrayConverterTestCase extends TestCase{public StringArrayConverterTestCase(String name){super(name);}public void testIntToString(){int[]testArray={1,2,3,4,5};String[]results=(String[])new StringArrayConverter().convert(String.class,testArray);assertEquals(\"Incorrect results size\",5,results.length);assertEquals(\"Entry one is wrong\",\"1\",results[0]);assertEquals(\"Entry two is wrong\",\"2\",results[1]);assertEquals(\"Entry three is wrong\",\"3\",results[2]);assertEquals(\"Entry four is wrong\",\"4\",results[3]);assertEquals(\"Entry five is wrong\",\"5\",results[4]);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ClassReloader extends ClassLoader{public ClassReloader(ClassLoader parent){super(parent);}public Class reload(Class clazz)throws FileNotFoundException,IOException{String className=clazz.getName();String classFile=className.replace('.','/')+\".class\";InputStream classStream=getParent().getResourceAsStream(classFile);if(classStream==null){throw new FileNotFoundException(classFile);}byte[]buf=new byte[1024];ByteArrayOutputStream baos=new ByteArrayOutputStream();for(;;){int bytesRead=classStream.read(buf);if(bytesRead==-1)break;baos.write(buf,0,bytesRead);}classStream.close();byte[]classData=baos.toByteArray();Class newClass=defineClass(className,classData,0,classData.length);resolveClass(newClass);return newClass;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2002-2005 The Apache Software Foundation*Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or*implied.**See the License for the specific language governing permissions and*limitations under the License.*/public abstract class AbstractParserControl implements ParserControl{public boolean isFinished(int lastOptionCode){return false;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class BugCLI126Test extends TestCase{public void testMultiplePropertyArgs()throws OptionException{PropertyOption conf=new PropertyOption(\"-P\",\"Properties for this process\",1);PropertyOption env=new PropertyOption(\"-C\",\"Properties for child processes\",2);GroupBuilder builder=new GroupBuilder();Group options=builder.withOption(conf).withOption(env).create();Parser parser=new Parser();parser.setGroup(options);CommandLine line=parser.parseAndHelp(new String[]{\"-Phome=.\",\"-Chome=/\"});assertEquals(\".\",line.getProperty(conf,\"home\"));assertEquals(\"/\",line.getProperty(env,\"home\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug32533Test extends TestCase{public void testBlah()throws OptionException{Option a1=new DefaultOptionBuilder().withLongName(\"a1\").create();Option b1=new DefaultOptionBuilder().withLongName(\"b1\").create();Option c1=new DefaultOptionBuilder().withLongName(\"c1\").create();Group b=new GroupBuilder().withOption(b1).create();Group c=new GroupBuilder().withOption(c1).create();Group a=new GroupBuilder().withOption(a1).withOption(b).withOption(c).create();Parser parser=new Parser();parser.setGroup(a);parser.parse(new String[]{\"--a1\",\"--b1\"});}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI133Test extends TestCase{public void testOrder()throws ParseException{Option optionA=new Option(\"a\",\"first\");Options opts=new Options();opts.addOption(optionA);PosixParser posixParser=new PosixParser();CommandLine line=posixParser.parse(opts,null);assertFalse(line.hasOption(null));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI80Test extends TestCase{public void testBug(){final String optName=\"option\";Argument arg=new ArgumentBuilder().withName(optName).withMaximum(1).create();Option option=new DefaultOptionBuilder().withArgument(arg).withDescription(\"singular option\").withLongName(optName).withShortName(\"o\").create();Group group=new GroupBuilder().withOption(option).create();Parser p=new Parser();p.setGroup(group);CommandLine cl=p.parseAndHelp(new String[]{\"-o\",\"yes\"});assertNotNull(\"Couldn't parse valid commandLine\",cl);assertEquals(\"Couldn't look up value by short name\",\"yes\",cl.getValue(\"-o\"));try{cl=p.parse(new String[]{\"-o\",\"yes\",\"-o\",\"jam\"});fail(\"Parsed invalid commandLine\");}catch(OptionException e){}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI18Test extends TestCase{public void testCLI18(){Options options=new Options();options.addOption(new Option(\"a\",\"aaa\",false,\"aaaaaaa\"));options.addOption(new Option(null,\"bbb\",false,\"bbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\"));options.addOption(new Option(\"c\",null,false,\"ccccccc\"));HelpFormatter formatter=new HelpFormatter();StringWriter out=new StringWriter();formatter.printHelp(new PrintWriter(out),80,\"foobar\",\"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\",options,2,2,\"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\"+'\\r'+'\\n'+\"rarrr\",true);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI18Test extends TestCase{public BugCLI18Test(){super();}public void testBug(){Option a=new DefaultOptionBuilder().withLongName(\"aaa\").withShortName(\"a\").withDescription(\"aaaaaaa\").create();Option b=new DefaultOptionBuilder().withLongName(\"bbb\").withDescription(\"bbbbbbbb dksh fkshd fkhs dkfhsdk fhskd hksdks dhfowehfsdhfkjshf skfhkshf sf jkshfk sfh skfh skf f\").create();Option c=new DefaultOptionBuilder().withLongName(\"ccc\").withShortName(\"c\").withDescription(\"ccccccc\").create();Group g=new GroupBuilder().withOption(a).withOption(b).withOption(c).create();HelpFormatter formatter=new HelpFormatter();StringWriter out=new StringWriter();formatter.setPrintWriter(new PrintWriter(out));formatter.setHeader(\"dsfkfsh kdh hsd hsdh fkshdf ksdh fskdh fsdh fkshfk sfdkjhskjh fkjh fkjsh khsdkj hfskdhf skjdfh ksf khf s\");formatter.setFooter(\"blort j jgj j jg jhghjghjgjhgjhg jgjhgj jhg jhg hjg jgjhghjg jhg hjg jhgjg jgjhghjg jg jgjhgjgjg jhg jhgjh\"+'\\r'+'\\n'+\"rarrr\");formatter.setGroup(g);formatter.setShellCommand(\"foobar\");formatter.print();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI12Test extends TestCase{public void testBug(){Argument arg=new ArgumentBuilder().withName(\"file\").create();Option option=new PropertyOption();Group group=new GroupBuilder().withOption(option).withOption(arg).create();Parser p=new Parser();p.setGroup(group);CommandLine cl=p.parseAndHelp(new String[]{\"-Dmyprop1=myval1\",\"-Dmyprop2=myval2\",\"myfile\"});if(cl==null){assertTrue(\"Couldn't parse valid commandLine\",false);}assertEquals(\"myval1\",cl.getProperty(\"myprop1\"));assertEquals(\"myval2\",cl.getProperty(\"myprop2\"));String extraArgs=(String)cl.getValue(arg);assertEquals(\"myfile\",extraArgs);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CommandLineTest extends TestCase{public void testGetOptionProperties()throws Exception{String[]args=new String[]{\"-Dparam1=value1\",\"-Dparam2=value2\",\"-Dparam3\",\"-Dparam4=value4\",\"-D\",\"--property\",\"foo=bar\"};Options options=new Options();options.addOption(OptionBuilder.withValueSeparator().hasOptionalArgs(2).create('D'));options.addOption(OptionBuilder.withValueSeparator().hasArgs(2).withLongOpt(\"property\").create());Parser parser=new GnuParser();CommandLine cl=parser.parse(options,args);Properties props=cl.getOptionProperties(\"D\");assertNotNull(\"null properties\",props);assertEquals(\"number of properties in \"+props,4,props.size());assertEquals(\"property 1\",\"value1\",props.getProperty(\"param1\"));assertEquals(\"property 2\",\"value2\",props.getProperty(\"param2\"));assertEquals(\"property 3\",\"true\",props.getProperty(\"param3\"));assertEquals(\"property 4\",\"value4\",props.getProperty(\"param4\"));assertEquals(\"property with long format\",\"bar\",cl.getOptionProperties(\"property\").getProperty(\"foo\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 1999-2001,2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BasicParser extends Parser{protected String[]flatten(Options options,String[]arguments,boolean stopAtNonOption){return arguments;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class InvalidArgumentException extends Exception{public InvalidArgumentException(final String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class AntTest extends TestCase{public void testAnt()throws OptionException{final DefaultOptionBuilder obuilder=new DefaultOptionBuilder();final ArgumentBuilder abuilder=new ArgumentBuilder();final GroupBuilder gbuilder=new GroupBuilder();final Group options=gbuilder.withName(\"ant\").withOption(obuilder.withShortName(\"help\").withDescription(\"print this message\").create()).withOption(obuilder.withShortName(\"projecthelp\").withDescription(\"print project help information\").create()).withOption(obuilder.withShortName(\"version\").withDescription(\"print the version information and exit\").create()).withOption(obuilder.withShortName(\"diagnostics\").withDescription(\"print information that might be helpful to diagnose or report problems.\").create()).withOption(obuilder.withShortName(\"quiet\").withShortName(\"q\").withDescription(\"be extra quiet\").create()).withOption(obuilder.withShortName(\"verbose\").withShortName(\"v\").withDescription(\"be extra verbose\").create()).withOption(obuilder.withShortName(\"debug\").withDescription(\"print debugging information\").create()).withOption(obuilder.withShortName(\"emacs\").withDescription(\"produce logging information without adornments\").create()).withOption(obuilder.withShortName(\"logfile\").withShortName(\"l\").withDescription(\"use given file for log\").withArgument(abuilder.withName(\"file\").withMinimum(1).withMaximum(1).create()).create()).withOption(obuilder.withShortName(\"logger\").withDescription(\"the class which is to perform logging\").withArgument(abuilder.withName(\"classname\").withMinimum(1).withMaximum(1).create()).create()).withOption(obuilder.withShortName(\"listener\").withDescription(\"add an instance of class as a project listener\").withArgument(abuilder.withName(\"classname\").withMinimum(1).withMaximum(1).create()).create()).withOption(obuilder.withShortName(\"buildfile\").withShortName(\"file\").withShortName(\"f\").withDescription(\"use given buildfile\").withArgument(abuilder.withName(\"file\").withMinimum(1).withMaximum(1).create()).create()).withOption(PropertyOption.INSTANCE).withOption(obuilder.withShortName(\"propertyfile\").withDescription(\"load all properties from file with-D properties taking precedence\").withArgument(abuilder.withName(\"name\").withMinimum(1).withMaximum(1).create()).create()).withOption(obuilder.withShortName(\"inputhandler\").withDescription(\"the class which will handle input requests\").withArgument(abuilder.withName(\"class\").withMinimum(1).withMaximum(1).create()).create()).withOption(obuilder.withShortName(\"find\").withDescription(\"search for buildfile towards the root of the filesystem and use it\").withArgument(abuilder.withName(\"file\").withMinimum(1).withMaximum(1).create()).create()).withOption(abuilder.withName(\"target\").create()).create();Parser parser=new Parser();parser.setGroup(options);CommandLine line=parser.parse(new String[]{\"-buildfile\",\"mybuild.xml\",\"-Dproperty=value\",\"-Dproperty1=value1\",\"-projecthelp\",\"compile\",\"docs\"});assertEquals(2,line.getProperties().size());assertEquals(\"value\",line.getProperty(\"property\"));assertEquals(\"value1\",line.getProperty(\"property1\"));assertEquals(\"mybuild.xml\",line.getValue(\"-buildfile\"));assertTrue(line.hasOption(\"-projecthelp\"));assertFalse(line.hasOption(\"-help\"));assertTrue(line.hasOption(\"target\"));final List targets=new ArrayList();targets.add(\"compile\");targets.add(\"docs\");assertEquals(targets,line.getValues(\"target\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CvsTest extends TestCase{public void testCVS(){final DefaultOptionBuilder obuilder=new DefaultOptionBuilder();final ArgumentBuilder abuilder=new ArgumentBuilder();final CommandBuilder cbuilder=new CommandBuilder();final GroupBuilder gbuilder=new GroupBuilder();final Group commands=gbuilder.withName(\"commands\").withOption(cbuilder.withName(\"add\").withName(\"ad\").withName(\"new\").withDescription(\"Add a new file/directory to the repository\").create()).withOption(cbuilder.withName(\"admin\").withName(\"adm\").withName(\"rcs\").withDescription(\"Administration front end for rcs\").create()).withOption(cbuilder.withName(\"annotate\").withName(\"ann\").withDescription(\"Show last revision where each line was modified\").create()).withOption(cbuilder.withName(\"checkout\").withName(\"co\").withName(\"get\").withDescription(\"Checkout sources for editing\").create()).withOption(cbuilder.withName(\"commit\").withName(\"ci\").withName(\"com\").withDescription(\"Check files into the repository\").create()).withOption(cbuilder.withName(\"diff\").withName(\"di\").withName(\"dif\").withDescription(\"Show differences between revisions\").create()).withOption(cbuilder.withName(\"edit\").withDescription(\"Get ready to edit a watched file\").create()).withOption(cbuilder.withName(\"editors\").withDescription(\"See who is editing a watched file\").create()).withOption(cbuilder.withName(\"export\").withName(\"exp\").withName(\"ex\").withDescription(\"Export sources from CVS,similar to checkout\").create()).withOption(cbuilder.withName(\"history\").withName(\"hi\").withName(\"his\").withDescription(\"Show repository access history\").create()).withOption(cbuilder.withName(\"import\").withName(\"im\").withName(\"imp\").withDescription(\"Import sources into CVS,using vendor branches\").create()).withOption(cbuilder.withName(\"init\").withDescription(\"Create a CVS repository if it doesn't exist\").create()).withOption(cbuilder.withName(\"log\").withName(\"lo\").withName(\"rlog\").withDescription(\"Print out history information for files\").create()).withOption(cbuilder.withName(\"login\").withName(\"logon\").withName(\"lgn\").withDescription(\"Prompt for password for authenticating server\").create()).withOption(cbuilder.withName(\"logout\").withDescription(\"Removes entry in.cvspass for remote repository\").create()).withOption(cbuilder.withName(\"rdiff\").withName(\"patch\").withName(\"pa\").withDescription(\"Create 'patch' format diffs between releases\").create()).withOption(cbuilder.withName(\"release\").withName(\"re\").withName(\"rel\").withDescription(\"Indicate that a Module is no longer in use\").create()).withOption(cbuilder.withName(\"remove\").withName(\"rm\").withName(\"delete\").withDescription(\"Remove an entry from the repository\").create()).withOption(cbuilder.withName(\"rtag\").withName(\"rt\").withName(\"rfreeze\").withDescription(\"Add a symbolic tag to a module\").create()).withOption(cbuilder.withName(\"status\").withName(\"st\").withName(\"stat\").withDescription(\"Display status information on checked out files\").create()).withOption(cbuilder.withName(\"tag\").withName(\"ta\").withName(\"freeze\").withDescription(\"Add a symbolic tag to checked out version of files\").create()).withOption(cbuilder.withName(\"unedit\").withDescription(\"Undo an edit command\").create()).withOption(cbuilder.withName(\"update\").withName(\"up\").withName(\"upd\").withDescription(\"Bring work tree in sync with repository\").create()).withOption(cbuilder.withName(\"watch\").withDescription(\"Set watches\").create()).withOption(cbuilder.withName(\"watchers\").withDescription(\"See who is watching a file\").create()).withOption(cbuilder.withName(\"version\").withName(\"ve\").withName(\"ver\").withDescription(\"????\").create()).withOption(ArgumentTest.buildTargetsArgument()).create();final Group cvsOptions=new GroupBuilder().withName(\"cvs-options\").withOption(obuilder.withShortName(\"H\").withDescription(\"Displays usage information for command.\").create()).withOption(obuilder.withShortName(\"Q\").withDescription(\"Cause CVS to be really quiet.\").create()).withOption(obuilder.withShortName(\"q\").withDescription(\"Cause CVS to be somewhat quiet.\").create()).withOption(obuilder.withShortName(\"r\").withDescription(\"Make checked-out files read-only.\").create()).withOption(obuilder.withShortName(\"w\").withDescription(\"Make checked-out files read-write(default).\").create()).withOption(obuilder.withShortName(\"l\").withDescription(\"Turn history logging off.\").create()).withOption(obuilder.withShortName(\"n\").withDescription(\"Do not execute anything that will change the disk.\").create()).withOption(obuilder.withShortName(\"t\").withDescription(\"Show trace of program execution--try with-n.\").create()).withOption(obuilder.withShortName(\"v\").withDescription(\"CVS version and copyright.\").create()).withOption(obuilder.withLongName(\"crlf\").withDescription(\"Use the Dos line feed for text files(default).\").create()).withOption(obuilder.withLongName(\"lf\").withDescription(\"Use the Unix line feed for text files.\").create()).withOption(obuilder.withShortName(\"T\").withDescription(\"Use 'tmpdir' for temporary files.\").withArgument(abuilder.withName(\"tmpdir\").create()).create()).withOption(obuilder.withShortName(\"e\").withDescription(\"Use 'editor' for editing log information.\").withArgument(abuilder.withName(\"editor\").create()).create()).withOption(obuilder.withShortName(\"d\").withDescription(\"Overrides $CVSROOT as the root of the CVS tree.\").withArgument(abuilder.withName(\"CVS_root\").create()).create()).withOption(obuilder.withShortName(\"f\").withDescription(\"Do not use the ~/.cvsrc file.\").create()).withOption(obuilder.withShortName(\"z\").withDescription(\"Use compression level '#' for net traffic.\").withArgument(abuilder.withName(\"#\").create()).create()).withOption(obuilder.withShortName(\"a\").withDescription(\"Authenticate all net traffic.\").create()).withOption(obuilder.withShortName(\"s\").withDescription(\"Set CVS user variable.\").withArgument(abuilder.withName(\"VAR=VAL\").create()).create()).withOption(commands).create();assertNotNull(cvsOptions);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug13886Test extends TestCase{public Bug13886Test(final String name){super(name);}public void testMandatoryGroup()throws Exception{final DefaultOptionBuilder obuilder=new DefaultOptionBuilder();final GroupBuilder gbuilder=new GroupBuilder();final Option a=obuilder.withShortName(\"a\").create();final Option b=obuilder.withShortName(\"b\").create();final Group options=gbuilder.withOption(a).withOption(b).withMaximum(1).withMinimum(1).create();final Parser parser=new Parser();parser.setGroup(options);try{parser.parse(new String[]{});fail(\"Expected MissingOptionException not caught\");}catch(final OptionException exp){assertEquals(\"Missing option-a|-b\",exp.getMessage());}try{parser.parse(new String[]{\"-a\"});}catch(final OptionException exp){fail(\"Unexpected MissingOptionException caught\");}try{parser.parse(new String[]{\"-b\"});}catch(final OptionException exp){fail(\"Unexpected MissingOptionException caught\");}try{parser.parse(new String[]{\"-a\",\"-b\"});fail(\"Expected UnexpectedOptionException not caught\");}catch(final OptionException exp){assertEquals(\"Unexpected-b while processing-a|-b\",exp.getMessage());}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug13935Test extends TestCase{public Bug13935Test(final String name){super(name);}public void testRequiredGroup()throws Exception{final DefaultOptionBuilder obuilder=new DefaultOptionBuilder();final ArgumentBuilder abuilder=new ArgumentBuilder();final GroupBuilder gbuilder=new GroupBuilder();final Option testOption=obuilder.withShortName(\"a\").withArgument(abuilder.withName(\"quoted string\").create()).create();final Group options=gbuilder.withOption(testOption).create();final Parser parser=new Parser();parser.setGroup(options);final CommandLine cmdLine=parser.parse(new String[]{\"-a\",\"\\\"two tokens\\\"\"});assertTrue(cmdLine.hasOption(\"-a\"));assertEquals(\"two tokens\",cmdLine.getValue(\"-a\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug15046Test extends TestCase{public Bug15046Test(String name){super(name);}public void testParamNamedAsOption()throws Exception{final String[]CLI_ARGS=new String[]{\"-z\",\"c\"};DefaultOptionBuilder obuilder=new DefaultOptionBuilder();ArgumentBuilder abuilder=new ArgumentBuilder();Option option=obuilder.withShortName(\"z\").withLongName(\"timezone\").withDescription(\"affected option\").withArgument(abuilder.withName(\"timezone\").create()).create();GroupBuilder gbuilder=new GroupBuilder();Group options=gbuilder.withName(\"bug15046\").withOption(option).create();Parser parser=new Parser();parser.setGroup(options);CommandLine line=parser.parse(CLI_ARGS);assertEquals(\"c\",line.getValue(\"-z\"));Option c=obuilder.withShortName(\"c\").withLongName(\"conflict\").withDescription(\"conflicting option\").withArgument(abuilder.withName(\"conflict\").create()).create();options=gbuilder.withName(\"bug15046\").withOption(option).withOption(c).create();parser.setGroup(options);line=parser.parse(CLI_ARGS);assertEquals(\"c\",line.getValue(\"-z\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug15648Test extends TestCase{public Bug15648Test(final String name){super(name);}public void testQuotedArgumentValue()throws Exception{final DefaultOptionBuilder obuilder=new DefaultOptionBuilder();final ArgumentBuilder abuilder=new ArgumentBuilder();final GroupBuilder gbuilder=new GroupBuilder();final Option testOption=obuilder.withShortName(\"a\").withArgument(abuilder.withName(\"quoted string\").create()).create();final Group options=gbuilder.withOption(testOption).create();final Parser parser=new Parser();parser.setGroup(options);final CommandLine cmdLine=parser.parse(new String[]{\"-a\",\"\\\"two tokens\\\"\"});assertTrue(cmdLine.hasOption(\"-a\"));assertEquals(\"two tokens\",cmdLine.getValue(\"-a\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug27575Test extends TestCase{public void testRequiredOptions(){PatternBuilder builder=new PatternBuilder();builder.withPattern(\"hc!<\");Option option=builder.create();assertTrue(option instanceof GroupImpl);GroupImpl group=(GroupImpl)option;Iterator i=group.getOptions().iterator();assertEquals(\"[-h]\",i.next().toString());assertEquals(\"-c<arg>\",i.next().toString());assertFalse(i.hasNext());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Bug28005Test extends TestCase{public void testInfiniteLoop(){final DefaultOptionBuilder optionBuilder=new DefaultOptionBuilder();final ArgumentBuilder argumentBuilder=new ArgumentBuilder();final GroupBuilder groupBuilder=new GroupBuilder();final CommandBuilder commandBuilder=new CommandBuilder();final Option inputFormatOption=optionBuilder.withLongName(\"input-format\").create();final Argument argument=argumentBuilder.withName(\"file\").create();final Group children=groupBuilder.withName(\"options\").withOption(inputFormatOption).create();final Option command=commandBuilder.withName(\"convert\").withChildren(children).withArgument(argument).create();final Group root=groupBuilder.withName(\"commands\").withOption(command).create();final Parser parser=new Parser();parser.setGroup(root);final String[]args=new String[]{\"convert\",\"test.txt\",\"--input-format\",\"a\"};try{parser.parse(args);fail(\"a isn't valid!!\");}catch(OptionException e){assertEquals(\"Unexpected a while processing commands\",e.getMessage());}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class ArgumentTestCase extends OptionTestCase{public abstract void testProcessValues()throws OptionException;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class ParentTestCase extends OptionTestCase{public abstract void testProcessParent()throws OptionException;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class ProtectedClass{protected ProtectedClass(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI150Test extends TestCase{public void testNegativeNumber()throws OptionException{final DefaultOptionBuilder oBuilder=new DefaultOptionBuilder();final ArgumentBuilder aBuilder=new ArgumentBuilder();final GroupBuilder gBuilder=new GroupBuilder();final Argument numArg=aBuilder.withValidator(NumberValidator.getNumberInstance()).withMinimum(1).withMaximum(1).create();final Option numOpt=oBuilder.withLongName(\"num\").withArgument(numArg).create();final Group options=gBuilder.withOption(numOpt).create();final Parser parser=new Parser();parser.setGroup(options);CommandLine cl=parser.parse(new String[]{\"--num\",\"-42\"});Number num=(Number)cl.getValue(numOpt);assertEquals(\"Wrong option value\",-42,num.intValue());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI13Test extends TestCase{public void testCLI13()throws ParseException{final String debugOpt=\"debug\";Option debug=OptionBuilder.withArgName(debugOpt).withDescription(\"turn on debugging\").withLongOpt(debugOpt).hasArg().create('d');Options options=new Options();options.addOption(debug);CommandLine commandLine=new PosixParser().parse(options,new String[]{\"-d\",\"true\"});assertEquals(\"true\",commandLine.getOptionValue(debugOpt));assertEquals(\"true\",commandLine.getOptionValue('d'));assertTrue(commandLine.hasOption('d'));assertTrue(commandLine.hasOption(debugOpt));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BugCLI144Test extends TestCase{public void testFileValidator(){final DefaultOptionBuilder obuilder=new DefaultOptionBuilder();final ArgumentBuilder abuilder=new ArgumentBuilder();final GroupBuilder gbuilder=new GroupBuilder();DefaultOption fileNameOption=obuilder.withShortName(\"f\").withLongName(\"file-name\").withRequired(true).withDescription(\"name of an existing file\").withArgument(abuilder.withName(\"file-name\").withValidator(FileValidator.getExistingFileInstance()).create()).create();Group options=gbuilder.withName(\"options\").withOption(fileNameOption).create();Parser parser=new Parser();parser.setHelpTrigger(\"--help\");parser.setGroup(options);final String fileName=\"src/test/org/apache/commons/cli2/bug/BugCLI144Test.java\";CommandLine cl=parser.parseAndHelp(new String[]{\"--file-name\",fileName});assertNotNull(cl);assertEquals(\"Wrong file\",new File(fileName),cl.getValue(fileNameOption));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class BugCLI122Test extends TestCase{public void testArgumentWhichStartsWithDash()throws OptionException{Argument wdArg=new ArgumentBuilder().withName(\"anything\").withMaximum(1).withMinimum(1).withInitialSeparator('=').create();Option wdOpt=new DefaultOptionBuilder().withArgument(wdArg).withDescription(\"anything,foo or-foo\").withLongName(\"argument\").withShortName(\"a\").create();Group group=new GroupBuilder().withOption(wdOpt).create();Parser p=new Parser();p.setGroup(group);CommandLine normal=p.parse(new String[]{\"-a\",\"foo\"});assertNotNull(normal);assertEquals(normal.getValue(wdOpt),\"foo\");CommandLine withDash=p.parse(new String[]{\"--argument\",\"\\\"-foo\\\"\"});assertNotNull(withDash);assertEquals(\"-foo\",withDash.getValue(wdOpt));CommandLine withDashAndEquals=p.parse(new String[]{\"--argument=-foo\"});assertNotNull(withDashAndEquals);assertEquals(\"-foo\",withDashAndEquals.getValue(wdOpt));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DefaultParserTest extends ParserTestCase{public void setUp(){super.setUp();parser=new DefaultParser();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class CharSequenceUtils{static boolean regionMatches(final CharSequence cs,final boolean ignoreCase,final int thisStart,final CharSequence substring,final int start,final int length){if(cs instanceof String && substring instanceof String){return((String)cs).regionMatches(ignoreCase,thisStart,(String)substring,start,length);}int index1=thisStart;int index2=start;int tmpLen=length;while(tmpLen-->0){char c1=cs.charAt(index1++);char c2=substring.charAt(index2++);if(c1==c2){continue;}if(!ignoreCase){return false;}if(Character.toUpperCase(c1)!=Character.toUpperCase(c2)&& Character.toLowerCase(c1)!=Character.toLowerCase(c2)){return false;}}return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class B64Test{@Test public void testB64from24bit(){StringBuilder buffer=new StringBuilder(\"\");B64.b64from24bit((byte)8,(byte)16,(byte)64,2,buffer);B64.b64from24bit((byte)7,(byte)77,(byte)120,4,buffer);assertEquals(\"./spo/\",buffer.toString());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UtilsTest{public void testConstructor(){new Utils();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright(C)1993-2003 SEAGULL**AllTests.java*Created on Nov 5,2003,8:25:55 PM**/public class AllTests{public static Test suite(){TestSuite suite=new TestSuite(\"Test for org.apache.commons.codec.language\");suite.addTest(MetaphoneTest.suite());suite.addTest(SoundexTest.suite());suite.addTest(RefinedSoundexTest.suite());suite.addTest(DoubleMetaphoneTest.suite());return suite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class Utils{static int digit16(byte b)throws DecoderException{int i=Character.digit((char)b,16);if(i==-1){throw new DecoderException(\"Invalid URL encoding: not a valid digit(radix \"+URLCodec.RADIX+\"): \"+b);}return i;}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class AbstractNavigableSetTest<E>extends AbstractSortedSetTest<E>{public AbstractNavigableSetTest(final String name){super(name);}@Override public abstract NavigableSet<E>makeObject();@Override public NavigableSet<E>makeFullCollection(){return(NavigableSet<E>)super.makeFullCollection();}@Override public NavigableSet<E>makeConfirmedCollection(){return new TreeSet<E>();}@Override public void verify(){super.verify();final Iterator<E>colliter=getCollection().descendingIterator();final Iterator<E>confiter=getConfirmed().descendingIterator();while(colliter.hasNext()){final E element=colliter.next();final E confelement=confiter.next();assertEquals(\"Element appears to be out of order.\",confelement,element);assertEquals(\"Incorrect element returned by higher().\",getConfirmed().higher(element),getCollection().higher(element));assertEquals(\"Incorrect element returned by lower().\",getConfirmed().lower(element),getCollection().lower(element));assertEquals(\"Incorrect element returned by floor().\",getConfirmed().floor(element),getCollection().floor(element));assertEquals(\"Incorrect element returned by ceiling().\",getConfirmed().ceiling(element),getCollection().ceiling(element));}}@Override @SuppressWarnings(\"unchecked\")public E[]getFullNonNullElements(){final Object[]elements=new Object[30];for(int i=0;i<30;i++){elements[i]=Integer.valueOf(i+i+1);}return(E[])elements;}@Override @SuppressWarnings(\"unchecked\")public E[]getOtherNonNullElements(){final Object[]elements=new Object[30];for(int i=0;i<30;i++){elements[i]=Integer.valueOf(i+i+2);}return(E[])elements;}public BulkTest bulkTestNavigableSetSubSet(){final int length=getFullElements().length;final int lobound=length/3;final int hibound=lobound*2;return new TestNavigableSetSubSet(lobound,hibound,false);}public BulkTest bulkTestNavigableSetHeadSet(){final int length=getFullElements().length;final int lobound=length/3;final int hibound=lobound*2;return new TestNavigableSetSubSet(hibound,true,true);}public BulkTest bulkTestNavigableSetTailSet(){final int length=getFullElements().length;final int lobound=length/3;return new TestNavigableSetSubSet(lobound,false,false);}public class TestNavigableSetSubSet extends AbstractNavigableSetTest<E>{private int m_Type;private int m_LowBound;private int m_HighBound;private E[]m_FullElements;private E[]m_OtherElements;private boolean m_Inclusive;@SuppressWarnings(\"unchecked\")public TestNavigableSetSubSet(final int bound,final boolean head,final boolean inclusive){super(\"TestNavigableSetSubSet\");if(head){m_Type=TYPE_HEADSET;m_Inclusive=inclusive;m_HighBound=bound;final int realBound=inclusive ? bound+1 : bound;m_FullElements=(E[])new Object[realBound];System.arraycopy(AbstractNavigableSetTest.this.getFullElements(),0,m_FullElements,0,realBound);m_OtherElements=(E[])new Object[bound-1];//src src_pos dst dst_pos length System.arraycopy(AbstractNavigableSetTest.this.getOtherElements(),0,m_OtherElements,0,bound-1);}else{m_Type=TYPE_TAILSET;m_Inclusive=inclusive;m_LowBound=bound;final Object[]allelements=AbstractNavigableSetTest.this.getFullElements();final int realBound=inclusive ? bound : bound+1;m_FullElements=(E[])new Object[allelements.length-realBound];System.arraycopy(allelements,realBound,m_FullElements,0,allelements.length-realBound);m_OtherElements=(E[])new Object[allelements.length-bound-1];//src src_pos dst dst_pos length System.arraycopy(AbstractNavigableSetTest.this.getOtherElements(),bound,m_OtherElements,0,allelements.length-bound-1);}}@SuppressWarnings(\"unchecked\")public TestNavigableSetSubSet(final int lobound,final int hibound,final boolean inclusive){super(\"TestNavigableSetSubSet\");m_Type=TYPE_SUBSET;m_LowBound=lobound;m_HighBound=hibound;m_Inclusive=inclusive;final int fullLoBound=inclusive ? lobound : lobound+1;final int length=hibound-lobound+1-(inclusive ? 0 : 2);m_FullElements=(E[])new Object[length];System.arraycopy(AbstractNavigableSetTest.this.getFullElements(),fullLoBound,m_FullElements,0,length);final int otherLength=hibound-lobound;m_OtherElements=(E[])new Object[otherLength-1];//src src_pos dst dst_pos length System.arraycopy(AbstractNavigableSetTest.this.getOtherElements(),lobound,m_OtherElements,0,otherLength-1);}@Override public boolean isNullSupported(){return AbstractNavigableSetTest.this.isNullSupported();}@Override public boolean isAddSupported(){return AbstractNavigableSetTest.this.isAddSupported();}@Override public boolean isRemoveSupported(){return AbstractNavigableSetTest.this.isRemoveSupported();}@Override public boolean isFailFastSupported(){return AbstractNavigableSetTest.this.isFailFastSupported();}@Override public E[]getFullElements(){return m_FullElements;}@Override public E[]getOtherElements(){return m_OtherElements;}private NavigableSet<E>getSubSet(final NavigableSet<E>set){final E[]elements=AbstractNavigableSetTest.this.getFullElements();switch(m_Type){case TYPE_SUBSET: return set.subSet(elements[m_LowBound],m_Inclusive,elements[m_HighBound],m_Inclusive);case TYPE_HEADSET: return set.headSet(elements[m_HighBound],m_Inclusive);case TYPE_TAILSET: return set.tailSet(elements[m_LowBound],m_Inclusive);default: return null;}}@Override public NavigableSet<E>makeObject(){return getSubSet(AbstractNavigableSetTest.this.makeObject());}@Override public NavigableSet<E>makeFullCollection(){return getSubSet(AbstractNavigableSetTest.this.makeFullCollection());}@Override public boolean isTestSerialization(){return false;}@Override public BulkTest bulkTestSortedSetSubSet(){return null;}@Override public BulkTest bulkTestSortedSetHeadSet(){return null;}@Override public BulkTest bulkTestSortedSetTailSet(){return null;}@Override public BulkTest bulkTestNavigableSetSubSet(){return null;}@Override public BulkTest bulkTestNavigableSetHeadSet(){return null;}@Override public BulkTest bulkTestNavigableSetTailSet(){return null;}static final int TYPE_SUBSET=0;static final int TYPE_TAILSET=1;static final int TYPE_HEADSET=2;}@Override public NavigableSet<E>getCollection(){return(NavigableSet<E>)super.getCollection();}@Override public NavigableSet<E>getConfirmed(){return(NavigableSet<E>)super.getConfirmed();}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessCharList.java,v 1.1 2003/04/16 18:32:39 rwaldhoff Exp $*====================================================================*The Apache Software License,Version 1.1**Copyright(c)2002-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public abstract class RandomAccessCharList extends AbstractCharCollection implements CharList{protected RandomAccessCharList(){}public abstract char get(int index);public abstract int size();public char removeElementAt(int index){throw new UnsupportedOperationException();}public char set(int index,char element){throw new UnsupportedOperationException();}public void add(int index,char element){throw new UnsupportedOperationException();}public boolean add(char element){add(size(),element);return true;}public boolean addAll(int index,CharCollection collection){boolean modified=false;for(CharIterator iter=collection.iterator();iter.hasNext();){add(index++,iter.next());modified=true;}return modified;}public int indexOf(char element){int i=0;for(CharIterator iter=iterator();iter.hasNext();){if(iter.next()==element){return i;}else{i++;}}return-1;}public int lastIndexOf(char element){for(CharListIterator iter=listIterator(size());iter.hasPrevious();){if(iter.previous()==element){return iter.nextIndex();}}return-1;}public CharIterator iterator(){return listIterator();}public CharListIterator listIterator(){return listIterator(0);}public CharListIterator listIterator(int index){return new RandomAccessCharListIterator(this,index);}public CharList subList(int fromIndex,int toIndex){return new RandomAccessCharSubList(this,fromIndex,toIndex);}public boolean equals(Object that){if(this==that){return true;}else if(that instanceof CharList){CharList thatList=(CharList)that;if(size()!=thatList.size()){return false;}for(CharIterator thatIter=thatList.iterator(),thisIter=iterator();thisIter.hasNext();){if(thisIter.next()!=thatIter.next()){return false;}}return true;}else{return false;}}public int hashCode(){int hash=1;for(CharIterator iter=iterator();iter.hasNext();){hash=31*hash+((int)(iter.next()));}return hash;}protected int getModCount(){return _modCount;}protected void incrModCount(){_modCount++;}private int _modCount=0;private static class ComodChecker{ComodChecker(RandomAccessCharList source){_source=source;resyncModCount();}protected RandomAccessCharList getList(){return _source;}protected void assertNotComodified()throws ConcurrentModificationException{if(_expectedModCount!=getList().getModCount()){throw new ConcurrentModificationException();}}protected void resyncModCount(){_expectedModCount=getList().getModCount();}private RandomAccessCharList _source=null;private int _expectedModCount=-1;}protected static class RandomAccessCharListIterator extends ComodChecker implements CharListIterator{RandomAccessCharListIterator(RandomAccessCharList list,int index){super(list);if(index<0 || index>getList().size()){throw new IndexOutOfBoundsException(\"Index \"+index+\" not in[0,\"+getList().size()+\")\");}else{_nextIndex=index;resyncModCount();}}public boolean hasNext(){assertNotComodified();return _nextIndex<getList().size();}public boolean hasPrevious(){assertNotComodified();return _nextIndex>0;}public int nextIndex(){assertNotComodified();return _nextIndex;}public int previousIndex(){assertNotComodified();return _nextIndex-1;}public char next(){assertNotComodified();if(!hasNext()){throw new NoSuchElementException();}else{char val=getList().get(_nextIndex);_lastReturnedIndex=_nextIndex;_nextIndex++;return val;}}public char previous(){assertNotComodified();if(!hasPrevious()){throw new NoSuchElementException();}else{char val=getList().get(_nextIndex-1);_lastReturnedIndex=_nextIndex-1;_nextIndex--;return val;}}public void add(char value){assertNotComodified();getList().add(_nextIndex,value);_nextIndex++;_lastReturnedIndex=-1;resyncModCount();}public void remove(){assertNotComodified();if(-1==_lastReturnedIndex){throw new IllegalStateException();}else{getList().removeElementAt(_lastReturnedIndex);_lastReturnedIndex=-1;_nextIndex--;resyncModCount();}}public void set(char value){assertNotComodified();if(-1==_lastReturnedIndex){throw new IllegalStateException();}else{getList().set(_lastReturnedIndex,value);resyncModCount();}}private int _nextIndex=0;private int _lastReturnedIndex=-1;}protected static class RandomAccessCharSubList extends RandomAccessCharList implements CharList{RandomAccessCharSubList(RandomAccessCharList list,int fromIndex,int toIndex){if(fromIndex<0 || toIndex>list.size()){throw new IndexOutOfBoundsException();}else if(fromIndex>toIndex){throw new IllegalArgumentException();}else{_list=list;_offset=fromIndex;_limit=toIndex-fromIndex;_comod=new ComodChecker(list);_comod.resyncModCount();}}public char get(int index){checkRange(index);_comod.assertNotComodified();return _list.get(toUnderlyingIndex(index));}public char removeElementAt(int index){checkRange(index);_comod.assertNotComodified();char val=_list.removeElementAt(toUnderlyingIndex(index));_limit--;_comod.resyncModCount();incrModCount();return val;}public char set(int index,char element){checkRange(index);_comod.assertNotComodified();char val=_list.set(toUnderlyingIndex(index),element);incrModCount();_comod.resyncModCount();return val;}public void add(int index,char element){checkRangeIncludingEndpoint(index);_comod.assertNotComodified();_list.add(toUnderlyingIndex(index),element);_limit++;_comod.resyncModCount();incrModCount();}public int size(){_comod.assertNotComodified();return _limit;}private void checkRange(int index){if(index<0 || index>=size()){throw new IndexOutOfBoundsException(\"index \"+index+\" not in[0,\"+size()+\")\");}}private void checkRangeIncludingEndpoint(int index){if(index<0 || index>size()){throw new IndexOutOfBoundsException(\"index \"+index+\" not in[0,\"+size()+\"]\");}}private int toUnderlyingIndex(int index){return(index+_offset);}private int _offset=0;private int _limit=0;private RandomAccessCharList _list=null;private ComodChecker _comod=null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/UniqueFilterIterator.java,v 1.1 2002/04/09 16:43:19 morgand Exp $*$Revision: 1.1 $*$Date: 2002/04/09 16:43:19 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class UniqueFilterIterator extends FilterIterator{public UniqueFilterIterator(Iterator iterator){super(iterator,new UniquePredicate());}private static class UniquePredicate implements Predicate{HashSet set=new HashSet();public boolean evaluate(Object object){return set.add(object);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ComparableComparator implements Comparator{public ComparableComparator(){}public int compare(Object o1,Object o2){if((o1==null)||(o2==null)){throw new ClassCastException(\"There were nulls in the arguments for this method: \"+\"compare(\"+o1+\",\"+o2+\")\");}if(o1 instanceof Comparable){if(o2 instanceof Comparable){int result1=((Comparable)o1).compareTo(o2);int result2=((Comparable)o2).compareTo(o1);if(result1==0 && result2==0){return 0;}else if(result1<0 && result2>0){return result1;}else if(result1>0 && result2<0){return result1;}else{throw new ClassCastException(\"o1 not comparable to o2\");}}else{throw new ClassCastException(\"The first argument of this method was not a Comparable: \"+o2.getClass().getName());}}else if(o2 instanceof Comparable){throw new ClassCastException(\"The second argument of this method was not a Comparable: \"+o1.getClass().getName());}else{throw new ClassCastException(\"Both arguments of this method were not Comparables: \"+o1.getClass().getName()+\" and \"+o2.getClass().getName());}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class UrlComparator implements Comparator{public UrlComparator(){}public int compare(Object o1,Object o2){if((o1 instanceof URL)&&(o2 instanceof URL)){URL u1=(URL)o1;URL u2=(URL)o2;int ret=0;ret=u1.getHost().compareTo(u2.getHost());if(ret!=0){return ret;}ret=u1.getPath().compareTo(u2.getPath());if(ret!=0){return ret;}ret=u1.getProtocol().compareTo(u2.getProtocol());if(ret!=0){return ret;}if(u1.getPort()<u2.getPort()){return-1;}else if(u1.getPort()<u2.getPort()){return 1;}}return 0;}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE file.*/public class ArrayIterator implements Iterator{private Object[]array;private int index=-1;public ArrayIterator(){}public ArrayIterator(Object[]array){this.array=array;}public boolean hasNext(){return++index>=0 && index<array.length;}public Object next(){return array[index];}public void remove(){throw new UnsupportedOperationException(\"remove()method is not supported\");}public Object[]getArray(){return array;}public void setArray(Object[]array){this.array=array;this.index=-1;}}"
    },
    {
        "code_smells": [
            "LazyClass",
            "RefusedBequest"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE file.*/public class EnumerationIterator implements Iterator{private Enumeration enumeration;public EnumerationIterator(){}public EnumerationIterator(Enumeration enumeration){this.enumeration=enumeration;}public boolean hasNext(){return enumeration.hasMoreElements();}public Object next(){return enumeration.nextElement();}public void remove(){throw new UnsupportedOperationException(\"remove()method is not supported\");}public Enumeration getEnumeration(){return enumeration;}public void setEnumeration(Enumeration enumeration){this.enumeration=enumeration;}}"
    },
    {
        "code_smells": [
            "LazyClass",
            "RefusedBequest"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE file.*/public class IteratorEnumeration implements Enumeration{private Iterator iterator;public IteratorEnumeration(){}public IteratorEnumeration(Iterator iterator){this.iterator=iterator;}public boolean hasMoreElements(){return iterator.hasNext();}public Object nextElement(){return iterator.next();}public Iterator getIterator(){return iterator;}public void setIterator(Iterator iterator){this.iterator=iterator;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE file.*/public class ProxyIterator implements Iterator{private Iterator iterator;public ProxyIterator(){}public ProxyIterator(Iterator iterator){this.iterator=iterator;}public boolean hasNext(){return getIterator().hasNext();}public Object next(){return getIterator().next();}public void remove(){getIterator().remove();}public Iterator getIterator(){return iterator;}public void setIterator(Iterator iterator){this.iterator=iterator;}}"
    },
    {
        "code_smells": [
            "LazyClass",
            "RefusedBequest"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE file.*/public class SingletonIterator implements Iterator{private boolean first=true;private Object object;public SingletonIterator(Object object){this.object=object;}public boolean hasNext(){return first;}public Object next(){if(!first){throw new NoSuchElementException();}Object answer=object;object=null;first=false;return answer;}public void remove(){throw new UnsupportedOperationException(\"remove()is not supported by this iterator\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/observed/standard/Attic/StandardPreModificationEvent.java,v 1.1 2003/09/06 18:59:09 scolebourne Exp $*====================================================================**The Apache Software License,Version 1.1**Copyright(c)2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgement may appear in the software itself,*if and wherever such third-party acknowledgements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class StandardPreModificationEvent extends StandardModificationEvent{public StandardPreModificationEvent(final Collection collection,final ModificationHandler handler,final int type,final int preSize,final int index,final Object object,final int repeat,final Object previous){super(collection,handler,type,preSize,index,object,repeat,previous);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/test/org/apache/commons/collections/Attic/TestMap.java,v 1.1 2001/04/20 16:54:04 rwaldhoff Exp $*$Revision: 1.1 $*$Date: 2001/04/20 16:54:04 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public abstract class TestMap extends TestObject{public TestMap(String testName){super(testName);}public abstract Map makeMap();public Object makeObject(){return makeMap();}protected Object tryToPut(Map map,Object key,Object val){try{return map.put(key,val);}catch(UnsupportedOperationException e){return null;}catch(ClassCastException e){return null;}catch(IllegalArgumentException e){return null;}catch(NullPointerException e){return null;}catch(Throwable t){t.printStackTrace();fail(\"Map.put should only throw UnsupportedOperationException,ClassCastException,IllegalArgumentException or NullPointerException.Found \"+t.toString());return null;}}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessByteList.java,v 1.1 2003/04/15 01:55:23 rwaldhoff Exp $*====================================================================*The Apache Software License,Version 1.1**Copyright(c)2002-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public abstract class RandomAccessByteList extends AbstractByteCollection implements ByteList{protected RandomAccessByteList(){}public abstract byte get(int index);public abstract int size();public byte removeElementAt(int index){throw new UnsupportedOperationException();}public byte set(int index,byte element){throw new UnsupportedOperationException();}public void add(int index,byte element){throw new UnsupportedOperationException();}public boolean add(byte element){add(size(),element);return true;}public boolean addAll(int index,ByteCollection collection){boolean modified=false;for(ByteIterator iter=collection.iterator();iter.hasNext();){add(index++,iter.next());modified=true;}return modified;}public int indexOf(byte element){int i=0;for(ByteIterator iter=iterator();iter.hasNext();){if(iter.next()==element){return i;}else{i++;}}return-1;}public int lastIndexOf(byte element){for(ByteListIterator iter=listIterator(size());iter.hasPrevious();){if(iter.previous()==element){return iter.nextIndex();}}return-1;}public ByteIterator iterator(){return listIterator();}public ByteListIterator listIterator(){return listIterator(0);}public ByteListIterator listIterator(int index){return new RandomAccessByteListIterator(this,index);}public ByteList subList(int fromIndex,int toIndex){return new RandomAccessByteSubList(this,fromIndex,toIndex);}public boolean equals(Object that){if(this==that){return true;}else if(that instanceof ByteList){ByteList thatList=(ByteList)that;if(size()!=thatList.size()){return false;}for(ByteIterator thatIter=thatList.iterator(),thisIter=iterator();thisIter.hasNext();){if(thisIter.next()!=thatIter.next()){return false;}}return true;}else{return false;}}public int hashCode(){int hash=1;for(ByteIterator iter=iterator();iter.hasNext();){hash=31*hash+((int)(iter.next()));}return hash;}protected int getModCount(){return _modCount;}protected void incrModCount(){_modCount++;}private int _modCount=0;private static class ComodChecker{ComodChecker(RandomAccessByteList source){_source=source;resyncModCount();}protected RandomAccessByteList getList(){return _source;}protected void assertNotComodified()throws ConcurrentModificationException{if(_expectedModCount!=getList().getModCount()){throw new ConcurrentModificationException();}}protected void resyncModCount(){_expectedModCount=getList().getModCount();}private RandomAccessByteList _source=null;private int _expectedModCount=-1;}protected static class RandomAccessByteListIterator extends ComodChecker implements ByteListIterator{RandomAccessByteListIterator(RandomAccessByteList list,int index){super(list);if(index<0 || index>getList().size()){throw new IndexOutOfBoundsException(\"Index \"+index+\" not in[0,\"+getList().size()+\")\");}else{_nextIndex=index;resyncModCount();}}public boolean hasNext(){assertNotComodified();return _nextIndex<getList().size();}public boolean hasPrevious(){assertNotComodified();return _nextIndex>0;}public int nextIndex(){assertNotComodified();return _nextIndex;}public int previousIndex(){assertNotComodified();return _nextIndex-1;}public byte next(){assertNotComodified();if(!hasNext()){throw new NoSuchElementException();}else{byte val=getList().get(_nextIndex);_lastReturnedIndex=_nextIndex;_nextIndex++;return val;}}public byte previous(){assertNotComodified();if(!hasPrevious()){throw new NoSuchElementException();}else{byte val=getList().get(_nextIndex-1);_lastReturnedIndex=_nextIndex-1;_nextIndex--;return val;}}public void add(byte value){assertNotComodified();getList().add(_nextIndex,value);_nextIndex++;_lastReturnedIndex=-1;resyncModCount();}public void remove(){assertNotComodified();if(-1==_lastReturnedIndex){throw new IllegalStateException();}else{getList().removeElementAt(_lastReturnedIndex);_lastReturnedIndex=-1;_nextIndex--;resyncModCount();}}public void set(byte value){assertNotComodified();if(-1==_lastReturnedIndex){throw new IllegalStateException();}else{getList().set(_lastReturnedIndex,value);resyncModCount();}}private int _nextIndex=0;private int _lastReturnedIndex=-1;}protected static class RandomAccessByteSubList extends RandomAccessByteList implements ByteList{RandomAccessByteSubList(RandomAccessByteList list,int fromIndex,int toIndex){if(fromIndex<0 || toIndex>list.size()){throw new IndexOutOfBoundsException();}else if(fromIndex>toIndex){throw new IllegalArgumentException();}else{_list=list;_offset=fromIndex;_limit=toIndex-fromIndex;_comod=new ComodChecker(list);_comod.resyncModCount();}}public byte get(int index){checkRange(index);_comod.assertNotComodified();return _list.get(toUnderlyingIndex(index));}public byte removeElementAt(int index){checkRange(index);_comod.assertNotComodified();byte val=_list.removeElementAt(toUnderlyingIndex(index));_limit--;_comod.resyncModCount();incrModCount();return val;}public byte set(int index,byte element){checkRange(index);_comod.assertNotComodified();byte val=_list.set(toUnderlyingIndex(index),element);incrModCount();_comod.resyncModCount();return val;}public void add(int index,byte element){checkRangeIncludingEndpoint(index);_comod.assertNotComodified();_list.add(toUnderlyingIndex(index),element);_limit++;_comod.resyncModCount();incrModCount();}public int size(){_comod.assertNotComodified();return _limit;}private void checkRange(int index){if(index<0 || index>=size()){throw new IndexOutOfBoundsException(\"index \"+index+\" not in[0,\"+size()+\")\");}}private void checkRangeIncludingEndpoint(int index){if(index<0 || index>size()){throw new IndexOutOfBoundsException(\"index \"+index+\" not in[0,\"+size()+\"]\");}}private int toUnderlyingIndex(int index){return(index+_offset);}private int _offset=0;private int _limit=0;private RandomAccessByteList _list=null;private ComodChecker _comod=null;}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/primitives/Attic/RandomAccessDoubleList.java,v 1.1 2003/04/15 00:11:19 rwaldhoff Exp $*====================================================================*The Apache Software License,Version 1.1**Copyright(c)2002-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public abstract class RandomAccessDoubleList extends AbstractDoubleCollection implements DoubleList{protected RandomAccessDoubleList(){}public abstract double get(int index);public abstract int size();public double removeElementAt(int index){throw new UnsupportedOperationException();}public double set(int index,double element){throw new UnsupportedOperationException();}public void add(int index,double element){throw new UnsupportedOperationException();}public boolean add(double element){add(size(),element);return true;}public boolean addAll(int index,DoubleCollection collection){boolean modified=false;for(DoubleIterator iter=collection.iterator();iter.hasNext();){add(index++,iter.next());modified=true;}return modified;}public int indexOf(double element){int i=0;for(DoubleIterator iter=iterator();iter.hasNext();){if(iter.next()==element){return i;}else{i++;}}return-1;}public int lastIndexOf(double element){for(DoubleListIterator iter=listIterator(size());iter.hasPrevious();){if(iter.previous()==element){return iter.nextIndex();}}return-1;}public DoubleIterator iterator(){return listIterator();}public DoubleListIterator listIterator(){return listIterator(0);}public DoubleListIterator listIterator(int index){return new RandomAccessDoubleListIterator(this,index);}public DoubleList subList(int fromIndex,int toIndex){return new RandomAccessDoubleSubList(this,fromIndex,toIndex);}public boolean equals(Object that){if(this==that){return true;}else if(that instanceof DoubleList){DoubleList thatList=(DoubleList)that;if(size()!=thatList.size()){return false;}for(DoubleIterator thatIter=thatList.iterator(),thisIter=iterator();thisIter.hasNext();){if(thisIter.next()!=thatIter.next()){return false;}}return true;}else{return false;}}public int hashCode(){int hash=1;for(DoubleIterator iter=iterator();iter.hasNext();){long bits=Double.doubleToLongBits(iter.next());hash=31*hash+((int)(bits ^(bits>>>32)));}return hash;}protected int getModCount(){return _modCount;}protected void incrModCount(){_modCount++;}private int _modCount=0;private static class ComodChecker{ComodChecker(RandomAccessDoubleList source){_source=source;resyncModCount();}protected RandomAccessDoubleList getList(){return _source;}protected void assertNotComodified()throws ConcurrentModificationException{if(_expectedModCount!=getList().getModCount()){throw new ConcurrentModificationException();}}protected void resyncModCount(){_expectedModCount=getList().getModCount();}private RandomAccessDoubleList _source=null;private int _expectedModCount=-1;}protected static class RandomAccessDoubleListIterator extends ComodChecker implements DoubleListIterator{RandomAccessDoubleListIterator(RandomAccessDoubleList list,int index){super(list);if(index<0 || index>getList().size()){throw new IndexOutOfBoundsException(\"Index \"+index+\" not in[0,\"+getList().size()+\")\");}else{_nextIndex=index;resyncModCount();}}public boolean hasNext(){assertNotComodified();return _nextIndex<getList().size();}public boolean hasPrevious(){assertNotComodified();return _nextIndex>0;}public int nextIndex(){assertNotComodified();return _nextIndex;}public int previousIndex(){assertNotComodified();return _nextIndex-1;}public double next(){assertNotComodified();if(!hasNext()){throw new NoSuchElementException();}else{double val=getList().get(_nextIndex);_lastReturnedIndex=_nextIndex;_nextIndex++;return val;}}public double previous(){assertNotComodified();if(!hasPrevious()){throw new NoSuchElementException();}else{double val=getList().get(_nextIndex-1);_lastReturnedIndex=_nextIndex-1;_nextIndex--;return val;}}public void add(double value){assertNotComodified();getList().add(_nextIndex,value);_nextIndex++;_lastReturnedIndex=-1;resyncModCount();}public void remove(){assertNotComodified();if(-1==_lastReturnedIndex){throw new IllegalStateException();}else{getList().removeElementAt(_lastReturnedIndex);_lastReturnedIndex=-1;_nextIndex--;resyncModCount();}}public void set(double value){assertNotComodified();if(-1==_lastReturnedIndex){throw new IllegalStateException();}else{getList().set(_lastReturnedIndex,value);resyncModCount();}}private int _nextIndex=0;private int _lastReturnedIndex=-1;}protected static class RandomAccessDoubleSubList extends RandomAccessDoubleList implements DoubleList{RandomAccessDoubleSubList(RandomAccessDoubleList list,int fromIndex,int toIndex){if(fromIndex<0 || toIndex>list.size()){throw new IndexOutOfBoundsException();}else if(fromIndex>toIndex){throw new IllegalArgumentException();}else{_list=list;_offset=fromIndex;_limit=toIndex-fromIndex;_comod=new ComodChecker(list);_comod.resyncModCount();}}public double get(int index){checkRange(index);_comod.assertNotComodified();return _list.get(toUnderlyingIndex(index));}public double removeElementAt(int index){checkRange(index);_comod.assertNotComodified();double val=_list.removeElementAt(toUnderlyingIndex(index));_limit--;_comod.resyncModCount();incrModCount();return val;}public double set(int index,double element){checkRange(index);_comod.assertNotComodified();double val=_list.set(toUnderlyingIndex(index),element);incrModCount();_comod.resyncModCount();return val;}public void add(int index,double element){checkRangeIncludingEndpoint(index);_comod.assertNotComodified();_list.add(toUnderlyingIndex(index),element);_limit++;_comod.resyncModCount();incrModCount();}public int size(){_comod.assertNotComodified();return _limit;}private void checkRange(int index){if(index<0 || index>=size()){throw new IndexOutOfBoundsException(\"index \"+index+\" not in[0,\"+size()+\")\");}}private void checkRangeIncludingEndpoint(int index){if(index<0 || index>size()){throw new IndexOutOfBoundsException(\"index \"+index+\" not in[0,\"+size()+\"]\");}}private int toUnderlyingIndex(int index){return(index+_offset);}private int _offset=0;private int _limit=0;private RandomAccessDoubleList _list=null;private ComodChecker _comod=null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/HashBag.java,v 1.1 2001/08/29 15:28:07 jstrachan Exp $*$Revision: 1.1 $*$Date: 2001/08/29 15:28:07 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class HashBag extends AbstractBag implements Bag{public HashBag(){setMap(new HashMap());}public HashBag(Collection c){this();addAll(c);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public abstract class TestNullComparator extends TestComparator{public TestNullComparator(String testName){super(testName);}public static Test suite(){TestSuite suite=new TestSuite(TestNullComparator.class.getName());suite.addTest(new TestSuite(TestNullComparator1.class));suite.addTest(new TestSuite(TestNullComparator2.class));return suite;}public static class TestNullComparator1 extends TestNullComparator{public TestNullComparator1(String testName){super(testName);}public Comparator makeComparator(){return new NullComparator();}public List getComparableObjectsOrdered(){List list=new LinkedList();list.add(new Integer(1));list.add(new Integer(2));list.add(new Integer(3));list.add(new Integer(4));list.add(new Integer(5));list.add(null);return list;}public String getCanonicalComparatorName(Object object){return super.getCanonicalComparatorName(object)+\"1\";}}public static class TestNullComparator2 extends TestNullComparator{public TestNullComparator2(String testName){super(testName);}public Comparator makeComparator(){return new NullComparator(false);}public List getComparableObjectsOrdered(){List list=new LinkedList();list.add(null);list.add(new Integer(1));list.add(new Integer(2));list.add(new Integer(3));list.add(new Integer(4));list.add(new Integer(5));return list;}public String getCanonicalComparatorName(Object object){return super.getCanonicalComparatorName(object)+\"2\";}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//collections/src/java/org/apache/commons/collections/Attic/ProxyListIterator.java,v 1.1 2002/02/25 23:53:20 rwaldhoff Exp $*$Revision: 1.1 $*$Date: 2002/02/25 23:53:20 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ProxyListIterator implements ListIterator{public ProxyListIterator(){}public ProxyListIterator(ListIterator iterator){this.iterator=iterator;}public void add(Object o){getListIterator().add(o);}public boolean hasNext(){return getListIterator().hasNext();}public boolean hasPrevious(){return getListIterator().hasPrevious();}public Object next(){return getListIterator().next();}public int nextIndex(){return getListIterator().nextIndex();}public Object previous(){return getListIterator().previous();}public int previousIndex(){return getListIterator().previousIndex();}public void remove(){getListIterator().remove();}public void set(Object o){getListIterator().set(o);}public ListIterator getListIterator(){return iterator;}public void setListIterator(ListIterator iterator){this.iterator=iterator;}private ListIterator iterator;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2001-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestAll extends TestCase{public TestAll(String testName){super(testName);}public static Test suite(){TestSuite suite=new TestSuite();suite.addTest(TestBagUtils.suite());suite.addTest(TestClosureUtils.suite());suite.addTest(TestCollectionUtils.suite());suite.addTest(TestBufferUtils.suite());suite.addTest(TestEnumerationUtils.suite());suite.addTest(TestFactoryUtils.suite());suite.addTest(TestListUtils.suite());suite.addTest(TestMapUtils.suite());suite.addTest(TestPredicateUtils.suite());suite.addTest(TestSetUtils.suite());suite.addTest(TestTransformerUtils.suite());suite.addTest(TestArrayStack.suite());suite.addTest(TestBeanMap.suite());suite.addTest(TestBinaryHeap.suite());suite.addTest(TestBoundedFifoBuffer.suite());suite.addTest(TestBoundedFifoBuffer2.suite());suite.addTest(TestCursorableLinkedList.suite());suite.addTest(TestDoubleOrderedMap.suite());suite.addTest(TestExtendedProperties.suite());suite.addTest(TestFastArrayList.suite());suite.addTest(TestFastArrayList1.suite());suite.addTest(TestFastHashMap.suite());suite.addTest(TestFastHashMap1.suite());suite.addTest(TestFastTreeMap.suite());suite.addTest(TestFastTreeMap1.suite());suite.addTest(TestHashBag.suite());suite.addTest(TestIteratorUtils.suite());suite.addTest(TestLRUMap.suite());suite.addTest(TestMultiHashMap.suite());suite.addTest(TestReferenceMap.suite());suite.addTest(TestSequencedHashMap.suite());suite.addTest(TestStaticBucketMap.suite());suite.addTest(TestTreeBag.suite());suite.addTest(TestUnboundedFifoBuffer.suite());return suite;}public static void main(String[]args){String[]testCaseName={TestAll.class.getName()};junit.textui.TestRunner.main(testCaseName);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2001-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestAllPackages extends TestCase{public TestAllPackages(String testName){super(testName);}public static Test suite(){TestSuite suite=new TestSuite();suite.addTest(org.apache.commons.collections.TestAll.suite());suite.addTest(org.apache.commons.collections.bag.TestAll.suite());suite.addTest(org.apache.commons.collections.bidimap.TestAll.suite());suite.addTest(org.apache.commons.collections.buffer.TestAll.suite());suite.addTest(org.apache.commons.collections.collection.TestAll.suite());suite.addTest(org.apache.commons.collections.comparators.TestAll.suite());suite.addTest(org.apache.commons.collections.iterators.TestAll.suite());suite.addTest(org.apache.commons.collections.keyvalue.TestAll.suite());suite.addTest(org.apache.commons.collections.list.TestAll.suite());suite.addTest(org.apache.commons.collections.map.TestAll.suite());suite.addTest(org.apache.commons.collections.set.TestAll.suite());return suite;}public static void main(String[]args){String[]testCaseName={TestAllPackages.class.getName()};junit.textui.TestRunner.main(testCaseName);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestAll extends TestCase{public TestAll(String testName){super(testName);}public static void main(String[]args){String[]testCaseName={TestAll.class.getName()};junit.textui.TestRunner.main(testCaseName);}public static Test suite(){TestSuite suite=new TestSuite();suite.addTest(TestHashBag.suite());suite.addTest(TestPredicatedBag.suite());suite.addTest(TestPredicatedSortedBag.suite());suite.addTest(TestTransformedBag.suite());suite.addTest(TestTransformedSortedBag.suite());suite.addTest(TestTreeBag.suite());suite.addTest(TestTypedBag.suite());suite.addTest(TestTypedSortedBag.suite());return suite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestAll extends TestCase{public TestAll(String testName){super(testName);}public static void main(String[]args){String[]testCaseName={TestAll.class.getName()};junit.textui.TestRunner.main(testCaseName);}public static Test suite(){TestSuite suite=new TestSuite();suite.addTest(TestDualHashBidiMap.suite());suite.addTest(TestDualTreeBidiMap.suite());suite.addTest(TestTreeBidiMap.suite());suite.addTest(TestAbstractOrderedBidiMapDecorator.suite());suite.addTest(TestUnmodifiableBidiMap.suite());suite.addTest(TestUnmodifiableOrderedBidiMap.suite());suite.addTest(TestUnmodifiableSortedBidiMap.suite());return suite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2003-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestAll extends TestCase{public TestAll(String testName){super(testName);}public static void main(String[]args){String[]testCaseName={TestAll.class.getName()};junit.textui.TestRunner.main(testCaseName);}public static Test suite(){TestSuite suite=new TestSuite();suite.addTest(TestBoundedFifoBuffer.suite());suite.addTest(TestBoundedFifoBuffer2.suite());suite.addTest(TestCircularFifoBuffer.suite());suite.addTest(TestPriorityBuffer.suite());suite.addTest(TestUnboundedFifoBuffer.suite());suite.addTest(TestBlockingBuffer.suite());suite.addTest(TestPredicatedBuffer.suite());suite.addTest(TestTransformedBuffer.suite());return suite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestFileConfiguration extends TestCase{public void testSetURL()throws Exception{FileConfiguration config=new PropertiesConfiguration();config.setURL(new URL(\"http://jakarta.apache.org/commons/configuration/index.html\"));assertEquals(\"base path\",\"http://jakarta.apache.org/commons/configuration/\",config.getBasePath());assertEquals(\"file name\",\"index.html\",config.getFileName());config.setURL(new URL(\"file:/temp/test.properties\"));assertEquals(\"base path\",\"/temp/\",config.getBasePath());assertEquals(\"file name\",\"test.properties\",config.getFileName());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class FileSystemLocationStrategy implements FileLocationStrategy{public URL locate(FileSystem fileSystem,FileLocator locator){return fileSystem.locateFromURL(locator.getBasePath(),locator.getFileName());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestPropertyListConfigurationEvents extends AbstractTestPListEvents{private static final File TEST_FILE=new File(\"conf/test.plist\");protected AbstractConfiguration createConfiguration(){try{return new PropertyListConfiguration(TEST_FILE);}catch(ConfigurationException cex){throw new ConfigurationRuntimeException(cex);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestXMLPropertyListConfigurationEvents extends AbstractTestPListEvents{private static final File TEST_FILE=new File(\"conf/test.plist.xml\");protected AbstractConfiguration createConfiguration(){try{return new XMLPropertyListConfiguration(TEST_FILE);}catch(ConfigurationException cex){throw new ConfigurationRuntimeException(cex);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ParametersBeanTestImplBeanInfo extends BuilderParametersBeanInfo{public ParametersBeanTestImplBeanInfo(){super(ParametersBeanTestImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class FileAlwaysReloadingStrategy extends FileChangedReloadingStrategy{public boolean reloadingRequired(){return true;}public File getMonitoredFile(){return getFile();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class ConfigurationNodeIteratorAttribute extends ConfigurationNodeIteratorBase{private static final String WILDCARD=\"*\";public ConfigurationNodeIteratorAttribute(NodePointer parent,QName name){super(parent,false);initSubNodeList(createSubNodeList((ConfigurationNode)parent.getNode(),name));}protected List createSubNodeList(ConfigurationNode node,QName name){if(name.getPrefix()!=null){return Collections.EMPTY_LIST;}List result=new ArrayList();if(!WILDCARD.equals(name.getName())){result.addAll(node.getAttributes(name.getName()));}else{result.addAll(node.getAttributes());}return result;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class ConfigurationNodeIteratorChildren extends ConfigurationNodeIteratorBase{public ConfigurationNodeIteratorChildren(NodePointer parent,NodeTest nodeTest,boolean reverse,NodePointer startsWith){super(parent,reverse);ConfigurationNode root=(ConfigurationNode)parent.getNode();List childNodes=createSubNodeList(root,nodeTest);initSubNodeList(childNodes);if(startsWith!=null){setStartOffset(findStartIndex(root,(ConfigurationNode)startsWith.getNode()));}}protected List createSubNodeList(ConfigurationNode node,NodeTest test){List children=node.getChildren();if(test==null){return children;}else{if(test instanceof NodeNameTest){NodeNameTest nameTest=(NodeNameTest)test;QName name=nameTest.getNodeName();if(name.getPrefix()==null){if(nameTest.isWildcard()){return children;}List result=new ArrayList();for(Iterator it=children.iterator();it.hasNext();){ConfigurationNode child=(ConfigurationNode)it.next();if(StringUtils.equals(name.getName(),child.getName())){result.add(child);}}return result;}}else if(test instanceof NodeTypeTest){NodeTypeTest typeTest=(NodeTypeTest)test;if(typeTest.getNodeType()==Compiler.NODE_TYPE_NODE || typeTest.getNodeType()==Compiler.NODE_TYPE_TEXT){return children;}}}return Collections.EMPTY_LIST;}protected int findStartIndex(ConfigurationNode node,ConfigurationNode startNode){for(int index=0;index<node.getChildrenCount();index++){if(node.getChild(index)==startNode){return index;}}return-1;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Created on Feb 14,2004**To change the template for this generated file go to*Window-Preferences-Java-Code Generation-Code and Comments*/public class MockConfiguration extends BaseConfiguration{public MockConfiguration(){super();}public MockConfiguration(Configuration defaults){super(defaults);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class HierarchicalBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public HierarchicalBuilderParametersImplBeanInfo(){super(HierarchicalBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ClasspathLocationStrategy implements FileLocationStrategy{public URL locate(FileSystem fileSystem,FileLocator locator){return StringUtils.isEmpty(locator.getFileName())? null : FileLocatorUtils.locateFromClasspath(locator.getFileName());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BasePathLocationStrategy implements FileLocationStrategy{public URL locate(FileSystem fileSystem,FileLocator locator){if(StringUtils.isNotEmpty(locator.getFileName())){File file=FileLocatorUtils.constructFile(locator.getBasePath(),locator.getFileName());if(file.isFile()){return FileLocatorUtils.convertFileToURL(file);}}return null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class TreeUtils{private TreeUtils(){}public static void printTree(PrintStream stream,ConfigurationNode result){if(stream!=null){printTree(stream,\"\",result);}}private static void printTree(PrintStream stream,String indent,ConfigurationNode result){StringBuffer buffer=new StringBuffer(indent).append(\"<\").append(result.getName());Iterator iter=result.getAttributes().iterator();while(iter.hasNext()){ConfigurationNode node=(ConfigurationNode)iter.next();buffer.append(\" \").append(node.getName()).append(\"='\").append(node.getValue()).append(\"'\");}buffer.append(\">\");stream.print(buffer.toString());if(result.getValue()!=null){stream.print(result.getValue());}boolean newline=false;if(result.getChildrenCount()>0){stream.print(\"\\n\");iter=result.getChildren().iterator();while(iter.hasNext()){printTree(stream,indent+\" \",(ConfigurationNode)iter.next());}newline=true;}if(newline){stream.print(indent);}stream.println(\"</\"+result.getName()+\">\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class VFSURLStreamHandler extends URLStreamHandler{private final String protocol;public VFSURLStreamHandler(FileName file){this.protocol=file.getScheme();}protected URLConnection openConnection(URL url)throws IOException{throw new IOException(\"VFS URLs can only be used with VFS APIs\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class AbsoluteNameLocationStrategy implements FileLocationStrategy{public URL locate(FileSystem fileSystem,FileLocator locator){if(StringUtils.isNotEmpty(locator.getFileName())){File file=new File(locator.getFileName());if(file.isAbsolute()&& file.exists()){return FileLocatorUtils.convertFileToURL(file);}}return null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestFileChangedReloadingStrategy extends TestCase{public void testAutomaticReloading()throws Exception{File file=new File(\"target/testReload.properties\");if(file.exists()){file.delete();}FileWriter out=new FileWriter(file);out.write(\"string=value1\");out.flush();out.close();PropertiesConfiguration config=new PropertiesConfiguration(\"target/testReload.properties\");config.setReloadingStrategy(new FileChangedReloadingStrategy());assertEquals(\"Initial value\",\"value1\",config.getString(\"string\"));Thread.sleep(500);out=new FileWriter(file);out.write(\"string=value2\");out.flush();out.close();assertEquals(\"Modified value with enabled reloading\",\"value2\",config.getString(\"string\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ProvidedURLLocationStrategy implements FileLocationStrategy{public URL locate(FileSystem fileSystem,FileLocator locator){return locator.getSourceURL();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CombinedBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public CombinedBuilderParametersImplBeanInfo(){super(CombinedBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DatabaseBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public DatabaseBuilderParametersImplBeanInfo(){super(DatabaseBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestMultiFileHierarchicalConfiguration extends TestCase{private static String PATTERN1=\"target/test-classes/testMultiConfiguration_${sys:Id}.xml\";public TestMultiFileHierarchicalConfiguration(String testName){super(testName);}public static Test suite(){return new TestSuite(TestMultiFileHierarchicalConfiguration.class);}public void testMultiConfiguration(){FileChangedReloadingStrategy strategy=new FileChangedReloadingStrategy();strategy.setRefreshDelay(10000);MultiFileHierarchicalConfiguration config=new MultiFileHierarchicalConfiguration(PATTERN1);config.setReloadingStrategy(strategy);System.setProperty(\"Id\",\"1001\");assertTrue(config.getInt(\"rowsPerPage\")==15);System.setProperty(\"Id\",\"1002\");assertTrue(config.getInt(\"rowsPerPage\")==25);System.setProperty(\"Id\",\"1003\");assertTrue(config.getInt(\"rowsPerPage\")==35);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SystemConfiguration extends MapConfiguration{public SystemConfiguration(){super(System.getProperties());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestSystemConfiguration extends TestCase{public void testSystemConfiguration(){Properties props=System.getProperties();props.put(\"test.number\",\"123\");Configuration conf=new SystemConfiguration();assertEquals(\"number\",123,conf.getInt(\"test.number\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class JndiBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public JndiBuilderParametersImplBeanInfo(){super(JndiBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class TestCompositeConfigurationNonStringProperties extends BaseNonStringProperties{private String testProperties=new File(\"conf/test.properties\").getAbsolutePath();public void setUp()throws Exception{PropertiesConfiguration pc=new PropertiesConfiguration(testProperties);CompositeConfiguration cc=new CompositeConfiguration();cc.addConfiguration(pc);conf=(Configuration)cc;nonStringTestHolder.setConfiguration(conf);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class TestNonStringProperties extends BaseNonStringProperties{private String testProperties=new File(\"conf/test.properties\").getAbsolutePath();public void setUp()throws Exception{conf=new PropertiesConfiguration(testProperties);nonStringTestHolder.setConfiguration(conf);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class XMLBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public XMLBuilderParametersImplBeanInfo(){super(XMLBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestAbstractConfigurationBasicFeatures extends TestCase{public void testClearIteratorNoRemove(){AbstractConfiguration config=new TestConfigurationImpl(new BaseConfiguration()){public Iterator getKeys(){Collection keyCol=new ArrayList();CollectionUtils.addAll(keyCol,getUnderlyingConfiguration().getKeys());Object[]keys=keyCol.toArray();return Arrays.asList(keys).iterator();}};for(int i=0;i<20;i++){config.addProperty(\"key\"+i,\"value\"+i);}config.clear();assertTrue(\"Configuration not empty\",config.isEmpty());}static class TestConfigurationImpl extends AbstractConfiguration{private AbstractConfiguration config;public AbstractConfiguration getUnderlyingConfiguration(){return config;}public TestConfigurationImpl(AbstractConfiguration wrappedConfig){config=wrappedConfig;}protected void addPropertyDirect(String key,Object value){config.addPropertyDirect(key,value);}public boolean containsKey(String key){return config.containsKey(key);}public Iterator getKeys(){return config.getKeys();}public Object getProperty(String key){return config.getProperty(key);}public boolean isEmpty(){return config.isEmpty();}protected void clearPropertyDirect(String key){config.clearPropertyDirect(key);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CombinedReloadingController extends ReloadingController{public CombinedReloadingController(Collection<? extends ReloadingController>subCtrls){super(createDetector(subCtrls));}private static ReloadingDetector createDetector(Collection<? extends ReloadingController>subCtrls){if(subCtrls==null){throw new IllegalArgumentException(\"Collection with sub controllers must not be null!\");}Collection<ReloadingController>ctrls=new ArrayList<ReloadingController>(subCtrls);for(ReloadingController rc : ctrls){if(rc==null){throw new IllegalArgumentException(\"Collection with sub controllers contains a null entry!\");}}return new MultiReloadingControllerDetector(ctrls);}private static class MultiReloadingControllerDetector implements ReloadingDetector{private final Collection<ReloadingController>controllers;public MultiReloadingControllerDetector(Collection<ReloadingController>ctrls){controllers=ctrls;}public boolean isReloadingRequired(){for(ReloadingController rc : controllers){if(rc.checkForReloading(null)|| rc.isInReloadingState()){return true;}}return false;}public void reloadingPerformed(){for(ReloadingController rc : controllers){rc.resetReloadingState();}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DefaultReloadingDetectorFactory implements ReloadingDetectorFactory{public ReloadingDetector createReloadingDetector(FileHandler handler,FileBasedBuilderParametersImpl params)throws ConfigurationException{return new FileHandlerReloadingDetector(handler,params.getReloadingRefreshDelay());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestBasicConfigurationBuilderEvents{@Test public void testBuilderEventType(){EventType<ConfigurationBuilderEvent>builderEventType=ConfigurationBuilderEvent.ANY;assertEquals(\"Wrong super type\",Event.ANY,builderEventType.getSuperType());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestXMLPropertiesConfiguration extends TestCase{public void testLoad()throws Exception{XMLPropertiesConfiguration conf=new XMLPropertiesConfiguration(\"test.properties.xml\");assertEquals(\"header\",\"Description of the property list\",conf.getHeader());assertFalse(\"The configuration is empty\",conf.isEmpty());assertEquals(\"'key1' property\",\"value1\",conf.getProperty(\"key1\"));assertEquals(\"'key2' property\",\"value2\",conf.getProperty(\"key2\"));assertEquals(\"'key3' property\",\"value3\",conf.getProperty(\"key3\"));}public void testSave()throws Exception{XMLPropertiesConfiguration conf=new XMLPropertiesConfiguration(\"test.properties.xml\");conf.addProperty(\"key4\",\"value4\");conf.clearProperty(\"key2\");conf.setHeader(\"Description of the new property list\");conf.save(\"target/test2.properties.xml\");XMLPropertiesConfiguration conf2=new XMLPropertiesConfiguration(\"target/test2.properties.xml\");assertEquals(\"header\",\"Description of the new property list\",conf2.getHeader());assertFalse(\"The configuration is empty\",conf2.isEmpty());assertEquals(\"'key1' property\",\"value1\",conf2.getProperty(\"key1\"));assertEquals(\"'key3' property\",\"value3\",conf2.getProperty(\"key3\"));assertEquals(\"'key4' property\",\"value4\",conf2.getProperty(\"key4\"));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class PropertiesBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public PropertiesBuilderParametersImplBeanInfo(){super(PropertiesBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2001-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestPropertiesTokenizer extends TestCase{public void testNextToken(){String s1=\"abc,xyz\";AbstractConfiguration.PropertiesTokenizer tokenizer=new AbstractConfiguration.PropertiesTokenizer(s1);assertEquals(\"1st token for '\"+s1+\"'\",\"abc\",tokenizer.nextToken());assertEquals(\"2nd token for '\"+s1+\"'\",\"xyz\",tokenizer.nextToken());assertFalse(\"more than 2 tokens found for '\"+s1+\"'\",tokenizer.hasMoreTokens());String s2=\"abc\\\\,xyz\";tokenizer=new AbstractConfiguration.PropertiesTokenizer(s2);assertEquals(\"1st token for '\"+s2+\"'\",\"abc,xyz\",tokenizer.nextToken());assertFalse(\"more than 1 token found for '\"+s2+\"'\",tokenizer.hasMoreTokens());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class XPathContextFactory{public<T>JXPathContext createContext(T root,NodeHandler<T>handler){JXPathContext context=JXPathContext.newContext(ConfigurationNodePointerFactory.wrapNode(root,handler));context.setLenient(true);return context;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\")*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UnionCombiner extends NodeCombiner{public ConfigurationNode combine(ConfigurationNode node1,ConfigurationNode node2){ViewNode result=createViewNode();result.setName(node1.getName());result.appendAttributes(node1);result.appendAttributes(node2);List children2=new LinkedList(node2.getChildren());for(Iterator it=node1.getChildren().iterator();it.hasNext();){ConfigurationNode child1=(ConfigurationNode)it.next();ConfigurationNode child2=findCombineNode(node1,node2,child1,children2);if(child2!=null){result.addChild(combine(child1,child2));children2.remove(child2);}else{result.addChild(child1);}}for(Iterator it=children2.iterator();it.hasNext();){result.addChild((ConfigurationNode)it.next());}return result;}protected ConfigurationNode findCombineNode(ConfigurationNode node1,ConfigurationNode node2,ConfigurationNode child,List children){if(child.getValue()==null && !isListNode(child)&& node1.getChildrenCount(child.getName())==1 && node2.getChildrenCount(child.getName())==1){ConfigurationNode child2=(ConfigurationNode)node2.getChildren(child.getName()).iterator().next();if(child2.getValue()==null){return child2;}}return null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class MultiFileBuilderParametersImplBeanInfo extends BuilderParametersBeanInfo{public MultiFileBuilderParametersImplBeanInfo(){super(MultiFileBuilderParametersImpl.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BasicBuilderParametersBeanInfo extends BuilderParametersBeanInfo{public BasicBuilderParametersBeanInfo(){super(BasicBuilderParameters.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ServiceDaemonReadThread extends Thread{private BufferedReader in;ServiceDaemonReadThread(InputStream in){this.in=new BufferedReader(new InputStreamReader(in));}public void run(){String buff;for(;;){try{buff=in.readLine();if(buff==null)break;System.err.print(in.readLine());}catch(IOException ex){break;}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Source:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/java/org/apache/commons/dbcp/datasources/PerUserPoolDataSourceFactory.java,v $*$Revision: 1.1 $*$Date: 2003/10/13 05:06:00 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgement:*\"This product includes software developed by the*Apache Software Foundation-http://www.apache.org/\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*http://www.apache.org/**/public class PerUserPoolDataSourceFactory extends InstanceKeyObjectFactory{private static final String PER_USER_POOL_CLASSNAME=PerUserPoolDataSource.class.getName();protected boolean isCorrectClass(String className){return PER_USER_POOL_CLASSNAME.equals(className);}protected InstanceKeyDataSource getNewInstance(Reference ref)throws IOException,ClassNotFoundException{PerUserPoolDataSource pupds=new PerUserPoolDataSource();RefAddr ra=ref.get(\"defaultMaxActive\");if(ra!=null && ra.getContent()!=null){pupds.setDefaultMaxActive(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"defaultMaxIdle\");if(ra!=null && ra.getContent()!=null){pupds.setDefaultMaxIdle(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"defaultMaxWait\");if(ra!=null && ra.getContent()!=null){pupds.setDefaultMaxWait(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"perUserDefaultAutoCommit\");if(ra!=null && ra.getContent()!=null){byte[]serialized=(byte[])ra.getContent();pupds.perUserDefaultAutoCommit=(Map)deserialize(serialized);}ra=ref.get(\"perUserDefaultTransactionIsolation\");if(ra!=null && ra.getContent()!=null){byte[]serialized=(byte[])ra.getContent();pupds.perUserDefaultTransactionIsolation=(Map)deserialize(serialized);}ra=ref.get(\"perUserMaxActive\");if(ra!=null && ra.getContent()!=null){byte[]serialized=(byte[])ra.getContent();pupds.perUserMaxActive=(Map)deserialize(serialized);}ra=ref.get(\"perUserMaxIdle\");if(ra!=null && ra.getContent()!=null){byte[]serialized=(byte[])ra.getContent();pupds.perUserMaxIdle=(Map)deserialize(serialized);}ra=ref.get(\"perUserMaxWait\");if(ra!=null && ra.getContent()!=null){byte[]serialized=(byte[])ra.getContent();pupds.perUserMaxWait=(Map)deserialize(serialized);}ra=ref.get(\"perUserDefaultReadOnly\");if(ra!=null && ra.getContent()!=null){byte[]serialized=(byte[])ra.getContent();pupds.perUserDefaultReadOnly=(Map)deserialize(serialized);}return pupds;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Source:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSourceFactory.java,v $*$Revision: 1.1 $*$Date: 2003/10/13 05:06:00 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgement:*\"This product includes software developed by the*Apache Software Foundation-http://www.apache.org/\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*http://www.apache.org/**/public class SharedPoolDataSourceFactory extends InstanceKeyObjectFactory{private static final String SHARED_POOL_CLASSNAME=SharedPoolDataSource.class.getName();protected boolean isCorrectClass(String className){return SHARED_POOL_CLASSNAME.equals(className);}protected InstanceKeyDataSource getNewInstance(Reference ref){SharedPoolDataSource spds=new SharedPoolDataSource();RefAddr ra=ref.get(\"maxActive\");if(ra!=null && ra.getContent()!=null){spds.setMaxActive(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"maxIdle\");if(ra!=null && ra.getContent()!=null){spds.setMaxIdle(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"maxWait\");if(ra!=null && ra.getContent()!=null){spds.setMaxWait(Integer.parseInt(ra.getContent().toString()));}return spds;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Source:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/test/org/apache/commons/dbcp/datasources/TestFactory.java,v $*$Revision: 1.1 $*$Date: 2003/10/26 17:17:33 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgement:*\"This product includes software developed by the*Apache Software Foundation-http://www.apache.org/\"*Alternately,this acknowledgement may appear in the software itself,*if and wherever such third-party acknowledgements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*http://www.apache.org/**/public class TestFactory extends TestCase{public TestFactory(String testName){super(testName);}public static Test suite(){return new TestSuite(TestFactory.class);}public void testJNDI2Pools()throws Exception{Reference refObj=new Reference(SharedPoolDataSource.class.getName());refObj.add(new StringRefAddr(\"dataSourceName\",\"java:comp/env/jdbc/bookstoreCPDS\"));Context context=new InitialContext();Hashtable env=new Hashtable();ObjectFactory factory=new SharedPoolDataSourceFactory();Name name=new CompositeName(\"myDB\");Object obj=factory.getObjectInstance(refObj,name,context,env);assertNotNull(obj);Name name2=new CompositeName(\"myDB2\");Object obj2=factory.getObjectInstance(refObj,name2,context,env);assertNotNull(obj2);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SwallowedExceptionLogger implements SwallowedExceptionListener{private final Log log;public SwallowedExceptionLogger(Log log){this.log=log;}@Override public void onSwallowException(Exception e){log.warn(Utils.getMessage(\"swallowedExceptionLogger.onSwallowedException\"),e);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/java/org/apache/commons/dbcp/BasicDataSourceFactory.java,v 1.1 2002/01/16 00:19:36 craigmcc Exp $*$Revision: 1.1 $*$Date: 2002/01/16 00:19:36 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class BasicDataSourceFactory implements ObjectFactory{public Object getObjectInstance(Object obj,Name name,Context nameCtx,Hashtable environment)throws Exception{if((obj==null)|| !(obj instanceof Reference)){return(null);}Reference ref=(Reference)obj;if(!\"javax.sql.DataSource\".equals(ref.getClassName())){return(null);}BasicDataSource dataSource=new BasicDataSource();RefAddr ra=null;ra=ref.get(\"defaultAutoCommit\");if(ra!=null){dataSource.setDefaultAutoCommit(Boolean.getBoolean(ra.getContent().toString()));}ra=ref.get(\"defaultReadOnly\");if(ra!=null){dataSource.setDefaultReadOnly(Boolean.getBoolean(ra.getContent().toString()));}ra=ref.get(\"driverClassName\");if(ra!=null){dataSource.setDriverClassName(ra.getContent().toString());}ra=ref.get(\"maxActive\");if(ra!=null){dataSource.setMaxActive(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"maxIdle\");if(ra!=null){dataSource.setMaxIdle(Integer.parseInt(ra.getContent().toString()));}ra=ref.get(\"maxWait\");if(ra!=null){dataSource.setMaxWait(Long.parseLong(ra.getContent().toString()));}ra=ref.get(\"password\");if(ra!=null){dataSource.setPassword(ra.getContent().toString());}ra=ref.get(\"url\");if(ra!=null){dataSource.setUrl(ra.getContent().toString());}ra=ref.get(\"username\");if(ra!=null){dataSource.setUsername(ra.getContent().toString());}ra=ref.get(\"validationQuery\");if(ra!=null){dataSource.setValidationQuery(ra.getContent().toString());}return(dataSource);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/java/org/apache/commons/dbcp/cpdsadapter/PoolablePreparedStatementStub.java,v 1.1 2002/08/05 06:42:01 jmcnally Exp $*$Revision: 1.1 $*$Date: 2002/08/05 06:42:01 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/class PoolablePreparedStatementStub extends PoolablePreparedStatement{public PoolablePreparedStatementStub(PreparedStatement stmt,Object key,KeyedObjectPool pool,Connection conn){super(stmt,key,pool,conn);}protected void activate(){super.activate();}protected void passivate()throws SQLException{super.passivate();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestTransactionContext{@Test(expected=SQLException.class)public void testSetSharedConnectionEnlistFailure()throws Exception{final BasicManagedDataSource basicManagedDataSource=new BasicManagedDataSource();basicManagedDataSource.setTransactionManager(new TransactionManagerImpl());basicManagedDataSource.setDriverClassName(\"org.apache.commons.dbcp2.TesterDriver\");basicManagedDataSource.setUrl(\"jdbc:apache:commons:testdriver\");basicManagedDataSource.setUsername(\"username\");basicManagedDataSource.setPassword(\"password\");basicManagedDataSource.setMaxIdle(1);final ManagedConnection<?>conn=(ManagedConnection<?>)basicManagedDataSource.getConnection();final UncooperativeTransaction transaction=new UncooperativeTransaction();final TransactionContext transactionContext=new TransactionContext(basicManagedDataSource.getTransactionRegistry(),transaction);transactionContext.setSharedConnection(conn);}private class UncooperativeTransaction extends TransactionImpl{public UncooperativeTransaction(){super(null,null);}@Override public synchronized boolean enlistResource(XAResource xaRes){return false;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestDriverManagerConnectionFactory extends TestCase{public TestDriverManagerConnectionFactory(String testName){super(testName);}public static Test suite(){return new TestSuite(TestDriverManagerConnectionFactory.class);}public void testDriverManagerInit()throws Exception{System.setProperty(\"jdbc.drivers\",\"org.apache.commons.dbcp.TesterDriver\");GenericObjectPool connectionPool=new GenericObjectPool(null,10,GenericObjectPool.WHEN_EXHAUSTED_BLOCK,-1,0);final ConnectionFactory connectionFactory=new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\",\"foo\",\"bar\");final PoolableConnectionFactory poolableConnectionFactory=new PoolableConnectionFactory(connectionFactory,connectionPool,null,null,false,true);connectionPool.setFactory(poolableConnectionFactory);PoolingDataSource dataSource=new PoolingDataSource(connectionPool);ConnectionThread[]connectionThreads=new ConnectionThread[10];Thread[]threads=new Thread[10];for(int i=0;i<10;i++){connectionThreads[i]=new ConnectionThread(dataSource);threads[i]=new Thread(connectionThreads[i]);}for(int i=0;i<10;i++){threads[i].start();}for(int i=0;i<10;i++){while(threads[i].getState()!=Thread.State.TERMINATED){Thread.sleep(100);}if(!connectionThreads[i].getResult()){fail(\"Exception during getConnection\");}}}private static class ConnectionThread implements Runnable{private DataSource ds;private volatile boolean result=true;private ConnectionThread(DataSource ds){this.ds=ds;}public void run(){Connection conn=null;try{conn=ds.getConnection();}catch(Exception e){e.printStackTrace();result=false;}finally{if(conn!=null){try{conn.close();}catch(Exception e){e.printStackTrace();result=false;}}}}public boolean getResult(){return result;}}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class PStmtKey{protected String _sql=null;protected Integer _resultSetType=null;protected Integer _resultSetConcurrency=null;protected String _catalog=null;protected byte _stmtType=PoolingConnection.STATEMENT_PREPAREDSTMT;PStmtKey(String sql){_sql=sql;}PStmtKey(String sql,String catalog){_sql=sql;_catalog=catalog;}PStmtKey(String sql,String catalog,byte stmtType){_sql=sql;_catalog=catalog;_stmtType=stmtType;}PStmtKey(String sql,int resultSetType,int resultSetConcurrency){_sql=sql;_resultSetType=new Integer(resultSetType);_resultSetConcurrency=new Integer(resultSetConcurrency);}PStmtKey(String sql,String catalog,int resultSetType,int resultSetConcurrency){_sql=sql;_catalog=catalog;_resultSetType=new Integer(resultSetType);_resultSetConcurrency=new Integer(resultSetConcurrency);}PStmtKey(String sql,String catalog,int resultSetType,int resultSetConcurrency,byte stmtType){_sql=sql;_catalog=catalog;_resultSetType=new Integer(resultSetType);_resultSetConcurrency=new Integer(resultSetConcurrency);_stmtType=stmtType;}@Override public boolean equals(Object that){try{PStmtKey key=(PStmtKey)that;return(((null==_sql && null==key._sql)|| _sql.equals(key._sql))&&((null==_catalog && null==key._catalog)|| _catalog.equals(key._catalog))&&((null==_resultSetType && null==key._resultSetType)|| _resultSetType.equals(key._resultSetType))&&((null==_resultSetConcurrency && null==key._resultSetConcurrency)|| _resultSetConcurrency.equals(key._resultSetConcurrency))&&(_stmtType==key._stmtType));}catch(ClassCastException e){return false;}catch(NullPointerException e){return false;}}@Override public int hashCode(){if(_catalog==null)return(null==_sql ? 0 : _sql.hashCode());else return(null==_sql ? _catalog.hashCode():(_catalog+_sql).hashCode());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TestPStmtPooling extends TestCase{public TestPStmtPooling(String testName){super(testName);}public static Test suite(){return new TestSuite(TestPStmtPooling.class);}public void testStmtPool()throws Exception{new TesterDriver();ConnectionFactory connFactory=new DriverManagerConnectionFactory(\"jdbc:apache:commons:testdriver\",\"u1\",\"p1\");ObjectPool connPool=new GenericObjectPool();KeyedObjectPoolFactory stmtPoolFactory=new GenericKeyedObjectPoolFactory(null);PoolableConnectionFactory x=new PoolableConnectionFactory(connFactory,connPool,stmtPoolFactory,null,false,true);DataSource ds=new PoolingDataSource(connPool);Connection conn=ds.getConnection();Statement stmt1=conn.prepareStatement(\"select 1 from dual\");Statement ustmt1=((DelegatingStatement)stmt1).getInnermostDelegate();stmt1.close();Statement stmt2=conn.prepareStatement(\"select 1 from dual\");Statement ustmt2=((DelegatingStatement)stmt2).getInnermostDelegate();stmt2.close();assertSame(ustmt1,ustmt2);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Source:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/test/org/apache/commons/dbcp/TestBasicDataSourceFactory.java,v $*$Revision: 1.1 $*$Date: 2004/01/25 19:51:55 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgement:*\"This product includes software developed by the*Apache Software Foundation-http://www.apache.org/\"*Alternately,this acknowledgement may appear in the software itself,*if and wherever such third-party acknowledgements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*http://www.apache.org/**/public class TestBasicDataSourceFactory extends TestCase{public TestBasicDataSourceFactory(String testName){super(testName);}public static Test suite(){return new TestSuite(TestBasicDataSourceFactory.class);}public void testNoProperties()throws Exception{Properties properties=new Properties();DataSource ds=BasicDataSourceFactory.createDataSource(properties);assertNotNull(ds);assertTrue(ds instanceof BasicDataSource);}public void testProperties()throws Exception{Properties properties=new Properties();properties.setProperty(\"driverClassName\",\"org.apache.commons.dbcp.TesterDriver\");properties.setProperty(\"url\",\"jdbc:apache:commons:testdriver\");properties.setProperty(\"maxActive\",\"10\");properties.setProperty(\"maxWait\",\"500\");properties.setProperty(\"defaultAutoCommit\",\"true\");properties.setProperty(\"defaultReadOnly\",\"false\");properties.setProperty(\"defaultTransactionIsolation\",\"READ_COMMITTED\");properties.setProperty(\"defaultCatalog\",\"test\");properties.setProperty(\"username\",\"username\");properties.setProperty(\"password\",\"password\");properties.setProperty(\"validationQuery\",\"SELECT DUMMY FROM DUAL\");BasicDataSource ds=(BasicDataSource)BasicDataSourceFactory.createDataSource(properties);assertEquals(\"jdbc:apache:commons:testdriver\",ds.getUrl());assertEquals(10,ds.getMaxActive());assertEquals(true,ds.getDefaultAutoCommit());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TesterUtils{private TesterUtils(){}public static Object getField(Object target,String fieldName)throws Exception{Class<?>clazz=target.getClass();Field f=clazz.getDeclaredField(fieldName);f.setAccessible(true);return f.get(target);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*$Id$**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SetRootRule extends AbstractMethodRule{public SetRootRule(String methodName,String paramType,boolean useExactMatch){super(methodName,paramType,useExactMatch);}@Override public void end(String namespace,String name)throws Exception{this.invoke(this.getDigester().getRoot(),this.getDigester().peek(0),\"ROOT\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2001 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class CircularIncludeException extends XmlLoadException{public CircularIncludeException(String fileName){super(\"Circular file inclusion detected for file: \"+fileName);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*$Id$**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SetNextRule extends AbstractMethodRule{public SetNextRule(String methodName,String paramType,boolean useExactMatch){super(methodName,paramType,useExactMatch);}@Override public void end(String namespace,String name)throws Exception{this.invoke(this.getDigester().peek(1),this.getDigester().peek(0),\"PARENT\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*$Id$**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SetTopRule extends AbstractMethodRule{public SetTopRule(String methodName,String paramType,boolean useExactMatch){super(methodName,paramType,useExactMatch);}@Override public void end(String namespace,String name)throws Exception{this.invoke(this.getDigester().peek(0),this.getDigester().peek(1),\"CHILD\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*$Id$**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class OtherTestObjectCreationFactory extends ObjectCreationFactoryTestImpl{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public final class CommandLauncherFactory{private CommandLauncherFactory(){}public static CommandLauncher createVMLauncher(){CommandLauncher launcher=null;try{if(OS.isFamilyOpenVms()){launcher=new VmsCommandLauncher();}else{launcher=new Java13CommandLauncher();}}catch(NoSuchMethodException exc){}return launcher;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Java13CommandLauncher extends CommandLauncherImpl{private static Log log=LogFactory.getLog(Java13CommandLauncher.class);public Java13CommandLauncher(){}public Process exec(final CommandLine cmd,final Environment env,final File workingDir)throws IOException{log.debug(\"Execute:Java13CommandLauncher: \"+cmd);String[]envVars=null;if(env!=null){envVars=env.getVariables();}return(Process)Runtime.getRuntime().exec(cmd.getCommandline(),envVars,workingDir);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class OS2CommandLauncher extends CommandLauncherProxy{public OS2CommandLauncher(final CommandLauncher launcher){super(launcher);}public Process exec(final CommandLine cmd,final Environment env,final File workingDir)throws IOException{if(workingDir==null){return exec(cmd,env);}CommandLine newCmd=new CommandLineImpl();newCmd.setExecutable(\"cmd\");newCmd.addArgument(\"/c\");newCmd.addArguments(cmd.getCommandline());return exec(newCmd,env);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class WinNTCommandLauncher extends CommandLauncherProxy{public WinNTCommandLauncher(final CommandLauncher launcher){super(launcher);}public Process exec(final CommandLine cmd,final Environment env,final File workingDir)throws IOException{if(workingDir==null){return exec(cmd,env);}CommandLine newCmd=new CommandLineImpl();newCmd.setExecutable(\"cmd\");newCmd.addArgument(\"/c\");newCmd.addArguments(cmd.getCommandline());return exec(newCmd,env);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public final class TestUtil{private TestUtil(){}public static String resolveScriptForOS(String script){if(OS.isFamilyWindows()){return script+\".bat\";}else if(OS.isFamilyUnix()){return script+\".sh\";}else{throw new AssertionFailedError(\"Test not supported for this OS\");}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class LogStreamHandler extends PumpStreamHandler{public LogStreamHandler(final int outlevel,final int errlevel){super(new LogOutputStream(outlevel),new LogOutputStream(errlevel));}public void stop(){super.stop();try{getErr().close();getOut().close();}catch(IOException e){}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//fileupload/src/java/org/apache/commons/fileupload/FileUploadException.java,v 1.3 2002/07/17 01:17:06 martinc Exp $*$Revision: 1.3 $*$Date: 2002/07/17 01:17:06 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2001-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class FileUploadException extends Exception{public FileUploadException(){}public FileUploadException(String msg){super(msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//fileupload/src/java/org/apache/commons/fileupload/DefaultFileItemFactory.java,v 1.1 2003/04/27 17:30:06 martinc Exp $*$Revision: 1.1 $*$Date: 2003/04/27 17:30:06 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2001-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class DefaultFileItemFactory implements FileItemFactory{public static final int DEFAULT_SIZE_THRESHOLD=10240;private File repository;private int sizeThreshold=DEFAULT_SIZE_THRESHOLD;public DefaultFileItemFactory(){}public DefaultFileItemFactory(int sizeThreshold,File repository){this.sizeThreshold=sizeThreshold;this.repository=repository;}public File getRepository(){return repository;}public void setRepository(File repository){this.repository=repository;}public int getSizeThreshold(){return sizeThreshold;}public void setSizeThreshold(int sizeThreshold){this.sizeThreshold=sizeThreshold;}public FileItem createItem(String fieldName,String contentType,boolean isFormField,String fileName){return new DefaultFileItem(fieldName,contentType,isFormField,fileName,sizeThreshold,repository);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2001-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ServletFileUpload extends FileUpload{public ServletFileUpload(){super();}public ServletFileUpload(FileItemFactory fileItemFactory){super(fileItemFactory);}public List parseRequest(HttpServletRequest request)throws FileUploadException{return parseRequest(new ServletRequestContext(request));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class MultipartStreamTest extends TestCase{public void testMultipartStream(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header: $*$Revision: $*$Date: $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class TestAll extends TestCase{public TestAll(String testName){super(testName);}public static Test suite(){TestSuite suite=new TestSuite();suite.addTest(new TestSuite(MultipartStreamTest.class));suite.addTest(new TestSuite(FileUploadTest.class));return suite;}public static void main(String[]args){String[]testCaseName={TestAll.class.getName()};junit.textui.TestRunner.main(testCaseName);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//io/src/test/org/apache/commons/io/Attic/IOTestSuite.java,v 1.1 2002/07/08 22:19:10 nicolaken Exp $*$Revision: 1.1 $*$Date: 2002/07/08 22:19:10 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class IOTestSuite{public static Test suite(){final TestSuite suite=new TestSuite(\"IO Utilities\");suite.addTest(new TestSuite(FileUtilTestCase.class));suite.addTest(new TestSuite(IOUtilTestCase.class));return suite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE.txt file.*/public class TarTestSuite{public static Test suite(){final TestSuite suite=new TestSuite(\"Tar Utilities\");return suite;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ClassLoaderObjectInputStream extends ObjectInputStream{private ClassLoader m_classLoader;public ClassLoaderObjectInputStream(final ClassLoader classLoader,final InputStream inputStream)throws IOException,StreamCorruptedException{super(inputStream);m_classLoader=classLoader;}protected Class resolveClass(final ObjectStreamClass objectStreamClass)throws IOException,ClassNotFoundException{final Class clazz=Class.forName(objectStreamClass.getName(),false,m_classLoader);if(null!=clazz){return clazz;}else{return super.resolveClass(objectStreamClass);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*====================================================================*The Apache Software License,Version 1.1**Copyright(c)2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.*/public class YellOnCloseInputStream extends ProxyInputStream{public YellOnCloseInputStream(InputStream proxy){super(proxy);}public void close()throws IOException{throw new AssertionFailedError(\"close()was called on OutputStream\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class PredicateFileFilter extends AbstractFileFilter{private Predicate predicate;public PredicateFileFilter(Predicate predicate){this.predicate=predicate;}public boolean accept(File f){return this.predicate.evaluate(f);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public abstract class AbstractFileFilter implements FileFilter{public boolean accept(File f){return accept(f.getParentFile(),f.getName());}public boolean accept(File dir,String name){return accept(new File(dir.getName()+name));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DirectoryFileFilter extends AbstractFileFilter{public boolean accept(final File file){return file.isDirectory();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class InvertedFileFilter extends AbstractFileFilter{private final FileFilter m_originalFilter;public InvertedFileFilter(final FileFilter originalFilter){m_originalFilter=originalFilter;}public boolean accept(final File file,final String name){return !m_originalFilter.accept(file,name);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class NullFileFilter extends AbstractFileFilter{public boolean accept(File f){return true;}public boolean accept(File dir,String name){return true;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//io/src/test/org/apache/commons/io/input/CountingInputStreamTest.java,v 1.1 2003/11/23 09:20:54 bayard Exp $*$Revision: 1.1 $*$Date: 2003/11/23 09:20:54 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowledgement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgement may appear in the software itself,*if and wherever such third-party acknowledgements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class CountingInputStreamTest extends TestCase{public CountingInputStreamTest(String name){super(name);}public void testCounting()throws Exception{String text=\"A piece of text\";byte[]bytes=text.getBytes();ByteArrayInputStream bais=new ByteArrayInputStream(bytes);CountingInputStream cis=new CountingInputStream(bais);byte[]result=new byte[21];byte[]ba=new byte[5];int found=cis.read(ba);System.arraycopy(ba,0,result,0,5);assertEquals(found,cis.getCount());int value=cis.read();found++;result[5]=(byte)value;assertEquals(found,cis.getCount());found+=cis.read(result,6,5);assertEquals(found,cis.getCount());found+=cis.read(result,11,10);assertEquals(found,cis.getCount());String textResult=new String(result).trim();assertEquals(textResult,text);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//io/src/test/org/apache/commons/io/output/NullOutputStreamTest.java,v 1.1 2003/11/25 01:11:04 bayard Exp $*$Revision: 1.1 $*$Date: 2003/11/25 01:11:04 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class NullOutputStreamTest extends TestCase{public NullOutputStreamTest(String name){super(name);}public void testNull()throws IOException{NullOutputStream nos=new NullOutputStream();nos.write(\"string\".getBytes());nos.write(\"some string\".getBytes(),3,5);nos.write(1);nos.write(0x0f);nos.flush();nos.close();nos.write(\"allowed\".getBytes());nos.write(255);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE.txt file.*/public class Bzip2Compress{public static void main(final String[]args)throws Exception{if(2!=args.length){System.exit(1);}final File source=new File(args[0]);final File destination=new File(args[1]);final CBZip2OutputStream output=new CBZip2OutputStream(new FileOutputStream(destination));final FileInputStream input=new FileInputStream(source);copy(input,output);input.close();output.close();}private static void copy(final InputStream input,final OutputStream output)throws IOException{final byte[]buffer=new byte[8024];int n=0;while(-1!=(n=input.read(buffer))){output.write(buffer,0,n);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright(C)The Apache Software Foundation.All rights reserved.**This software is published under the terms of the Apache Software License*version 1.1,a copy of which has been included with this distribution in*the LICENSE.txt file.*/public class Bzip2Uncompress{public static void main(final String[]args){if(2!=args.length){System.exit(1);}final File source=new File(args[0]);final File destination=new File(args[1]);final FileOutputStream output=new FileOutputStream(destination);final CBZip2InputStream input=new CBZip2InputStream(new FileInputStream(source));copy(input,output);input.close();output.close();}private static void copy(final InputStream input,final OutputStream output)throws IOException{final byte[]buffer=new byte[8024];int n=0;while(-1!=(n=input.read(buffer))){output.write(buffer,0,n);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ClassLoaderObjectInputStream extends ObjectInputStream{private ClassLoader m_classLoader;public ClassLoaderObjectInputStream(final ClassLoader classLoader,final InputStream inputStream)throws IOException,StreamCorruptedException{super(inputStream);m_classLoader=classLoader;}protected Class resolveClass(final ObjectStreamClass objectStreamClass)throws IOException,ClassNotFoundException{final Class clazz=Class.forName(objectStreamClass.getName(),false,m_classLoader);if(null!=clazz){return clazz;}else{return super.resolveClass(objectStreamClass);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class DirectoryFileFilter implements FilenameFilter{public boolean accept(final File file,final String name){return new File(file,name).isDirectory();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class InvertedFileFilter implements FilenameFilter{private final FilenameFilter m_originalFilter;public InvertedFileFilter(final FilenameFilter originalFilter){m_originalFilter=originalFilter;}public boolean accept(final File file,final String name){return !m_originalFilter.accept(file,name);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.3 2002/02/15 18:25:06 jstrachan Exp $*$Revision: 1.3 $*$Date: 2002/02/15 18:25:06 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.3 2002/02/15 18:25:06 jstrachan Exp $*/public class JPythonTagLibrary extends BSFTagLibrary{public JPythonTagLibrary(){setLanguage(\"jpython\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.3 2002/02/15 18:25:06 jstrachan Exp $*$Revision: 1.3 $*$Date: 2002/02/15 18:25:06 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.3 2002/02/15 18:25:06 jstrachan Exp $*/public class JavaScriptTagLibrary extends BSFTagLibrary{public JavaScriptTagLibrary(){setLanguage(\"javascript\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.3 2002/02/15 18:25:06 jstrachan Exp $*$Revision: 1.3 $*$Date: 2002/02/15 18:25:06 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.3 2002/02/15 18:25:06 jstrachan Exp $*/public class PNutsTagLibrary extends BSFTagLibrary{public PNutsTagLibrary(){BSFManager.registerScriptingEngine(\"pnuts\",\"pnuts.ext.PnutsBSFEngine\",new String[]{\"pnut\"});setLanguage(\"pnuts\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jelly/jelly-tags/bean/src/test/org/apache/commons/jelly/tags/bean/MyTagLibrary.java,v 1.1 2003/01/14 04:01:01 dion Exp $*$Revision: 1.1 $*$Date: 2003/01/14 04:01:01 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: MyTagLibrary.java,v 1.1 2003/01/14 04:01:01 dion Exp $*/public class MyTagLibrary extends BeanTagLibrary{public MyTagLibrary(){registerBean(\"customer\",Customer.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/xml/XMLTagLibrary.java,v 1.6 2002/05/17 18:04:00 jstrachan Exp $*$Revision: 1.6 $*$Date: 2002/05/17 18:04:00 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: XMLTagLibrary.java,v 1.6 2002/05/17 18:04:00 jstrachan Exp $*/public class HttpTagLibrary extends TagLibrary{public HttpTagLibrary(){registerTag(\"delete\",DeleteTag.class);registerTag(\"get\",GetTag.class);registerTag(\"header\",HeaderTag.class);registerTag(\"post\",GetTag.class);registerTag(\"put\",PutTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.11 2002/06/13 08:16:47 jstrachan Exp $*$Revision: 1.11 $*$Date: 2002/06/13 08:16:47 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.11 2002/06/13 08:16:47 jstrachan Exp $*/public class LogTagLibrary extends TagLibrary{public LogTagLibrary(){registerTag(\"trace\",TraceTag.class);registerTag(\"debug\",DebugTag.class);registerTag(\"info\",InfoTag.class);registerTag(\"warn\",WarnTag.class);registerTag(\"error\",ErrorTag.class);registerTag(\"fatal\",FatalTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jelly/src/java/org/apache/commons/jelly/tags/define/Attic/DefineTagLibrary.java,v 1.1 2002/04/25 18:14:09 jstrachan Exp $*$Revision: 1.1 $*$Date: 2002/04/25 18:14:09 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: DefineTagLibrary.java,v 1.1 2002/04/25 18:14:09 jstrachan Exp $*/public class DefineTagLibrary extends TagLibrary{public DefineTagLibrary(){registerTag(\"taglib\",DefineTagLibTag.class);registerTag(\"tag\",DefineTagTag.class);registerTag(\"invokeBody\",InvokeBodyTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.5 2002/04/26 12:20:12 jstrachan Exp $*$Revision: 1.5 $*$Date: 2002/04/26 12:20:12 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.5 2002/04/26 12:20:12 jstrachan Exp $*/public class SqlTagLibrary extends CoreTagLibrary{public SqlTagLibrary(){registerTag(\"driver\",DriverTag.class);registerTag(\"param\",ParamTag.class);registerTag(\"query\",QueryTag.class);registerTag(\"setDataSource\",SetDataSourceTag.class);registerTag(\"transaction\",TransactionTag.class);registerTag(\"update\",UpdateTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jelly/src/java/org/apache/commons/jelly/JellyTagException.java,v 1.1 2003/01/24 01:57:55 morgand Exp $*$Revision: 1.1 $*$Date: 2003/01/24 01:57:55 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: JellyTagException.java,v 1.1 2003/01/24 01:57:55 morgand Exp $*/public class JellyTagException extends JellyException{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/xml/XMLTagLibrary.java,v 1.6 2002/05/17 18:04:00 jstrachan Exp $*$Revision: 1.6 $*$Date: 2002/05/17 18:04:00 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: XMLTagLibrary.java,v 1.6 2002/05/17 18:04:00 jstrachan Exp $*/public class ValidateTagLibrary extends TagLibrary{public ValidateTagLibrary(){registerTag(\"validate\",ValidateTag.class);registerTag(\"verifier\",VerifierTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/impl/CompositeTextScriptBlock.java,v 1.7 2002/06/13 08:16:47 jstrachan Exp $*$Revision: 1.7 $*$Date: 2002/06/13 08:16:47 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CompositeTextScriptBlock.java,v 1.7 2002/06/13 08:16:47 jstrachan Exp $*/public class CompositeTextScriptBlock extends ScriptBlock{public CompositeTextScriptBlock(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jelly/src/java/org/apache/commons/jelly/tags/antlr/Attic/AntlrTagLibrary.java,v 1.1 2002/07/16 05:43:32 werken Exp $*$Revision: 1.1 $*$Date: 2002/07/16 05:43:32 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: AntlrTagLibrary.java,v 1.1 2002/07/16 05:43:32 werken Exp $*/public class AntlrTagLibrary extends TagLibrary{public AntlrTagLibrary(){registerTag(\"antlr\",AntlrTag.class);registerTag(\"grammar\",GrammarTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header: $*$Revision: 1.0 $*$Date: $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: $*/public class MyTagLibrary extends TagLibrary{public MyTagLibrary(){registerTag(\"dummy\",DummyTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/xml/XMLTagLibrary.java,v 1.6 2002/05/17 18:04:00 jstrachan Exp $*$Revision: 1.6 $*$Date: 2002/05/17 18:04:00 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: XMLTagLibrary.java,v 1.6 2002/05/17 18:04:00 jstrachan Exp $*/public class JMSTagLibrary extends TagLibrary{public JMSTagLibrary(){registerTag(\"connection\",ConnectionTag.class);registerTag(\"destination\",DestinationTag.class);registerTag(\"mapEntry\",MapEntryTag.class);registerTag(\"message\",MessageTag.class);registerTag(\"objectMessage\",ObjectMessageTag.class);registerTag(\"property\",PropertyTag.class);registerTag(\"receive\",ReceiveTag.class);registerTag(\"send\",SendTag.class);registerTag(\"textMessage\",TextMessageTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/cvs/jakarta-commons-sandbox/jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.5 2002/04/26 12:20:12 jstrachan Exp $*$Revision: 1.5 $*$Date: 2002/04/26 12:20:12 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.5 2002/04/26 12:20:12 jstrachan Exp $*/public class OjbTagLibrary extends CoreTagLibrary{public OjbTagLibrary(){registerTag(\"broker\",BrokerTag.class);registerTag(\"store\",StoreTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*====================================================================*The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,*if any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"Apache\" and \"Apache Software Foundation\" must*not be used to endorse or promote products derived from this*software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\",*nor may \"Apache\" appear in their name,without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**Portions of this software are based upon public domain software*originally written at the National Center for Supercomputing Applications,*University of Illinois,Urbana-Champaign.*/public class XMLUnitTagLibrary extends TagLibrary{public XMLUnitTagLibrary(){registerTag(\"assertDocumentsEqual\",AssertDocumentsEqualTag.class);registerTag(\"actual\",ActualTag.class);registerTag(\"expected\",ExpectedTag.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//jelly/src/java/org/apache/commons/jelly/tags/core/CoreTagLibrary.java,v 1.8 2002/05/17 15:18:08 jstrachan Exp $*$Revision: 1.8 $*$Date: 2002/05/17 15:18:08 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**$Id: CoreTagLibrary.java,v 1.8 2002/05/17 15:18:08 jstrachan Exp $*/public class CoreTagLibrary extends TagLibrary{public CoreTagLibrary(){registerTag(\"jelly\",JellyTag.class);registerTag(\"out\",ExprTag.class);registerTag(\"forEach\",ForEachTag.class);registerTag(\"set\",SetTag.class);registerTag(\"if\",IfTag.class);registerTag(\"choose\",ChooseTag.class);registerTag(\"when\",WhenTag.class);registerTag(\"otherwise\",OtherwiseTag.class);registerTag(\"include\",IncludeTag.class);registerTag(\"expr\",ExprTag.class);registerTag(\"new\",NewTag.class);}public Expression createExpression(ExpressionFactory factory,String tagName,String attributeName,String attributeValue)throws Exception{ExpressionFactory myFactory=getExpressionFactory();if(myFactory==null){myFactory=factory;}if(myFactory!=null){return myFactory.createExpression(attributeValue);}return null;}protected ExpressionFactory getExpressionFactory(){return null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Deprecated public final class ExpressionFactory extends JexlOne{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Deprecated public final class ScriptFactory extends JexlOne{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Deprecated public final class ExpressionFactory extends JexlOne{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Deprecated public final class ScriptFactory extends JexlOne{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ExpressionImpl extends JexlScript{protected ExpressionImpl(JexlEngine engine,String expr,ASTJexlScript ref){super(engine,expr,ref);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Deprecated public final class ScriptFactory extends JexlOne{}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "public abstract class DatagramSocketClient{private static final DatagramSocketFactory __DEFAULT_SOCKET_FACTORY=new DefaultDatagramSocketFactory();protected int _timeout_;protected DatagramSocket _socket_;protected boolean _isOpen_;protected DatagramSocketFactory _socketFactory_;public DatagramSocketClient(){_socket_=null;_timeout_=0;_isOpen_=false;_socketFactory_=__DEFAULT_SOCKET_FACTORY;}public void open()throws SocketException{_socket_=_socketFactory_.createDatagramSocket();_socket_.setSoTimeout(_timeout_);_isOpen_=true;}public void open(int port)throws SocketException{_socket_=_socketFactory_.createDatagramSocket(port);_socket_.setSoTimeout(_timeout_);_isOpen_=true;}public void open(int port,InetAddress laddr)throws SocketException{_socket_=_socketFactory_.createDatagramSocket(port,laddr);_socket_.setSoTimeout(_timeout_);_isOpen_=true;}public void close(){_socket_.close();_socket_=null;_isOpen_=false;}public boolean isOpen(){return _isOpen_;}public void setDefaultTimeout(int timeout){_timeout_=timeout;}public int getDefaultTimeout(){return _timeout_;}public void setSoTimeout(int timeout)throws SocketException{_socket_.setSoTimeout(timeout);}public int getSoTimeout()throws SocketException{return _socket_.getSoTimeout();}public int getLocalPort(){return _socket_.getLocalPort();}public InetAddress getLocalAddress(){return _socket_.getLocalAddress();}public void setDatagramSocketFactory(DatagramSocketFactory factory){if(factory==null)_socketFactory_=__DEFAULT_SOCKET_FACTORY;else _socketFactory_=factory;}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "public abstract class SocketClient{public static final String NETASCII_EOL=\"\\r\\n\";private static final SocketFactory __DEFAULT_SOCKET_FACTORY=new DefaultSocketFactory();protected int _timeout_;protected Socket _socket_;protected boolean _isConnected_;protected int _defaultPort_;protected InputStream _input_;protected OutputStream _output_;protected SocketFactory _socketFactory_;public SocketClient(){_socket_=null;_input_=null;_output_=null;_timeout_=0;_defaultPort_=0;_isConnected_=false;_socketFactory_=__DEFAULT_SOCKET_FACTORY;}protected void _connectAction_()throws IOException{_socket_.setSoTimeout(_timeout_);_input_=_socket_.getInputStream();_output_=_socket_.getOutputStream();_isConnected_=true;}public void connect(InetAddress host,int port)throws SocketException,IOException{_socket_=_socketFactory_.createSocket(host,port);_connectAction_();}public void connect(String hostname,int port)throws SocketException,IOException{_socket_=_socketFactory_.createSocket(hostname,port);_connectAction_();}public void connect(InetAddress host,int port,InetAddress localAddr,int localPort)throws SocketException,IOException{_socket_=_socketFactory_.createSocket(host,port,localAddr,localPort);_connectAction_();}public void connect(String hostname,int port,InetAddress localAddr,int localPort)throws SocketException,IOException{_socket_=_socketFactory_.createSocket(hostname,port,localAddr,localPort);_connectAction_();}public void connect(InetAddress host)throws SocketException,IOException{connect(host,_defaultPort_);}public void connect(String hostname)throws SocketException,IOException{connect(hostname,_defaultPort_);}public void disconnect()throws IOException{_socket_.close();_input_.close();_output_.close();_socket_=null;_input_=null;_output_=null;_isConnected_=false;}public boolean isConnected(){return _isConnected_;}public void setDefaultPort(int port){_defaultPort_=port;}public int getDefaultPort(){return _defaultPort_;}public void setDefaultTimeout(int timeout){_timeout_=timeout;}public int getDefaultTimeout(){return _timeout_;}public void setSoTimeout(int timeout)throws SocketException{_socket_.setSoTimeout(timeout);}public int getSoTimeout()throws SocketException{return _socket_.getSoTimeout();}public void setTcpNoDelay(boolean on)throws SocketException{_socket_.setTcpNoDelay(on);}public boolean getTcpNoDelay()throws SocketException{return _socket_.getTcpNoDelay();}public void setSoLinger(boolean on,int val)throws SocketException{_socket_.setSoLinger(on,val);}public int getSoLinger()throws SocketException{return _socket_.getSoLinger();}public int getLocalPort(){return _socket_.getLocalPort();}public InetAddress getLocalAddress(){return _socket_.getLocalAddress();}public int getRemotePort(){return _socket_.getPort();}public InetAddress getRemoteAddress(){return _socket_.getInetAddress();}public boolean verifyRemote(Socket socket){InetAddress host1,host2;host1=socket.getInetAddress();host2=getRemoteAddress();return host1.equals(host2);}public void setSocketFactory(SocketFactory factory){if(factory==null)_socketFactory_=__DEFAULT_SOCKET_FACTORY;else _socketFactory_=factory;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class TFTPPacketException extends Exception{public TFTPPacketException(){super();}public TFTPPacketException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class TFTPReadRequestPacket extends TFTPRequestPacket{public TFTPReadRequestPacket(InetAddress destination,int port,String filename,int mode){super(destination,port,TFTPPacket.READ_REQUEST,filename,mode);}TFTPReadRequestPacket(DatagramPacket datagram)throws TFTPPacketException{super(TFTPPacket.READ_REQUEST,datagram);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class TFTPWriteRequestPacket extends TFTPRequestPacket{public TFTPWriteRequestPacket(InetAddress destination,int port,String filename,int mode){super(destination,port,TFTPPacket.WRITE_REQUEST,filename,mode);}TFTPWriteRequestPacket(DatagramPacket datagram)throws TFTPPacketException{super(TFTPPacket.WRITE_REQUEST,datagram);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class IOUtil{public static final void readWrite(final InputStream remoteInput,final OutputStream remoteOutput,final InputStream localInput,final OutputStream localOutput){Thread reader,writer;reader=new Thread(){public void run(){int ch;try{while(!interrupted()&&(ch=localInput.read())!=-1){remoteOutput.write(ch);remoteOutput.flush();}}catch(IOException e){}}};writer=new Thread(){public void run(){try{Util.copyStream(remoteInput,localOutput);}catch(IOException e){e.printStackTrace();System.exit(1);}}};writer.setPriority(Thread.currentThread().getPriority()+1);writer.start();reader.setDaemon(true);reader.start();try{writer.join();reader.interrupt();}catch(InterruptedException e){}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": ""
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class newsgroups{public final static void main(String[]args){NNTPClient client;NewsgroupInfo[]list;if(args.length<1){System.err.println(\"Usage: newsgroups newsserver\");System.exit(1);}client=new NNTPClient();try{client.connect(args[0]);list=client.listNewsgroups();if(list!=null){for(int i=0;i<list.length;i++)System.out.println(list[i].getNewsgroup());}else{System.err.println(\"LIST command failed.\");System.err.println(\"Server reply: \"+client.getReplyString());}}catch(IOException e){e.printStackTrace();}finally{try{if(client.isConnected())client.disconnect();}catch(IOException e){System.err.println(\"Error disconnecting from server.\");e.printStackTrace();System.exit(1);}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class weatherTelnet{public final static void main(String[]args){TelnetClient telnet;telnet=new TelnetClient();try{telnet.connect(\"rainmaker.wunderground.com\",3000);}catch(IOException e){e.printStackTrace();System.exit(1);}IOUtil.readWrite(telnet.getInputStream(),telnet.getOutputStream(),System.in,System.out);try{telnet.disconnect();}catch(IOException e){e.printStackTrace();System.exit(1);}System.exit(0);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2001-2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class DefaultFTPFileListParser extends UnixFTPEntryParser{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2001-2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class FTPFileListParserImpl extends RegexFTPFileEntryParserImpl{public FTPFileListParserImpl(String regex){super(regex);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class SMTPConnectionClosedException extends IOException{public SMTPConnectionClosedException(){super();}public SMTPConnectionClosedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class NNTPConnectionClosedException extends IOException{public NNTPConnectionClosedException(){super();}public NNTPConnectionClosedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public final class DefaultFTPFileListParser implements FTPFileListParser{private int __charArrayToInt(char[]arr,int start,int end){int value=0,decimal;decimal=1;while(end-->start){value+=(decimal*(arr[end]-'0'));decimal*=10;}return value;}private long __charArrayToLong(char[]arr,int start,int end){long value=0,decimal;decimal=1;while(end-->start){value+=(decimal*(arr[end]-'0'));decimal*=10;}return value;}private int __skipWhitespace(char[]cToken,int start){while(start<cToken.length && Character.isWhitespace(cToken[start]))++start;return start;}private int __skipDigits(char[]cToken,int start){while(start<cToken.length && Character.isDigit(cToken[start]))++start;return start;}private int __skipNonWhitespace(char[]cToken,int start){while(start<cToken.length && !Character.isWhitespace(cToken[start]))++start;return start;}private int __skipNonWhitespaceToLower(char[]cToken,int start){while(start<cToken.length && !Character.isWhitespace(cToken[start])){cToken[start]=Character.toLowerCase(cToken[start]);++start;}return start;}public FTPFile parseFTPEntry(String entry){int access,start,end,type,month,year,hour,minutes;boolean isDevice;Calendar date;StringTokenizer tokenizer;String sToken;char[]cToken;FTPFile file;try{cToken=entry.toCharArray();file=new FTPFile();file.setRawListing(entry);isDevice=(cToken[0]=='b' || cToken[0]=='c');switch(cToken[0]){case 'd': type=FTPFile.DIRECTORY_TYPE;break;case 'l': type=FTPFile.SYMBOLIC_LINK_TYPE;break;default: type=FTPFile.FILE_TYPE;break;}file.setType(type);for(access=0,start=1;access<3;access++){file.setPermission(access,FTPFile.READ_PERMISSION,(cToken[start++]!='-'));file.setPermission(access,FTPFile.WRITE_PERMISSION,(cToken[start++]!='-'));file.setPermission(access,FTPFile.EXECUTE_PERMISSION,(cToken[start++]!='-'));}start=__skipWhitespace(cToken,start);end=__skipDigits(cToken,start);file.setHardLinkCount(__charArrayToInt(cToken,start,end));start=__skipWhitespace(cToken,end);end=__skipNonWhitespace(cToken,start);file.setUser(new String(cToken,start,end-start));start=__skipWhitespace(cToken,end);end=__skipNonWhitespace(cToken,start);file.setGroup(new String(cToken,start,end-start));if(isDevice){start=__skipWhitespace(cToken,end);end=__skipNonWhitespace(cToken,start);start=__skipWhitespace(cToken,end);end=__skipNonWhitespace(cToken,start);}else{start=__skipWhitespace(cToken,end);end=__skipDigits(cToken,start);file.setSize(__charArrayToLong(cToken,start,end));}start=__skipWhitespace(cToken,end);end=__skipNonWhitespaceToLower(cToken,start);switch(cToken[start]){case 'a': if(cToken[end-1]=='r')month=3;else month=7;break;case 'd': month=11;break;case 'f': month=1;break;case 'j': if(cToken[end-1]=='l')month=6;else if(cToken[start+1]=='a')month=0;else month=5;break;case 'm': if(cToken[end-1]=='y')month=4;else month=2;break;case 'n': month=10;break;case 'o': month=9;break;case 's': month=8;break;default: month=0;break;}start=__skipWhitespace(cToken,end);end=__skipDigits(cToken,start);access=__charArrayToInt(cToken,start,end);start=__skipWhitespace(cToken,end);end=__skipDigits(cToken,start);date=Calendar.getInstance();try{if(cToken[end]==':'){year=date.get(Calendar.YEAR);hour=date.get(Calendar.MONTH);if(hour<month)--year;hour=__charArrayToInt(cToken,start,end);start=end+1;end=__skipDigits(cToken,start);minutes=__charArrayToInt(cToken,start,end);}else{hour=minutes=-1;year=__charArrayToInt(cToken,start,end);}date.clear();date.set(Calendar.YEAR,year);date.set(Calendar.MONTH,month);date.set(Calendar.DATE,access);if(hour!=-1){date.set(Calendar.HOUR,hour);date.set(Calendar.MINUTE,minutes);}}catch(IllegalArgumentException e){}file.setTimestamp(date);start=end+1;end=__skipNonWhitespace(cToken,start);if(end>=cToken.length){file.setName(new String(cToken,start,end-start));return file;}sToken=new String(cToken,start,cToken.length-start);if(type==FTPFile.SYMBOLIC_LINK_TYPE){end=sToken.indexOf(\"->\");if(end==-1){file.setName(sToken);return file;}file.setName(sToken.substring(0,end));file.setLink(sToken.substring(end+4));return file;}file.setName(sToken);}catch(ArrayIndexOutOfBoundsException e){return null;}catch(StringIndexOutOfBoundsException e){return null;}return file;}public FTPFile[]parseFileList(InputStream listStream)throws IOException{String line;Vector results;BufferedReader reader;FTPFile entry;reader=new BufferedReader(new InputStreamReader(listStream));if((line=reader.readLine())==null){results=null;}else{results=new Vector();if(line.toLowerCase().startsWith(\"total\"))line=reader.readLine();else{if((entry=parseFTPEntry(line))!=null)results.addElement(entry);line=reader.readLine();}while(line!=null){if(line.length()==0 ||(entry=parseFTPEntry(line))==null){results=null;break;}results.addElement(entry);line=reader.readLine();}}if(line!=null)while((line=reader.readLine())!=null);reader.close();if(results!=null){FTPFile[]result;result=new FTPFile[results.size()];if(result.length>0)results.copyInto(result);return result;}return null;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class FTPConnectionClosedException extends IOException{public FTPConnectionClosedException(){super();}public FTPConnectionClosedException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public abstract class FTPFileListParserImpl implements FTPFileListParser,FTPFileEntryParser{private Pattern pattern=null;private MatchResult result=null;protected PatternMatcher _matcher_=null;public FTPFileListParserImpl(String regex){try{_matcher_=new Perl5Matcher();pattern=new Perl5Compiler().compile(regex);}catch(MalformedPatternException e){throw new IllegalArgumentException(\"Unparseable regex supplied: \"+regex);}}public FTPFile[]parseFileList(InputStream listStream)throws IOException{FTPFileList ffl=createFTPFileList(listStream);return ffl.getFiles();}public FTPFileList createFTPFileList(InputStream stream)throws IOException{DefaultFTPFileList list=new DefaultFTPFileList(this);list.readStream(stream);return list;}public boolean matches(String s){this.result=null;if(_matcher_.matches(s.trim(),this.pattern)){this.result=_matcher_.getMatch();}return null!=this.result;}public int getGroupCnt(){if(this.result==null){return 0;}return this.result.groups();}public String group(int matchnum){if(this.result==null){return null;}return this.result.group(matchnum);}public String getGroupsAsString(){StringBuffer b=new StringBuffer();for(int i=1;i<=this.result.groups();i++){b.append(i).append(\")\").append(this.result.group(i)).append(System.getProperty(\"line.separator\"));}return b.toString();}public String readNextEntry(BufferedReader reader)throws IOException{return reader.readLine();}}"
    },
    {
        "code_smells": [
            "LargeClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//validator/src/share/org/apache/commons/validator/UrlValidator.java,v 1.1 2003/04/30 19:04:24 rleland Exp $*$Revision: 1.1 $*$Date: 2003/04/30 19:04:24 $**====================================================================**The Apache Software License,Version 1.1**Copyright(c)1999-2003 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class UrlValidator implements Serializable{public static final String OPTION_ALLOW_2_SLASH=\"allow2Slash\";public static final String OPTION_NO_FRAGMENT=\"noFragment\";boolean allow2Slash=false;boolean noFragment=false;public UrlValidator(){}public UrlValidator(String[]options){int optionsIndex=0;while((options!=null)&&(optionsIndex<options.length)){String option=options[optionsIndex];if((option!=null)&&(option.equals(OPTION_ALLOW_2_SLASH))){allow2Slash=true;}if((option!=null)&&(option.equals(OPTION_NO_FRAGMENT))){noFragment=true;}optionsIndex++;}}public UrlValidator(boolean allow2Slash,boolean noFragment){this.allow2Slash=allow2Slash;this.noFragment=noFragment;}public boolean isValid(String value){boolean bValid=true;try{String alphaChars=\"a-zA-Z\";String alphaNumChars=alphaChars+\"\\\\d\";String specialChars=\";/@&=,.?:+$\";String validChars=\"[^\\\\s\"+specialChars+\"]\";String schemeChars=alphaChars;String authorityChars=alphaNumChars+\"\\\\-\\\\.\";String atom=validChars+'+';String legalAsciiPat=ValidatorUtil.getDelimitedRegExp(\"^[\\\\000-\\\\177]+$\");String urlPat=ValidatorUtil.getDelimitedRegExp(\"^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\\\?([^#]*))?(#(.*))?\");final int PARSE_SCHEME=2;final int PARSE_AUTHORITY=4;final int PARSE_PATH=5;final int PARSE_QUERY=7;final int PARSE_FRAGMENT=9;String schemePat=ValidatorUtil.getDelimitedRegExp(\"^[\"+schemeChars+\"]\");String authorityPat=ValidatorUtil.getDelimitedRegExp(\"^([\"+authorityChars+\"]*)(:\\\\d*)?(.*)?\");final int PARSE_HOST_IP=1;final int PARSE_PORT=2;final int PARSE_AUTH_EXTRA=3;String ipV4DomainPat=ValidatorUtil.getDelimitedRegExp(\"^(\\\\d{1,3})[.](\\\\d{1,3})[.](\\\\d{1,3})[.](\\\\d{1,3})$\");String domainPat=ValidatorUtil.getDelimitedRegExp(\"^\"+atom+\"(\\\\.\"+atom+\")*$\");String portPat=ValidatorUtil.getDelimitedRegExp(\"^:(\\\\d{1,5})$\");String pathPat=ValidatorUtil.getDelimitedRegExp(\"^(/[-a-zA-Z0-9_:@&?=+,.!/~*'%$]*)$\");String queryPat=ValidatorUtil.getDelimitedRegExp(\"^(.*)$\");String atomPat=ValidatorUtil.getDelimitedRegExp(\"(\"+atom+\")\");String alphaPat=ValidatorUtil.getDelimitedRegExp(\"^[\"+alphaChars+\"]\");Perl5Util matchUrlPat=new Perl5Util();Perl5Util matchSchemePat=new Perl5Util();Perl5Util matchAuthorityPat=new Perl5Util();Perl5Util matchIPV4Pat=new Perl5Util();Perl5Util matchDomainPat=new Perl5Util();Perl5Util matchPortPat=new Perl5Util();Perl5Util matchPathPat=new Perl5Util();Perl5Util matchQueryPat=new Perl5Util();Perl5Util matchAtomPat=new Perl5Util();Perl5Util matchAsciiPat=new Perl5Util();Perl5Util matchAlphaPat=new Perl5Util();if(!matchAsciiPat.match(legalAsciiPat,value)){return false;}bValid=matchUrlPat.match(urlPat,value);if(value.endsWith(\".\")){bValid=false;}if(bValid){String scheme=matchUrlPat.group(PARSE_SCHEME);bValid=matchSchemePat.match(schemePat,scheme);}if(bValid){bValid=matchAuthorityPat.match(authorityPat,matchUrlPat.group(PARSE_AUTHORITY));if(bValid){boolean ipV4Address=false;boolean hostname=false;String hostIP=matchAuthorityPat.group(PARSE_HOST_IP);ipV4Address=matchIPV4Pat.match(ipV4DomainPat,hostIP);if(ipV4Address){for(int i=1;i<=4;i++){String ipSegment=matchIPV4Pat.group(i);if(ipSegment!=null && ipSegment.length()>0){int iIpSegment=0;try{iIpSegment=Integer.parseInt(ipSegment);}catch(Exception e){bValid=false;}if(iIpSegment>255){bValid=false;}}else{bValid=false;}}}else{hostname=matchDomainPat.match(domainPat,hostIP);}if(hostname){String[]domainSegment=new String[10];boolean match=true;int segmentCount=0;int segmentLength=0;while(match){match=matchAtomPat.match(atomPat,hostIP);if(match){domainSegment[segmentCount]=matchAtomPat.group(1);segmentLength=domainSegment[segmentCount].length()+1;hostIP=(segmentLength>=hostIP.length())? \"\" : hostIP.substring(segmentLength);segmentCount++;}}String topLevel=domainSegment[segmentCount-1];if(topLevel.length()<2 || topLevel.length()>4){bValid=false;}boolean isAlpha;isAlpha=matchAlphaPat.match(alphaPat,topLevel.substring(0,1));if(!isAlpha){bValid=false;}if(segmentCount<2){bValid=false;}}if(bValid){bValid=(hostname || ipV4Address);}if(bValid){String port=matchAuthorityPat.group(PARSE_PORT);if(port!=null){bValid=matchPortPat.match(portPat,port);}}if(bValid){String extra=matchAuthorityPat.group(PARSE_AUTH_EXTRA);bValid=((extra==null)||(extra.length()==0));}if(bValid){String path=matchUrlPat.group(PARSE_PATH);bValid=matchPathPat.match(pathPat,path);if(bValid){bValid=(path.lastIndexOf(\"/\")<(path.length()-1));}if(bValid){int slash2Count=countToken(\"//\",path);if(!allow2Slash){bValid=(slash2Count==0);}if(bValid){int slashCount=countToken(\"/\",path);int dot2Count=countToken(\"..\",path);if(dot2Count>0){bValid=((slashCount-slash2Count-1)>dot2Count);}}}}}if(bValid){String query=matchUrlPat.group(PARSE_QUERY);if(null!=query){bValid=matchQueryPat.match(queryPat,query);}}if(bValid){String fragment=matchUrlPat.group(PARSE_FRAGMENT);if(null!=fragment){bValid=(noFragment==false);}}}}catch(Exception e){bValid=false;}return bValid;}protected static int countToken(String token,String target){int tokenIndex=0;int count=0;while(tokenIndex!=-1){tokenIndex=target.indexOf(token,tokenIndex);if(tokenIndex>-1){tokenIndex++;count++;}}return count;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class AnotherClass{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/*====================================================================**The Apache Software License,Version 1.1**Copyright(c)2002 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,if*any,must include the following acknowlegement:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowlegement may appear in the software itself,*if and wherever such third-party acknowlegements normally appear.**4.The names \"The Jakarta Project\",\"Commons\",and \"Apache Software*Foundation\" must not be used to endorse or promote products derived*from this software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\"*nor may \"Apache\" appear in their names without prior written*permission of the Apache Group.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public abstract class AbstractReadOnlyFileSystemTestCase extends AbstractFileSystemTestCase{public AbstractReadOnlyFileSystemTestCase(String name){super(name);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2002,2003,2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class AbstractFilesCache extends AbstractVfsComponent implements FilesCache{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Activator implements BundleActivator{public void start(BundleContext context)throws Exception{ServiceReference[]refs=context.getServiceReferences(DictionaryService.class.getName(),\"(Language=*)\");if(refs!=null){try{BufferedReader in=new BufferedReader(new InputStreamReader(System.in));String word=\"\";while(true){word=in.readLine();if(word.length()==0){break;}DictionaryService dictionary=(DictionaryService)context.getService(refs[0]);if(dictionary.checkWord(word)){}else{}context.ungetService(refs[0]);}}catch(IOException ex){}}else{}}public void stop(BundleContext context){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Activator implements BundleActivator{public void start(final BundleContext context)throws Exception{new UPnPEventToEventAdminBridge(context);}public void stop(final BundleContext context)throws Exception{}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Activator implements BundleActivator{public void start(final BundleContext context)throws Exception{new ConfigurationEventToEventAdminBridge(context);}public void stop(final BundleContext context)throws Exception{}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class CommandNotFoundException extends Exception{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Activator implements BundleActivator{private volatile ThreadPool m_pool;private volatile TaskHandler m_asyncQueue;private volatile TaskHandler m_syncQueue;private volatile EventAdminImpl m_admin;public void start(final BundleContext context){LogWrapper.setContext(context);final int cacheSize=getIntProperty(\"org.apache.felix.eventadmin.CacheSize\",context,30,10);final int threadPoolSize=getIntProperty(\"org.apache.felix.eventadmin.ThreadPoolSize\",context,10,2);final int timeout=getIntProperty(\"org.apache.felix.eventadmin.Timeout\",context,5000,Integer.MIN_VALUE);final boolean requireTopic=getBooleanProperty(\"org.apache.felix.eventadmin.RequireTopic\",context,true);LogWrapper.getLogger().log(LogWrapper.LOG_DEBUG,\"org.apache.felix.eventadmin.CacheSize=\"+cacheSize);LogWrapper.getLogger().log(LogWrapper.LOG_DEBUG,\"org.apache.felix.eventadmin.ThreadPoolSize=\"+threadPoolSize);LogWrapper.getLogger().log(LogWrapper.LOG_DEBUG,\"org.apache.felix.eventadmin.Timeout=\"+timeout);LogWrapper.getLogger().log(LogWrapper.LOG_DEBUG,\"org.apache.felix.eventadmin.RequireTopic=\"+requireTopic);final TopicPermissions publishPermissions=new CacheTopicPermissions(new LeastRecentlyUsedCacheMap(cacheSize),TopicPermission.PUBLISH);final TopicPermissions subscribePermissions=new CacheTopicPermissions(new LeastRecentlyUsedCacheMap(cacheSize),TopicPermission.SUBSCRIBE);final TopicHandlerFilters topicHandlerFilters=new CacheTopicHandlerFilters(new LeastRecentlyUsedCacheMap(cacheSize),requireTopic);final Filters filters=new CacheFilters(new LeastRecentlyUsedCacheMap(cacheSize),context);final HandlerTasks handlerTasks=new BlacklistingHandlerTasks(context,new CleanBlackList(),topicHandlerFilters,filters,subscribePermissions);final Scheduler scheduler=createScheduler(timeout);m_pool=new CacheThreadPool(threadPoolSize);m_asyncQueue=new TaskHandler();m_syncQueue=new TaskHandler();m_admin=new EventAdminImpl(handlerTasks,createAsyncExecuters(m_asyncQueue,m_syncQueue,scheduler,m_pool),createSyncExecuters(m_syncQueue,scheduler,m_pool));context.registerService(EventAdmin.class.getName(),new SecureEventAdminFactory(m_admin,publishPermissions),null);adaptEvents(context,m_admin);}public void stop(final BundleContext context){m_admin.stop();m_pool.close();m_asyncQueue.close();m_syncQueue.close();m_admin=null;m_pool=null;m_asyncQueue=null;m_syncQueue=null;}private DeliverTasks createAsyncExecuters(final TaskHandler handler,final TaskHandler handoverHandler,final Scheduler scheduler,final ThreadPool pool){final AsyncDeliverTasks result=new AsyncDeliverTasks(handler,handoverHandler,pool);result.execute(new DispatchTask(handler,scheduler,result));return result;}private DeliverTasks createSyncExecuters(final TaskHandler handler,final Scheduler scheduler,final ThreadPool pool){final SyncDeliverTasks result=new SyncDeliverTasks(handler,pool);result.execute(new DispatchTask(handler,scheduler,result));return result;}private Scheduler createScheduler(final int timeout){if(100>timeout){return Scheduler.NULL_SCHEDULER;}return new DelayScheduler(timeout);}private void adaptEvents(final BundleContext context,final EventAdmin admin){new FrameworkEventAdapter(context,admin);new BundleEventAdapter(context,admin);new ServiceEventAdapter(context,admin);new LogEventAdapter(context,admin);}private int getIntProperty(final String key,final BundleContext context,final int defaultValue,final int min){final String value=context.getProperty(key);if(null!=value){try{final int result=Integer.parseInt(value);if(result>=min){return result;}LogWrapper.getLogger().log(LogWrapper.LOG_WARNING,\"Value for property: \"+key+\" is to low-Using default\");}catch(NumberFormatException e){LogWrapper.getLogger().log(LogWrapper.LOG_WARNING,\"Unable to parse property: \"+key+\"-Using default\",e);}}return defaultValue;}private boolean getBooleanProperty(final String key,final BundleContext context,final boolean defaultValue){String value=context.getProperty(key);if(null!=value){value=value.trim().toLowerCase();if(0<value.length()&&(\"0\".equals(value)|| \"false\".equals(value)|| \"no\".equals(value))){return false;}if(0<value.length()&&(\"1\".equals(value)|| \"true\".equals(value)|| \"yes\".equals(value))){return true;}}return defaultValue;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Activator implements BundleActivator{private transient BundleContext m_context=null;private transient RepositoryAdminImpl m_repoAdmin=null;public void start(BundleContext context){m_context=context;m_repoAdmin=new RepositoryAdminImpl(m_context);context.registerService(RepositoryAdmin.class.getName(),m_repoAdmin,null);try{context.registerService(org.apache.felix.shell.Command.class.getName(),new ObrCommandImpl(m_context,m_repoAdmin),null);}catch(Throwable th){}}public void stop(BundleContext context){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class CommandNotFoundException extends Exception{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class EngineNotFoundException extends Exception{public EngineNotFoundException(String language){super(language);}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class AbstractGraphPanel extends JComponent{protected TimeSeriesCollection dataset=new TimeSeriesCollection();protected JFreeChart chart;protected Timer dataGeneratorTimer;protected TimerTask dataGeneratorTimerTask;protected Map timeSeriesMap=new HashMap();protected XYPlot xyplot;private JCheckBox controlsButton;private JPanel controlsPanel;private ButtonGroup buttonGroupScale;private ButtonGroup buttonGroupTimeRange;private JRadioButton jRadioButtonScaleLinear;private JRadioButton jRadioButtonScaleLogarithmic;private JRadioButton jRadioTimeHours;private JRadioButton jRadioTimeMinutes;private JRadioButton jRadioTimeSeconds;protected LogarithmicTimeJSlider sleepSlider;protected JLabel sleepDelay;private boolean removed=false;protected int failures=0;protected static final int MAX_FAILURES=10;public AbstractGraphPanel(){setDoubleBuffered(false);initGraphPanel();}public void setChartTitle(final String name){SwingUtilities.invokeLater(new Runnable(){public void run(){setName(name);}});chart.setTitle(new TextTitle(name,new Font(\"SansSerif\",Font.BOLD,12)));}protected void initGraphPanel(){setPreferredSize(new Dimension(500,450));DateAxis domain=new DateAxis(\"Time\");NumberAxis range=new NumberAxis(\"\");this.xyplot=new XYPlot(dataset,domain,range,new DefaultXYItemRenderer());domain.setAutoRange(true);domain.setLowerMargin(0.0);domain.setUpperMargin(0.0);domain.setTickLabelsVisible(true);range.setStandardTickUnits(NumberAxis.createIntegerTickUnits());this.chart=new JFreeChart(\"\",JFreeChart.DEFAULT_TITLE_FONT,xyplot,true);chart.setTitle(new TextTitle(\"Graph ???\",new Font(\"SansSerif\",Font.BOLD,12)));ChartPanel chartPanel=new ChartPanel(chart,false,true,true,false,false);chartPanel.setOpaque(true);chartPanel.setDoubleBuffered(false);chart.setBackgroundPaint(this.getBackground());chartPanel.setBackground(this.getBackground());chartPanel.setBorder(new LineBorder(Color.BLACK,1));setLayout(new BorderLayout());setOpaque(false);add(chartPanel,BorderLayout.CENTER);buildGraphControls();this.controlsButton=new ControlsPopupButton();JPanel northPanel=new JPanel(new FlowLayout(FlowLayout.RIGHT));northPanel.add(this.controlsButton);northPanel.setOpaque(false);add(northPanel,BorderLayout.NORTH);this.controlsPanel.setLocation(5,5);doLayout();repaint();}public class ControlsPopupButton extends JCheckBox{private JPopupMenu popup;private Icon descendingIcon=new ImageIcon(java.awt.Toolkit.getDefaultToolkit().getImage(MemoryProbeTabUI.bc.getBundle().getResource(\"images/GraphSettings.gif\")));public ControlsPopupButton(){setIcon(descendingIcon);setOpaque(false);init();}public void showPopup(){if(popup==null){popup=new JPopupMenu();popup.add(controlsPanel);}popup.show(controlsButton,0,controlsButton.getHeight());}private void init(){addActionListener(new ActionListener(){public void actionPerformed(ActionEvent e){showPopup();}});}}public long getUpdateDelay(){if(sleepSlider!=null)return sleepSlider.getValue();else return 1000L;}public void reschedule(){if(this.dataGeneratorTimer==null){this.dataGeneratorTimer=new Timer();}if(this.dataGeneratorTimerTask!=null){try{this.dataGeneratorTimerTask.cancel();}catch(Exception e){e.printStackTrace();}}this.dataGeneratorTimer.schedule(this.dataGeneratorTimerTask=getDataGeneratorTask(),getUpdateDelay(),getUpdateDelay());}public void pauseSchedule(){if(this.dataGeneratorTimer!=null){this.dataGeneratorTimerTask.cancel();}this.dataGeneratorTimerTask=null;}protected TimerTask getDataGeneratorTask(){return new DataGenerator();}public void addNotify(){super.addNotify();if(removed){reschedule();this.removed=false;}}public void removeNotify(){super.removeNotify();if(this.dataGeneratorTimer!=null)this.dataGeneratorTimer.cancel();this.dataGeneratorTimer=null;this.removed=true;}public void setLogarithmic(boolean logarithmic){if(logarithmic){try{this.xyplot.setRangeAxis(new LogarithmicAxis(\"\"));}catch(Exception e){this.xyplot.setRangeAxis(new NumberAxis(\"\"));}}else{this.xyplot.setRangeAxis(new NumberAxis(\"\"));}}public void setBackground(Color bg){super.setBackground(bg);}public void updateRange(){DateAxis dateAxis=(DateAxis)this.xyplot.getDomainAxis();Calendar start=new GregorianCalendar();start.setTime(new Date());if(this.jRadioTimeSeconds.isSelected()){start.add(Calendar.SECOND,-60);}else if(this.jRadioTimeMinutes.isSelected()){start.add(Calendar.MINUTE,-60);}else if(this.jRadioTimeHours.isSelected()){start.add(Calendar.HOUR,-48);}if(this.jRadioTimeMinutes.isSelected()){sleepSlider.setValue(10000);}else if(this.jRadioTimeHours.isSelected()){sleepSlider.setValue(100000);}dateAxis.setRange(start.getTime(),new Date());}protected JPanel buildGraphControls(){this.controlsPanel=new JPanel();this.controlsPanel.setLayout(new BoxLayout(this.controlsPanel,BoxLayout.X_AXIS));JPanel timeDurationPanel=new JPanel();timeDurationPanel.setLayout(new BoxLayout(timeDurationPanel,BoxLayout.Y_AXIS));timeDurationPanel.setBorder(BorderFactory.createTitledBorder(\"Time Range\"));buttonGroupTimeRange=new javax.swing.ButtonGroup();jRadioTimeSeconds=new javax.swing.JRadioButton(\"seconds\",true);jRadioTimeSeconds.setToolTipText(\"Track the graph for 60 seconds\");jRadioTimeSeconds.setOpaque(false);jRadioTimeMinutes=new javax.swing.JRadioButton(\"minutes\",false);jRadioTimeMinutes.setToolTipText(\"Track this graph for 60 minutes.\");jRadioTimeMinutes.setOpaque(false);jRadioTimeHours=new javax.swing.JRadioButton(\"hours\",false);jRadioTimeHours.setToolTipText(\"Track this graph for 48 hours.\");jRadioTimeHours.setOpaque(false);buttonGroupTimeRange.add(jRadioTimeSeconds);buttonGroupTimeRange.add(jRadioTimeMinutes);buttonGroupTimeRange.add(jRadioTimeHours);timeDurationPanel.add(jRadioTimeSeconds);timeDurationPanel.add(jRadioTimeMinutes);timeDurationPanel.add(jRadioTimeHours);JPanel timeScalePanel=new JPanel();timeScalePanel.setLayout(new BoxLayout(timeScalePanel,BoxLayout.Y_AXIS));timeScalePanel.setBorder(BorderFactory.createTitledBorder(\"Time Scale\"));buttonGroupScale=new javax.swing.ButtonGroup();jRadioButtonScaleLinear=new javax.swing.JRadioButton(\"Linear\",true);jRadioButtonScaleLinear.setOpaque(false);jRadioButtonScaleLogarithmic=new javax.swing.JRadioButton(\"Logarithmic\",false);jRadioButtonScaleLogarithmic.setOpaque(false);buttonGroupScale.add(jRadioButtonScaleLinear);buttonGroupScale.add(jRadioButtonScaleLogarithmic);timeScalePanel.add(jRadioButtonScaleLinear);timeScalePanel.add(jRadioButtonScaleLogarithmic);JPanel updateSpeedPanel=new JPanel();updateSpeedPanel.setLayout(new BoxLayout(updateSpeedPanel,BoxLayout.Y_AXIS));updateSpeedPanel.setBorder(BorderFactory.createTitledBorder(\"Update Speed\"));sleepSlider=new LogarithmicTimeJSlider(100,100000,1000);sleepSlider.setPaintTicks(true);sleepSlider.setPaintLabels(true);sleepSlider.setMajorTickSpacing(10);sleepSlider.setMinorTickSpacing(10);sleepSlider.setToolTipText(\"Time between updates\");sleepSlider.setOpaque(false);sleepDelay=new JLabel(\"Delay: \"+sleepSlider.getTime());sleepSlider.addChangeListener(new javax.swing.event.ChangeListener(){public void stateChanged(javax.swing.event.ChangeEvent evt){sleepSliderPropertyChange(null);sleepDelay.setText(\"Delay: \"+sleepSlider.getTime());}});updateSpeedPanel.add(sleepSlider);updateSpeedPanel.add(sleepDelay);jRadioButtonScaleLinear.addChangeListener(new javax.swing.event.ChangeListener(){public void stateChanged(javax.swing.event.ChangeEvent evt){scaleChanged(evt);}});jRadioButtonScaleLogarithmic.addChangeListener(new javax.swing.event.ChangeListener(){public void stateChanged(javax.swing.event.ChangeEvent evt){scaleChanged(evt);}});this.controlsPanel.add(timeDurationPanel);this.controlsPanel.add(updateSpeedPanel);this.controlsPanel.add(timeScalePanel);return this.controlsPanel;}private void scaleChanged(javax.swing.event.ChangeEvent evt){setLogarithmic(jRadioButtonScaleLogarithmic.isSelected());}private void sleepSliderPropertyChange(java.beans.PropertyChangeEvent evt){if(!sleepSlider.getValueIsAdjusting()){reschedule();}}public abstract void addObservation()throws Exception;private void addObservationHandler(){try{addObservation();if(failures>0)failures--;}catch(Exception e){failures++;}if(failures>MAX_FAILURES){pauseSchedule();}updateRange();}protected void createTimeSeries(String name,Object key){TimeSeries ts=new TimeSeries(name,Millisecond.class);ts.setMaximumItemCount(1728000);this.timeSeriesMap.put(key,ts);dataset.addSeries(ts);}protected TimeSeries getTimeSeries(Object key){return(TimeSeries)this.timeSeriesMap.get(key);}protected class DataGenerator extends TimerTask{public void run(){addObservationHandler();}}private static class TestGraph extends AbstractGraphPanel{public static final String TEST=\"test\";private int x=1;public TestGraph(){createTimeSeries(TEST,TEST);reschedule();}public void addObservation()throws Exception{getTimeSeries(TEST).add(new Millisecond(),new Integer(x++));}}public static void main(String[]args){TestGraph graph=new TestGraph();JFrame frame=new JFrame();JPanel panel=new JPanel();panel.setLayout(new BorderLayout());frame.getContentPane().add(panel);panel.add(graph,BorderLayout.CENTER);frame.pack();frame.addWindowListener(new WindowAdapter(){public void windowClosing(WindowEvent e){System.exit(0);}});frame.setVisible(true);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class Activator implements BundleActivator,ServiceListener{private BundleContext m_context=null;private ServiceReference m_ref=null;private DictionaryService m_dictionary=null;public void start(BundleContext context)throws Exception{m_context=context;m_context.addServiceListener(this,\"(&(objectClass=\"+DictionaryService.class.getName()+\")\"+\"(Language=*))\");ServiceReference[]refs=m_context.getServiceReferences(DictionaryService.class.getName(),\"(Language=*)\");if(refs!=null){m_ref=refs[0];m_dictionary=(DictionaryService)m_context.getService(m_ref);}try{String word=\"\";BufferedReader in=new BufferedReader(new InputStreamReader(System.in));while(true){word=in.readLine();if(word.length()==0){break;}else if(m_dictionary==null){}else if(m_dictionary.checkWord(word)){}else{}}}catch(Exception ex){}}public void stop(BundleContext context){}public void serviceChanged(ServiceEvent event){if(event.getType()==ServiceEvent.REGISTERED){if(m_ref==null){m_ref=event.getServiceReference();m_dictionary=(DictionaryService)m_context.getService(m_ref);}}else if(event.getType()==ServiceEvent.UNREGISTERING){if(event.getServiceReference()==m_ref){m_context.ungetService(m_ref);m_ref=null;m_dictionary=null;ServiceReference[]refs=null;try{refs=m_context.getServiceReferences(DictionaryService.class.getName(),\"(Language=*)\");}catch(InvalidSyntaxException e){e.printStackTrace();}if(refs!=null){m_ref=refs[0];m_dictionary=(DictionaryService)m_context.getService(m_ref);}}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@InterfaceAudience.Private public class RpcException extends RuntimeException{RpcException(String remoteStackTrace){super(remoteStackTrace);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CustomTextSerDe extends LazySimpleSerDe{public CustomTextSerDe()throws SerDeException{}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class BooleanCompletor extends SimpleCompletor{public BooleanCompletor(){super(new String[]{\"true\",\"false\"});}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFExampleMaxN extends UDAF{public static class UDAFMaxNEvaluator extends UDAFExampleMaxMinNUtil.Evaluator{@Override protected boolean getAscending(){return false;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFExampleMinN extends UDAF{public static class UDAFMinNEvaluator extends UDAFExampleMaxMinNUtil.Evaluator{@Override protected boolean getAscending(){return true;}}}"
    },
    {
        "code_smells": [
            "LazyClass",
            "RefusedBequest"
        ],
        "source_code": "/***Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ParquetHiveSerDe extends AbstractSerDe{public static final Text MAP_KEY=new Text(\"key\");public static final Text MAP_VALUE=new Text(\"value\");public static final Text MAP=new Text(\"map\");public static final Text ARRAY=new Text(\"bag\");private SerDeStats stats;private ObjectInspector objInspector;private enum LAST_OPERATION{SERIALIZE,DESERIALIZE,UNKNOWN}private LAST_OPERATION status;private long serializedSize;private long deserializedSize;@Override public final void initialize(final Configuration conf,final Properties tbl)throws SerDeException{final TypeInfo rowTypeInfo;final List<String>columnNames;final List<TypeInfo>columnTypes;final String columnNameProperty=tbl.getProperty(IOConstants.COLUMNS);final String columnTypeProperty=tbl.getProperty(IOConstants.COLUMNS_TYPES);if(columnNameProperty.length()==0){columnNames=new ArrayList<String>();}else{columnNames=Arrays.asList(columnNameProperty.split(\",\"));}if(columnTypeProperty.length()==0){columnTypes=new ArrayList<TypeInfo>();}else{columnTypes=TypeInfoUtils.getTypeInfosFromTypeString(columnTypeProperty);}if(columnNames.size()!=columnTypes.size()){throw new IllegalArgumentException(\"ParquetHiveSerde initialization failed.Number of column \"+\"name and column type differs.columnNames=\"+columnNames+\",columnTypes=\"+columnTypes);}rowTypeInfo=TypeInfoFactory.getStructTypeInfo(columnNames,columnTypes);this.objInspector=new ArrayWritableObjectInspector((StructTypeInfo)rowTypeInfo);stats=new SerDeStats();serializedSize=0;deserializedSize=0;status=LAST_OPERATION.UNKNOWN;}@Override public Object deserialize(final Writable blob)throws SerDeException{status=LAST_OPERATION.DESERIALIZE;deserializedSize=0;if(blob instanceof ArrayWritable){deserializedSize=((ArrayWritable)blob).get().length;return blob;}else{return null;}}@Override public ObjectInspector getObjectInspector()throws SerDeException{return objInspector;}@Override public Class<? extends Writable>getSerializedClass(){return ArrayWritable.class;}@Override public Writable serialize(final Object obj,final ObjectInspector objInspector)throws SerDeException{if(!objInspector.getCategory().equals(Category.STRUCT)){throw new SerDeException(\"Cannot serialize \"+objInspector.getCategory()+\".Can only serialize a struct\");}final ArrayWritable serializeData=createStruct(obj,(StructObjectInspector)objInspector);serializedSize=serializeData.get().length;status=LAST_OPERATION.SERIALIZE;return serializeData;}private ArrayWritable createStruct(final Object obj,final StructObjectInspector inspector)throws SerDeException{final List<? extends StructField>fields=inspector.getAllStructFieldRefs();final Writable[]arr=new Writable[fields.size()];for(int i=0;i<fields.size();i++){final StructField field=fields.get(i);final Object subObj=inspector.getStructFieldData(obj,field);final ObjectInspector subInspector=field.getFieldObjectInspector();arr[i]=createObject(subObj,subInspector);}return new ArrayWritable(Writable.class,arr);}private Writable createMap(final Object obj,final MapObjectInspector inspector)throws SerDeException{final Map<?,?>sourceMap=inspector.getMap(obj);final ObjectInspector keyInspector=inspector.getMapKeyObjectInspector();final ObjectInspector valueInspector=inspector.getMapValueObjectInspector();final List<ArrayWritable>array=new ArrayList<ArrayWritable>();if(sourceMap!=null){for(final Entry<?,?>keyValue : sourceMap.entrySet()){final Writable key=createObject(keyValue.getKey(),keyInspector);final Writable value=createObject(keyValue.getValue(),valueInspector);if(key!=null){Writable[]arr=new Writable[2];arr[0]=key;arr[1]=value;array.add(new ArrayWritable(Writable.class,arr));}}}if(array.size()>0){final ArrayWritable subArray=new ArrayWritable(ArrayWritable.class,array.toArray(new ArrayWritable[array.size()]));return new ArrayWritable(Writable.class,new Writable[]{subArray});}else{return null;}}private ArrayWritable createArray(final Object obj,final ListObjectInspector inspector)throws SerDeException{final List<?>sourceArray=inspector.getList(obj);final ObjectInspector subInspector=inspector.getListElementObjectInspector();final List<Writable>array=new ArrayList<Writable>();if(sourceArray!=null){for(final Object curObj : sourceArray){final Writable newObj=createObject(curObj,subInspector);if(newObj!=null){array.add(newObj);}}}if(array.size()>0){final ArrayWritable subArray=new ArrayWritable(array.get(0).getClass(),array.toArray(new Writable[array.size()]));return new ArrayWritable(Writable.class,new Writable[]{subArray});}else{return null;}}private Writable createPrimitive(final Object obj,final PrimitiveObjectInspector inspector)throws SerDeException{if(obj==null){return null;}switch(inspector.getPrimitiveCategory()){case VOID: return null;case BOOLEAN: return new BooleanWritable(((BooleanObjectInspector)inspector).get(obj)? Boolean.TRUE : Boolean.FALSE);case BYTE: return new ByteWritable((byte)((ByteObjectInspector)inspector).get(obj));case DOUBLE: return new DoubleWritable(((DoubleObjectInspector)inspector).get(obj));case FLOAT: return new FloatWritable(((FloatObjectInspector)inspector).get(obj));case INT: return new IntWritable(((IntObjectInspector)inspector).get(obj));case LONG: return new LongWritable(((LongObjectInspector)inspector).get(obj));case SHORT: return new ShortWritable((short)((ShortObjectInspector)inspector).get(obj));case STRING: return new BinaryWritable(Binary.fromString(((StringObjectInspector)inspector).getPrimitiveJavaObject(obj)));default: throw new SerDeException(\"Unknown primitive : \"+inspector.getPrimitiveCategory());}}private Writable createObject(final Object obj,final ObjectInspector inspector)throws SerDeException{switch(inspector.getCategory()){case STRUCT: return createStruct(obj,(StructObjectInspector)inspector);case LIST: return createArray(obj,(ListObjectInspector)inspector);case MAP: return createMap(obj,(MapObjectInspector)inspector);case PRIMITIVE: return createPrimitive(obj,(PrimitiveObjectInspector)inspector);default: throw new SerDeException(\"Unknown data type\"+inspector.getCategory());}}@Override public SerDeStats getSerDeStats(){assert(status!=LAST_OPERATION.UNKNOWN);if(status==LAST_OPERATION.SERIALIZE){stats.setRawDataSize(serializedSize);}else{stats.setRawDataSize(deserializedSize);}return stats;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Deprecated public class Constants extends serdeConstants{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFWrongArgLengthForTestCase extends UDAF{static public class UDAFWrongArgLengthForTestCaseEvaluator implements UDAFEvaluator{private long mCount;public UDAFWrongArgLengthForTestCaseEvaluator(){super();init();}public void init(){mCount=0;}Text emptyText=new Text();public boolean iterate(Object o){if(o!=null && !emptyText.equals(o)){mCount++;}return true;}public LongWritable terminatePartial(){return new LongWritable(mCount);}public boolean merge(){return true;}public LongWritable terminate(){return new LongWritable(mCount);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class PreAuthorizationCallEvent extends PreEventContext{public PreAuthorizationCallEvent(HMSHandler handler){super(PreEventType.AUTHORIZATION_API_CALL,handler);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class AddResourceOperation extends HiveCommandOperation{protected AddResourceOperation(HiveSession parentSession,String statement,Map<String,String>confOverlay){super(parentSession,statement,confOverlay);setCommandProcessor(new AddResourceProcessor());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DeleteResourceOperation extends HiveCommandOperation{protected DeleteResourceOperation(HiveSession parentSession,String statement,Map<String,String>confOverlay){super(parentSession,statement,confOverlay);setCommandProcessor(new DeleteResourceProcessor());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DfsOperation extends HiveCommandOperation{protected DfsOperation(HiveSession parentSession,String statement,Map<String,String>confOverlay){super(parentSession,statement,confOverlay);setCommandProcessor(new DfsProcessor(parentSession.getHiveConf()));}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SetOperation extends HiveCommandOperation{protected SetOperation(HiveSession parentSession,String statement,Map<String,String>confOverlay){super(parentSession,statement,confOverlay);setCommandProcessor(new SetProcessor());}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/abstract class TopNHash{public static interface BinaryCollector extends OutputCollector<BytesWritable,BytesWritable>{}protected static final int FORWARD=-1;protected static final int EXCLUDED=-2;protected static final int FLUSH=-3;protected static final int DISABLE=-4;protected final int topN;protected final BinaryCollector collector;protected final long threshold;protected long usage;protected final byte[][]keys;protected final byte[][]values;protected final int[]hashes;protected int evicted;protected int excluded;protected final Comparator<Integer>C=new Comparator<Integer>(){public int compare(Integer o1,Integer o2){byte[]key1=keys[o1];byte[]key2=keys[o2];return WritableComparator.compareBytes(key1,0,key1.length,key2,0,key2.length);}};public static TopNHash create0(){return new HashForLimit0();}public static TopNHash create(boolean grouped,int topN,long threshold,BinaryCollector collector){if(topN==0){return new HashForLimit0();}if(grouped){return new HashForGroup(topN,threshold,collector);}return new HashForRow(topN,threshold,collector);}TopNHash(int topN,long threshold,BinaryCollector collector){this.topN=topN;this.threshold=threshold;this.collector=collector;this.keys=new byte[topN+1][];this.values=new byte[topN+1][];this.hashes=new int[topN+1];this.evicted=topN;}public int indexOf(HiveKey key){int size=size();if(usage>threshold){return excluded==0 ? DISABLE : FLUSH;}int index=size<topN ? size : evicted;keys[index]=Arrays.copyOf(key.getBytes(),key.getLength());hashes[index]=key.hashCode();if(!store(index)){return FORWARD;}if(size==topN){evicted=removeBiggest();if(index==evicted){excluded++;return EXCLUDED;}removed(evicted);}return index;}protected abstract int size();protected abstract boolean store(int index);protected abstract int removeBiggest();protected abstract Iterable<Integer>indexes();public void removed(int index){usage-=keys[index].length;keys[index]=null;if(values[index]!=null){usage-=values[index].length;values[index]=null;}hashes[index]=-1;}public void set(int index,BytesWritable value){values[index]=Arrays.copyOf(value.getBytes(),value.getLength());usage+=keys[index].length+values[index].length;}public void flush()throws IOException{for(int index : indexes()){flush(index);}excluded=0;}protected void flush(int index)throws IOException{if(index!=evicted && values[index]!=null){HiveKey keyWritable=new HiveKey(keys[index],hashes[index]);BytesWritable valueWritable=new BytesWritable(values[index]);collector.collect(keyWritable,valueWritable);usage-=values[index].length;values[index]=null;}}}class HashForRow extends TopNHash{private final MinMaxPriorityQueue<Integer>indexes;HashForRow(int topN,long threshold,BinaryCollector collector){super(topN,threshold,collector);this.indexes=MinMaxPriorityQueue.orderedBy(C).create();}protected int size(){return indexes.size();}protected boolean store(int index){return indexes.add(index);}protected int removeBiggest(){return indexes.removeLast();}protected Iterable<Integer>indexes(){Integer[]array=indexes.toArray(new Integer[indexes.size()]);Arrays.sort(array,0,array.length,C);return Arrays.asList(array);}}class HashForGroup extends TopNHash{private final SortedSet<Integer>indexes;HashForGroup(int topN,long threshold,BinaryCollector collector){super(topN,threshold,collector);this.indexes=new TreeSet<Integer>(C);}protected int size(){return indexes.size();}protected boolean store(int index){return indexes.add(index);}protected int removeBiggest(){Integer last=indexes.last();indexes.remove(last);return last;}protected Iterable<Integer>indexes(){return indexes;}}class HashForLimit0 extends TopNHash{HashForLimit0(){super(0,0,null);}@Override public int indexOf(HiveKey key){return EXCLUDED;}protected int size(){return 0;}protected boolean store(int index){return false;}protected int removeBiggest(){return 0;}protected Iterable<Integer>indexes(){return Collections.emptyList();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ImpersonationFailed extends StreamingException{public ImpersonationFailed(String username,Exception e){super(\"Failed to impersonate user \"+username,e);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class InvalidColumn extends StreamingException{public InvalidColumn(String msg){super(msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class InvalidPartition extends StreamingException{public InvalidPartition(String partitionName,String partitionValue){super(\"Invalid partition: Name=\"+partitionName+\",Value=\"+partitionValue);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class InvalidTrasactionState extends TransactionError{public InvalidTrasactionState(String msg){super(msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class PartitionCreationFailed extends StreamingException{public PartitionCreationFailed(HiveEndPoint endPoint,Exception cause){super(\"Failed to create partition \"+endPoint,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class SerializationError extends StreamingException{public SerializationError(String msg,Exception e){super(msg,e);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class TransactionBatchUnAvailable extends StreamingException{public TransactionBatchUnAvailable(HiveEndPoint ep,Exception e){super(\"Unable to acquire transaction batch on end point: \"+ep,e);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/class HashNode implements Serializable{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class PrimitiveObjectInspectorConverter{public static class BooleanConverter implements Converter{PrimitiveObjectInspector inputOI;SettableBooleanObjectInspector outputOI;Object r;public BooleanConverter(PrimitiveObjectInspector inputOI,SettableBooleanObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create(false);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getBoolean(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class ByteConverter implements Converter{PrimitiveObjectInspector inputOI;SettableByteObjectInspector outputOI;Object r;public ByteConverter(PrimitiveObjectInspector inputOI,SettableByteObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create((byte)0);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getByte(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class ShortConverter implements Converter{PrimitiveObjectInspector inputOI;SettableShortObjectInspector outputOI;Object r;public ShortConverter(PrimitiveObjectInspector inputOI,SettableShortObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create((short)0);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getShort(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class IntConverter implements Converter{PrimitiveObjectInspector inputOI;SettableIntObjectInspector outputOI;Object r;public IntConverter(PrimitiveObjectInspector inputOI,SettableIntObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create((int)0);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getInt(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class LongConverter implements Converter{PrimitiveObjectInspector inputOI;SettableLongObjectInspector outputOI;Object r;public LongConverter(PrimitiveObjectInspector inputOI,SettableLongObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create((long)0);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getLong(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class FloatConverter implements Converter{PrimitiveObjectInspector inputOI;SettableFloatObjectInspector outputOI;Object r;public FloatConverter(PrimitiveObjectInspector inputOI,SettableFloatObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create((float)0);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getFloat(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class DoubleConverter implements Converter{PrimitiveObjectInspector inputOI;SettableDoubleObjectInspector outputOI;Object r;public DoubleConverter(PrimitiveObjectInspector inputOI,SettableDoubleObjectInspector outputOI){this.inputOI=inputOI;this.outputOI=outputOI;r=outputOI.create((double)0);}@Override public Object convert(Object o){if(o==null){return null;}try{outputOI.set(r,PrimitiveObjectInspectorUtils.getDouble(o,inputOI));return r;}catch(NumberFormatException e){return null;}}}public static class TextConverter implements Converter{PrimitiveObjectInspector inputOI;Text t=new Text();ByteStream.Output out=new ByteStream.Output();static byte[]trueBytes={'T','R','U','E'};static byte[]falseBytes={'F','A','L','S','E'};public TextConverter(PrimitiveObjectInspector inputOI){this.inputOI=inputOI;}public Text convert(Object o){if(o==null){return null;}switch(inputOI.getPrimitiveCategory()){case VOID:{return null;}case BOOLEAN:{t.set(((BooleanObjectInspector)inputOI).get(o)? trueBytes : falseBytes);return t;}case BYTE:{out.reset();LazyInteger.writeUTF8NoException(out,((ByteObjectInspector)inputOI).get(o));t.set(out.getData(),0,out.getCount());return t;}case SHORT:{out.reset();LazyInteger.writeUTF8NoException(out,((ShortObjectInspector)inputOI).get(o));t.set(out.getData(),0,out.getCount());return t;}case INT:{out.reset();LazyInteger.writeUTF8NoException(out,((IntObjectInspector)inputOI).get(o));t.set(out.getData(),0,out.getCount());return t;}case LONG:{out.reset();LazyLong.writeUTF8NoException(out,((LongObjectInspector)inputOI).get(o));t.set(out.getData(),0,out.getCount());return t;}case FLOAT:{t.set(String.valueOf(((FloatObjectInspector)inputOI).get(o)));return t;}case DOUBLE:{t.set(String.valueOf(((DoubleObjectInspector)inputOI).get(o)));return t;}case STRING:{t.set(((StringObjectInspector)inputOI).getPrimitiveJavaObject(o));return t;}default:{throw new RuntimeException(\"Hive 2 Internal error: type=\"+inputOI.getTypeName());}}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class InterfaceAudience{@Documented public @interface Public{}@Documented public @interface LimitedPrivate{String[]value();}@Documented public @interface Private{}private InterfaceAudience(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class InterfaceStability{@Documented public @interface Stable{}@Documented public @interface Evolving{}@Documented public @interface Unstable{}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Autogenerated by Thrift**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*/public class ThriftHiveMetastore{public interface Iface extends com.facebook.fb303.FacebookService.Iface{public boolean create_database(String name,String location_uri)throws AlreadyExistsException,MetaException,TException;public Database get_database(String name)throws NoSuchObjectException,MetaException,TException;public boolean drop_database(String name)throws MetaException,TException;public List<String>get_databases()throws MetaException,TException;public Type get_type(String name)throws MetaException,TException;public boolean create_type(Type type)throws AlreadyExistsException,InvalidObjectException,MetaException,TException;public boolean drop_type(String type)throws MetaException,TException;public Map<String,Type>get_type_all(String name)throws MetaException,TException;public List<FieldSchema>get_fields(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public void create_table(Table tbl)throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException;public void drop_table(String dbname,String name,boolean deleteData)throws NoSuchObjectException,MetaException,TException;public List<String>get_tables(String db_name,String pattern)throws MetaException,UnknownTableException,UnknownDBException,TException;public Table get_table(String dbname,String tbl_name)throws MetaException,NoSuchObjectException,TException;public boolean set_table_parameters(String dbname,String tbl_name,Map<String,String>params)throws NoSuchObjectException,MetaException,TException;public void alter_table(String dbname,String tbl_name,Table new_tbl)throws InvalidOperationException,MetaException,TException;public void truncate_table(String db_name,String table_name,String partition)throws MetaException,UnknownTableException,UnknownDBException,TException;public List<String>cat(String db_name,String table_name,String partition,int high)throws MetaException,UnknownDBException,UnknownTableException,TException;public Partition add_partition(Partition new_part)throws InvalidObjectException,AlreadyExistsException,MetaException,TException;public Partition append_partition(String db_name,String tbl_name,List<String>part_vals)throws InvalidObjectException,AlreadyExistsException,MetaException,TException;public boolean drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData)throws NoSuchObjectException,MetaException,TException;public Partition get_partition(String db_name,String tbl_name,List<String>part_vals)throws MetaException,TException;public List<Partition>get_partitions(String db_name,String tbl_name,short max_parts)throws NoSuchObjectException,MetaException,TException;public boolean set_partition_parameters(String db_name,String tbl_name,String pname,Map<String,String>params)throws NoSuchObjectException,MetaException,TException;public boolean alter_partitions(StorageDescriptor sd,List<String>parts)throws InvalidOperationException,MetaException,TException;public boolean create_index(Index index_def)throws IndexAlreadyExistsException,MetaException,TException;}public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface{public Client(TProtocol prot){this(prot,prot);}public Client(TProtocol iprot,TProtocol oprot){super(iprot,oprot);}public boolean create_database(String name,String location_uri)throws AlreadyExistsException,MetaException,TException{send_create_database(name,location_uri);return recv_create_database();}public void send_create_database(String name,String location_uri)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_database\",TMessageType.CALL,seqid_));create_database_args args=new create_database_args();args.name=name;args.location_uri=location_uri;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_create_database()throws AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}create_database_result result=new create_database_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"create_database failed: unknown result\");}public Database get_database(String name)throws NoSuchObjectException,MetaException,TException{send_get_database(name);return recv_get_database();}public void send_get_database(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_database\",TMessageType.CALL,seqid_));get_database_args args=new get_database_args();args.name=name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Database recv_get_database()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_database_result result=new get_database_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_database failed: unknown result\");}public boolean drop_database(String name)throws MetaException,TException{send_drop_database(name);return recv_drop_database();}public void send_drop_database(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.CALL,seqid_));drop_database_args args=new drop_database_args();args.name=name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_database()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}drop_database_result result=new drop_database_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_database failed: unknown result\");}public List<String>get_databases()throws MetaException,TException{send_get_databases();return recv_get_databases();}public void send_get_databases()throws TException{oprot_.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.CALL,seqid_));get_databases_args args=new get_databases_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_databases()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_databases_result result=new get_databases_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_databases failed: unknown result\");}public Type get_type(String name)throws MetaException,TException{send_get_type(name);return recv_get_type();}public void send_get_type(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_type\",TMessageType.CALL,seqid_));get_type_args args=new get_type_args();args.name=name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Type recv_get_type()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_type_result result=new get_type_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_type failed: unknown result\");}public boolean create_type(Type type)throws AlreadyExistsException,InvalidObjectException,MetaException,TException{send_create_type(type);return recv_create_type();}public void send_create_type(Type type)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_type\",TMessageType.CALL,seqid_));create_type_args args=new create_type_args();args.type=type;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_create_type()throws AlreadyExistsException,InvalidObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}create_type_result result=new create_type_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}if(result.__isset.o3){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"create_type failed: unknown result\");}public boolean drop_type(String type)throws MetaException,TException{send_drop_type(type);return recv_drop_type();}public void send_drop_type(String type)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.CALL,seqid_));drop_type_args args=new drop_type_args();args.type=type;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_type()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}drop_type_result result=new drop_type_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_type failed: unknown result\");}public Map<String,Type>get_type_all(String name)throws MetaException,TException{send_get_type_all(name);return recv_get_type_all();}public void send_get_type_all(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.CALL,seqid_));get_type_all_args args=new get_type_all_args();args.name=name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Map<String,Type>recv_get_type_all()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_type_all_result result=new get_type_all_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_type_all failed: unknown result\");}public List<FieldSchema>get_fields(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_fields(db_name,table_name);return recv_get_fields();}public void send_get_fields(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.CALL,seqid_));get_fields_args args=new get_fields_args();args.db_name=db_name;args.table_name=table_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<FieldSchema>recv_get_fields()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_fields_result result=new get_fields_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_fields failed: unknown result\");}public void create_table(Table tbl)throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException{send_create_table(tbl);recv_create_table();}public void send_create_table(Table tbl)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_table\",TMessageType.CALL,seqid_));create_table_args args=new create_table_args();args.tbl=tbl;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_create_table()throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}create_table_result result=new create_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}if(result.__isset.o4){throw result.o4;}return;}public void drop_table(String dbname,String name,boolean deleteData)throws NoSuchObjectException,MetaException,TException{send_drop_table(dbname,name,deleteData);recv_drop_table();}public void send_drop_table(String dbname,String name,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.CALL,seqid_));drop_table_args args=new drop_table_args();args.dbname=dbname;args.name=name;args.deleteData=deleteData;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_drop_table()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}drop_table_result result=new drop_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.o1){throw result.o1;}if(result.__isset.ouch3){throw result.ouch3;}return;}public List<String>get_tables(String db_name,String pattern)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_tables(db_name,pattern);return recv_get_tables();}public void send_get_tables(String db_name,String pattern)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.CALL,seqid_));get_tables_args args=new get_tables_args();args.db_name=db_name;args.pattern=pattern;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_tables()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_tables_result result=new get_tables_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_tables failed: unknown result\");}public Table get_table(String dbname,String tbl_name)throws MetaException,NoSuchObjectException,TException{send_get_table(dbname,tbl_name);return recv_get_table();}public void send_get_table(String dbname,String tbl_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_table\",TMessageType.CALL,seqid_));get_table_args args=new get_table_args();args.dbname=dbname;args.tbl_name=tbl_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Table recv_get_table()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_table_result result=new get_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_table failed: unknown result\");}public boolean set_table_parameters(String dbname,String tbl_name,Map<String,String>params)throws NoSuchObjectException,MetaException,TException{send_set_table_parameters(dbname,tbl_name,params);return recv_set_table_parameters();}public void send_set_table_parameters(String dbname,String tbl_name,Map<String,String>params)throws TException{oprot_.writeMessageBegin(new TMessage(\"set_table_parameters\",TMessageType.CALL,seqid_));set_table_parameters_args args=new set_table_parameters_args();args.dbname=dbname;args.tbl_name=tbl_name;args.params=params;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_set_table_parameters()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}set_table_parameters_result result=new set_table_parameters_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"set_table_parameters failed: unknown result\");}public void alter_table(String dbname,String tbl_name,Table new_tbl)throws InvalidOperationException,MetaException,TException{send_alter_table(dbname,tbl_name,new_tbl);recv_alter_table();}public void send_alter_table(String dbname,String tbl_name,Table new_tbl)throws TException{oprot_.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.CALL,seqid_));alter_table_args args=new alter_table_args();args.dbname=dbname;args.tbl_name=tbl_name;args.new_tbl=new_tbl;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_alter_table()throws InvalidOperationException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}alter_table_result result=new alter_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}return;}public void truncate_table(String db_name,String table_name,String partition)throws MetaException,UnknownTableException,UnknownDBException,TException{send_truncate_table(db_name,table_name,partition);recv_truncate_table();}public void send_truncate_table(String db_name,String table_name,String partition)throws TException{oprot_.writeMessageBegin(new TMessage(\"truncate_table\",TMessageType.CALL,seqid_));truncate_table_args args=new truncate_table_args();args.db_name=db_name;args.table_name=table_name;args.partition=partition;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_truncate_table()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}truncate_table_result result=new truncate_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}return;}public List<String>cat(String db_name,String table_name,String partition,int high)throws MetaException,UnknownDBException,UnknownTableException,TException{send_cat(db_name,table_name,partition,high);return recv_cat();}public void send_cat(String db_name,String table_name,String partition,int high)throws TException{oprot_.writeMessageBegin(new TMessage(\"cat\",TMessageType.CALL,seqid_));cat_args args=new cat_args();args.db_name=db_name;args.table_name=table_name;args.partition=partition;args.high=high;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_cat()throws MetaException,UnknownDBException,UnknownTableException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}cat_result result=new cat_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"cat failed: unknown result\");}public Partition add_partition(Partition new_part)throws InvalidObjectException,AlreadyExistsException,MetaException,TException{send_add_partition(new_part);return recv_add_partition();}public void send_add_partition(Partition new_part)throws TException{oprot_.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.CALL,seqid_));add_partition_args args=new add_partition_args();args.new_part=new_part;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_add_partition()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}add_partition_result result=new add_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}if(result.__isset.o3){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"add_partition failed: unknown result\");}public Partition append_partition(String db_name,String tbl_name,List<String>part_vals)throws InvalidObjectException,AlreadyExistsException,MetaException,TException{send_append_partition(db_name,tbl_name,part_vals);return recv_append_partition();}public void send_append_partition(String db_name,String tbl_name,List<String>part_vals)throws TException{oprot_.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.CALL,seqid_));append_partition_args args=new append_partition_args();args.db_name=db_name;args.tbl_name=tbl_name;args.part_vals=part_vals;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_append_partition()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}append_partition_result result=new append_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}if(result.__isset.o3){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"append_partition failed: unknown result\");}public boolean drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData)throws NoSuchObjectException,MetaException,TException{send_drop_partition(db_name,tbl_name,part_vals,deleteData);return recv_drop_partition();}public void send_drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.CALL,seqid_));drop_partition_args args=new drop_partition_args();args.db_name=db_name;args.tbl_name=tbl_name;args.part_vals=part_vals;args.deleteData=deleteData;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_partition()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}drop_partition_result result=new drop_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_partition failed: unknown result\");}public Partition get_partition(String db_name,String tbl_name,List<String>part_vals)throws MetaException,TException{send_get_partition(db_name,tbl_name,part_vals);return recv_get_partition();}public void send_get_partition(String db_name,String tbl_name,List<String>part_vals)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.CALL,seqid_));get_partition_args args=new get_partition_args();args.db_name=db_name;args.tbl_name=tbl_name;args.part_vals=part_vals;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_get_partition()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_partition_result result=new get_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partition failed: unknown result\");}public List<Partition>get_partitions(String db_name,String tbl_name,short max_parts)throws NoSuchObjectException,MetaException,TException{send_get_partitions(db_name,tbl_name,max_parts);return recv_get_partitions();}public void send_get_partitions(String db_name,String tbl_name,short max_parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.CALL,seqid_));get_partitions_args args=new get_partitions_args();args.db_name=db_name;args.tbl_name=tbl_name;args.max_parts=max_parts;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<Partition>recv_get_partitions()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_partitions_result result=new get_partitions_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partitions failed: unknown result\");}public boolean set_partition_parameters(String db_name,String tbl_name,String pname,Map<String,String>params)throws NoSuchObjectException,MetaException,TException{send_set_partition_parameters(db_name,tbl_name,pname,params);return recv_set_partition_parameters();}public void send_set_partition_parameters(String db_name,String tbl_name,String pname,Map<String,String>params)throws TException{oprot_.writeMessageBegin(new TMessage(\"set_partition_parameters\",TMessageType.CALL,seqid_));set_partition_parameters_args args=new set_partition_parameters_args();args.db_name=db_name;args.tbl_name=tbl_name;args.pname=pname;args.params=params;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_set_partition_parameters()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}set_partition_parameters_result result=new set_partition_parameters_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"set_partition_parameters failed: unknown result\");}public boolean alter_partitions(StorageDescriptor sd,List<String>parts)throws InvalidOperationException,MetaException,TException{send_alter_partitions(sd,parts);return recv_alter_partitions();}public void send_alter_partitions(StorageDescriptor sd,List<String>parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"alter_partitions\",TMessageType.CALL,seqid_));alter_partitions_args args=new alter_partitions_args();args.sd=sd;args.parts=parts;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_alter_partitions()throws InvalidOperationException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}alter_partitions_result result=new alter_partitions_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"alter_partitions failed: unknown result\");}public boolean create_index(Index index_def)throws IndexAlreadyExistsException,MetaException,TException{send_create_index(index_def);return recv_create_index();}public void send_create_index(Index index_def)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_index\",TMessageType.CALL,seqid_));create_index_args args=new create_index_args();args.index_def=index_def;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_create_index()throws IndexAlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}create_index_result result=new create_index_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.o1){throw result.o1;}if(result.__isset.o2){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"create_index failed: unknown result\");}}public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor{public Processor(Iface iface){super(iface);iface_=iface;processMap_.put(\"create_database\",new create_database());processMap_.put(\"get_database\",new get_database());processMap_.put(\"drop_database\",new drop_database());processMap_.put(\"get_databases\",new get_databases());processMap_.put(\"get_type\",new get_type());processMap_.put(\"create_type\",new create_type());processMap_.put(\"drop_type\",new drop_type());processMap_.put(\"get_type_all\",new get_type_all());processMap_.put(\"get_fields\",new get_fields());processMap_.put(\"create_table\",new create_table());processMap_.put(\"drop_table\",new drop_table());processMap_.put(\"get_tables\",new get_tables());processMap_.put(\"get_table\",new get_table());processMap_.put(\"set_table_parameters\",new set_table_parameters());processMap_.put(\"alter_table\",new alter_table());processMap_.put(\"truncate_table\",new truncate_table());processMap_.put(\"cat\",new cat());processMap_.put(\"add_partition\",new add_partition());processMap_.put(\"append_partition\",new append_partition());processMap_.put(\"drop_partition\",new drop_partition());processMap_.put(\"get_partition\",new get_partition());processMap_.put(\"get_partitions\",new get_partitions());processMap_.put(\"set_partition_parameters\",new set_partition_parameters());processMap_.put(\"alter_partitions\",new alter_partitions());processMap_.put(\"create_index\",new create_index());}private Iface iface_;public boolean process(TProtocol iprot,TProtocol oprot)throws TException{TMessage msg=iprot.readMessageBegin();ProcessFunction fn=processMap_.get(msg.name);if(fn==null){TProtocolUtil.skip(iprot,TType.STRUCT);iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.UNKNOWN_METHOD,\"Invalid method name: '\"+msg.name+\"'\");oprot.writeMessageBegin(new TMessage(msg.name,TMessageType.EXCEPTION,msg.seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return true;}fn.process(msg.seqid,iprot,oprot);return true;}private class create_database implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_database_args args=new create_database_args();args.read(iprot);iprot.readMessageEnd();create_database_result result=new create_database_result();try{result.success=iface_.create_database(args.name,args.location_uri);result.__isset.success=true;}catch(AlreadyExistsException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"create_database\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_database implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_database_args args=new get_database_args();args.read(iprot);iprot.readMessageEnd();get_database_result result=new get_database_result();try{result.success=iface_.get_database(args.name);result.__isset.success=true;}catch(NoSuchObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"get_database\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_database implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_database_args args=new drop_database_args();args.read(iprot);iprot.readMessageEnd();drop_database_result result=new drop_database_result();try{result.success=iface_.drop_database(args.name);result.__isset.success=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_databases implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_databases_args args=new get_databases_args();args.read(iprot);iprot.readMessageEnd();get_databases_result result=new get_databases_result();try{result.success=iface_.get_databases();result.__isset.success=true;}catch(MetaException o1){result.o1=o1;result.__isset.o1=true;}oprot.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_type implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_type_args args=new get_type_args();args.read(iprot);iprot.readMessageEnd();get_type_result result=new get_type_result();try{result.success=iface_.get_type(args.name);result.__isset.success=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"get_type\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class create_type implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_type_args args=new create_type_args();args.read(iprot);iprot.readMessageEnd();create_type_result result=new create_type_result();try{result.success=iface_.create_type(args.type);result.__isset.success=true;}catch(AlreadyExistsException o1){result.o1=o1;result.__isset.o1=true;}catch(InvalidObjectException o2){result.o2=o2;result.__isset.o2=true;}catch(MetaException o3){result.o3=o3;result.__isset.o3=true;}oprot.writeMessageBegin(new TMessage(\"create_type\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_type implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_type_args args=new drop_type_args();args.read(iprot);iprot.readMessageEnd();drop_type_result result=new drop_type_result();try{result.success=iface_.drop_type(args.type);result.__isset.success=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_type_all implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_type_all_args args=new get_type_all_args();args.read(iprot);iprot.readMessageEnd();get_type_all_result result=new get_type_all_result();try{result.success=iface_.get_type_all(args.name);result.__isset.success=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_fields implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_fields_args args=new get_fields_args();args.read(iprot);iprot.readMessageEnd();get_fields_result result=new get_fields_result();try{result.success=iface_.get_fields(args.db_name,args.table_name);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class create_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_table_args args=new create_table_args();args.read(iprot);iprot.readMessageEnd();create_table_result result=new create_table_result();try{iface_.create_table(args.tbl);}catch(AlreadyExistsException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(InvalidObjectException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(MetaException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}catch(NoSuchObjectException o4){result.o4=o4;result.__isset.o4=true;}oprot.writeMessageBegin(new TMessage(\"create_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_table_args args=new drop_table_args();args.read(iprot);iprot.readMessageEnd();drop_table_result result=new drop_table_result();try{iface_.drop_table(args.dbname,args.name,args.deleteData);}catch(NoSuchObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_tables implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_tables_args args=new get_tables_args();args.read(iprot);iprot.readMessageEnd();get_tables_result result=new get_tables_result();try{result.success=iface_.get_tables(args.db_name,args.pattern);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_table_args args=new get_table_args();args.read(iprot);iprot.readMessageEnd();get_table_result result=new get_table_result();try{result.success=iface_.get_table(args.dbname,args.tbl_name);result.__isset.success=true;}catch(MetaException o1){result.o1=o1;result.__isset.o1=true;}catch(NoSuchObjectException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"get_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class set_table_parameters implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{set_table_parameters_args args=new set_table_parameters_args();args.read(iprot);iprot.readMessageEnd();set_table_parameters_result result=new set_table_parameters_result();try{result.success=iface_.set_table_parameters(args.dbname,args.tbl_name,args.params);result.__isset.success=true;}catch(NoSuchObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"set_table_parameters\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class alter_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{alter_table_args args=new alter_table_args();args.read(iprot);iprot.readMessageEnd();alter_table_result result=new alter_table_result();try{iface_.alter_table(args.dbname,args.tbl_name,args.new_tbl);}catch(InvalidOperationException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class truncate_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{truncate_table_args args=new truncate_table_args();args.read(iprot);iprot.readMessageEnd();truncate_table_result result=new truncate_table_result();try{iface_.truncate_table(args.db_name,args.table_name,args.partition);}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"truncate_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class cat implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{cat_args args=new cat_args();args.read(iprot);iprot.readMessageEnd();cat_result result=new cat_result();try{result.success=iface_.cat(args.db_name,args.table_name,args.partition,args.high);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownDBException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownTableException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"cat\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class add_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{add_partition_args args=new add_partition_args();args.read(iprot);iprot.readMessageEnd();add_partition_result result=new add_partition_result();try{result.success=iface_.add_partition(args.new_part);result.__isset.success=true;}catch(InvalidObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(AlreadyExistsException o2){result.o2=o2;result.__isset.o2=true;}catch(MetaException o3){result.o3=o3;result.__isset.o3=true;}oprot.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class append_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{append_partition_args args=new append_partition_args();args.read(iprot);iprot.readMessageEnd();append_partition_result result=new append_partition_result();try{result.success=iface_.append_partition(args.db_name,args.tbl_name,args.part_vals);result.__isset.success=true;}catch(InvalidObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(AlreadyExistsException o2){result.o2=o2;result.__isset.o2=true;}catch(MetaException o3){result.o3=o3;result.__isset.o3=true;}oprot.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_partition_args args=new drop_partition_args();args.read(iprot);iprot.readMessageEnd();drop_partition_result result=new drop_partition_result();try{result.success=iface_.drop_partition(args.db_name,args.tbl_name,args.part_vals,args.deleteData);result.__isset.success=true;}catch(NoSuchObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partition_args args=new get_partition_args();args.read(iprot);iprot.readMessageEnd();get_partition_result result=new get_partition_result();try{result.success=iface_.get_partition(args.db_name,args.tbl_name,args.part_vals);result.__isset.success=true;}catch(MetaException o1){result.o1=o1;result.__isset.o1=true;}oprot.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partitions implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partitions_args args=new get_partitions_args();args.read(iprot);iprot.readMessageEnd();get_partitions_result result=new get_partitions_result();try{result.success=iface_.get_partitions(args.db_name,args.tbl_name,args.max_parts);result.__isset.success=true;}catch(NoSuchObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class set_partition_parameters implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{set_partition_parameters_args args=new set_partition_parameters_args();args.read(iprot);iprot.readMessageEnd();set_partition_parameters_result result=new set_partition_parameters_result();try{result.success=iface_.set_partition_parameters(args.db_name,args.tbl_name,args.pname,args.params);result.__isset.success=true;}catch(NoSuchObjectException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"set_partition_parameters\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class alter_partitions implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{alter_partitions_args args=new alter_partitions_args();args.read(iprot);iprot.readMessageEnd();alter_partitions_result result=new alter_partitions_result();try{result.success=iface_.alter_partitions(args.sd,args.parts);result.__isset.success=true;}catch(InvalidOperationException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"alter_partitions\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class create_index implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_index_args args=new create_index_args();args.read(iprot);iprot.readMessageEnd();create_index_result result=new create_index_result();try{result.success=iface_.create_index(args.index_def);result.__isset.success=true;}catch(IndexAlreadyExistsException o1){result.o1=o1;result.__isset.o1=true;}catch(MetaException o2){result.o2=o2;result.__isset.o2=true;}oprot.writeMessageBegin(new TMessage(\"create_index\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}}public static class create_database_args implements TBase,java.io.Serializable{private String name;private String location_uri;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean name=false;public boolean location_uri=false;}public create_database_args(){}public create_database_args(String name,String location_uri){this();this.name=name;this.__isset.name=true;this.location_uri=location_uri;this.__isset.location_uri=true;}public String getName(){return this.name;}public void setName(String name){this.name=name;this.__isset.name=true;}public void unsetName(){this.__isset.name=false;}public String getLocation_uri(){return this.location_uri;}public void setLocation_uri(String location_uri){this.location_uri=location_uri;this.__isset.location_uri=true;}public void unsetLocation_uri(){this.__isset.location_uri=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_database_args)return this.equals((create_database_args)that);return false;}public boolean equals(create_database_args that){if(that==null)return false;boolean this_present_name=true &&(this.name!=null);boolean that_present_name=true &&(that.name!=null);if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}boolean this_present_location_uri=true &&(this.location_uri!=null);boolean that_present_location_uri=true &&(that.location_uri!=null);if(this_present_location_uri || that_present_location_uri){if(!(this_present_location_uri && that_present_location_uri))return false;if(!this.location_uri.equals(that.location_uri))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();this.__isset.name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.location_uri=iprot.readString();this.__isset.location_uri=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_database_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.name!=null){field.name=\"name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.name);oprot.writeFieldEnd();}if(this.location_uri!=null){field.name=\"location_uri\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.location_uri);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_database_result implements TBase,java.io.Serializable{private boolean success;private AlreadyExistsException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public create_database_result(){}public create_database_result(boolean success,AlreadyExistsException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public AlreadyExistsException getO1(){return this.o1;}public void setO1(AlreadyExistsException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_database_result)return this.equals((create_database_result)that);return false;}public boolean equals(create_database_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new AlreadyExistsException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_database_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_database_args implements TBase,java.io.Serializable{private String name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean name=false;}public get_database_args(){}public get_database_args(String name){this();this.name=name;this.__isset.name=true;}public String getName(){return this.name;}public void setName(String name){this.name=name;this.__isset.name=true;}public void unsetName(){this.__isset.name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_database_args)return this.equals((get_database_args)that);return false;}public boolean equals(get_database_args that){if(that==null)return false;boolean this_present_name=true &&(this.name!=null);boolean that_present_name=true &&(that.name!=null);if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();this.__isset.name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_database_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.name!=null){field.name=\"name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_database_result implements TBase,java.io.Serializable{private Database success;private NoSuchObjectException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public get_database_result(){}public get_database_result(Database success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public Database getSuccess(){return this.success;}public void setSuccess(Database success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_database_result)return this.equals((get_database_result)that);return false;}public boolean equals(get_database_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Database();this.success.read(iprot);this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_database_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRUCT;field.id=0;oprot.writeFieldBegin(field);this.success.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_database_args implements TBase,java.io.Serializable{private String name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean name=false;}public drop_database_args(){}public drop_database_args(String name){this();this.name=name;this.__isset.name=true;}public String getName(){return this.name;}public void setName(String name){this.name=name;this.__isset.name=true;}public void unsetName(){this.__isset.name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_database_args)return this.equals((drop_database_args)that);return false;}public boolean equals(drop_database_args that){if(that==null)return false;boolean this_present_name=true &&(this.name!=null);boolean that_present_name=true &&(that.name!=null);if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();this.__isset.name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_database_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.name!=null){field.name=\"name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_database_result implements TBase,java.io.Serializable{private boolean success;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o2=false;}public drop_database_result(){}public drop_database_result(boolean success,MetaException o2){this();this.success=success;this.__isset.success=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_database_result)return this.equals((drop_database_result)that);return false;}public boolean equals(drop_database_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_database_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_databases_args implements TBase,java.io.Serializable{public get_databases_args(){}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_databases_args)return this.equals((get_databases_args)that);return false;}public boolean equals(get_databases_args that){if(that==null)return false;return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_databases_args\");oprot.writeStructBegin(struct);oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_databases_result implements TBase,java.io.Serializable{private List<String>success;private MetaException o1;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;}public get_databases_result(){}public get_databases_result(List<String>success,MetaException o1){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_databases_result)return this.equals((get_databases_result)that);return false;}public boolean equals(get_databases_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list48=iprot.readListBegin();this.success=new ArrayList<String>(_list48.size);for(int _i49=0;_i49<_list48.size;++_i49){String _elem50=null;_elem50=iprot.readString();this.success.add(_elem50);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_databases_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter51 : this.success){oprot.writeString(_iter51);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_type_args implements TBase,java.io.Serializable{private String name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean name=false;}public get_type_args(){}public get_type_args(String name){this();this.name=name;this.__isset.name=true;}public String getName(){return this.name;}public void setName(String name){this.name=name;this.__isset.name=true;}public void unsetName(){this.__isset.name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_args)return this.equals((get_type_args)that);return false;}public boolean equals(get_type_args that){if(that==null)return false;boolean this_present_name=true &&(this.name!=null);boolean that_present_name=true &&(that.name!=null);if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();this.__isset.name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_type_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.name!=null){field.name=\"name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_type_result implements TBase,java.io.Serializable{private Type success;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o2=false;}public get_type_result(){}public get_type_result(Type success,MetaException o2){this();this.success=success;this.__isset.success=true;this.o2=o2;this.__isset.o2=true;}public Type getSuccess(){return this.success;}public void setSuccess(Type success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_result)return this.equals((get_type_result)that);return false;}public boolean equals(get_type_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Type();this.success.read(iprot);this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_type_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRUCT;field.id=0;oprot.writeFieldBegin(field);this.success.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_type_args implements TBase,java.io.Serializable{private Type type;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean type=false;}public create_type_args(){}public create_type_args(Type type){this();this.type=type;this.__isset.type=true;}public Type getType(){return this.type;}public void setType(Type type){this.type=type;this.__isset.type=true;}public void unsetType(){this.type=null;this.__isset.type=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_type_args)return this.equals((create_type_args)that);return false;}public boolean equals(create_type_args that){if(that==null)return false;boolean this_present_type=true &&(this.type!=null);boolean that_present_type=true &&(that.type!=null);if(this_present_type || that_present_type){if(!(this_present_type && that_present_type))return false;if(!this.type.equals(that.type))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.type=new Type();this.type.read(iprot);this.__isset.type=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_type_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.type!=null){field.name=\"type\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.type.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_type_result implements TBase,java.io.Serializable{private boolean success;private AlreadyExistsException o1;private InvalidObjectException o2;private MetaException o3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;public boolean o3=false;}public create_type_result(){}public create_type_result(boolean success,AlreadyExistsException o1,InvalidObjectException o2,MetaException o3){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;this.o3=o3;this.__isset.o3=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public AlreadyExistsException getO1(){return this.o1;}public void setO1(AlreadyExistsException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public InvalidObjectException getO2(){return this.o2;}public void setO2(InvalidObjectException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;this.__isset.o3=true;}public void unsetO3(){this.o3=null;this.__isset.o3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_type_result)return this.equals((create_type_result)that);return false;}public boolean equals(create_type_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true &&(this.o3!=null);boolean that_present_o3=true &&(that.o3!=null);if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new AlreadyExistsException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new InvalidObjectException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);this.__isset.o3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_type_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o3){if(this.o3!=null){field.name=\"o3\";field.type=TType.STRUCT;field.id=3;oprot.writeFieldBegin(field);this.o3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_type_args implements TBase,java.io.Serializable{private String type;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean type=false;}public drop_type_args(){}public drop_type_args(String type){this();this.type=type;this.__isset.type=true;}public String getType(){return this.type;}public void setType(String type){this.type=type;this.__isset.type=true;}public void unsetType(){this.__isset.type=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_type_args)return this.equals((drop_type_args)that);return false;}public boolean equals(drop_type_args that){if(that==null)return false;boolean this_present_type=true &&(this.type!=null);boolean that_present_type=true &&(that.type!=null);if(this_present_type || that_present_type){if(!(this_present_type && that_present_type))return false;if(!this.type.equals(that.type))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.type=iprot.readString();this.__isset.type=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_type_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.type!=null){field.name=\"type\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.type);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_type_result implements TBase,java.io.Serializable{private boolean success;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o2=false;}public drop_type_result(){}public drop_type_result(boolean success,MetaException o2){this();this.success=success;this.__isset.success=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_type_result)return this.equals((drop_type_result)that);return false;}public boolean equals(drop_type_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_type_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_type_all_args implements TBase,java.io.Serializable{private String name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean name=false;}public get_type_all_args(){}public get_type_all_args(String name){this();this.name=name;this.__isset.name=true;}public String getName(){return this.name;}public void setName(String name){this.name=name;this.__isset.name=true;}public void unsetName(){this.__isset.name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_all_args)return this.equals((get_type_all_args)that);return false;}public boolean equals(get_type_all_args that){if(that==null)return false;boolean this_present_name=true &&(this.name!=null);boolean that_present_name=true &&(that.name!=null);if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();this.__isset.name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_type_all_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.name!=null){field.name=\"name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_type_all_result implements TBase,java.io.Serializable{private Map<String,Type>success;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o2=false;}public get_type_all_result(){}public get_type_all_result(Map<String,Type>success,MetaException o2){this();this.success=success;this.__isset.success=true;this.o2=o2;this.__isset.o2=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public void putToSuccess(String key,Type val){if(this.success==null){this.success=new HashMap<String,Type>();}this.success.put(key,val);this.__isset.success=true;}public Map<String,Type>getSuccess(){return this.success;}public void setSuccess(Map<String,Type>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_all_result)return this.equals((get_type_all_result)that);return false;}public boolean equals(get_type_all_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.MAP){{TMap _map52=iprot.readMapBegin();this.success=new HashMap<String,Type>(2*_map52.size);for(int _i53=0;_i53<_map52.size;++_i53){String _key54;Type _val55;_key54=iprot.readString();_val55=new Type();_val55.read(iprot);this.success.put(_key54,_val55);}iprot.readMapEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_type_all_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.MAP;field.id=0;oprot.writeFieldBegin(field);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRUCT,this.success.size()));for(String _iter56 : this.success.keySet()){oprot.writeString(_iter56);this.success.get(_iter56).write(oprot);}oprot.writeMapEnd();}oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_fields_args implements TBase,java.io.Serializable{private String db_name;private String table_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;}public get_fields_args(){}public get_fields_args(String db_name,String table_name){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_fields_args)return this.equals((get_fields_args)that);return false;}public boolean equals(get_fields_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_fields_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_fields_result implements TBase,java.io.Serializable{private List<FieldSchema>success;private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public get_fields_result(){}public get_fields_result(List<FieldSchema>success,MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<FieldSchema>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(FieldSchema elem){if(this.success==null){this.success=new ArrayList<FieldSchema>();}this.success.add(elem);this.__isset.success=true;}public List<FieldSchema>getSuccess(){return this.success;}public void setSuccess(List<FieldSchema>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_fields_result)return this.equals((get_fields_result)that);return false;}public boolean equals(get_fields_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list57=iprot.readListBegin();this.success=new ArrayList<FieldSchema>(_list57.size);for(int _i58=0;_i58<_list57.size;++_i58){FieldSchema _elem59=new FieldSchema();_elem59=new FieldSchema();_elem59.read(iprot);this.success.add(_elem59);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_fields_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(FieldSchema _iter60 : this.success){_iter60.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_table_args implements TBase,java.io.Serializable{private Table tbl;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean tbl=false;}public create_table_args(){}public create_table_args(Table tbl){this();this.tbl=tbl;this.__isset.tbl=true;}public Table getTbl(){return this.tbl;}public void setTbl(Table tbl){this.tbl=tbl;this.__isset.tbl=true;}public void unsetTbl(){this.tbl=null;this.__isset.tbl=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_table_args)return this.equals((create_table_args)that);return false;}public boolean equals(create_table_args that){if(that==null)return false;boolean this_present_tbl=true &&(this.tbl!=null);boolean that_present_tbl=true &&(that.tbl!=null);if(this_present_tbl || that_present_tbl){if(!(this_present_tbl && that_present_tbl))return false;if(!this.tbl.equals(that.tbl))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.tbl=new Table();this.tbl.read(iprot);this.__isset.tbl=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.tbl!=null){field.name=\"tbl\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.tbl.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_table_result implements TBase,java.io.Serializable{private AlreadyExistsException ouch1;private InvalidObjectException ouch2;private MetaException ouch3;private NoSuchObjectException o4;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;public boolean o4=false;}public create_table_result(){}public create_table_result(AlreadyExistsException ouch1,InvalidObjectException ouch2,MetaException ouch3,NoSuchObjectException o4){this();this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;this.o4=o4;this.__isset.o4=true;}public AlreadyExistsException getOuch1(){return this.ouch1;}public void setOuch1(AlreadyExistsException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public InvalidObjectException getOuch2(){return this.ouch2;}public void setOuch2(InvalidObjectException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public MetaException getOuch3(){return this.ouch3;}public void setOuch3(MetaException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public NoSuchObjectException getO4(){return this.o4;}public void setO4(NoSuchObjectException o4){this.o4=o4;this.__isset.o4=true;}public void unsetO4(){this.o4=null;this.__isset.o4=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_table_result)return this.equals((create_table_result)that);return false;}public boolean equals(create_table_result that){if(that==null)return false;boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}boolean this_present_o4=true &&(this.o4!=null);boolean that_present_o4=true &&(that.o4!=null);if(this_present_o4 || that_present_o4){if(!(this_present_o4 && that_present_o4))return false;if(!this.o4.equals(that.o4))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.ouch1=new AlreadyExistsException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.ouch2=new InvalidObjectException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.ouch3=new MetaException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.STRUCT){this.o4=new NoSuchObjectException();this.o4.read(iprot);this.__isset.o4=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=3;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o4){if(this.o4!=null){field.name=\"o4\";field.type=TType.STRUCT;field.id=4;oprot.writeFieldBegin(field);this.o4.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_table_args implements TBase,java.io.Serializable{private String dbname;private String name;private boolean deleteData;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean dbname=false;public boolean name=false;public boolean deleteData=false;}public drop_table_args(){}public drop_table_args(String dbname,String name,boolean deleteData){this();this.dbname=dbname;this.__isset.dbname=true;this.name=name;this.__isset.name=true;this.deleteData=deleteData;this.__isset.deleteData=true;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;this.__isset.dbname=true;}public void unsetDbname(){this.__isset.dbname=false;}public String getName(){return this.name;}public void setName(String name){this.name=name;this.__isset.name=true;}public void unsetName(){this.__isset.name=false;}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;this.__isset.deleteData=true;}public void unsetDeleteData(){this.__isset.deleteData=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_table_args)return this.equals((drop_table_args)that);return false;}public boolean equals(drop_table_args that){if(that==null)return false;boolean this_present_dbname=true &&(this.dbname!=null);boolean that_present_dbname=true &&(that.dbname!=null);if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_name=true &&(this.name!=null);boolean that_present_name=true &&(that.name!=null);if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();this.__isset.dbname=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.name=iprot.readString();this.__isset.name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();this.__isset.deleteData=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.dbname!=null){field.name=\"dbname\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.name!=null){field.name=\"name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.name);oprot.writeFieldEnd();}field.name=\"deleteData\";field.type=TType.BOOL;field.id=3;oprot.writeFieldBegin(field);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_table_result implements TBase,java.io.Serializable{private NoSuchObjectException o1;private MetaException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean o1=false;public boolean ouch3=false;}public drop_table_result(){}public drop_table_result(NoSuchObjectException o1,MetaException ouch3){this();this.o1=o1;this.__isset.o1=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getOuch3(){return this.ouch3;}public void setOuch3(MetaException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_table_result)return this.equals((drop_table_result)that);return false;}public boolean equals(drop_table_result that){if(that==null)return false;boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.ouch3=new MetaException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_tables_args implements TBase,java.io.Serializable{private String db_name;private String pattern;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean pattern=false;}public get_tables_args(){}public get_tables_args(String db_name,String pattern){this();this.db_name=db_name;this.__isset.db_name=true;this.pattern=pattern;this.__isset.pattern=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getPattern(){return this.pattern;}public void setPattern(String pattern){this.pattern=pattern;this.__isset.pattern=true;}public void unsetPattern(){this.__isset.pattern=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_tables_args)return this.equals((get_tables_args)that);return false;}public boolean equals(get_tables_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_pattern=true &&(this.pattern!=null);boolean that_present_pattern=true &&(that.pattern!=null);if(this_present_pattern || that_present_pattern){if(!(this_present_pattern && that_present_pattern))return false;if(!this.pattern.equals(that.pattern))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.pattern=iprot.readString();this.__isset.pattern=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_tables_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.pattern!=null){field.name=\"pattern\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.pattern);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_tables_result implements TBase,java.io.Serializable{private List<String>success;private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public get_tables_result(){}public get_tables_result(List<String>success,MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_tables_result)return this.equals((get_tables_result)that);return false;}public boolean equals(get_tables_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list61=iprot.readListBegin();this.success=new ArrayList<String>(_list61.size);for(int _i62=0;_i62<_list61.size;++_i62){String _elem63=null;_elem63=iprot.readString();this.success.add(_elem63);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_tables_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter64 : this.success){oprot.writeString(_iter64);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_table_args implements TBase,java.io.Serializable{private String dbname;private String tbl_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean dbname=false;public boolean tbl_name=false;}public get_table_args(){}public get_table_args(String dbname,String tbl_name){this();this.dbname=dbname;this.__isset.dbname=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;this.__isset.dbname=true;}public void unsetDbname(){this.__isset.dbname=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_table_args)return this.equals((get_table_args)that);return false;}public boolean equals(get_table_args that){if(that==null)return false;boolean this_present_dbname=true &&(this.dbname!=null);boolean that_present_dbname=true &&(that.dbname!=null);if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();this.__isset.dbname=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.dbname!=null){field.name=\"dbname\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_table_result implements TBase,java.io.Serializable{private Table success;private MetaException o1;private NoSuchObjectException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public get_table_result(){}public get_table_result(Table success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public Table getSuccess(){return this.success;}public void setSuccess(Table success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_table_result)return this.equals((get_table_result)that);return false;}public boolean equals(get_table_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Table();this.success.read(iprot);this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRUCT;field.id=0;oprot.writeFieldBegin(field);this.success.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class set_table_parameters_args implements TBase,java.io.Serializable{private String dbname;private String tbl_name;private Map<String,String>params;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean dbname=false;public boolean tbl_name=false;public boolean params=false;}public set_table_parameters_args(){}public set_table_parameters_args(String dbname,String tbl_name,Map<String,String>params){this();this.dbname=dbname;this.__isset.dbname=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.params=params;this.__isset.params=true;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;this.__isset.dbname=true;}public void unsetDbname(){this.__isset.dbname=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public int getParamsSize(){return(this.params==null)? 0 : this.params.size();}public void putToParams(String key,String val){if(this.params==null){this.params=new HashMap<String,String>();}this.params.put(key,val);this.__isset.params=true;}public Map<String,String>getParams(){return this.params;}public void setParams(Map<String,String>params){this.params=params;this.__isset.params=true;}public void unsetParams(){this.params=null;this.__isset.params=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof set_table_parameters_args)return this.equals((set_table_parameters_args)that);return false;}public boolean equals(set_table_parameters_args that){if(that==null)return false;boolean this_present_dbname=true &&(this.dbname!=null);boolean that_present_dbname=true &&(that.dbname!=null);if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_params=true &&(this.params!=null);boolean that_present_params=true &&(that.params!=null);if(this_present_params || that_present_params){if(!(this_present_params && that_present_params))return false;if(!this.params.equals(that.params))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();this.__isset.dbname=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.MAP){{TMap _map65=iprot.readMapBegin();this.params=new HashMap<String,String>(2*_map65.size);for(int _i66=0;_i66<_map65.size;++_i66){String _key67;String _val68;_key67=iprot.readString();_val68=iprot.readString();this.params.put(_key67,_val68);}iprot.readMapEnd();}this.__isset.params=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"set_table_parameters_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.dbname!=null){field.name=\"dbname\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.params!=null){field.name=\"params\";field.type=TType.MAP;field.id=3;oprot.writeFieldBegin(field);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.params.size()));for(String _iter69 : this.params.keySet()){oprot.writeString(_iter69);oprot.writeString(this.params.get(_iter69));}oprot.writeMapEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class set_table_parameters_result implements TBase,java.io.Serializable{private boolean success;private NoSuchObjectException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public set_table_parameters_result(){}public set_table_parameters_result(boolean success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof set_table_parameters_result)return this.equals((set_table_parameters_result)that);return false;}public boolean equals(set_table_parameters_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"set_table_parameters_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class alter_table_args implements TBase,java.io.Serializable{private String dbname;private String tbl_name;private Table new_tbl;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean dbname=false;public boolean tbl_name=false;public boolean new_tbl=false;}public alter_table_args(){}public alter_table_args(String dbname,String tbl_name,Table new_tbl){this();this.dbname=dbname;this.__isset.dbname=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.new_tbl=new_tbl;this.__isset.new_tbl=true;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;this.__isset.dbname=true;}public void unsetDbname(){this.__isset.dbname=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public Table getNew_tbl(){return this.new_tbl;}public void setNew_tbl(Table new_tbl){this.new_tbl=new_tbl;this.__isset.new_tbl=true;}public void unsetNew_tbl(){this.new_tbl=null;this.__isset.new_tbl=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_table_args)return this.equals((alter_table_args)that);return false;}public boolean equals(alter_table_args that){if(that==null)return false;boolean this_present_dbname=true &&(this.dbname!=null);boolean that_present_dbname=true &&(that.dbname!=null);if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_new_tbl=true &&(this.new_tbl!=null);boolean that_present_new_tbl=true &&(that.new_tbl!=null);if(this_present_new_tbl || that_present_new_tbl){if(!(this_present_new_tbl && that_present_new_tbl))return false;if(!this.new_tbl.equals(that.new_tbl))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();this.__isset.dbname=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.new_tbl=new Table();this.new_tbl.read(iprot);this.__isset.new_tbl=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"alter_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.dbname!=null){field.name=\"dbname\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.new_tbl!=null){field.name=\"new_tbl\";field.type=TType.STRUCT;field.id=3;oprot.writeFieldBegin(field);this.new_tbl.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class alter_table_result implements TBase,java.io.Serializable{private InvalidOperationException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean o1=false;public boolean o2=false;}public alter_table_result(){}public alter_table_result(InvalidOperationException o1,MetaException o2){this();this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public InvalidOperationException getO1(){return this.o1;}public void setO1(InvalidOperationException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_table_result)return this.equals((alter_table_result)that);return false;}public boolean equals(alter_table_result that){if(that==null)return false;boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new InvalidOperationException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"alter_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class truncate_table_args implements TBase,java.io.Serializable{private String db_name;private String table_name;private String partition;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;public boolean partition=false;}public truncate_table_args(){}public truncate_table_args(String db_name,String table_name,String partition){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;this.partition=partition;this.__isset.partition=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public String getPartition(){return this.partition;}public void setPartition(String partition){this.partition=partition;this.__isset.partition=true;}public void unsetPartition(){this.__isset.partition=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof truncate_table_args)return this.equals((truncate_table_args)that);return false;}public boolean equals(truncate_table_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}boolean this_present_partition=true &&(this.partition!=null);boolean that_present_partition=true &&(that.partition!=null);if(this_present_partition || that_present_partition){if(!(this_present_partition && that_present_partition))return false;if(!this.partition.equals(that.partition))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.partition=iprot.readString();this.__isset.partition=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"truncate_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}if(this.partition!=null){field.name=\"partition\";field.type=TType.STRING;field.id=3;oprot.writeFieldBegin(field);oprot.writeString(this.partition);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class truncate_table_result implements TBase,java.io.Serializable{private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public truncate_table_result(){}public truncate_table_result(MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof truncate_table_result)return this.equals((truncate_table_result)that);return false;}public boolean equals(truncate_table_result that){if(that==null)return false;boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"truncate_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=3;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class cat_args implements TBase,java.io.Serializable{private String db_name;private String table_name;private String partition;private int high;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;public boolean partition=false;public boolean high=false;}public cat_args(){}public cat_args(String db_name,String table_name,String partition,int high){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;this.partition=partition;this.__isset.partition=true;this.high=high;this.__isset.high=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public String getPartition(){return this.partition;}public void setPartition(String partition){this.partition=partition;this.__isset.partition=true;}public void unsetPartition(){this.__isset.partition=false;}public int getHigh(){return this.high;}public void setHigh(int high){this.high=high;this.__isset.high=true;}public void unsetHigh(){this.__isset.high=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof cat_args)return this.equals((cat_args)that);return false;}public boolean equals(cat_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}boolean this_present_partition=true &&(this.partition!=null);boolean that_present_partition=true &&(that.partition!=null);if(this_present_partition || that_present_partition){if(!(this_present_partition && that_present_partition))return false;if(!this.partition.equals(that.partition))return false;}boolean this_present_high=true;boolean that_present_high=true;if(this_present_high || that_present_high){if(!(this_present_high && that_present_high))return false;if(this.high!=that.high)return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.partition=iprot.readString();this.__isset.partition=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-1: if(field.type==TType.I32){this.high=iprot.readI32();this.__isset.high=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"cat_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}if(this.partition!=null){field.name=\"partition\";field.type=TType.STRING;field.id=3;oprot.writeFieldBegin(field);oprot.writeString(this.partition);oprot.writeFieldEnd();}field.name=\"high\";field.type=TType.I32;field.id=-1;oprot.writeFieldBegin(field);oprot.writeI32(this.high);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}}public static class cat_result implements TBase,java.io.Serializable{private List<String>success;private MetaException ouch1;private UnknownDBException ouch2;private UnknownTableException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public cat_result(){}public cat_result(List<String>success,MetaException ouch1,UnknownDBException ouch2,UnknownTableException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownDBException getOuch2(){return this.ouch2;}public void setOuch2(UnknownDBException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownTableException getOuch3(){return this.ouch3;}public void setOuch3(UnknownTableException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof cat_result)return this.equals((cat_result)that);return false;}public boolean equals(cat_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list70=iprot.readListBegin();this.success=new ArrayList<String>(_list70.size);for(int _i71=0;_i71<_list70.size;++_i71){String _elem72=null;_elem72=iprot.readString();this.success.add(_elem72);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch2=new UnknownDBException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch3=new UnknownTableException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"cat_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter73 : this.success){oprot.writeString(_iter73);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-2;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class add_partition_args implements TBase,java.io.Serializable{private Partition new_part;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean new_part=false;}public add_partition_args(){}public add_partition_args(Partition new_part){this();this.new_part=new_part;this.__isset.new_part=true;}public Partition getNew_part(){return this.new_part;}public void setNew_part(Partition new_part){this.new_part=new_part;this.__isset.new_part=true;}public void unsetNew_part(){this.new_part=null;this.__isset.new_part=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof add_partition_args)return this.equals((add_partition_args)that);return false;}public boolean equals(add_partition_args that){if(that==null)return false;boolean this_present_new_part=true &&(this.new_part!=null);boolean that_present_new_part=true &&(that.new_part!=null);if(this_present_new_part || that_present_new_part){if(!(this_present_new_part && that_present_new_part))return false;if(!this.new_part.equals(that.new_part))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.new_part=new Partition();this.new_part.read(iprot);this.__isset.new_part=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"add_partition_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.new_part!=null){field.name=\"new_part\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.new_part.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class add_partition_result implements TBase,java.io.Serializable{private Partition success;private InvalidObjectException o1;private AlreadyExistsException o2;private MetaException o3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;public boolean o3=false;}public add_partition_result(){}public add_partition_result(Partition success,InvalidObjectException o1,AlreadyExistsException o2,MetaException o3){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;this.o3=o3;this.__isset.o3=true;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public InvalidObjectException getO1(){return this.o1;}public void setO1(InvalidObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public AlreadyExistsException getO2(){return this.o2;}public void setO2(AlreadyExistsException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;this.__isset.o3=true;}public void unsetO3(){this.o3=null;this.__isset.o3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof add_partition_result)return this.equals((add_partition_result)that);return false;}public boolean equals(add_partition_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true &&(this.o3!=null);boolean that_present_o3=true &&(that.o3!=null);if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new AlreadyExistsException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);this.__isset.o3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"add_partition_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRUCT;field.id=0;oprot.writeFieldBegin(field);this.success.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o3){if(this.o3!=null){field.name=\"o3\";field.type=TType.STRUCT;field.id=3;oprot.writeFieldBegin(field);this.o3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class append_partition_args implements TBase,java.io.Serializable{private String db_name;private String tbl_name;private List<String>part_vals;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean tbl_name=false;public boolean part_vals=false;}public append_partition_args(){}public append_partition_args(String db_name,String tbl_name,List<String>part_vals){this();this.db_name=db_name;this.__isset.db_name=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.part_vals=part_vals;this.__isset.part_vals=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);this.__isset.part_vals=true;}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;this.__isset.part_vals=true;}public void unsetPart_vals(){this.part_vals=null;this.__isset.part_vals=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof append_partition_args)return this.equals((append_partition_args)that);return false;}public boolean equals(append_partition_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true &&(this.part_vals!=null);boolean that_present_part_vals=true &&(that.part_vals!=null);if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list74=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list74.size);for(int _i75=0;_i75<_list74.size;++_i75){String _elem76=null;_elem76=iprot.readString();this.part_vals.add(_elem76);}iprot.readListEnd();}this.__isset.part_vals=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"append_partition_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){field.name=\"part_vals\";field.type=TType.LIST;field.id=3;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter77 : this.part_vals){oprot.writeString(_iter77);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class append_partition_result implements TBase,java.io.Serializable{private Partition success;private InvalidObjectException o1;private AlreadyExistsException o2;private MetaException o3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;public boolean o3=false;}public append_partition_result(){}public append_partition_result(Partition success,InvalidObjectException o1,AlreadyExistsException o2,MetaException o3){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;this.o3=o3;this.__isset.o3=true;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public InvalidObjectException getO1(){return this.o1;}public void setO1(InvalidObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public AlreadyExistsException getO2(){return this.o2;}public void setO2(AlreadyExistsException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;this.__isset.o3=true;}public void unsetO3(){this.o3=null;this.__isset.o3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof append_partition_result)return this.equals((append_partition_result)that);return false;}public boolean equals(append_partition_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true &&(this.o3!=null);boolean that_present_o3=true &&(that.o3!=null);if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new AlreadyExistsException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);this.__isset.o3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"append_partition_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRUCT;field.id=0;oprot.writeFieldBegin(field);this.success.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o3){if(this.o3!=null){field.name=\"o3\";field.type=TType.STRUCT;field.id=3;oprot.writeFieldBegin(field);this.o3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_partition_args implements TBase,java.io.Serializable{private String db_name;private String tbl_name;private List<String>part_vals;private boolean deleteData;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean tbl_name=false;public boolean part_vals=false;public boolean deleteData=false;}public drop_partition_args(){}public drop_partition_args(String db_name,String tbl_name,List<String>part_vals,boolean deleteData){this();this.db_name=db_name;this.__isset.db_name=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.part_vals=part_vals;this.__isset.part_vals=true;this.deleteData=deleteData;this.__isset.deleteData=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);this.__isset.part_vals=true;}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;this.__isset.part_vals=true;}public void unsetPart_vals(){this.part_vals=null;this.__isset.part_vals=false;}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;this.__isset.deleteData=true;}public void unsetDeleteData(){this.__isset.deleteData=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_partition_args)return this.equals((drop_partition_args)that);return false;}public boolean equals(drop_partition_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true &&(this.part_vals!=null);boolean that_present_part_vals=true &&(that.part_vals!=null);if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list78=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list78.size);for(int _i79=0;_i79<_list78.size;++_i79){String _elem80=null;_elem80=iprot.readString();this.part_vals.add(_elem80);}iprot.readListEnd();}this.__isset.part_vals=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();this.__isset.deleteData=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_partition_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){field.name=\"part_vals\";field.type=TType.LIST;field.id=3;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter81 : this.part_vals){oprot.writeString(_iter81);}oprot.writeListEnd();}oprot.writeFieldEnd();}field.name=\"deleteData\";field.type=TType.BOOL;field.id=4;oprot.writeFieldBegin(field);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_partition_result implements TBase,java.io.Serializable{private boolean success;private NoSuchObjectException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public drop_partition_result(){}public drop_partition_result(boolean success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_partition_result)return this.equals((drop_partition_result)that);return false;}public boolean equals(drop_partition_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_partition_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_partition_args implements TBase,java.io.Serializable{private String db_name;private String tbl_name;private List<String>part_vals;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean tbl_name=false;public boolean part_vals=false;}public get_partition_args(){}public get_partition_args(String db_name,String tbl_name,List<String>part_vals){this();this.db_name=db_name;this.__isset.db_name=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.part_vals=part_vals;this.__isset.part_vals=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);this.__isset.part_vals=true;}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;this.__isset.part_vals=true;}public void unsetPart_vals(){this.part_vals=null;this.__isset.part_vals=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_args)return this.equals((get_partition_args)that);return false;}public boolean equals(get_partition_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true &&(this.part_vals!=null);boolean that_present_part_vals=true &&(that.part_vals!=null);if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list82=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list82.size);for(int _i83=0;_i83<_list82.size;++_i83){String _elem84=null;_elem84=iprot.readString();this.part_vals.add(_elem84);}iprot.readListEnd();}this.__isset.part_vals=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_partition_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){field.name=\"part_vals\";field.type=TType.LIST;field.id=3;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter85 : this.part_vals){oprot.writeString(_iter85);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_partition_result implements TBase,java.io.Serializable{private Partition success;private MetaException o1;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;}public get_partition_result(){}public get_partition_result(Partition success,MetaException o1){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_result)return this.equals((get_partition_result)that);return false;}public boolean equals(get_partition_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_partition_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRUCT;field.id=0;oprot.writeFieldBegin(field);this.success.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_partitions_args implements TBase,java.io.Serializable{private String db_name;private String tbl_name;private short max_parts;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean tbl_name=false;public boolean max_parts=false;}public get_partitions_args(){this.max_parts=-1;}public get_partitions_args(String db_name,String tbl_name,short max_parts){this();this.db_name=db_name;this.__isset.db_name=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.max_parts=max_parts;this.__isset.max_parts=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public short getMax_parts(){return this.max_parts;}public void setMax_parts(short max_parts){this.max_parts=max_parts;this.__isset.max_parts=true;}public void unsetMax_parts(){this.__isset.max_parts=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_args)return this.equals((get_partitions_args)that);return false;}public boolean equals(get_partitions_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_max_parts=true;boolean that_present_max_parts=true;if(this_present_max_parts || that_present_max_parts){if(!(this_present_max_parts && that_present_max_parts))return false;if(this.max_parts!=that.max_parts)return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.I16){this.max_parts=iprot.readI16();this.__isset.max_parts=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_partitions_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}field.name=\"max_parts\";field.type=TType.I16;field.id=3;oprot.writeFieldBegin(field);oprot.writeI16(this.max_parts);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_partitions_result implements TBase,java.io.Serializable{private List<Partition>success;private NoSuchObjectException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public get_partitions_result(){}public get_partitions_result(List<Partition>success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<Partition>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(Partition elem){if(this.success==null){this.success=new ArrayList<Partition>();}this.success.add(elem);this.__isset.success=true;}public List<Partition>getSuccess(){return this.success;}public void setSuccess(List<Partition>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_result)return this.equals((get_partitions_result)that);return false;}public boolean equals(get_partitions_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list86=iprot.readListBegin();this.success=new ArrayList<Partition>(_list86.size);for(int _i87=0;_i87<_list86.size;++_i87){Partition _elem88=new Partition();_elem88=new Partition();_elem88.read(iprot);this.success.add(_elem88);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_partitions_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(Partition _iter89 : this.success){_iter89.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class set_partition_parameters_args implements TBase,java.io.Serializable{private String db_name;private String tbl_name;private String pname;private Map<String,String>params;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean tbl_name=false;public boolean pname=false;public boolean params=false;}public set_partition_parameters_args(){}public set_partition_parameters_args(String db_name,String tbl_name,String pname,Map<String,String>params){this();this.db_name=db_name;this.__isset.db_name=true;this.tbl_name=tbl_name;this.__isset.tbl_name=true;this.pname=pname;this.__isset.pname=true;this.params=params;this.__isset.params=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;this.__isset.tbl_name=true;}public void unsetTbl_name(){this.__isset.tbl_name=false;}public String getPname(){return this.pname;}public void setPname(String pname){this.pname=pname;this.__isset.pname=true;}public void unsetPname(){this.__isset.pname=false;}public int getParamsSize(){return(this.params==null)? 0 : this.params.size();}public void putToParams(String key,String val){if(this.params==null){this.params=new HashMap<String,String>();}this.params.put(key,val);this.__isset.params=true;}public Map<String,String>getParams(){return this.params;}public void setParams(Map<String,String>params){this.params=params;this.__isset.params=true;}public void unsetParams(){this.params=null;this.__isset.params=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof set_partition_parameters_args)return this.equals((set_partition_parameters_args)that);return false;}public boolean equals(set_partition_parameters_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true &&(this.tbl_name!=null);boolean that_present_tbl_name=true &&(that.tbl_name!=null);if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_pname=true &&(this.pname!=null);boolean that_present_pname=true &&(that.pname!=null);if(this_present_pname || that_present_pname){if(!(this_present_pname && that_present_pname))return false;if(!this.pname.equals(that.pname))return false;}boolean this_present_params=true &&(this.params!=null);boolean that_present_params=true &&(that.params!=null);if(this_present_params || that_present_params){if(!(this_present_params && that_present_params))return false;if(!this.params.equals(that.params))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();this.__isset.tbl_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.pname=iprot.readString();this.__isset.pname=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.MAP){{TMap _map90=iprot.readMapBegin();this.params=new HashMap<String,String>(2*_map90.size);for(int _i91=0;_i91<_map90.size;++_i91){String _key92;String _val93;_key92=iprot.readString();_val93=iprot.readString();this.params.put(_key92,_val93);}iprot.readMapEnd();}this.__isset.params=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"set_partition_parameters_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){field.name=\"tbl_name\";field.type=TType.STRING;field.id=2;oprot.writeFieldBegin(field);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.pname!=null){field.name=\"pname\";field.type=TType.STRING;field.id=3;oprot.writeFieldBegin(field);oprot.writeString(this.pname);oprot.writeFieldEnd();}if(this.params!=null){field.name=\"params\";field.type=TType.MAP;field.id=4;oprot.writeFieldBegin(field);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.params.size()));for(String _iter94 : this.params.keySet()){oprot.writeString(_iter94);oprot.writeString(this.params.get(_iter94));}oprot.writeMapEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class set_partition_parameters_result implements TBase,java.io.Serializable{private boolean success;private NoSuchObjectException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public set_partition_parameters_result(){}public set_partition_parameters_result(boolean success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof set_partition_parameters_result)return this.equals((set_partition_parameters_result)that);return false;}public boolean equals(set_partition_parameters_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"set_partition_parameters_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class alter_partitions_args implements TBase,java.io.Serializable{private StorageDescriptor sd;private List<String>parts;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean sd=false;public boolean parts=false;}public alter_partitions_args(){}public alter_partitions_args(StorageDescriptor sd,List<String>parts){this();this.sd=sd;this.__isset.sd=true;this.parts=parts;this.__isset.parts=true;}public StorageDescriptor getSd(){return this.sd;}public void setSd(StorageDescriptor sd){this.sd=sd;this.__isset.sd=true;}public void unsetSd(){this.sd=null;this.__isset.sd=false;}public int getPartsSize(){return(this.parts==null)? 0 : this.parts.size();}public java.util.Iterator<String>getPartsIterator(){return(this.parts==null)? null : this.parts.iterator();}public void addToParts(String elem){if(this.parts==null){this.parts=new ArrayList<String>();}this.parts.add(elem);this.__isset.parts=true;}public List<String>getParts(){return this.parts;}public void setParts(List<String>parts){this.parts=parts;this.__isset.parts=true;}public void unsetParts(){this.parts=null;this.__isset.parts=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_partitions_args)return this.equals((alter_partitions_args)that);return false;}public boolean equals(alter_partitions_args that){if(that==null)return false;boolean this_present_sd=true &&(this.sd!=null);boolean that_present_sd=true &&(that.sd!=null);if(this_present_sd || that_present_sd){if(!(this_present_sd && that_present_sd))return false;if(!this.sd.equals(that.sd))return false;}boolean this_present_parts=true &&(this.parts!=null);boolean that_present_parts=true &&(that.parts!=null);if(this_present_parts || that_present_parts){if(!(this_present_parts && that_present_parts))return false;if(!this.parts.equals(that.parts))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.sd=new StorageDescriptor();this.sd.read(iprot);this.__isset.sd=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.LIST){{TList _list95=iprot.readListBegin();this.parts=new ArrayList<String>(_list95.size);for(int _i96=0;_i96<_list95.size;++_i96){String _elem97=null;_elem97=iprot.readString();this.parts.add(_elem97);}iprot.readListEnd();}this.__isset.parts=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"alter_partitions_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.sd!=null){field.name=\"sd\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.sd.write(oprot);oprot.writeFieldEnd();}if(this.parts!=null){field.name=\"parts\";field.type=TType.LIST;field.id=2;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.parts.size()));for(String _iter98 : this.parts){oprot.writeString(_iter98);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class alter_partitions_result implements TBase,java.io.Serializable{private boolean success;private InvalidOperationException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public alter_partitions_result(){}public alter_partitions_result(boolean success,InvalidOperationException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public InvalidOperationException getO1(){return this.o1;}public void setO1(InvalidOperationException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_partitions_result)return this.equals((alter_partitions_result)that);return false;}public boolean equals(alter_partitions_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidOperationException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"alter_partitions_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_index_args implements TBase,java.io.Serializable{private Index index_def;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean index_def=false;}public create_index_args(){}public create_index_args(Index index_def){this();this.index_def=index_def;this.__isset.index_def=true;}public Index getIndex_def(){return this.index_def;}public void setIndex_def(Index index_def){this.index_def=index_def;this.__isset.index_def=true;}public void unsetIndex_def(){this.index_def=null;this.__isset.index_def=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_index_args)return this.equals((create_index_args)that);return false;}public boolean equals(create_index_args that){if(that==null)return false;boolean this_present_index_def=true &&(this.index_def!=null);boolean that_present_index_def=true &&(that.index_def!=null);if(this_present_index_def || that_present_index_def){if(!(this_present_index_def && that_present_index_def))return false;if(!this.index_def.equals(that.index_def))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.index_def=new Index();this.index_def.read(iprot);this.__isset.index_def=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_index_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.index_def!=null){field.name=\"index_def\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.index_def.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_index_result implements TBase,java.io.Serializable{private boolean success;private IndexAlreadyExistsException o1;private MetaException o2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean o1=false;public boolean o2=false;}public create_index_result(){}public create_index_result(boolean success,IndexAlreadyExistsException o1,MetaException o2){this();this.success=success;this.__isset.success=true;this.o1=o1;this.__isset.o1=true;this.o2=o2;this.__isset.o2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public IndexAlreadyExistsException getO1(){return this.o1;}public void setO1(IndexAlreadyExistsException o1){this.o1=o1;this.__isset.o1=true;}public void unsetO1(){this.o1=null;this.__isset.o1=false;}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;this.__isset.o2=true;}public void unsetO2(){this.o2=null;this.__isset.o2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_index_result)return this.equals((create_index_result)that);return false;}public boolean equals(create_index_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true &&(this.o1!=null);boolean that_present_o1=true &&(that.o1!=null);if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true &&(this.o2!=null);boolean that_present_o2=true &&(that.o2!=null);if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new IndexAlreadyExistsException();this.o1.read(iprot);this.__isset.o1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);this.__isset.o2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_index_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.o1){if(this.o1!=null){field.name=\"o1\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.o1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.o2){if(this.o2!=null){field.name=\"o2\";field.type=TType.STRUCT;field.id=2;oprot.writeFieldBegin(field);this.o2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Autogenerated by Thrift**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*/public class ThriftMetaStore{public interface Iface extends com.facebook.fb303.FacebookService.Iface{public List<FieldSchema>get_fields(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public List<String>get_tables(String db_name,String pattern)throws MetaException,UnknownTableException,UnknownDBException,TException;public Map<String,String>get_schema(String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public void alter_table(String db_name,String table_name,Map<String,String>schema)throws MetaException,UnknownTableException,UnknownDBException,TException;public void create_table(String db_name,String table_name,Map<String,String>schema)throws MetaException,UnknownDBException,TException;public void drop_table(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public void truncate_table(String db_name,String table_name,String partition)throws MetaException,UnknownTableException,UnknownDBException,TException;public boolean table_exists(String db_name,String table_name)throws MetaException,UnknownDBException,TException;public List<String>get_partitions(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public List<String>get_dbs()throws MetaException,TException;public List<String>cat(String db_name,String table_name,String partition,int high)throws MetaException,UnknownDBException,UnknownTableException,TException;}public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface{public Client(TProtocol prot){this(prot,prot);}public Client(TProtocol iprot,TProtocol oprot){super(iprot,oprot);}public List<FieldSchema>get_fields(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_fields(db_name,table_name);return recv_get_fields();}public void send_get_fields(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.CALL,seqid_));get_fields_args args=new get_fields_args();args.db_name=db_name;args.table_name=table_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<FieldSchema>recv_get_fields()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_fields_result result=new get_fields_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_fields failed: unknown result\");}public List<String>get_tables(String db_name,String pattern)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_tables(db_name,pattern);return recv_get_tables();}public void send_get_tables(String db_name,String pattern)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.CALL,seqid_));get_tables_args args=new get_tables_args();args.db_name=db_name;args.pattern=pattern;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_tables()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_tables_result result=new get_tables_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_tables failed: unknown result\");}public Map<String,String>get_schema(String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_schema(table_name);return recv_get_schema();}public void send_get_schema(String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.CALL,seqid_));get_schema_args args=new get_schema_args();args.table_name=table_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Map<String,String>recv_get_schema()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_schema_result result=new get_schema_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_schema failed: unknown result\");}public void alter_table(String db_name,String table_name,Map<String,String>schema)throws MetaException,UnknownTableException,UnknownDBException,TException{send_alter_table(db_name,table_name,schema);recv_alter_table();}public void send_alter_table(String db_name,String table_name,Map<String,String>schema)throws TException{oprot_.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.CALL,seqid_));alter_table_args args=new alter_table_args();args.db_name=db_name;args.table_name=table_name;args.schema=schema;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_alter_table()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}alter_table_result result=new alter_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}return;}public void create_table(String db_name,String table_name,Map<String,String>schema)throws MetaException,UnknownDBException,TException{send_create_table(db_name,table_name,schema);recv_create_table();}public void send_create_table(String db_name,String table_name,Map<String,String>schema)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_table\",TMessageType.CALL,seqid_));create_table_args args=new create_table_args();args.db_name=db_name;args.table_name=table_name;args.schema=schema;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_create_table()throws MetaException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}create_table_result result=new create_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}return;}public void drop_table(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_drop_table(db_name,table_name);recv_drop_table();}public void send_drop_table(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.CALL,seqid_));drop_table_args args=new drop_table_args();args.db_name=db_name;args.table_name=table_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_drop_table()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}drop_table_result result=new drop_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}return;}public void truncate_table(String db_name,String table_name,String partition)throws MetaException,UnknownTableException,UnknownDBException,TException{send_truncate_table(db_name,table_name,partition);recv_truncate_table();}public void send_truncate_table(String db_name,String table_name,String partition)throws TException{oprot_.writeMessageBegin(new TMessage(\"truncate_table\",TMessageType.CALL,seqid_));truncate_table_args args=new truncate_table_args();args.db_name=db_name;args.table_name=table_name;args.partition=partition;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_truncate_table()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}truncate_table_result result=new truncate_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}return;}public boolean table_exists(String db_name,String table_name)throws MetaException,UnknownDBException,TException{send_table_exists(db_name,table_name);return recv_table_exists();}public void send_table_exists(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"table_exists\",TMessageType.CALL,seqid_));table_exists_args args=new table_exists_args();args.db_name=db_name;args.table_name=table_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_table_exists()throws MetaException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}table_exists_result result=new table_exists_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"table_exists failed: unknown result\");}public List<String>get_partitions(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_partitions(db_name,table_name);return recv_get_partitions();}public void send_get_partitions(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.CALL,seqid_));get_partitions_args args=new get_partitions_args();args.db_name=db_name;args.table_name=table_name;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_partitions()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_partitions_result result=new get_partitions_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partitions failed: unknown result\");}public List<String>get_dbs()throws MetaException,TException{send_get_dbs();return recv_get_dbs();}public void send_get_dbs()throws TException{oprot_.writeMessageBegin(new TMessage(\"get_dbs\",TMessageType.CALL,seqid_));get_dbs_args args=new get_dbs_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_dbs()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}get_dbs_result result=new get_dbs_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch){throw result.ouch;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_dbs failed: unknown result\");}public List<String>cat(String db_name,String table_name,String partition,int high)throws MetaException,UnknownDBException,UnknownTableException,TException{send_cat(db_name,table_name,partition,high);return recv_cat();}public void send_cat(String db_name,String table_name,String partition,int high)throws TException{oprot_.writeMessageBegin(new TMessage(\"cat\",TMessageType.CALL,seqid_));cat_args args=new cat_args();args.db_name=db_name;args.table_name=table_name;args.partition=partition;args.high=high;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_cat()throws MetaException,UnknownDBException,UnknownTableException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}cat_result result=new cat_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ouch1){throw result.ouch1;}if(result.__isset.ouch2){throw result.ouch2;}if(result.__isset.ouch3){throw result.ouch3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"cat failed: unknown result\");}}public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor{public Processor(Iface iface){super(iface);iface_=iface;processMap_.put(\"get_fields\",new get_fields());processMap_.put(\"get_tables\",new get_tables());processMap_.put(\"get_schema\",new get_schema());processMap_.put(\"alter_table\",new alter_table());processMap_.put(\"create_table\",new create_table());processMap_.put(\"drop_table\",new drop_table());processMap_.put(\"truncate_table\",new truncate_table());processMap_.put(\"table_exists\",new table_exists());processMap_.put(\"get_partitions\",new get_partitions());processMap_.put(\"get_dbs\",new get_dbs());processMap_.put(\"cat\",new cat());}private Iface iface_;public boolean process(TProtocol iprot,TProtocol oprot)throws TException{TMessage msg=iprot.readMessageBegin();ProcessFunction fn=processMap_.get(msg.name);if(fn==null){TProtocolUtil.skip(iprot,TType.STRUCT);iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.UNKNOWN_METHOD,\"Invalid method name: '\"+msg.name+\"'\");oprot.writeMessageBegin(new TMessage(msg.name,TMessageType.EXCEPTION,msg.seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return true;}fn.process(msg.seqid,iprot,oprot);return true;}private class get_fields implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_fields_args args=new get_fields_args();args.read(iprot);iprot.readMessageEnd();get_fields_result result=new get_fields_result();try{result.success=iface_.get_fields(args.db_name,args.table_name);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_tables implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_tables_args args=new get_tables_args();args.read(iprot);iprot.readMessageEnd();get_tables_result result=new get_tables_result();try{result.success=iface_.get_tables(args.db_name,args.pattern);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_schema implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_schema_args args=new get_schema_args();args.read(iprot);iprot.readMessageEnd();get_schema_result result=new get_schema_result();try{result.success=iface_.get_schema(args.table_name);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class alter_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{alter_table_args args=new alter_table_args();args.read(iprot);iprot.readMessageEnd();alter_table_result result=new alter_table_result();try{iface_.alter_table(args.db_name,args.table_name,args.schema);}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class create_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_table_args args=new create_table_args();args.read(iprot);iprot.readMessageEnd();create_table_result result=new create_table_result();try{iface_.create_table(args.db_name,args.table_name,args.schema);}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownDBException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}oprot.writeMessageBegin(new TMessage(\"create_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_table_args args=new drop_table_args();args.read(iprot);iprot.readMessageEnd();drop_table_result result=new drop_table_result();try{iface_.drop_table(args.db_name,args.table_name);}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class truncate_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{truncate_table_args args=new truncate_table_args();args.read(iprot);iprot.readMessageEnd();truncate_table_result result=new truncate_table_result();try{iface_.truncate_table(args.db_name,args.table_name,args.partition);}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"truncate_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class table_exists implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{table_exists_args args=new table_exists_args();args.read(iprot);iprot.readMessageEnd();table_exists_result result=new table_exists_result();try{result.success=iface_.table_exists(args.db_name,args.table_name);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownDBException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}oprot.writeMessageBegin(new TMessage(\"table_exists\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partitions implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partitions_args args=new get_partitions_args();args.read(iprot);iprot.readMessageEnd();get_partitions_result result=new get_partitions_result();try{result.success=iface_.get_partitions(args.db_name,args.table_name);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownTableException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownDBException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_dbs implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_dbs_args args=new get_dbs_args();args.read(iprot);iprot.readMessageEnd();get_dbs_result result=new get_dbs_result();try{result.success=iface_.get_dbs();result.__isset.success=true;}catch(MetaException ouch){result.ouch=ouch;result.__isset.ouch=true;}oprot.writeMessageBegin(new TMessage(\"get_dbs\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class cat implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{cat_args args=new cat_args();args.read(iprot);iprot.readMessageEnd();cat_result result=new cat_result();try{result.success=iface_.cat(args.db_name,args.table_name,args.partition,args.high);result.__isset.success=true;}catch(MetaException ouch1){result.ouch1=ouch1;result.__isset.ouch1=true;}catch(UnknownDBException ouch2){result.ouch2=ouch2;result.__isset.ouch2=true;}catch(UnknownTableException ouch3){result.ouch3=ouch3;result.__isset.ouch3=true;}oprot.writeMessageBegin(new TMessage(\"cat\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}}public static class get_fields_args implements TBase,java.io.Serializable{private String db_name;private String table_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;}public get_fields_args(){}public get_fields_args(String db_name,String table_name){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_fields_args)return this.equals((get_fields_args)that);return false;}public boolean equals(get_fields_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_fields_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_fields_result implements TBase,java.io.Serializable{private List<FieldSchema>success;private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public get_fields_result(){}public get_fields_result(List<FieldSchema>success,MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<FieldSchema>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(FieldSchema elem){if(this.success==null){this.success=new ArrayList<FieldSchema>();}this.success.add(elem);this.__isset.success=true;}public List<FieldSchema>getSuccess(){return this.success;}public void setSuccess(List<FieldSchema>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_fields_result)return this.equals((get_fields_result)that);return false;}public boolean equals(get_fields_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list99=iprot.readListBegin();this.success=new ArrayList<FieldSchema>(_list99.size);for(int _i100=0;_i100<_list99.size;++_i100){FieldSchema _elem101=new FieldSchema();_elem101=new FieldSchema();_elem101.read(iprot);this.success.add(_elem101);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_fields_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(FieldSchema _iter102 : this.success){_iter102.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_tables_args implements TBase,java.io.Serializable{private String db_name;private String pattern;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean pattern=false;}public get_tables_args(){}public get_tables_args(String db_name,String pattern){this();this.db_name=db_name;this.__isset.db_name=true;this.pattern=pattern;this.__isset.pattern=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getPattern(){return this.pattern;}public void setPattern(String pattern){this.pattern=pattern;this.__isset.pattern=true;}public void unsetPattern(){this.__isset.pattern=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_tables_args)return this.equals((get_tables_args)that);return false;}public boolean equals(get_tables_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_pattern=true &&(this.pattern!=null);boolean that_present_pattern=true &&(that.pattern!=null);if(this_present_pattern || that_present_pattern){if(!(this_present_pattern && that_present_pattern))return false;if(!this.pattern.equals(that.pattern))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.pattern=iprot.readString();this.__isset.pattern=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_tables_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.pattern!=null){field.name=\"pattern\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.pattern);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_tables_result implements TBase,java.io.Serializable{private List<String>success;private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public get_tables_result(){}public get_tables_result(List<String>success,MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_tables_result)return this.equals((get_tables_result)that);return false;}public boolean equals(get_tables_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list103=iprot.readListBegin();this.success=new ArrayList<String>(_list103.size);for(int _i104=0;_i104<_list103.size;++_i104){String _elem105=null;_elem105=iprot.readString();this.success.add(_elem105);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_tables_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter106 : this.success){oprot.writeString(_iter106);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_schema_args implements TBase,java.io.Serializable{private String table_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean table_name=false;}public get_schema_args(){}public get_schema_args(String table_name){this();this.table_name=table_name;this.__isset.table_name=true;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_schema_args)return this.equals((get_schema_args)that);return false;}public boolean equals(get_schema_args that){if(that==null)return false;boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_schema_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_schema_result implements TBase,java.io.Serializable{private Map<String,String>success;private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public get_schema_result(){}public get_schema_result(Map<String,String>success,MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public void putToSuccess(String key,String val){if(this.success==null){this.success=new HashMap<String,String>();}this.success.put(key,val);this.__isset.success=true;}public Map<String,String>getSuccess(){return this.success;}public void setSuccess(Map<String,String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_schema_result)return this.equals((get_schema_result)that);return false;}public boolean equals(get_schema_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.MAP){{TMap _map107=iprot.readMapBegin();this.success=new HashMap<String,String>(2*_map107.size);for(int _i108=0;_i108<_map107.size;++_i108){String _key109;String _val110;_key109=iprot.readString();_val110=iprot.readString();this.success.put(_key109,_val110);}iprot.readMapEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_schema_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.MAP;field.id=0;oprot.writeFieldBegin(field);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.success.size()));for(String _iter111 : this.success.keySet()){oprot.writeString(_iter111);oprot.writeString(this.success.get(_iter111));}oprot.writeMapEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-2;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class alter_table_args implements TBase,java.io.Serializable{private String db_name;private String table_name;private Map<String,String>schema;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;public boolean schema=false;}public alter_table_args(){}public alter_table_args(String db_name,String table_name,Map<String,String>schema){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;this.schema=schema;this.__isset.schema=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public int getSchemaSize(){return(this.schema==null)? 0 : this.schema.size();}public void putToSchema(String key,String val){if(this.schema==null){this.schema=new HashMap<String,String>();}this.schema.put(key,val);this.__isset.schema=true;}public Map<String,String>getSchema(){return this.schema;}public void setSchema(Map<String,String>schema){this.schema=schema;this.__isset.schema=true;}public void unsetSchema(){this.schema=null;this.__isset.schema=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_table_args)return this.equals((alter_table_args)that);return false;}public boolean equals(alter_table_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}boolean this_present_schema=true &&(this.schema!=null);boolean that_present_schema=true &&(that.schema!=null);if(this_present_schema || that_present_schema){if(!(this_present_schema && that_present_schema))return false;if(!this.schema.equals(that.schema))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.MAP){{TMap _map112=iprot.readMapBegin();this.schema=new HashMap<String,String>(2*_map112.size);for(int _i113=0;_i113<_map112.size;++_i113){String _key114;String _val115;_key114=iprot.readString();_val115=iprot.readString();this.schema.put(_key114,_val115);}iprot.readMapEnd();}this.__isset.schema=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"alter_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}if(this.schema!=null){field.name=\"schema\";field.type=TType.MAP;field.id=-3;oprot.writeFieldBegin(field);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.schema.size()));for(String _iter116 : this.schema.keySet()){oprot.writeString(_iter116);oprot.writeString(this.schema.get(_iter116));}oprot.writeMapEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class alter_table_result implements TBase,java.io.Serializable{private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public alter_table_result(){}public alter_table_result(MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_table_result)return this.equals((alter_table_result)that);return false;}public boolean equals(alter_table_result that){if(that==null)return false;boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-4: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-6: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"alter_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-6;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_table_args implements TBase,java.io.Serializable{private String db_name;private String table_name;private Map<String,String>schema;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;public boolean schema=false;}public create_table_args(){}public create_table_args(String db_name,String table_name,Map<String,String>schema){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;this.schema=schema;this.__isset.schema=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public int getSchemaSize(){return(this.schema==null)? 0 : this.schema.size();}public void putToSchema(String key,String val){if(this.schema==null){this.schema=new HashMap<String,String>();}this.schema.put(key,val);this.__isset.schema=true;}public Map<String,String>getSchema(){return this.schema;}public void setSchema(Map<String,String>schema){this.schema=schema;this.__isset.schema=true;}public void unsetSchema(){this.schema=null;this.__isset.schema=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_table_args)return this.equals((create_table_args)that);return false;}public boolean equals(create_table_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}boolean this_present_schema=true &&(this.schema!=null);boolean that_present_schema=true &&(that.schema!=null);if(this_present_schema || that_present_schema){if(!(this_present_schema && that_present_schema))return false;if(!this.schema.equals(that.schema))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.MAP){{TMap _map117=iprot.readMapBegin();this.schema=new HashMap<String,String>(2*_map117.size);for(int _i118=0;_i118<_map117.size;++_i118){String _key119;String _val120;_key119=iprot.readString();_val120=iprot.readString();this.schema.put(_key119,_val120);}iprot.readMapEnd();}this.__isset.schema=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}if(this.schema!=null){field.name=\"schema\";field.type=TType.MAP;field.id=-3;oprot.writeFieldBegin(field);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.schema.size()));for(String _iter121 : this.schema.keySet()){oprot.writeString(_iter121);oprot.writeString(this.schema.get(_iter121));}oprot.writeMapEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class create_table_result implements TBase,java.io.Serializable{private MetaException ouch1;private UnknownDBException ouch2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ouch1=false;public boolean ouch2=false;}public create_table_result(){}public create_table_result(MetaException ouch1,UnknownDBException ouch2){this();this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownDBException getOuch2(){return this.ouch2;}public void setOuch2(UnknownDBException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof create_table_result)return this.equals((create_table_result)that);return false;}public boolean equals(create_table_result that){if(that==null)return false;boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-4: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch2=new UnknownDBException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"create_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_table_args implements TBase,java.io.Serializable{private String db_name;private String table_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;}public drop_table_args(){}public drop_table_args(String db_name,String table_name){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_table_args)return this.equals((drop_table_args)that);return false;}public boolean equals(drop_table_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class drop_table_result implements TBase,java.io.Serializable{private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public drop_table_result(){}public drop_table_result(MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_table_result)return this.equals((drop_table_result)that);return false;}public boolean equals(drop_table_result that){if(that==null)return false;boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"drop_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class truncate_table_args implements TBase,java.io.Serializable{private String db_name;private String table_name;private String partition;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;public boolean partition=false;}public truncate_table_args(){}public truncate_table_args(String db_name,String table_name,String partition){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;this.partition=partition;this.__isset.partition=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public String getPartition(){return this.partition;}public void setPartition(String partition){this.partition=partition;this.__isset.partition=true;}public void unsetPartition(){this.__isset.partition=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof truncate_table_args)return this.equals((truncate_table_args)that);return false;}public boolean equals(truncate_table_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}boolean this_present_partition=true &&(this.partition!=null);boolean that_present_partition=true &&(that.partition!=null);if(this_present_partition || that_present_partition){if(!(this_present_partition && that_present_partition))return false;if(!this.partition.equals(that.partition))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRING){this.partition=iprot.readString();this.__isset.partition=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"truncate_table_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}if(this.partition!=null){field.name=\"partition\";field.type=TType.STRING;field.id=-3;oprot.writeFieldBegin(field);oprot.writeString(this.partition);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class truncate_table_result implements TBase,java.io.Serializable{private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public truncate_table_result(){}public truncate_table_result(MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof truncate_table_result)return this.equals((truncate_table_result)that);return false;}public boolean equals(truncate_table_result that){if(that==null)return false;boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-4: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-6: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"truncate_table_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-6;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class table_exists_args implements TBase,java.io.Serializable{private String db_name;private String table_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;}public table_exists_args(){}public table_exists_args(String db_name,String table_name){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof table_exists_args)return this.equals((table_exists_args)that);return false;}public boolean equals(table_exists_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"table_exists_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class table_exists_result implements TBase,java.io.Serializable{private boolean success;private MetaException ouch1;private UnknownDBException ouch2;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;}public table_exists_result(){}public table_exists_result(boolean success,MetaException ouch1,UnknownDBException ouch2){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownDBException getOuch2(){return this.ouch2;}public void setOuch2(UnknownDBException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof table_exists_result)return this.equals((table_exists_result)that);return false;}public boolean equals(table_exists_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownDBException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"table_exists_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){field.name=\"success\";field.type=TType.BOOL;field.id=0;oprot.writeFieldBegin(field);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_partitions_args implements TBase,java.io.Serializable{private String db_name;private String table_name;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;}public get_partitions_args(){}public get_partitions_args(String db_name,String table_name){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_args)return this.equals((get_partitions_args)that);return false;}public boolean equals(get_partitions_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_partitions_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_partitions_result implements TBase,java.io.Serializable{private List<String>success;private MetaException ouch1;private UnknownTableException ouch2;private UnknownDBException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public get_partitions_result(){}public get_partitions_result(List<String>success,MetaException ouch1,UnknownTableException ouch2,UnknownDBException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownTableException getOuch2(){return this.ouch2;}public void setOuch2(UnknownTableException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownDBException getOuch3(){return this.ouch3;}public void setOuch3(UnknownDBException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_result)return this.equals((get_partitions_result)that);return false;}public boolean equals(get_partitions_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list122=iprot.readListBegin();this.success=new ArrayList<String>(_list122.size);for(int _i123=0;_i123<_list122.size;++_i123){String _elem124=null;_elem124=iprot.readString();this.success.add(_elem124);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.STRUCT){this.ouch2=new UnknownTableException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch3=new UnknownDBException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_partitions_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter125 : this.success){oprot.writeString(_iter125);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-3;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-4;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_dbs_args implements TBase,java.io.Serializable{public get_dbs_args(){}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_dbs_args)return this.equals((get_dbs_args)that);return false;}public boolean equals(get_dbs_args that){if(that==null)return false;return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_dbs_args\");oprot.writeStructBegin(struct);oprot.writeFieldStop();oprot.writeStructEnd();}}public static class get_dbs_result implements TBase,java.io.Serializable{private List<String>success;private MetaException ouch;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch=false;}public get_dbs_result(){}public get_dbs_result(List<String>success,MetaException ouch){this();this.success=success;this.__isset.success=true;this.ouch=ouch;this.__isset.ouch=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch(){return this.ouch;}public void setOuch(MetaException ouch){this.ouch=ouch;this.__isset.ouch=true;}public void unsetOuch(){this.ouch=null;this.__isset.ouch=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof get_dbs_result)return this.equals((get_dbs_result)that);return false;}public boolean equals(get_dbs_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch=true &&(this.ouch!=null);boolean that_present_ouch=true &&(that.ouch!=null);if(this_present_ouch || that_present_ouch){if(!(this_present_ouch && that_present_ouch))return false;if(!this.ouch.equals(that.ouch))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list126=iprot.readListBegin();this.success=new ArrayList<String>(_list126.size);for(int _i127=0;_i127<_list126.size;++_i127){String _elem128=null;_elem128=iprot.readString();this.success.add(_elem128);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-1: if(field.type==TType.STRUCT){this.ouch=new MetaException();this.ouch.read(iprot);this.__isset.ouch=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"get_dbs_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter129 : this.success){oprot.writeString(_iter129);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch){if(this.ouch!=null){field.name=\"ouch\";field.type=TType.STRUCT;field.id=-1;oprot.writeFieldBegin(field);this.ouch.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class cat_args implements TBase,java.io.Serializable{private String db_name;private String table_name;private String partition;private int high;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean db_name=false;public boolean table_name=false;public boolean partition=false;public boolean high=false;}public cat_args(){}public cat_args(String db_name,String table_name,String partition,int high){this();this.db_name=db_name;this.__isset.db_name=true;this.table_name=table_name;this.__isset.table_name=true;this.partition=partition;this.__isset.partition=true;this.high=high;this.__isset.high=true;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;this.__isset.db_name=true;}public void unsetDb_name(){this.__isset.db_name=false;}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;this.__isset.table_name=true;}public void unsetTable_name(){this.__isset.table_name=false;}public String getPartition(){return this.partition;}public void setPartition(String partition){this.partition=partition;this.__isset.partition=true;}public void unsetPartition(){this.__isset.partition=false;}public int getHigh(){return this.high;}public void setHigh(int high){this.high=high;this.__isset.high=true;}public void unsetHigh(){this.__isset.high=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof cat_args)return this.equals((cat_args)that);return false;}public boolean equals(cat_args that){if(that==null)return false;boolean this_present_db_name=true &&(this.db_name!=null);boolean that_present_db_name=true &&(that.db_name!=null);if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true &&(this.table_name!=null);boolean that_present_table_name=true &&(that.table_name!=null);if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}boolean this_present_partition=true &&(this.partition!=null);boolean that_present_partition=true &&(that.partition!=null);if(this_present_partition || that_present_partition){if(!(this_present_partition && that_present_partition))return false;if(!this.partition.equals(that.partition))return false;}boolean this_present_high=true;boolean that_present_high=true;if(this_present_high || that_present_high){if(!(this_present_high && that_present_high))return false;if(this.high!=that.high)return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case-1: if(field.type==TType.STRING){this.db_name=iprot.readString();this.__isset.db_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-2: if(field.type==TType.STRING){this.table_name=iprot.readString();this.__isset.table_name=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-3: if(field.type==TType.STRING){this.partition=iprot.readString();this.__isset.partition=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-4: if(field.type==TType.I32){this.high=iprot.readI32();this.__isset.high=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"cat_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.db_name!=null){field.name=\"db_name\";field.type=TType.STRING;field.id=-1;oprot.writeFieldBegin(field);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){field.name=\"table_name\";field.type=TType.STRING;field.id=-2;oprot.writeFieldBegin(field);oprot.writeString(this.table_name);oprot.writeFieldEnd();}if(this.partition!=null){field.name=\"partition\";field.type=TType.STRING;field.id=-3;oprot.writeFieldBegin(field);oprot.writeString(this.partition);oprot.writeFieldEnd();}field.name=\"high\";field.type=TType.I32;field.id=-4;oprot.writeFieldBegin(field);oprot.writeI32(this.high);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}}public static class cat_result implements TBase,java.io.Serializable{private List<String>success;private MetaException ouch1;private UnknownDBException ouch2;private UnknownTableException ouch3;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ouch1=false;public boolean ouch2=false;public boolean ouch3=false;}public cat_result(){}public cat_result(List<String>success,MetaException ouch1,UnknownDBException ouch2,UnknownTableException ouch3){this();this.success=success;this.__isset.success=true;this.ouch1=ouch1;this.__isset.ouch1=true;this.ouch2=ouch2;this.__isset.ouch2=true;this.ouch3=ouch3;this.__isset.ouch3=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public MetaException getOuch1(){return this.ouch1;}public void setOuch1(MetaException ouch1){this.ouch1=ouch1;this.__isset.ouch1=true;}public void unsetOuch1(){this.ouch1=null;this.__isset.ouch1=false;}public UnknownDBException getOuch2(){return this.ouch2;}public void setOuch2(UnknownDBException ouch2){this.ouch2=ouch2;this.__isset.ouch2=true;}public void unsetOuch2(){this.ouch2=null;this.__isset.ouch2=false;}public UnknownTableException getOuch3(){return this.ouch3;}public void setOuch3(UnknownTableException ouch3){this.ouch3=ouch3;this.__isset.ouch3=true;}public void unsetOuch3(){this.ouch3=null;this.__isset.ouch3=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof cat_result)return this.equals((cat_result)that);return false;}public boolean equals(cat_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ouch1=true &&(this.ouch1!=null);boolean that_present_ouch1=true &&(that.ouch1!=null);if(this_present_ouch1 || that_present_ouch1){if(!(this_present_ouch1 && that_present_ouch1))return false;if(!this.ouch1.equals(that.ouch1))return false;}boolean this_present_ouch2=true &&(this.ouch2!=null);boolean that_present_ouch2=true &&(that.ouch2!=null);if(this_present_ouch2 || that_present_ouch2){if(!(this_present_ouch2 && that_present_ouch2))return false;if(!this.ouch2.equals(that.ouch2))return false;}boolean this_present_ouch3=true &&(this.ouch3!=null);boolean that_present_ouch3=true &&(that.ouch3!=null);if(this_present_ouch3 || that_present_ouch3){if(!(this_present_ouch3 && that_present_ouch3))return false;if(!this.ouch3.equals(that.ouch3))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list130=iprot.readListBegin();this.success=new ArrayList<String>(_list130.size);for(int _i131=0;_i131<_list130.size;++_i131){String _elem132=null;_elem132=iprot.readString();this.success.add(_elem132);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-5: if(field.type==TType.STRUCT){this.ouch1=new MetaException();this.ouch1.read(iprot);this.__isset.ouch1=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-6: if(field.type==TType.STRUCT){this.ouch2=new UnknownDBException();this.ouch2.read(iprot);this.__isset.ouch2=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case-7: if(field.type==TType.STRUCT){this.ouch3=new UnknownTableException();this.ouch3.read(iprot);this.__isset.ouch3=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"cat_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter133 : this.success){oprot.writeString(_iter133);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ouch1){if(this.ouch1!=null){field.name=\"ouch1\";field.type=TType.STRUCT;field.id=-5;oprot.writeFieldBegin(field);this.ouch1.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch2){if(this.ouch2!=null){field.name=\"ouch2\";field.type=TType.STRUCT;field.id=-6;oprot.writeFieldBegin(field);this.ouch2.write(oprot);oprot.writeFieldEnd();}}else if(this.__isset.ouch3){if(this.ouch3!=null){field.name=\"ouch3\";field.type=TType.STRUCT;field.id=-7;oprot.writeFieldBegin(field);this.ouch3.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class NoTagHiveObjectComparator extends HiveObjectComparator{public NoTagHiveObjectComparator(){super(NoTagWritableComparableHiveObject.class);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Constants{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFAvg extends UDAF{private long mCount;private double mSum;public UDAFAvg(){super();init();}public void init(){mSum=0;mCount=0;}public boolean aggregate(String o){mSum+=Double.parseDouble(o);mCount++;return true;}public String evaluatePartial(){return new Double(mSum).toString()+'/'+Long.valueOf(mCount).toString();}public boolean aggregatePartial(String o){int pos=o.indexOf('/');assert(pos!=-1);mSum+=Double.parseDouble(o.substring(0,pos));mCount+=Long.parseLong(o.substring(pos+1));return true;}public String evaluate(){return new Double(mSum/mCount).toString();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFCount extends UDAF{private long mCount;public UDAFCount(){super();init();}public void init(){mCount=0;}public boolean aggregate(Object o){mCount++;return true;}public String evaluatePartial(){return Long.valueOf(mCount).toString();}public boolean aggregatePartial(String count){mCount+=Long.parseLong(count);return true;}public String evaluate(){return Long.valueOf(mCount).toString();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFSum extends UDAF{private double mSum;public UDAFSum(){super();init();}public void init(){mSum=0;}public boolean aggregate(String o){mSum+=Double.parseDouble(o);return true;}public String evaluatePartial(){return new Double(mSum).toString();}public boolean aggregatePartial(String o){mSum+=Double.parseDouble(o);return true;}public String evaluate(){return new Double(mSum).toString();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class Constants{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ByteStream{public static class Input extends ByteArrayInputStream{public byte[]getData(){return buf;}public int getCount(){return count;}public void reset(byte[]argBuf,int argCount){buf=argBuf;mark=pos=0;count=argCount;}public Input(){super(new byte[1]);}public Input(byte[]buf){super(buf);}public Input(byte[]buf,int offset,int length){super(buf,offset,length);}}public static class Output extends ByteArrayOutputStream{public byte[]getData(){return buf;}public int getCount(){return count;}public Output(){super();}public Output(int size){super(size);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class JuteSerDeField extends ReflectionSerDeField{public JuteSerDeField(String className,String fieldName)throws SerDeException{super(className,fieldName);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ByteStream{public static class Input extends ByteArrayInputStream{public byte[]getData(){return buf;}public int getCount(){return count;}public void reset(byte[]argBuf,int argCount){buf=argBuf;mark=pos=0;count=argCount;}public Input(){super(new byte[1]);}public Input(byte[]buf){super(buf);}public Input(byte[]buf,int offset,int length){super(buf,offset,length);}}public static class Output extends ByteArrayOutputStream{public byte[]getData(){return buf;}public int getCount(){return count;}public Output(){super();}public Output(int size){super(size);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ArchiveDesc extends DDLDesc{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class HiveHarFileSystem extends HarFileSystem{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFExampleAvg extends UDAF{public static class UDAFAvgState{private long mCount;private double mSum;}public static class UDAFExampleAvgEvaluator implements UDAFEvaluator{UDAFAvgState state;public UDAFExampleAvgEvaluator(){super();state=new UDAFAvgState();init();}public void init(){state.mSum=0;state.mCount=0;}public boolean iterate(Double o){if(o!=null){state.mSum+=o;state.mCount++;}return true;}public UDAFAvgState terminatePartial(){return state.mCount==0 ? null : state;}public boolean merge(UDAFAvgState o){if(o!=null){state.mSum+=o.mSum;state.mCount+=o.mCount;}return true;}public Double terminate(){return state.mCount==0 ? null : Double.valueOf(state.mSum/state.mCount);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class UDAFExampleGroupConcat extends UDAF{public static class UDAFExampleGroupConcatEvaluator implements UDAFEvaluator{ArrayList<String>data;public UDAFExampleGroupConcatEvaluator(){super();data=new ArrayList<String>();}public void init(){data.clear();}public boolean iterate(String[]o){if(o!=null){StringBuilder sb=new StringBuilder();for(int i=0;i<o.length;i++){sb.append(o[i]);}data.add(sb.toString());}return true;}public ArrayList<String>terminatePartial(){return data;}public boolean merge(ArrayList<String>o){if(o!=null){data.addAll(o);}return true;}public String terminate(){Collections.sort(data);StringBuilder sb=new StringBuilder();for(int i=0;i<data.size();i++){sb.append(data.get(i));}return sb.toString();}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class VectorUDFDayOfMonthLong extends VectorUDFTimestampFieldLong{VectorUDFDayOfMonthLong(int colNum,int outputColumn){super(Calendar.DAY_OF_MONTH,colNum,outputColumn);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class VectorUDFHourLong extends VectorUDFTimestampFieldLong{VectorUDFHourLong(int colNum,int outputColumn){super(Calendar.HOUR_OF_DAY,colNum,outputColumn);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class VectorUDFMinuteLong extends VectorUDFTimestampFieldLong{VectorUDFMinuteLong(int colNum,int outputColumn){super(Calendar.MINUTE,colNum,outputColumn);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class VectorUDFSecondLong extends VectorUDFTimestampFieldLong{VectorUDFSecondLong(int colNum,int outputColumn){super(Calendar.SECOND,colNum,outputColumn);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public final class VectorUDFWeekOfYearLong extends VectorUDFTimestampFieldLong{VectorUDFWeekOfYearLong(int colNum,int outputColumn){super(Calendar.WEEK_OF_YEAR,colNum,outputColumn);calendar.setFirstDayOfWeek(Calendar.MONDAY);calendar.setMinimalDaysInFirstWeek(4);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class StringLower extends StringUnaryUDF{StringLower(int colNum,int outputColumn){super(colNum,outputColumn,(IUDFUnaryString)new UDFLower());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class StringUpper extends StringUnaryUDF{StringUpper(int colNum,int outputColumn){super(colNum,outputColumn,(IUDFUnaryString)new UDFUpper());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ByteStream{public static class Input extends ByteArrayInputStream{public byte[]getData(){return buf;}public int getCount(){return count;}public void reset(byte[]argBuf,int argCount){buf=argBuf;mark=pos=0;count=argCount;}public Input(){super(new byte[1]);}public Input(byte[]buf){super(buf);}public Input(byte[]buf,int offset,int length){super(buf,offset,length);}}public static class Output extends ByteArrayOutputStream{public byte[]getData(){return buf;}public int getCount(){return count;}public Output(){super();}public Output(int size){super(size);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DelegationTokenSelector23 extends AbstractDelegationTokenSelector<DelegationTokenIdentifier23>{public DelegationTokenSelector23(){super(DelegationTokenIdentifier23.HIVE_DELEGATION_KIND);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class BadSchemaException extends AvroSerdeException{}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/abstract class EntityBase{String region;String tableName;String dbName;Map<String,String>partitionKVs;abstract static class Entity extends EntityBase{public String getRegion(){return region;}public String getTableName(){return tableName;}public String getDbName(){return dbName;}public Map<String,String>getPartitionKVs(){return partitionKVs;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class CreateDatabaseMessage extends HCatEventMessage{protected CreateDatabaseMessage(){super(EventType.CREATE_DATABASE);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class DropDatabaseMessage extends HCatEventMessage{protected DropDatabaseMessage(){super(EventType.DROP_DATABASE);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class BadParam extends SimpleWebException{public BadParam(String msg){super(400,msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class BusyException extends SimpleWebException{public BusyException(){super(503,\"Busy,please retry\");}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class CallbackFailedException extends SimpleWebException{public CallbackFailedException(String msg){super(400,msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class NotAuthorizedException extends SimpleWebException{public NotAuthorizedException(String msg){super(401,msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class QueueException extends SimpleWebException{public QueueException(String msg){super(500,msg);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class MetaStoreInitContext{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/final class Protocol{static class CancelJob implements Serializable{final String id;CancelJob(String id){this.id=id;}CancelJob(){this(null);}}static class EndSession implements Serializable{}static class Error implements Serializable{final Exception cause;Error(Exception cause){this.cause=cause;}Error(){this(null);}}static class Hello implements Serializable{final String remoteUrl;Hello(String remoteUrl){this.remoteUrl=remoteUrl;}Hello(){this(null);}}static class JobMetrics implements Serializable{final String jobId;final int sparkJobId;final int stageId;final long taskId;final Metrics metrics;JobMetrics(String jobId,int sparkJobId,int stageId,long taskId,Metrics metrics){this.jobId=jobId;this.sparkJobId=sparkJobId;this.stageId=stageId;this.taskId=taskId;this.metrics=metrics;}JobMetrics(){this(null,-1,-1,-1,null);}}static class JobRequest<T extends Serializable>implements Serializable{final String id;final Job<T>job;JobRequest(String id,Job<T>job){this.id=id;this.job=job;}JobRequest(){this(null,null);}}static class JobResult<T extends Serializable>implements Serializable{final String id;final T result;final Throwable error;JobResult(String id,T result,Throwable error){this.id=id;this.result=result;this.error=error;}JobResult(){this(null,null,null);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class StringHex extends StringUnaryUDF{StringHex(int colNum,int outputColumn){super(colNum,outputColumn,(IUDFUnaryString)new UDFHex());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public abstract class BuiltinUtils{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Autogenerated by Thrift Compiler(0.9.0)**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*@generated*/public class TCLIService{public interface Iface{public TOpenSessionResp OpenSession(TOpenSessionReq req)throws org.apache.thrift.TException;public TCloseSessionResp CloseSession(TCloseSessionReq req)throws org.apache.thrift.TException;public TGetInfoResp GetInfo(TGetInfoReq req)throws org.apache.thrift.TException;public TExecuteStatementResp ExecuteStatement(TExecuteStatementReq req)throws org.apache.thrift.TException;public TGetTypeInfoResp GetTypeInfo(TGetTypeInfoReq req)throws org.apache.thrift.TException;public TGetCatalogsResp GetCatalogs(TGetCatalogsReq req)throws org.apache.thrift.TException;public TGetSchemasResp GetSchemas(TGetSchemasReq req)throws org.apache.thrift.TException;public TGetTablesResp GetTables(TGetTablesReq req)throws org.apache.thrift.TException;public TGetTableTypesResp GetTableTypes(TGetTableTypesReq req)throws org.apache.thrift.TException;public TGetColumnsResp GetColumns(TGetColumnsReq req)throws org.apache.thrift.TException;public TGetFunctionsResp GetFunctions(TGetFunctionsReq req)throws org.apache.thrift.TException;public TGetOperationStatusResp GetOperationStatus(TGetOperationStatusReq req)throws org.apache.thrift.TException;public TCancelOperationResp CancelOperation(TCancelOperationReq req)throws org.apache.thrift.TException;public TCloseOperationResp CloseOperation(TCloseOperationReq req)throws org.apache.thrift.TException;public TGetResultSetMetadataResp GetResultSetMetadata(TGetResultSetMetadataReq req)throws org.apache.thrift.TException;public TFetchResultsResp FetchResults(TFetchResultsReq req)throws org.apache.thrift.TException;}public interface AsyncIface{public void OpenSession(TOpenSessionReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.OpenSession_call>resultHandler)throws org.apache.thrift.TException;public void CloseSession(TCloseSessionReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CloseSession_call>resultHandler)throws org.apache.thrift.TException;public void GetInfo(TGetInfoReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetInfo_call>resultHandler)throws org.apache.thrift.TException;public void ExecuteStatement(TExecuteStatementReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.ExecuteStatement_call>resultHandler)throws org.apache.thrift.TException;public void GetTypeInfo(TGetTypeInfoReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetTypeInfo_call>resultHandler)throws org.apache.thrift.TException;public void GetCatalogs(TGetCatalogsReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetCatalogs_call>resultHandler)throws org.apache.thrift.TException;public void GetSchemas(TGetSchemasReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetSchemas_call>resultHandler)throws org.apache.thrift.TException;public void GetTables(TGetTablesReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetTables_call>resultHandler)throws org.apache.thrift.TException;public void GetTableTypes(TGetTableTypesReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetTableTypes_call>resultHandler)throws org.apache.thrift.TException;public void GetColumns(TGetColumnsReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetColumns_call>resultHandler)throws org.apache.thrift.TException;public void GetFunctions(TGetFunctionsReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetFunctions_call>resultHandler)throws org.apache.thrift.TException;public void GetOperationStatus(TGetOperationStatusReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetOperationStatus_call>resultHandler)throws org.apache.thrift.TException;public void CancelOperation(TCancelOperationReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CancelOperation_call>resultHandler)throws org.apache.thrift.TException;public void CloseOperation(TCloseOperationReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.CloseOperation_call>resultHandler)throws org.apache.thrift.TException;public void GetResultSetMetadata(TGetResultSetMetadataReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.GetResultSetMetadata_call>resultHandler)throws org.apache.thrift.TException;public void FetchResults(TFetchResultsReq req,org.apache.thrift.async.AsyncMethodCallback<AsyncClient.FetchResults_call>resultHandler)throws org.apache.thrift.TException;}public static class Client extends org.apache.thrift.TServiceClient implements Iface{public static class Factory implements org.apache.thrift.TServiceClientFactory<Client>{public Factory(){}public Client getClient(org.apache.thrift.protocol.TProtocol prot){return new Client(prot);}public Client getClient(org.apache.thrift.protocol.TProtocol iprot,org.apache.thrift.protocol.TProtocol oprot){return new Client(iprot,oprot);}}public Client(org.apache.thrift.protocol.TProtocol prot){super(prot,prot);}public Client(org.apache.thrift.protocol.TProtocol iprot,org.apache.thrift.protocol.TProtocol oprot){super(iprot,oprot);}public TOpenSessionResp OpenSession(TOpenSessionReq req)throws org.apache.thrift.TException{send_OpenSession(req);return recv_OpenSession();}public void send_OpenSession(TOpenSessionReq req)throws org.apache.thrift.TException{OpenSession_args args=new OpenSession_args();args.setReq(req);sendBase(\"OpenSession\",args);}public TOpenSessionResp recv_OpenSession()throws org.apache.thrift.TException{OpenSession_result result=new OpenSession_result();receiveBase(result,\"OpenSession\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"OpenSession failed: unknown result\");}public TCloseSessionResp CloseSession(TCloseSessionReq req)throws org.apache.thrift.TException{send_CloseSession(req);return recv_CloseSession();}public void send_CloseSession(TCloseSessionReq req)throws org.apache.thrift.TException{CloseSession_args args=new CloseSession_args();args.setReq(req);sendBase(\"CloseSession\",args);}public TCloseSessionResp recv_CloseSession()throws org.apache.thrift.TException{CloseSession_result result=new CloseSession_result();receiveBase(result,\"CloseSession\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"CloseSession failed: unknown result\");}public TGetInfoResp GetInfo(TGetInfoReq req)throws org.apache.thrift.TException{send_GetInfo(req);return recv_GetInfo();}public void send_GetInfo(TGetInfoReq req)throws org.apache.thrift.TException{GetInfo_args args=new GetInfo_args();args.setReq(req);sendBase(\"GetInfo\",args);}public TGetInfoResp recv_GetInfo()throws org.apache.thrift.TException{GetInfo_result result=new GetInfo_result();receiveBase(result,\"GetInfo\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetInfo failed: unknown result\");}public TExecuteStatementResp ExecuteStatement(TExecuteStatementReq req)throws org.apache.thrift.TException{send_ExecuteStatement(req);return recv_ExecuteStatement();}public void send_ExecuteStatement(TExecuteStatementReq req)throws org.apache.thrift.TException{ExecuteStatement_args args=new ExecuteStatement_args();args.setReq(req);sendBase(\"ExecuteStatement\",args);}public TExecuteStatementResp recv_ExecuteStatement()throws org.apache.thrift.TException{ExecuteStatement_result result=new ExecuteStatement_result();receiveBase(result,\"ExecuteStatement\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"ExecuteStatement failed: unknown result\");}public TGetTypeInfoResp GetTypeInfo(TGetTypeInfoReq req)throws org.apache.thrift.TException{send_GetTypeInfo(req);return recv_GetTypeInfo();}public void send_GetTypeInfo(TGetTypeInfoReq req)throws org.apache.thrift.TException{GetTypeInfo_args args=new GetTypeInfo_args();args.setReq(req);sendBase(\"GetTypeInfo\",args);}public TGetTypeInfoResp recv_GetTypeInfo()throws org.apache.thrift.TException{GetTypeInfo_result result=new GetTypeInfo_result();receiveBase(result,\"GetTypeInfo\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetTypeInfo failed: unknown result\");}public TGetCatalogsResp GetCatalogs(TGetCatalogsReq req)throws org.apache.thrift.TException{send_GetCatalogs(req);return recv_GetCatalogs();}public void send_GetCatalogs(TGetCatalogsReq req)throws org.apache.thrift.TException{GetCatalogs_args args=new GetCatalogs_args();args.setReq(req);sendBase(\"GetCatalogs\",args);}public TGetCatalogsResp recv_GetCatalogs()throws org.apache.thrift.TException{GetCatalogs_result result=new GetCatalogs_result();receiveBase(result,\"GetCatalogs\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetCatalogs failed: unknown result\");}public TGetSchemasResp GetSchemas(TGetSchemasReq req)throws org.apache.thrift.TException{send_GetSchemas(req);return recv_GetSchemas();}public void send_GetSchemas(TGetSchemasReq req)throws org.apache.thrift.TException{GetSchemas_args args=new GetSchemas_args();args.setReq(req);sendBase(\"GetSchemas\",args);}public TGetSchemasResp recv_GetSchemas()throws org.apache.thrift.TException{GetSchemas_result result=new GetSchemas_result();receiveBase(result,\"GetSchemas\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetSchemas failed: unknown result\");}public TGetTablesResp GetTables(TGetTablesReq req)throws org.apache.thrift.TException{send_GetTables(req);return recv_GetTables();}public void send_GetTables(TGetTablesReq req)throws org.apache.thrift.TException{GetTables_args args=new GetTables_args();args.setReq(req);sendBase(\"GetTables\",args);}public TGetTablesResp recv_GetTables()throws org.apache.thrift.TException{GetTables_result result=new GetTables_result();receiveBase(result,\"GetTables\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetTables failed: unknown result\");}public TGetTableTypesResp GetTableTypes(TGetTableTypesReq req)throws org.apache.thrift.TException{send_GetTableTypes(req);return recv_GetTableTypes();}public void send_GetTableTypes(TGetTableTypesReq req)throws org.apache.thrift.TException{GetTableTypes_args args=new GetTableTypes_args();args.setReq(req);sendBase(\"GetTableTypes\",args);}public TGetTableTypesResp recv_GetTableTypes()throws org.apache.thrift.TException{GetTableTypes_result result=new GetTableTypes_result();receiveBase(result,\"GetTableTypes\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetTableTypes failed: unknown result\");}public TGetColumnsResp GetColumns(TGetColumnsReq req)throws org.apache.thrift.TException{send_GetColumns(req);return recv_GetColumns();}public void send_GetColumns(TGetColumnsReq req)throws org.apache.thrift.TException{GetColumns_args args=new GetColumns_args();args.setReq(req);sendBase(\"GetColumns\",args);}public TGetColumnsResp recv_GetColumns()throws org.apache.thrift.TException{GetColumns_result result=new GetColumns_result();receiveBase(result,\"GetColumns\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetColumns failed: unknown result\");}public TGetFunctionsResp GetFunctions(TGetFunctionsReq req)throws org.apache.thrift.TException{send_GetFunctions(req);return recv_GetFunctions();}public void send_GetFunctions(TGetFunctionsReq req)throws org.apache.thrift.TException{GetFunctions_args args=new GetFunctions_args();args.setReq(req);sendBase(\"GetFunctions\",args);}public TGetFunctionsResp recv_GetFunctions()throws org.apache.thrift.TException{GetFunctions_result result=new GetFunctions_result();receiveBase(result,\"GetFunctions\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetFunctions failed: unknown result\");}public TGetOperationStatusResp GetOperationStatus(TGetOperationStatusReq req)throws org.apache.thrift.TException{send_GetOperationStatus(req);return recv_GetOperationStatus();}public void send_GetOperationStatus(TGetOperationStatusReq req)throws org.apache.thrift.TException{GetOperationStatus_args args=new GetOperationStatus_args();args.setReq(req);sendBase(\"GetOperationStatus\",args);}public TGetOperationStatusResp recv_GetOperationStatus()throws org.apache.thrift.TException{GetOperationStatus_result result=new GetOperationStatus_result();receiveBase(result,\"GetOperationStatus\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetOperationStatus failed: unknown result\");}public TCancelOperationResp CancelOperation(TCancelOperationReq req)throws org.apache.thrift.TException{send_CancelOperation(req);return recv_CancelOperation();}public void send_CancelOperation(TCancelOperationReq req)throws org.apache.thrift.TException{CancelOperation_args args=new CancelOperation_args();args.setReq(req);sendBase(\"CancelOperation\",args);}public TCancelOperationResp recv_CancelOperation()throws org.apache.thrift.TException{CancelOperation_result result=new CancelOperation_result();receiveBase(result,\"CancelOperation\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"CancelOperation failed: unknown result\");}public TCloseOperationResp CloseOperation(TCloseOperationReq req)throws org.apache.thrift.TException{send_CloseOperation(req);return recv_CloseOperation();}public void send_CloseOperation(TCloseOperationReq req)throws org.apache.thrift.TException{CloseOperation_args args=new CloseOperation_args();args.setReq(req);sendBase(\"CloseOperation\",args);}public TCloseOperationResp recv_CloseOperation()throws org.apache.thrift.TException{CloseOperation_result result=new CloseOperation_result();receiveBase(result,\"CloseOperation\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"CloseOperation failed: unknown result\");}public TGetResultSetMetadataResp GetResultSetMetadata(TGetResultSetMetadataReq req)throws org.apache.thrift.TException{send_GetResultSetMetadata(req);return recv_GetResultSetMetadata();}public void send_GetResultSetMetadata(TGetResultSetMetadataReq req)throws org.apache.thrift.TException{GetResultSetMetadata_args args=new GetResultSetMetadata_args();args.setReq(req);sendBase(\"GetResultSetMetadata\",args);}public TGetResultSetMetadataResp recv_GetResultSetMetadata()throws org.apache.thrift.TException{GetResultSetMetadata_result result=new GetResultSetMetadata_result();receiveBase(result,\"GetResultSetMetadata\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"GetResultSetMetadata failed: unknown result\");}public TFetchResultsResp FetchResults(TFetchResultsReq req)throws org.apache.thrift.TException{send_FetchResults(req);return recv_FetchResults();}public void send_FetchResults(TFetchResultsReq req)throws org.apache.thrift.TException{FetchResults_args args=new FetchResults_args();args.setReq(req);sendBase(\"FetchResults\",args);}public TFetchResultsResp recv_FetchResults()throws org.apache.thrift.TException{FetchResults_result result=new FetchResults_result();receiveBase(result,\"FetchResults\");if(result.isSetSuccess()){return result.success;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"FetchResults failed: unknown result\");}}public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface{public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient>{private org.apache.thrift.async.TAsyncClientManager clientManager;private org.apache.thrift.protocol.TProtocolFactory protocolFactory;public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,org.apache.thrift.protocol.TProtocolFactory protocolFactory){this.clientManager=clientManager;this.protocolFactory=protocolFactory;}public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport){return new AsyncClient(protocolFactory,clientManager,transport);}}public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.async.TAsyncClientManager clientManager,org.apache.thrift.transport.TNonblockingTransport transport){super(protocolFactory,clientManager,transport);}public void OpenSession(TOpenSessionReq req,org.apache.thrift.async.AsyncMethodCallback<OpenSession_call>resultHandler)throws org.apache.thrift.TException{checkReady();OpenSession_call method_call=new OpenSession_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class OpenSession_call extends org.apache.thrift.async.TAsyncMethodCall{private TOpenSessionReq req;public OpenSession_call(TOpenSessionReq req,org.apache.thrift.async.AsyncMethodCallback<OpenSession_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"OpenSession\",org.apache.thrift.protocol.TMessageType.CALL,0));OpenSession_args args=new OpenSession_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TOpenSessionResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_OpenSession();}}public void CloseSession(TCloseSessionReq req,org.apache.thrift.async.AsyncMethodCallback<CloseSession_call>resultHandler)throws org.apache.thrift.TException{checkReady();CloseSession_call method_call=new CloseSession_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class CloseSession_call extends org.apache.thrift.async.TAsyncMethodCall{private TCloseSessionReq req;public CloseSession_call(TCloseSessionReq req,org.apache.thrift.async.AsyncMethodCallback<CloseSession_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"CloseSession\",org.apache.thrift.protocol.TMessageType.CALL,0));CloseSession_args args=new CloseSession_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TCloseSessionResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_CloseSession();}}public void GetInfo(TGetInfoReq req,org.apache.thrift.async.AsyncMethodCallback<GetInfo_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetInfo_call method_call=new GetInfo_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetInfo_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetInfoReq req;public GetInfo_call(TGetInfoReq req,org.apache.thrift.async.AsyncMethodCallback<GetInfo_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetInfo\",org.apache.thrift.protocol.TMessageType.CALL,0));GetInfo_args args=new GetInfo_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetInfoResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetInfo();}}public void ExecuteStatement(TExecuteStatementReq req,org.apache.thrift.async.AsyncMethodCallback<ExecuteStatement_call>resultHandler)throws org.apache.thrift.TException{checkReady();ExecuteStatement_call method_call=new ExecuteStatement_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class ExecuteStatement_call extends org.apache.thrift.async.TAsyncMethodCall{private TExecuteStatementReq req;public ExecuteStatement_call(TExecuteStatementReq req,org.apache.thrift.async.AsyncMethodCallback<ExecuteStatement_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"ExecuteStatement\",org.apache.thrift.protocol.TMessageType.CALL,0));ExecuteStatement_args args=new ExecuteStatement_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TExecuteStatementResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_ExecuteStatement();}}public void GetTypeInfo(TGetTypeInfoReq req,org.apache.thrift.async.AsyncMethodCallback<GetTypeInfo_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetTypeInfo_call method_call=new GetTypeInfo_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetTypeInfo_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetTypeInfoReq req;public GetTypeInfo_call(TGetTypeInfoReq req,org.apache.thrift.async.AsyncMethodCallback<GetTypeInfo_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetTypeInfo\",org.apache.thrift.protocol.TMessageType.CALL,0));GetTypeInfo_args args=new GetTypeInfo_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetTypeInfoResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetTypeInfo();}}public void GetCatalogs(TGetCatalogsReq req,org.apache.thrift.async.AsyncMethodCallback<GetCatalogs_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetCatalogs_call method_call=new GetCatalogs_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetCatalogs_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetCatalogsReq req;public GetCatalogs_call(TGetCatalogsReq req,org.apache.thrift.async.AsyncMethodCallback<GetCatalogs_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetCatalogs\",org.apache.thrift.protocol.TMessageType.CALL,0));GetCatalogs_args args=new GetCatalogs_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetCatalogsResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetCatalogs();}}public void GetSchemas(TGetSchemasReq req,org.apache.thrift.async.AsyncMethodCallback<GetSchemas_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetSchemas_call method_call=new GetSchemas_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetSchemas_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetSchemasReq req;public GetSchemas_call(TGetSchemasReq req,org.apache.thrift.async.AsyncMethodCallback<GetSchemas_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetSchemas\",org.apache.thrift.protocol.TMessageType.CALL,0));GetSchemas_args args=new GetSchemas_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetSchemasResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetSchemas();}}public void GetTables(TGetTablesReq req,org.apache.thrift.async.AsyncMethodCallback<GetTables_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetTables_call method_call=new GetTables_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetTables_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetTablesReq req;public GetTables_call(TGetTablesReq req,org.apache.thrift.async.AsyncMethodCallback<GetTables_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetTables\",org.apache.thrift.protocol.TMessageType.CALL,0));GetTables_args args=new GetTables_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetTablesResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetTables();}}public void GetTableTypes(TGetTableTypesReq req,org.apache.thrift.async.AsyncMethodCallback<GetTableTypes_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetTableTypes_call method_call=new GetTableTypes_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetTableTypes_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetTableTypesReq req;public GetTableTypes_call(TGetTableTypesReq req,org.apache.thrift.async.AsyncMethodCallback<GetTableTypes_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetTableTypes\",org.apache.thrift.protocol.TMessageType.CALL,0));GetTableTypes_args args=new GetTableTypes_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetTableTypesResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetTableTypes();}}public void GetColumns(TGetColumnsReq req,org.apache.thrift.async.AsyncMethodCallback<GetColumns_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetColumns_call method_call=new GetColumns_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetColumns_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetColumnsReq req;public GetColumns_call(TGetColumnsReq req,org.apache.thrift.async.AsyncMethodCallback<GetColumns_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetColumns\",org.apache.thrift.protocol.TMessageType.CALL,0));GetColumns_args args=new GetColumns_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetColumnsResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetColumns();}}public void GetFunctions(TGetFunctionsReq req,org.apache.thrift.async.AsyncMethodCallback<GetFunctions_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetFunctions_call method_call=new GetFunctions_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetFunctions_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetFunctionsReq req;public GetFunctions_call(TGetFunctionsReq req,org.apache.thrift.async.AsyncMethodCallback<GetFunctions_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetFunctions\",org.apache.thrift.protocol.TMessageType.CALL,0));GetFunctions_args args=new GetFunctions_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetFunctionsResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetFunctions();}}public void GetOperationStatus(TGetOperationStatusReq req,org.apache.thrift.async.AsyncMethodCallback<GetOperationStatus_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetOperationStatus_call method_call=new GetOperationStatus_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetOperationStatus_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetOperationStatusReq req;public GetOperationStatus_call(TGetOperationStatusReq req,org.apache.thrift.async.AsyncMethodCallback<GetOperationStatus_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetOperationStatus\",org.apache.thrift.protocol.TMessageType.CALL,0));GetOperationStatus_args args=new GetOperationStatus_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetOperationStatusResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetOperationStatus();}}public void CancelOperation(TCancelOperationReq req,org.apache.thrift.async.AsyncMethodCallback<CancelOperation_call>resultHandler)throws org.apache.thrift.TException{checkReady();CancelOperation_call method_call=new CancelOperation_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class CancelOperation_call extends org.apache.thrift.async.TAsyncMethodCall{private TCancelOperationReq req;public CancelOperation_call(TCancelOperationReq req,org.apache.thrift.async.AsyncMethodCallback<CancelOperation_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"CancelOperation\",org.apache.thrift.protocol.TMessageType.CALL,0));CancelOperation_args args=new CancelOperation_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TCancelOperationResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_CancelOperation();}}public void CloseOperation(TCloseOperationReq req,org.apache.thrift.async.AsyncMethodCallback<CloseOperation_call>resultHandler)throws org.apache.thrift.TException{checkReady();CloseOperation_call method_call=new CloseOperation_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class CloseOperation_call extends org.apache.thrift.async.TAsyncMethodCall{private TCloseOperationReq req;public CloseOperation_call(TCloseOperationReq req,org.apache.thrift.async.AsyncMethodCallback<CloseOperation_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"CloseOperation\",org.apache.thrift.protocol.TMessageType.CALL,0));CloseOperation_args args=new CloseOperation_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TCloseOperationResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_CloseOperation();}}public void GetResultSetMetadata(TGetResultSetMetadataReq req,org.apache.thrift.async.AsyncMethodCallback<GetResultSetMetadata_call>resultHandler)throws org.apache.thrift.TException{checkReady();GetResultSetMetadata_call method_call=new GetResultSetMetadata_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class GetResultSetMetadata_call extends org.apache.thrift.async.TAsyncMethodCall{private TGetResultSetMetadataReq req;public GetResultSetMetadata_call(TGetResultSetMetadataReq req,org.apache.thrift.async.AsyncMethodCallback<GetResultSetMetadata_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"GetResultSetMetadata\",org.apache.thrift.protocol.TMessageType.CALL,0));GetResultSetMetadata_args args=new GetResultSetMetadata_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TGetResultSetMetadataResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_GetResultSetMetadata();}}public void FetchResults(TFetchResultsReq req,org.apache.thrift.async.AsyncMethodCallback<FetchResults_call>resultHandler)throws org.apache.thrift.TException{checkReady();FetchResults_call method_call=new FetchResults_call(req,resultHandler,this,___protocolFactory,___transport);this.___currentMethod=method_call;___manager.call(method_call);}public static class FetchResults_call extends org.apache.thrift.async.TAsyncMethodCall{private TFetchResultsReq req;public FetchResults_call(TFetchResultsReq req,org.apache.thrift.async.AsyncMethodCallback<FetchResults_call>resultHandler,org.apache.thrift.async.TAsyncClient client,org.apache.thrift.protocol.TProtocolFactory protocolFactory,org.apache.thrift.transport.TNonblockingTransport transport)throws org.apache.thrift.TException{super(client,protocolFactory,transport,resultHandler,false);this.req=req;}public void write_args(org.apache.thrift.protocol.TProtocol prot)throws org.apache.thrift.TException{prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage(\"FetchResults\",org.apache.thrift.protocol.TMessageType.CALL,0));FetchResults_args args=new FetchResults_args();args.setReq(req);args.write(prot);prot.writeMessageEnd();}public TFetchResultsResp getResult()throws org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_FetchResults();}}}public static class Processor<I extends Iface>extends org.apache.thrift.TBaseProcessor<I>implements org.apache.thrift.TProcessor{private static final Logger LOGGER=LoggerFactory.getLogger(Processor.class.getName());public Processor(I iface){super(iface,getProcessMap(new HashMap<String,org.apache.thrift.ProcessFunction<I,? extends org.apache.thrift.TBase>>()));}protected Processor(I iface,Map<String,org.apache.thrift.ProcessFunction<I,? extends org.apache.thrift.TBase>>processMap){super(iface,getProcessMap(processMap));}private static<I extends Iface>Map<String,org.apache.thrift.ProcessFunction<I,? extends org.apache.thrift.TBase>>getProcessMap(Map<String,org.apache.thrift.ProcessFunction<I,? extends org.apache.thrift.TBase>>processMap){processMap.put(\"OpenSession\",new OpenSession());processMap.put(\"CloseSession\",new CloseSession());processMap.put(\"GetInfo\",new GetInfo());processMap.put(\"ExecuteStatement\",new ExecuteStatement());processMap.put(\"GetTypeInfo\",new GetTypeInfo());processMap.put(\"GetCatalogs\",new GetCatalogs());processMap.put(\"GetSchemas\",new GetSchemas());processMap.put(\"GetTables\",new GetTables());processMap.put(\"GetTableTypes\",new GetTableTypes());processMap.put(\"GetColumns\",new GetColumns());processMap.put(\"GetFunctions\",new GetFunctions());processMap.put(\"GetOperationStatus\",new GetOperationStatus());processMap.put(\"CancelOperation\",new CancelOperation());processMap.put(\"CloseOperation\",new CloseOperation());processMap.put(\"GetResultSetMetadata\",new GetResultSetMetadata());processMap.put(\"FetchResults\",new FetchResults());return processMap;}public static class OpenSession<I extends Iface>extends org.apache.thrift.ProcessFunction<I,OpenSession_args>{public OpenSession(){super(\"OpenSession\");}public OpenSession_args getEmptyArgsInstance(){return new OpenSession_args();}protected boolean isOneway(){return false;}public OpenSession_result getResult(I iface,OpenSession_args args)throws org.apache.thrift.TException{OpenSession_result result=new OpenSession_result();result.success=iface.OpenSession(args.req);return result;}}public static class CloseSession<I extends Iface>extends org.apache.thrift.ProcessFunction<I,CloseSession_args>{public CloseSession(){super(\"CloseSession\");}public CloseSession_args getEmptyArgsInstance(){return new CloseSession_args();}protected boolean isOneway(){return false;}public CloseSession_result getResult(I iface,CloseSession_args args)throws org.apache.thrift.TException{CloseSession_result result=new CloseSession_result();result.success=iface.CloseSession(args.req);return result;}}public static class GetInfo<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetInfo_args>{public GetInfo(){super(\"GetInfo\");}public GetInfo_args getEmptyArgsInstance(){return new GetInfo_args();}protected boolean isOneway(){return false;}public GetInfo_result getResult(I iface,GetInfo_args args)throws org.apache.thrift.TException{GetInfo_result result=new GetInfo_result();result.success=iface.GetInfo(args.req);return result;}}public static class ExecuteStatement<I extends Iface>extends org.apache.thrift.ProcessFunction<I,ExecuteStatement_args>{public ExecuteStatement(){super(\"ExecuteStatement\");}public ExecuteStatement_args getEmptyArgsInstance(){return new ExecuteStatement_args();}protected boolean isOneway(){return false;}public ExecuteStatement_result getResult(I iface,ExecuteStatement_args args)throws org.apache.thrift.TException{ExecuteStatement_result result=new ExecuteStatement_result();result.success=iface.ExecuteStatement(args.req);return result;}}public static class GetTypeInfo<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetTypeInfo_args>{public GetTypeInfo(){super(\"GetTypeInfo\");}public GetTypeInfo_args getEmptyArgsInstance(){return new GetTypeInfo_args();}protected boolean isOneway(){return false;}public GetTypeInfo_result getResult(I iface,GetTypeInfo_args args)throws org.apache.thrift.TException{GetTypeInfo_result result=new GetTypeInfo_result();result.success=iface.GetTypeInfo(args.req);return result;}}public static class GetCatalogs<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetCatalogs_args>{public GetCatalogs(){super(\"GetCatalogs\");}public GetCatalogs_args getEmptyArgsInstance(){return new GetCatalogs_args();}protected boolean isOneway(){return false;}public GetCatalogs_result getResult(I iface,GetCatalogs_args args)throws org.apache.thrift.TException{GetCatalogs_result result=new GetCatalogs_result();result.success=iface.GetCatalogs(args.req);return result;}}public static class GetSchemas<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetSchemas_args>{public GetSchemas(){super(\"GetSchemas\");}public GetSchemas_args getEmptyArgsInstance(){return new GetSchemas_args();}protected boolean isOneway(){return false;}public GetSchemas_result getResult(I iface,GetSchemas_args args)throws org.apache.thrift.TException{GetSchemas_result result=new GetSchemas_result();result.success=iface.GetSchemas(args.req);return result;}}public static class GetTables<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetTables_args>{public GetTables(){super(\"GetTables\");}public GetTables_args getEmptyArgsInstance(){return new GetTables_args();}protected boolean isOneway(){return false;}public GetTables_result getResult(I iface,GetTables_args args)throws org.apache.thrift.TException{GetTables_result result=new GetTables_result();result.success=iface.GetTables(args.req);return result;}}public static class GetTableTypes<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetTableTypes_args>{public GetTableTypes(){super(\"GetTableTypes\");}public GetTableTypes_args getEmptyArgsInstance(){return new GetTableTypes_args();}protected boolean isOneway(){return false;}public GetTableTypes_result getResult(I iface,GetTableTypes_args args)throws org.apache.thrift.TException{GetTableTypes_result result=new GetTableTypes_result();result.success=iface.GetTableTypes(args.req);return result;}}public static class GetColumns<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetColumns_args>{public GetColumns(){super(\"GetColumns\");}public GetColumns_args getEmptyArgsInstance(){return new GetColumns_args();}protected boolean isOneway(){return false;}public GetColumns_result getResult(I iface,GetColumns_args args)throws org.apache.thrift.TException{GetColumns_result result=new GetColumns_result();result.success=iface.GetColumns(args.req);return result;}}public static class GetFunctions<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetFunctions_args>{public GetFunctions(){super(\"GetFunctions\");}public GetFunctions_args getEmptyArgsInstance(){return new GetFunctions_args();}protected boolean isOneway(){return false;}public GetFunctions_result getResult(I iface,GetFunctions_args args)throws org.apache.thrift.TException{GetFunctions_result result=new GetFunctions_result();result.success=iface.GetFunctions(args.req);return result;}}public static class GetOperationStatus<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetOperationStatus_args>{public GetOperationStatus(){super(\"GetOperationStatus\");}public GetOperationStatus_args getEmptyArgsInstance(){return new GetOperationStatus_args();}protected boolean isOneway(){return false;}public GetOperationStatus_result getResult(I iface,GetOperationStatus_args args)throws org.apache.thrift.TException{GetOperationStatus_result result=new GetOperationStatus_result();result.success=iface.GetOperationStatus(args.req);return result;}}public static class CancelOperation<I extends Iface>extends org.apache.thrift.ProcessFunction<I,CancelOperation_args>{public CancelOperation(){super(\"CancelOperation\");}public CancelOperation_args getEmptyArgsInstance(){return new CancelOperation_args();}protected boolean isOneway(){return false;}public CancelOperation_result getResult(I iface,CancelOperation_args args)throws org.apache.thrift.TException{CancelOperation_result result=new CancelOperation_result();result.success=iface.CancelOperation(args.req);return result;}}public static class CloseOperation<I extends Iface>extends org.apache.thrift.ProcessFunction<I,CloseOperation_args>{public CloseOperation(){super(\"CloseOperation\");}public CloseOperation_args getEmptyArgsInstance(){return new CloseOperation_args();}protected boolean isOneway(){return false;}public CloseOperation_result getResult(I iface,CloseOperation_args args)throws org.apache.thrift.TException{CloseOperation_result result=new CloseOperation_result();result.success=iface.CloseOperation(args.req);return result;}}public static class GetResultSetMetadata<I extends Iface>extends org.apache.thrift.ProcessFunction<I,GetResultSetMetadata_args>{public GetResultSetMetadata(){super(\"GetResultSetMetadata\");}public GetResultSetMetadata_args getEmptyArgsInstance(){return new GetResultSetMetadata_args();}protected boolean isOneway(){return false;}public GetResultSetMetadata_result getResult(I iface,GetResultSetMetadata_args args)throws org.apache.thrift.TException{GetResultSetMetadata_result result=new GetResultSetMetadata_result();result.success=iface.GetResultSetMetadata(args.req);return result;}}public static class FetchResults<I extends Iface>extends org.apache.thrift.ProcessFunction<I,FetchResults_args>{public FetchResults(){super(\"FetchResults\");}public FetchResults_args getEmptyArgsInstance(){return new FetchResults_args();}protected boolean isOneway(){return false;}public FetchResults_result getResult(I iface,FetchResults_args args)throws org.apache.thrift.TException{FetchResults_result result=new FetchResults_result();result.success=iface.FetchResults(args.req);return result;}}}public static class OpenSession_args implements org.apache.thrift.TBase<OpenSession_args,OpenSession_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"OpenSession_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new OpenSession_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new OpenSession_argsTupleSchemeFactory());}private TOpenSessionReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TOpenSessionReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenSession_args.class,metaDataMap);}public OpenSession_args(){}public OpenSession_args(TOpenSessionReq req){this();this.req=req;}public OpenSession_args(OpenSession_args other){if(other.isSetReq()){this.req=new TOpenSessionReq(other.req);}}public OpenSession_args deepCopy(){return new OpenSession_args(this);}@Override public void clear(){this.req=null;}public TOpenSessionReq getReq(){return this.req;}public void setReq(TOpenSessionReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TOpenSessionReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof OpenSession_args)return this.equals((OpenSession_args)that);return false;}public boolean equals(OpenSession_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(OpenSession_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;OpenSession_args typedOther=(OpenSession_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class OpenSession_argsStandardSchemeFactory implements SchemeFactory{public OpenSession_argsStandardScheme getScheme(){return new OpenSession_argsStandardScheme();}}private static class OpenSession_argsStandardScheme extends StandardScheme<OpenSession_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,OpenSession_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TOpenSessionReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,OpenSession_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class OpenSession_argsTupleSchemeFactory implements SchemeFactory{public OpenSession_argsTupleScheme getScheme(){return new OpenSession_argsTupleScheme();}}private static class OpenSession_argsTupleScheme extends TupleScheme<OpenSession_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,OpenSession_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,OpenSession_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TOpenSessionReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class OpenSession_result implements org.apache.thrift.TBase<OpenSession_result,OpenSession_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"OpenSession_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new OpenSession_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new OpenSession_resultTupleSchemeFactory());}private TOpenSessionResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TOpenSessionResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenSession_result.class,metaDataMap);}public OpenSession_result(){}public OpenSession_result(TOpenSessionResp success){this();this.success=success;}public OpenSession_result(OpenSession_result other){if(other.isSetSuccess()){this.success=new TOpenSessionResp(other.success);}}public OpenSession_result deepCopy(){return new OpenSession_result(this);}@Override public void clear(){this.success=null;}public TOpenSessionResp getSuccess(){return this.success;}public void setSuccess(TOpenSessionResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TOpenSessionResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof OpenSession_result)return this.equals((OpenSession_result)that);return false;}public boolean equals(OpenSession_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(OpenSession_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;OpenSession_result typedOther=(OpenSession_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class OpenSession_resultStandardSchemeFactory implements SchemeFactory{public OpenSession_resultStandardScheme getScheme(){return new OpenSession_resultStandardScheme();}}private static class OpenSession_resultStandardScheme extends StandardScheme<OpenSession_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,OpenSession_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TOpenSessionResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,OpenSession_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class OpenSession_resultTupleSchemeFactory implements SchemeFactory{public OpenSession_resultTupleScheme getScheme(){return new OpenSession_resultTupleScheme();}}private static class OpenSession_resultTupleScheme extends TupleScheme<OpenSession_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,OpenSession_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,OpenSession_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TOpenSessionResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class CloseSession_args implements org.apache.thrift.TBase<CloseSession_args,CloseSession_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"CloseSession_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new CloseSession_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new CloseSession_argsTupleSchemeFactory());}private TCloseSessionReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TCloseSessionReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseSession_args.class,metaDataMap);}public CloseSession_args(){}public CloseSession_args(TCloseSessionReq req){this();this.req=req;}public CloseSession_args(CloseSession_args other){if(other.isSetReq()){this.req=new TCloseSessionReq(other.req);}}public CloseSession_args deepCopy(){return new CloseSession_args(this);}@Override public void clear(){this.req=null;}public TCloseSessionReq getReq(){return this.req;}public void setReq(TCloseSessionReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TCloseSessionReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof CloseSession_args)return this.equals((CloseSession_args)that);return false;}public boolean equals(CloseSession_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(CloseSession_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;CloseSession_args typedOther=(CloseSession_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class CloseSession_argsStandardSchemeFactory implements SchemeFactory{public CloseSession_argsStandardScheme getScheme(){return new CloseSession_argsStandardScheme();}}private static class CloseSession_argsStandardScheme extends StandardScheme<CloseSession_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,CloseSession_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TCloseSessionReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,CloseSession_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class CloseSession_argsTupleSchemeFactory implements SchemeFactory{public CloseSession_argsTupleScheme getScheme(){return new CloseSession_argsTupleScheme();}}private static class CloseSession_argsTupleScheme extends TupleScheme<CloseSession_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,CloseSession_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,CloseSession_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TCloseSessionReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class CloseSession_result implements org.apache.thrift.TBase<CloseSession_result,CloseSession_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"CloseSession_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new CloseSession_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new CloseSession_resultTupleSchemeFactory());}private TCloseSessionResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TCloseSessionResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseSession_result.class,metaDataMap);}public CloseSession_result(){}public CloseSession_result(TCloseSessionResp success){this();this.success=success;}public CloseSession_result(CloseSession_result other){if(other.isSetSuccess()){this.success=new TCloseSessionResp(other.success);}}public CloseSession_result deepCopy(){return new CloseSession_result(this);}@Override public void clear(){this.success=null;}public TCloseSessionResp getSuccess(){return this.success;}public void setSuccess(TCloseSessionResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TCloseSessionResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof CloseSession_result)return this.equals((CloseSession_result)that);return false;}public boolean equals(CloseSession_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(CloseSession_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;CloseSession_result typedOther=(CloseSession_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class CloseSession_resultStandardSchemeFactory implements SchemeFactory{public CloseSession_resultStandardScheme getScheme(){return new CloseSession_resultStandardScheme();}}private static class CloseSession_resultStandardScheme extends StandardScheme<CloseSession_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,CloseSession_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TCloseSessionResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,CloseSession_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class CloseSession_resultTupleSchemeFactory implements SchemeFactory{public CloseSession_resultTupleScheme getScheme(){return new CloseSession_resultTupleScheme();}}private static class CloseSession_resultTupleScheme extends TupleScheme<CloseSession_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,CloseSession_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,CloseSession_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TCloseSessionResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetInfo_args implements org.apache.thrift.TBase<GetInfo_args,GetInfo_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetInfo_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetInfo_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetInfo_argsTupleSchemeFactory());}private TGetInfoReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetInfoReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetInfo_args.class,metaDataMap);}public GetInfo_args(){}public GetInfo_args(TGetInfoReq req){this();this.req=req;}public GetInfo_args(GetInfo_args other){if(other.isSetReq()){this.req=new TGetInfoReq(other.req);}}public GetInfo_args deepCopy(){return new GetInfo_args(this);}@Override public void clear(){this.req=null;}public TGetInfoReq getReq(){return this.req;}public void setReq(TGetInfoReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetInfoReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetInfo_args)return this.equals((GetInfo_args)that);return false;}public boolean equals(GetInfo_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetInfo_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetInfo_args typedOther=(GetInfo_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetInfo_argsStandardSchemeFactory implements SchemeFactory{public GetInfo_argsStandardScheme getScheme(){return new GetInfo_argsStandardScheme();}}private static class GetInfo_argsStandardScheme extends StandardScheme<GetInfo_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetInfo_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetInfoReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetInfo_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetInfo_argsTupleSchemeFactory implements SchemeFactory{public GetInfo_argsTupleScheme getScheme(){return new GetInfo_argsTupleScheme();}}private static class GetInfo_argsTupleScheme extends TupleScheme<GetInfo_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetInfo_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetInfo_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetInfoReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetInfo_result implements org.apache.thrift.TBase<GetInfo_result,GetInfo_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetInfo_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetInfo_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetInfo_resultTupleSchemeFactory());}private TGetInfoResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetInfoResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetInfo_result.class,metaDataMap);}public GetInfo_result(){}public GetInfo_result(TGetInfoResp success){this();this.success=success;}public GetInfo_result(GetInfo_result other){if(other.isSetSuccess()){this.success=new TGetInfoResp(other.success);}}public GetInfo_result deepCopy(){return new GetInfo_result(this);}@Override public void clear(){this.success=null;}public TGetInfoResp getSuccess(){return this.success;}public void setSuccess(TGetInfoResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetInfoResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetInfo_result)return this.equals((GetInfo_result)that);return false;}public boolean equals(GetInfo_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetInfo_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetInfo_result typedOther=(GetInfo_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetInfo_resultStandardSchemeFactory implements SchemeFactory{public GetInfo_resultStandardScheme getScheme(){return new GetInfo_resultStandardScheme();}}private static class GetInfo_resultStandardScheme extends StandardScheme<GetInfo_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetInfo_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetInfoResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetInfo_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetInfo_resultTupleSchemeFactory implements SchemeFactory{public GetInfo_resultTupleScheme getScheme(){return new GetInfo_resultTupleScheme();}}private static class GetInfo_resultTupleScheme extends TupleScheme<GetInfo_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetInfo_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetInfo_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetInfoResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class ExecuteStatement_args implements org.apache.thrift.TBase<ExecuteStatement_args,ExecuteStatement_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"ExecuteStatement_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new ExecuteStatement_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new ExecuteStatement_argsTupleSchemeFactory());}private TExecuteStatementReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TExecuteStatementReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteStatement_args.class,metaDataMap);}public ExecuteStatement_args(){}public ExecuteStatement_args(TExecuteStatementReq req){this();this.req=req;}public ExecuteStatement_args(ExecuteStatement_args other){if(other.isSetReq()){this.req=new TExecuteStatementReq(other.req);}}public ExecuteStatement_args deepCopy(){return new ExecuteStatement_args(this);}@Override public void clear(){this.req=null;}public TExecuteStatementReq getReq(){return this.req;}public void setReq(TExecuteStatementReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TExecuteStatementReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof ExecuteStatement_args)return this.equals((ExecuteStatement_args)that);return false;}public boolean equals(ExecuteStatement_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(ExecuteStatement_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;ExecuteStatement_args typedOther=(ExecuteStatement_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class ExecuteStatement_argsStandardSchemeFactory implements SchemeFactory{public ExecuteStatement_argsStandardScheme getScheme(){return new ExecuteStatement_argsStandardScheme();}}private static class ExecuteStatement_argsStandardScheme extends StandardScheme<ExecuteStatement_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,ExecuteStatement_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TExecuteStatementReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,ExecuteStatement_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class ExecuteStatement_argsTupleSchemeFactory implements SchemeFactory{public ExecuteStatement_argsTupleScheme getScheme(){return new ExecuteStatement_argsTupleScheme();}}private static class ExecuteStatement_argsTupleScheme extends TupleScheme<ExecuteStatement_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,ExecuteStatement_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,ExecuteStatement_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TExecuteStatementReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class ExecuteStatement_result implements org.apache.thrift.TBase<ExecuteStatement_result,ExecuteStatement_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"ExecuteStatement_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new ExecuteStatement_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new ExecuteStatement_resultTupleSchemeFactory());}private TExecuteStatementResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TExecuteStatementResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecuteStatement_result.class,metaDataMap);}public ExecuteStatement_result(){}public ExecuteStatement_result(TExecuteStatementResp success){this();this.success=success;}public ExecuteStatement_result(ExecuteStatement_result other){if(other.isSetSuccess()){this.success=new TExecuteStatementResp(other.success);}}public ExecuteStatement_result deepCopy(){return new ExecuteStatement_result(this);}@Override public void clear(){this.success=null;}public TExecuteStatementResp getSuccess(){return this.success;}public void setSuccess(TExecuteStatementResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TExecuteStatementResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof ExecuteStatement_result)return this.equals((ExecuteStatement_result)that);return false;}public boolean equals(ExecuteStatement_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(ExecuteStatement_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;ExecuteStatement_result typedOther=(ExecuteStatement_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class ExecuteStatement_resultStandardSchemeFactory implements SchemeFactory{public ExecuteStatement_resultStandardScheme getScheme(){return new ExecuteStatement_resultStandardScheme();}}private static class ExecuteStatement_resultStandardScheme extends StandardScheme<ExecuteStatement_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,ExecuteStatement_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TExecuteStatementResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,ExecuteStatement_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class ExecuteStatement_resultTupleSchemeFactory implements SchemeFactory{public ExecuteStatement_resultTupleScheme getScheme(){return new ExecuteStatement_resultTupleScheme();}}private static class ExecuteStatement_resultTupleScheme extends TupleScheme<ExecuteStatement_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,ExecuteStatement_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,ExecuteStatement_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TExecuteStatementResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetTypeInfo_args implements org.apache.thrift.TBase<GetTypeInfo_args,GetTypeInfo_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetTypeInfo_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetTypeInfo_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetTypeInfo_argsTupleSchemeFactory());}private TGetTypeInfoReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetTypeInfoReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTypeInfo_args.class,metaDataMap);}public GetTypeInfo_args(){}public GetTypeInfo_args(TGetTypeInfoReq req){this();this.req=req;}public GetTypeInfo_args(GetTypeInfo_args other){if(other.isSetReq()){this.req=new TGetTypeInfoReq(other.req);}}public GetTypeInfo_args deepCopy(){return new GetTypeInfo_args(this);}@Override public void clear(){this.req=null;}public TGetTypeInfoReq getReq(){return this.req;}public void setReq(TGetTypeInfoReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetTypeInfoReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetTypeInfo_args)return this.equals((GetTypeInfo_args)that);return false;}public boolean equals(GetTypeInfo_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetTypeInfo_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetTypeInfo_args typedOther=(GetTypeInfo_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetTypeInfo_argsStandardSchemeFactory implements SchemeFactory{public GetTypeInfo_argsStandardScheme getScheme(){return new GetTypeInfo_argsStandardScheme();}}private static class GetTypeInfo_argsStandardScheme extends StandardScheme<GetTypeInfo_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetTypeInfo_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetTypeInfoReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetTypeInfo_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetTypeInfo_argsTupleSchemeFactory implements SchemeFactory{public GetTypeInfo_argsTupleScheme getScheme(){return new GetTypeInfo_argsTupleScheme();}}private static class GetTypeInfo_argsTupleScheme extends TupleScheme<GetTypeInfo_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetTypeInfo_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetTypeInfo_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetTypeInfoReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetTypeInfo_result implements org.apache.thrift.TBase<GetTypeInfo_result,GetTypeInfo_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetTypeInfo_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetTypeInfo_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetTypeInfo_resultTupleSchemeFactory());}private TGetTypeInfoResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetTypeInfoResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTypeInfo_result.class,metaDataMap);}public GetTypeInfo_result(){}public GetTypeInfo_result(TGetTypeInfoResp success){this();this.success=success;}public GetTypeInfo_result(GetTypeInfo_result other){if(other.isSetSuccess()){this.success=new TGetTypeInfoResp(other.success);}}public GetTypeInfo_result deepCopy(){return new GetTypeInfo_result(this);}@Override public void clear(){this.success=null;}public TGetTypeInfoResp getSuccess(){return this.success;}public void setSuccess(TGetTypeInfoResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetTypeInfoResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetTypeInfo_result)return this.equals((GetTypeInfo_result)that);return false;}public boolean equals(GetTypeInfo_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetTypeInfo_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetTypeInfo_result typedOther=(GetTypeInfo_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetTypeInfo_resultStandardSchemeFactory implements SchemeFactory{public GetTypeInfo_resultStandardScheme getScheme(){return new GetTypeInfo_resultStandardScheme();}}private static class GetTypeInfo_resultStandardScheme extends StandardScheme<GetTypeInfo_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetTypeInfo_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetTypeInfoResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetTypeInfo_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetTypeInfo_resultTupleSchemeFactory implements SchemeFactory{public GetTypeInfo_resultTupleScheme getScheme(){return new GetTypeInfo_resultTupleScheme();}}private static class GetTypeInfo_resultTupleScheme extends TupleScheme<GetTypeInfo_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetTypeInfo_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetTypeInfo_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetTypeInfoResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetCatalogs_args implements org.apache.thrift.TBase<GetCatalogs_args,GetCatalogs_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetCatalogs_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetCatalogs_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetCatalogs_argsTupleSchemeFactory());}private TGetCatalogsReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetCatalogsReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCatalogs_args.class,metaDataMap);}public GetCatalogs_args(){}public GetCatalogs_args(TGetCatalogsReq req){this();this.req=req;}public GetCatalogs_args(GetCatalogs_args other){if(other.isSetReq()){this.req=new TGetCatalogsReq(other.req);}}public GetCatalogs_args deepCopy(){return new GetCatalogs_args(this);}@Override public void clear(){this.req=null;}public TGetCatalogsReq getReq(){return this.req;}public void setReq(TGetCatalogsReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetCatalogsReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetCatalogs_args)return this.equals((GetCatalogs_args)that);return false;}public boolean equals(GetCatalogs_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetCatalogs_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetCatalogs_args typedOther=(GetCatalogs_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetCatalogs_argsStandardSchemeFactory implements SchemeFactory{public GetCatalogs_argsStandardScheme getScheme(){return new GetCatalogs_argsStandardScheme();}}private static class GetCatalogs_argsStandardScheme extends StandardScheme<GetCatalogs_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetCatalogs_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetCatalogsReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetCatalogs_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetCatalogs_argsTupleSchemeFactory implements SchemeFactory{public GetCatalogs_argsTupleScheme getScheme(){return new GetCatalogs_argsTupleScheme();}}private static class GetCatalogs_argsTupleScheme extends TupleScheme<GetCatalogs_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetCatalogs_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetCatalogs_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetCatalogsReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetCatalogs_result implements org.apache.thrift.TBase<GetCatalogs_result,GetCatalogs_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetCatalogs_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetCatalogs_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetCatalogs_resultTupleSchemeFactory());}private TGetCatalogsResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetCatalogsResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetCatalogs_result.class,metaDataMap);}public GetCatalogs_result(){}public GetCatalogs_result(TGetCatalogsResp success){this();this.success=success;}public GetCatalogs_result(GetCatalogs_result other){if(other.isSetSuccess()){this.success=new TGetCatalogsResp(other.success);}}public GetCatalogs_result deepCopy(){return new GetCatalogs_result(this);}@Override public void clear(){this.success=null;}public TGetCatalogsResp getSuccess(){return this.success;}public void setSuccess(TGetCatalogsResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetCatalogsResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetCatalogs_result)return this.equals((GetCatalogs_result)that);return false;}public boolean equals(GetCatalogs_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetCatalogs_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetCatalogs_result typedOther=(GetCatalogs_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetCatalogs_resultStandardSchemeFactory implements SchemeFactory{public GetCatalogs_resultStandardScheme getScheme(){return new GetCatalogs_resultStandardScheme();}}private static class GetCatalogs_resultStandardScheme extends StandardScheme<GetCatalogs_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetCatalogs_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetCatalogsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetCatalogs_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetCatalogs_resultTupleSchemeFactory implements SchemeFactory{public GetCatalogs_resultTupleScheme getScheme(){return new GetCatalogs_resultTupleScheme();}}private static class GetCatalogs_resultTupleScheme extends TupleScheme<GetCatalogs_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetCatalogs_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetCatalogs_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetCatalogsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetSchemas_args implements org.apache.thrift.TBase<GetSchemas_args,GetSchemas_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetSchemas_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetSchemas_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetSchemas_argsTupleSchemeFactory());}private TGetSchemasReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetSchemasReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSchemas_args.class,metaDataMap);}public GetSchemas_args(){}public GetSchemas_args(TGetSchemasReq req){this();this.req=req;}public GetSchemas_args(GetSchemas_args other){if(other.isSetReq()){this.req=new TGetSchemasReq(other.req);}}public GetSchemas_args deepCopy(){return new GetSchemas_args(this);}@Override public void clear(){this.req=null;}public TGetSchemasReq getReq(){return this.req;}public void setReq(TGetSchemasReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetSchemasReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetSchemas_args)return this.equals((GetSchemas_args)that);return false;}public boolean equals(GetSchemas_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetSchemas_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetSchemas_args typedOther=(GetSchemas_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetSchemas_argsStandardSchemeFactory implements SchemeFactory{public GetSchemas_argsStandardScheme getScheme(){return new GetSchemas_argsStandardScheme();}}private static class GetSchemas_argsStandardScheme extends StandardScheme<GetSchemas_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetSchemas_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetSchemasReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetSchemas_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetSchemas_argsTupleSchemeFactory implements SchemeFactory{public GetSchemas_argsTupleScheme getScheme(){return new GetSchemas_argsTupleScheme();}}private static class GetSchemas_argsTupleScheme extends TupleScheme<GetSchemas_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetSchemas_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetSchemas_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetSchemasReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetSchemas_result implements org.apache.thrift.TBase<GetSchemas_result,GetSchemas_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetSchemas_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetSchemas_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetSchemas_resultTupleSchemeFactory());}private TGetSchemasResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetSchemasResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSchemas_result.class,metaDataMap);}public GetSchemas_result(){}public GetSchemas_result(TGetSchemasResp success){this();this.success=success;}public GetSchemas_result(GetSchemas_result other){if(other.isSetSuccess()){this.success=new TGetSchemasResp(other.success);}}public GetSchemas_result deepCopy(){return new GetSchemas_result(this);}@Override public void clear(){this.success=null;}public TGetSchemasResp getSuccess(){return this.success;}public void setSuccess(TGetSchemasResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetSchemasResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetSchemas_result)return this.equals((GetSchemas_result)that);return false;}public boolean equals(GetSchemas_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetSchemas_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetSchemas_result typedOther=(GetSchemas_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetSchemas_resultStandardSchemeFactory implements SchemeFactory{public GetSchemas_resultStandardScheme getScheme(){return new GetSchemas_resultStandardScheme();}}private static class GetSchemas_resultStandardScheme extends StandardScheme<GetSchemas_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetSchemas_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetSchemasResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetSchemas_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetSchemas_resultTupleSchemeFactory implements SchemeFactory{public GetSchemas_resultTupleScheme getScheme(){return new GetSchemas_resultTupleScheme();}}private static class GetSchemas_resultTupleScheme extends TupleScheme<GetSchemas_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetSchemas_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetSchemas_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetSchemasResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetTables_args implements org.apache.thrift.TBase<GetTables_args,GetTables_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetTables_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetTables_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetTables_argsTupleSchemeFactory());}private TGetTablesReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetTablesReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTables_args.class,metaDataMap);}public GetTables_args(){}public GetTables_args(TGetTablesReq req){this();this.req=req;}public GetTables_args(GetTables_args other){if(other.isSetReq()){this.req=new TGetTablesReq(other.req);}}public GetTables_args deepCopy(){return new GetTables_args(this);}@Override public void clear(){this.req=null;}public TGetTablesReq getReq(){return this.req;}public void setReq(TGetTablesReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetTablesReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetTables_args)return this.equals((GetTables_args)that);return false;}public boolean equals(GetTables_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetTables_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetTables_args typedOther=(GetTables_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetTables_argsStandardSchemeFactory implements SchemeFactory{public GetTables_argsStandardScheme getScheme(){return new GetTables_argsStandardScheme();}}private static class GetTables_argsStandardScheme extends StandardScheme<GetTables_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetTables_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetTablesReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetTables_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetTables_argsTupleSchemeFactory implements SchemeFactory{public GetTables_argsTupleScheme getScheme(){return new GetTables_argsTupleScheme();}}private static class GetTables_argsTupleScheme extends TupleScheme<GetTables_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetTables_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetTables_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetTablesReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetTables_result implements org.apache.thrift.TBase<GetTables_result,GetTables_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetTables_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetTables_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetTables_resultTupleSchemeFactory());}private TGetTablesResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetTablesResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTables_result.class,metaDataMap);}public GetTables_result(){}public GetTables_result(TGetTablesResp success){this();this.success=success;}public GetTables_result(GetTables_result other){if(other.isSetSuccess()){this.success=new TGetTablesResp(other.success);}}public GetTables_result deepCopy(){return new GetTables_result(this);}@Override public void clear(){this.success=null;}public TGetTablesResp getSuccess(){return this.success;}public void setSuccess(TGetTablesResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetTablesResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetTables_result)return this.equals((GetTables_result)that);return false;}public boolean equals(GetTables_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetTables_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetTables_result typedOther=(GetTables_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetTables_resultStandardSchemeFactory implements SchemeFactory{public GetTables_resultStandardScheme getScheme(){return new GetTables_resultStandardScheme();}}private static class GetTables_resultStandardScheme extends StandardScheme<GetTables_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetTables_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetTablesResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetTables_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetTables_resultTupleSchemeFactory implements SchemeFactory{public GetTables_resultTupleScheme getScheme(){return new GetTables_resultTupleScheme();}}private static class GetTables_resultTupleScheme extends TupleScheme<GetTables_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetTables_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetTables_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetTablesResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetTableTypes_args implements org.apache.thrift.TBase<GetTableTypes_args,GetTableTypes_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetTableTypes_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetTableTypes_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetTableTypes_argsTupleSchemeFactory());}private TGetTableTypesReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetTableTypesReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTableTypes_args.class,metaDataMap);}public GetTableTypes_args(){}public GetTableTypes_args(TGetTableTypesReq req){this();this.req=req;}public GetTableTypes_args(GetTableTypes_args other){if(other.isSetReq()){this.req=new TGetTableTypesReq(other.req);}}public GetTableTypes_args deepCopy(){return new GetTableTypes_args(this);}@Override public void clear(){this.req=null;}public TGetTableTypesReq getReq(){return this.req;}public void setReq(TGetTableTypesReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetTableTypesReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetTableTypes_args)return this.equals((GetTableTypes_args)that);return false;}public boolean equals(GetTableTypes_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetTableTypes_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetTableTypes_args typedOther=(GetTableTypes_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetTableTypes_argsStandardSchemeFactory implements SchemeFactory{public GetTableTypes_argsStandardScheme getScheme(){return new GetTableTypes_argsStandardScheme();}}private static class GetTableTypes_argsStandardScheme extends StandardScheme<GetTableTypes_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetTableTypes_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetTableTypesReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetTableTypes_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetTableTypes_argsTupleSchemeFactory implements SchemeFactory{public GetTableTypes_argsTupleScheme getScheme(){return new GetTableTypes_argsTupleScheme();}}private static class GetTableTypes_argsTupleScheme extends TupleScheme<GetTableTypes_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetTableTypes_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetTableTypes_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetTableTypesReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetTableTypes_result implements org.apache.thrift.TBase<GetTableTypes_result,GetTableTypes_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetTableTypes_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetTableTypes_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetTableTypes_resultTupleSchemeFactory());}private TGetTableTypesResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetTableTypesResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTableTypes_result.class,metaDataMap);}public GetTableTypes_result(){}public GetTableTypes_result(TGetTableTypesResp success){this();this.success=success;}public GetTableTypes_result(GetTableTypes_result other){if(other.isSetSuccess()){this.success=new TGetTableTypesResp(other.success);}}public GetTableTypes_result deepCopy(){return new GetTableTypes_result(this);}@Override public void clear(){this.success=null;}public TGetTableTypesResp getSuccess(){return this.success;}public void setSuccess(TGetTableTypesResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetTableTypesResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetTableTypes_result)return this.equals((GetTableTypes_result)that);return false;}public boolean equals(GetTableTypes_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetTableTypes_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetTableTypes_result typedOther=(GetTableTypes_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetTableTypes_resultStandardSchemeFactory implements SchemeFactory{public GetTableTypes_resultStandardScheme getScheme(){return new GetTableTypes_resultStandardScheme();}}private static class GetTableTypes_resultStandardScheme extends StandardScheme<GetTableTypes_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetTableTypes_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetTableTypesResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetTableTypes_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetTableTypes_resultTupleSchemeFactory implements SchemeFactory{public GetTableTypes_resultTupleScheme getScheme(){return new GetTableTypes_resultTupleScheme();}}private static class GetTableTypes_resultTupleScheme extends TupleScheme<GetTableTypes_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetTableTypes_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetTableTypes_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetTableTypesResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetColumns_args implements org.apache.thrift.TBase<GetColumns_args,GetColumns_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetColumns_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetColumns_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetColumns_argsTupleSchemeFactory());}private TGetColumnsReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetColumnsReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetColumns_args.class,metaDataMap);}public GetColumns_args(){}public GetColumns_args(TGetColumnsReq req){this();this.req=req;}public GetColumns_args(GetColumns_args other){if(other.isSetReq()){this.req=new TGetColumnsReq(other.req);}}public GetColumns_args deepCopy(){return new GetColumns_args(this);}@Override public void clear(){this.req=null;}public TGetColumnsReq getReq(){return this.req;}public void setReq(TGetColumnsReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetColumnsReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetColumns_args)return this.equals((GetColumns_args)that);return false;}public boolean equals(GetColumns_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetColumns_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetColumns_args typedOther=(GetColumns_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetColumns_argsStandardSchemeFactory implements SchemeFactory{public GetColumns_argsStandardScheme getScheme(){return new GetColumns_argsStandardScheme();}}private static class GetColumns_argsStandardScheme extends StandardScheme<GetColumns_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetColumns_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetColumnsReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetColumns_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetColumns_argsTupleSchemeFactory implements SchemeFactory{public GetColumns_argsTupleScheme getScheme(){return new GetColumns_argsTupleScheme();}}private static class GetColumns_argsTupleScheme extends TupleScheme<GetColumns_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetColumns_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetColumns_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetColumnsReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetColumns_result implements org.apache.thrift.TBase<GetColumns_result,GetColumns_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetColumns_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetColumns_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetColumns_resultTupleSchemeFactory());}private TGetColumnsResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetColumnsResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetColumns_result.class,metaDataMap);}public GetColumns_result(){}public GetColumns_result(TGetColumnsResp success){this();this.success=success;}public GetColumns_result(GetColumns_result other){if(other.isSetSuccess()){this.success=new TGetColumnsResp(other.success);}}public GetColumns_result deepCopy(){return new GetColumns_result(this);}@Override public void clear(){this.success=null;}public TGetColumnsResp getSuccess(){return this.success;}public void setSuccess(TGetColumnsResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetColumnsResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetColumns_result)return this.equals((GetColumns_result)that);return false;}public boolean equals(GetColumns_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetColumns_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetColumns_result typedOther=(GetColumns_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetColumns_resultStandardSchemeFactory implements SchemeFactory{public GetColumns_resultStandardScheme getScheme(){return new GetColumns_resultStandardScheme();}}private static class GetColumns_resultStandardScheme extends StandardScheme<GetColumns_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetColumns_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetColumnsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetColumns_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetColumns_resultTupleSchemeFactory implements SchemeFactory{public GetColumns_resultTupleScheme getScheme(){return new GetColumns_resultTupleScheme();}}private static class GetColumns_resultTupleScheme extends TupleScheme<GetColumns_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetColumns_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetColumns_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetColumnsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetFunctions_args implements org.apache.thrift.TBase<GetFunctions_args,GetFunctions_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetFunctions_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetFunctions_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetFunctions_argsTupleSchemeFactory());}private TGetFunctionsReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetFunctionsReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFunctions_args.class,metaDataMap);}public GetFunctions_args(){}public GetFunctions_args(TGetFunctionsReq req){this();this.req=req;}public GetFunctions_args(GetFunctions_args other){if(other.isSetReq()){this.req=new TGetFunctionsReq(other.req);}}public GetFunctions_args deepCopy(){return new GetFunctions_args(this);}@Override public void clear(){this.req=null;}public TGetFunctionsReq getReq(){return this.req;}public void setReq(TGetFunctionsReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetFunctionsReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetFunctions_args)return this.equals((GetFunctions_args)that);return false;}public boolean equals(GetFunctions_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetFunctions_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetFunctions_args typedOther=(GetFunctions_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetFunctions_argsStandardSchemeFactory implements SchemeFactory{public GetFunctions_argsStandardScheme getScheme(){return new GetFunctions_argsStandardScheme();}}private static class GetFunctions_argsStandardScheme extends StandardScheme<GetFunctions_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetFunctions_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetFunctionsReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetFunctions_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetFunctions_argsTupleSchemeFactory implements SchemeFactory{public GetFunctions_argsTupleScheme getScheme(){return new GetFunctions_argsTupleScheme();}}private static class GetFunctions_argsTupleScheme extends TupleScheme<GetFunctions_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetFunctions_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetFunctions_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetFunctionsReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetFunctions_result implements org.apache.thrift.TBase<GetFunctions_result,GetFunctions_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetFunctions_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetFunctions_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetFunctions_resultTupleSchemeFactory());}private TGetFunctionsResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetFunctionsResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetFunctions_result.class,metaDataMap);}public GetFunctions_result(){}public GetFunctions_result(TGetFunctionsResp success){this();this.success=success;}public GetFunctions_result(GetFunctions_result other){if(other.isSetSuccess()){this.success=new TGetFunctionsResp(other.success);}}public GetFunctions_result deepCopy(){return new GetFunctions_result(this);}@Override public void clear(){this.success=null;}public TGetFunctionsResp getSuccess(){return this.success;}public void setSuccess(TGetFunctionsResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetFunctionsResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetFunctions_result)return this.equals((GetFunctions_result)that);return false;}public boolean equals(GetFunctions_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetFunctions_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetFunctions_result typedOther=(GetFunctions_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetFunctions_resultStandardSchemeFactory implements SchemeFactory{public GetFunctions_resultStandardScheme getScheme(){return new GetFunctions_resultStandardScheme();}}private static class GetFunctions_resultStandardScheme extends StandardScheme<GetFunctions_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetFunctions_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetFunctionsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetFunctions_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetFunctions_resultTupleSchemeFactory implements SchemeFactory{public GetFunctions_resultTupleScheme getScheme(){return new GetFunctions_resultTupleScheme();}}private static class GetFunctions_resultTupleScheme extends TupleScheme<GetFunctions_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetFunctions_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetFunctions_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetFunctionsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetOperationStatus_args implements org.apache.thrift.TBase<GetOperationStatus_args,GetOperationStatus_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetOperationStatus_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetOperationStatus_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetOperationStatus_argsTupleSchemeFactory());}private TGetOperationStatusReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetOperationStatusReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetOperationStatus_args.class,metaDataMap);}public GetOperationStatus_args(){}public GetOperationStatus_args(TGetOperationStatusReq req){this();this.req=req;}public GetOperationStatus_args(GetOperationStatus_args other){if(other.isSetReq()){this.req=new TGetOperationStatusReq(other.req);}}public GetOperationStatus_args deepCopy(){return new GetOperationStatus_args(this);}@Override public void clear(){this.req=null;}public TGetOperationStatusReq getReq(){return this.req;}public void setReq(TGetOperationStatusReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetOperationStatusReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetOperationStatus_args)return this.equals((GetOperationStatus_args)that);return false;}public boolean equals(GetOperationStatus_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetOperationStatus_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetOperationStatus_args typedOther=(GetOperationStatus_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetOperationStatus_argsStandardSchemeFactory implements SchemeFactory{public GetOperationStatus_argsStandardScheme getScheme(){return new GetOperationStatus_argsStandardScheme();}}private static class GetOperationStatus_argsStandardScheme extends StandardScheme<GetOperationStatus_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetOperationStatus_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetOperationStatusReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetOperationStatus_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetOperationStatus_argsTupleSchemeFactory implements SchemeFactory{public GetOperationStatus_argsTupleScheme getScheme(){return new GetOperationStatus_argsTupleScheme();}}private static class GetOperationStatus_argsTupleScheme extends TupleScheme<GetOperationStatus_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetOperationStatus_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetOperationStatus_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetOperationStatusReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetOperationStatus_result implements org.apache.thrift.TBase<GetOperationStatus_result,GetOperationStatus_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetOperationStatus_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetOperationStatus_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetOperationStatus_resultTupleSchemeFactory());}private TGetOperationStatusResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetOperationStatusResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetOperationStatus_result.class,metaDataMap);}public GetOperationStatus_result(){}public GetOperationStatus_result(TGetOperationStatusResp success){this();this.success=success;}public GetOperationStatus_result(GetOperationStatus_result other){if(other.isSetSuccess()){this.success=new TGetOperationStatusResp(other.success);}}public GetOperationStatus_result deepCopy(){return new GetOperationStatus_result(this);}@Override public void clear(){this.success=null;}public TGetOperationStatusResp getSuccess(){return this.success;}public void setSuccess(TGetOperationStatusResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetOperationStatusResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetOperationStatus_result)return this.equals((GetOperationStatus_result)that);return false;}public boolean equals(GetOperationStatus_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetOperationStatus_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetOperationStatus_result typedOther=(GetOperationStatus_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetOperationStatus_resultStandardSchemeFactory implements SchemeFactory{public GetOperationStatus_resultStandardScheme getScheme(){return new GetOperationStatus_resultStandardScheme();}}private static class GetOperationStatus_resultStandardScheme extends StandardScheme<GetOperationStatus_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetOperationStatus_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetOperationStatusResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetOperationStatus_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetOperationStatus_resultTupleSchemeFactory implements SchemeFactory{public GetOperationStatus_resultTupleScheme getScheme(){return new GetOperationStatus_resultTupleScheme();}}private static class GetOperationStatus_resultTupleScheme extends TupleScheme<GetOperationStatus_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetOperationStatus_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetOperationStatus_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetOperationStatusResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class CancelOperation_args implements org.apache.thrift.TBase<CancelOperation_args,CancelOperation_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"CancelOperation_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new CancelOperation_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new CancelOperation_argsTupleSchemeFactory());}private TCancelOperationReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TCancelOperationReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelOperation_args.class,metaDataMap);}public CancelOperation_args(){}public CancelOperation_args(TCancelOperationReq req){this();this.req=req;}public CancelOperation_args(CancelOperation_args other){if(other.isSetReq()){this.req=new TCancelOperationReq(other.req);}}public CancelOperation_args deepCopy(){return new CancelOperation_args(this);}@Override public void clear(){this.req=null;}public TCancelOperationReq getReq(){return this.req;}public void setReq(TCancelOperationReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TCancelOperationReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof CancelOperation_args)return this.equals((CancelOperation_args)that);return false;}public boolean equals(CancelOperation_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(CancelOperation_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;CancelOperation_args typedOther=(CancelOperation_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class CancelOperation_argsStandardSchemeFactory implements SchemeFactory{public CancelOperation_argsStandardScheme getScheme(){return new CancelOperation_argsStandardScheme();}}private static class CancelOperation_argsStandardScheme extends StandardScheme<CancelOperation_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,CancelOperation_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TCancelOperationReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,CancelOperation_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class CancelOperation_argsTupleSchemeFactory implements SchemeFactory{public CancelOperation_argsTupleScheme getScheme(){return new CancelOperation_argsTupleScheme();}}private static class CancelOperation_argsTupleScheme extends TupleScheme<CancelOperation_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,CancelOperation_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,CancelOperation_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TCancelOperationReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class CancelOperation_result implements org.apache.thrift.TBase<CancelOperation_result,CancelOperation_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"CancelOperation_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new CancelOperation_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new CancelOperation_resultTupleSchemeFactory());}private TCancelOperationResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TCancelOperationResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CancelOperation_result.class,metaDataMap);}public CancelOperation_result(){}public CancelOperation_result(TCancelOperationResp success){this();this.success=success;}public CancelOperation_result(CancelOperation_result other){if(other.isSetSuccess()){this.success=new TCancelOperationResp(other.success);}}public CancelOperation_result deepCopy(){return new CancelOperation_result(this);}@Override public void clear(){this.success=null;}public TCancelOperationResp getSuccess(){return this.success;}public void setSuccess(TCancelOperationResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TCancelOperationResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof CancelOperation_result)return this.equals((CancelOperation_result)that);return false;}public boolean equals(CancelOperation_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(CancelOperation_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;CancelOperation_result typedOther=(CancelOperation_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class CancelOperation_resultStandardSchemeFactory implements SchemeFactory{public CancelOperation_resultStandardScheme getScheme(){return new CancelOperation_resultStandardScheme();}}private static class CancelOperation_resultStandardScheme extends StandardScheme<CancelOperation_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,CancelOperation_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TCancelOperationResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,CancelOperation_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class CancelOperation_resultTupleSchemeFactory implements SchemeFactory{public CancelOperation_resultTupleScheme getScheme(){return new CancelOperation_resultTupleScheme();}}private static class CancelOperation_resultTupleScheme extends TupleScheme<CancelOperation_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,CancelOperation_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,CancelOperation_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TCancelOperationResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class CloseOperation_args implements org.apache.thrift.TBase<CloseOperation_args,CloseOperation_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"CloseOperation_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new CloseOperation_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new CloseOperation_argsTupleSchemeFactory());}private TCloseOperationReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TCloseOperationReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseOperation_args.class,metaDataMap);}public CloseOperation_args(){}public CloseOperation_args(TCloseOperationReq req){this();this.req=req;}public CloseOperation_args(CloseOperation_args other){if(other.isSetReq()){this.req=new TCloseOperationReq(other.req);}}public CloseOperation_args deepCopy(){return new CloseOperation_args(this);}@Override public void clear(){this.req=null;}public TCloseOperationReq getReq(){return this.req;}public void setReq(TCloseOperationReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TCloseOperationReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof CloseOperation_args)return this.equals((CloseOperation_args)that);return false;}public boolean equals(CloseOperation_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(CloseOperation_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;CloseOperation_args typedOther=(CloseOperation_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class CloseOperation_argsStandardSchemeFactory implements SchemeFactory{public CloseOperation_argsStandardScheme getScheme(){return new CloseOperation_argsStandardScheme();}}private static class CloseOperation_argsStandardScheme extends StandardScheme<CloseOperation_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,CloseOperation_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TCloseOperationReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,CloseOperation_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class CloseOperation_argsTupleSchemeFactory implements SchemeFactory{public CloseOperation_argsTupleScheme getScheme(){return new CloseOperation_argsTupleScheme();}}private static class CloseOperation_argsTupleScheme extends TupleScheme<CloseOperation_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,CloseOperation_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,CloseOperation_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TCloseOperationReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class CloseOperation_result implements org.apache.thrift.TBase<CloseOperation_result,CloseOperation_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"CloseOperation_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new CloseOperation_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new CloseOperation_resultTupleSchemeFactory());}private TCloseOperationResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TCloseOperationResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloseOperation_result.class,metaDataMap);}public CloseOperation_result(){}public CloseOperation_result(TCloseOperationResp success){this();this.success=success;}public CloseOperation_result(CloseOperation_result other){if(other.isSetSuccess()){this.success=new TCloseOperationResp(other.success);}}public CloseOperation_result deepCopy(){return new CloseOperation_result(this);}@Override public void clear(){this.success=null;}public TCloseOperationResp getSuccess(){return this.success;}public void setSuccess(TCloseOperationResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TCloseOperationResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof CloseOperation_result)return this.equals((CloseOperation_result)that);return false;}public boolean equals(CloseOperation_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(CloseOperation_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;CloseOperation_result typedOther=(CloseOperation_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class CloseOperation_resultStandardSchemeFactory implements SchemeFactory{public CloseOperation_resultStandardScheme getScheme(){return new CloseOperation_resultStandardScheme();}}private static class CloseOperation_resultStandardScheme extends StandardScheme<CloseOperation_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,CloseOperation_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TCloseOperationResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,CloseOperation_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class CloseOperation_resultTupleSchemeFactory implements SchemeFactory{public CloseOperation_resultTupleScheme getScheme(){return new CloseOperation_resultTupleScheme();}}private static class CloseOperation_resultTupleScheme extends TupleScheme<CloseOperation_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,CloseOperation_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,CloseOperation_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TCloseOperationResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class GetResultSetMetadata_args implements org.apache.thrift.TBase<GetResultSetMetadata_args,GetResultSetMetadata_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetResultSetMetadata_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetResultSetMetadata_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new GetResultSetMetadata_argsTupleSchemeFactory());}private TGetResultSetMetadataReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetResultSetMetadataReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetResultSetMetadata_args.class,metaDataMap);}public GetResultSetMetadata_args(){}public GetResultSetMetadata_args(TGetResultSetMetadataReq req){this();this.req=req;}public GetResultSetMetadata_args(GetResultSetMetadata_args other){if(other.isSetReq()){this.req=new TGetResultSetMetadataReq(other.req);}}public GetResultSetMetadata_args deepCopy(){return new GetResultSetMetadata_args(this);}@Override public void clear(){this.req=null;}public TGetResultSetMetadataReq getReq(){return this.req;}public void setReq(TGetResultSetMetadataReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TGetResultSetMetadataReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetResultSetMetadata_args)return this.equals((GetResultSetMetadata_args)that);return false;}public boolean equals(GetResultSetMetadata_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(GetResultSetMetadata_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetResultSetMetadata_args typedOther=(GetResultSetMetadata_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetResultSetMetadata_argsStandardSchemeFactory implements SchemeFactory{public GetResultSetMetadata_argsStandardScheme getScheme(){return new GetResultSetMetadata_argsStandardScheme();}}private static class GetResultSetMetadata_argsStandardScheme extends StandardScheme<GetResultSetMetadata_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetResultSetMetadata_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TGetResultSetMetadataReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetResultSetMetadata_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetResultSetMetadata_argsTupleSchemeFactory implements SchemeFactory{public GetResultSetMetadata_argsTupleScheme getScheme(){return new GetResultSetMetadata_argsTupleScheme();}}private static class GetResultSetMetadata_argsTupleScheme extends TupleScheme<GetResultSetMetadata_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetResultSetMetadata_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetResultSetMetadata_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TGetResultSetMetadataReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class GetResultSetMetadata_result implements org.apache.thrift.TBase<GetResultSetMetadata_result,GetResultSetMetadata_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"GetResultSetMetadata_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new GetResultSetMetadata_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new GetResultSetMetadata_resultTupleSchemeFactory());}private TGetResultSetMetadataResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TGetResultSetMetadataResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetResultSetMetadata_result.class,metaDataMap);}public GetResultSetMetadata_result(){}public GetResultSetMetadata_result(TGetResultSetMetadataResp success){this();this.success=success;}public GetResultSetMetadata_result(GetResultSetMetadata_result other){if(other.isSetSuccess()){this.success=new TGetResultSetMetadataResp(other.success);}}public GetResultSetMetadata_result deepCopy(){return new GetResultSetMetadata_result(this);}@Override public void clear(){this.success=null;}public TGetResultSetMetadataResp getSuccess(){return this.success;}public void setSuccess(TGetResultSetMetadataResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TGetResultSetMetadataResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof GetResultSetMetadata_result)return this.equals((GetResultSetMetadata_result)that);return false;}public boolean equals(GetResultSetMetadata_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(GetResultSetMetadata_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;GetResultSetMetadata_result typedOther=(GetResultSetMetadata_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class GetResultSetMetadata_resultStandardSchemeFactory implements SchemeFactory{public GetResultSetMetadata_resultStandardScheme getScheme(){return new GetResultSetMetadata_resultStandardScheme();}}private static class GetResultSetMetadata_resultStandardScheme extends StandardScheme<GetResultSetMetadata_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,GetResultSetMetadata_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TGetResultSetMetadataResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,GetResultSetMetadata_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class GetResultSetMetadata_resultTupleSchemeFactory implements SchemeFactory{public GetResultSetMetadata_resultTupleScheme getScheme(){return new GetResultSetMetadata_resultTupleScheme();}}private static class GetResultSetMetadata_resultTupleScheme extends TupleScheme<GetResultSetMetadata_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,GetResultSetMetadata_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,GetResultSetMetadata_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TGetResultSetMetadataResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}public static class FetchResults_args implements org.apache.thrift.TBase<FetchResults_args,FetchResults_args._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"FetchResults_args\");private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC=new org.apache.thrift.protocol.TField(\"req\",org.apache.thrift.protocol.TType.STRUCT,(short)1);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new FetchResults_argsStandardSchemeFactory());schemes.put(TupleScheme.class,new FetchResults_argsTupleSchemeFactory());}private TFetchResultsReq req;public enum _Fields implements org.apache.thrift.TFieldIdEnum{REQ((short)1,\"req\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return REQ;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.REQ,new org.apache.thrift.meta_data.FieldMetaData(\"req\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TFetchResultsReq.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchResults_args.class,metaDataMap);}public FetchResults_args(){}public FetchResults_args(TFetchResultsReq req){this();this.req=req;}public FetchResults_args(FetchResults_args other){if(other.isSetReq()){this.req=new TFetchResultsReq(other.req);}}public FetchResults_args deepCopy(){return new FetchResults_args(this);}@Override public void clear(){this.req=null;}public TFetchResultsReq getReq(){return this.req;}public void setReq(TFetchResultsReq req){this.req=req;}public void unsetReq(){this.req=null;}public boolean isSetReq(){return this.req!=null;}public void setReqIsSet(boolean value){if(!value){this.req=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case REQ: if(value==null){unsetReq();}else{setReq((TFetchResultsReq)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case REQ: return getReq();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case REQ: return isSetReq();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof FetchResults_args)return this.equals((FetchResults_args)that);return false;}public boolean equals(FetchResults_args that){if(that==null)return false;boolean this_present_req=true && this.isSetReq();boolean that_present_req=true && that.isSetReq();if(this_present_req || that_present_req){if(!(this_present_req && that_present_req))return false;if(!this.req.equals(that.req))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_req=true &&(isSetReq());builder.append(present_req);if(present_req)builder.append(req);return builder.toHashCode();}public int compareTo(FetchResults_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;FetchResults_args typedOther=(FetchResults_args)other;lastComparison=Boolean.valueOf(isSetReq()).compareTo(typedOther.isSetReq());if(lastComparison!=0){return lastComparison;}if(isSetReq()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.req,typedOther.req);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class FetchResults_argsStandardSchemeFactory implements SchemeFactory{public FetchResults_argsStandardScheme getScheme(){return new FetchResults_argsStandardScheme();}}private static class FetchResults_argsStandardScheme extends StandardScheme<FetchResults_args>{public void read(org.apache.thrift.protocol.TProtocol iprot,FetchResults_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.req=new TFetchResultsReq();struct.req.read(iprot);struct.setReqIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,FetchResults_args struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.req!=null){oprot.writeFieldBegin(REQ_FIELD_DESC);struct.req.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class FetchResults_argsTupleSchemeFactory implements SchemeFactory{public FetchResults_argsTupleScheme getScheme(){return new FetchResults_argsTupleScheme();}}private static class FetchResults_argsTupleScheme extends TupleScheme<FetchResults_args>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,FetchResults_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetReq()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetReq()){struct.req.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,FetchResults_args struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.req=new TFetchResultsReq();struct.req.read(iprot);struct.setReqIsSet(true);}}}}public static class FetchResults_result implements org.apache.thrift.TBase<FetchResults_result,FetchResults_result._Fields>,java.io.Serializable,Cloneable{private static final org.apache.thrift.protocol.TStruct STRUCT_DESC=new org.apache.thrift.protocol.TStruct(\"FetchResults_result\");private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC=new org.apache.thrift.protocol.TField(\"success\",org.apache.thrift.protocol.TType.STRUCT,(short)0);private static final Map<Class<? extends IScheme>,SchemeFactory>schemes=new HashMap<Class<? extends IScheme>,SchemeFactory>();static{schemes.put(StandardScheme.class,new FetchResults_resultStandardSchemeFactory());schemes.put(TupleScheme.class,new FetchResults_resultTupleSchemeFactory());}private TFetchResultsResp success;public enum _Fields implements org.apache.thrift.TFieldIdEnum{SUCCESS((short)0,\"success\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>metaDataMap;static{Map<_Fields,org.apache.thrift.meta_data.FieldMetaData>tmpMap=new EnumMap<_Fields,org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new org.apache.thrift.meta_data.FieldMetaData(\"success\",org.apache.thrift.TFieldRequirementType.DEFAULT,new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,TFetchResultsResp.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchResults_result.class,metaDataMap);}public FetchResults_result(){}public FetchResults_result(TFetchResultsResp success){this();this.success=success;}public FetchResults_result(FetchResults_result other){if(other.isSetSuccess()){this.success=new TFetchResultsResp(other.success);}}public FetchResults_result deepCopy(){return new FetchResults_result(this);}@Override public void clear(){this.success=null;}public TFetchResultsResp getSuccess(){return this.success;}public void setSuccess(TFetchResultsResp success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((TFetchResultsResp)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof FetchResults_result)return this.equals((FetchResults_result)that);return false;}public boolean equals(FetchResults_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}return true;}@Override public int hashCode(){HashCodeBuilder builder=new HashCodeBuilder();boolean present_success=true &&(isSetSuccess());builder.append(present_success);if(present_success)builder.append(success);return builder.toHashCode();}public int compareTo(FetchResults_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;FetchResults_result typedOther=(FetchResults_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=org.apache.thrift.TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}public void write(org.apache.thrift.protocol.TProtocol oprot)throws org.apache.thrift.TException{schemes.get(oprot.getScheme()).getScheme().write(oprot,this);}public void validate()throws org.apache.thrift.TException{if(success!=null){success.validate();}}private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private void readObject(java.io.ObjectInputStream in)throws java.io.IOException,ClassNotFoundException{try{read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}private static class FetchResults_resultStandardSchemeFactory implements SchemeFactory{public FetchResults_resultStandardScheme getScheme(){return new FetchResults_resultStandardScheme();}}private static class FetchResults_resultStandardScheme extends StandardScheme<FetchResults_result>{public void read(org.apache.thrift.protocol.TProtocol iprot,FetchResults_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new TFetchResultsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}public void write(org.apache.thrift.protocol.TProtocol oprot,FetchResults_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);if(struct.success!=null){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);struct.success.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}private static class FetchResults_resultTupleSchemeFactory implements SchemeFactory{public FetchResults_resultTupleScheme getScheme(){return new FetchResults_resultTupleScheme();}}private static class FetchResults_resultTupleScheme extends TupleScheme<FetchResults_result>{@Override public void write(org.apache.thrift.protocol.TProtocol prot,FetchResults_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}@Override public void read(org.apache.thrift.protocol.TProtocol prot,FetchResults_result struct)throws org.apache.thrift.TException{TTupleProtocol iprot=(TTupleProtocol)prot;BitSet incoming=iprot.readBitSet(1);if(incoming.get(0)){struct.success=new TFetchResultsResp();struct.success.read(iprot);struct.setSuccessIsSet(true);}}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Autogenerated by Thrift**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*/public class ThriftHive{public interface Iface extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface{public void execute(String query)throws HiveServerException,TException;public String fetchOne()throws HiveServerException,TException;public List<String>fetchN(int numRows)throws HiveServerException,TException;public List<String>fetchAll()throws HiveServerException,TException;public String getSchema()throws HiveServerException,TException;}public static class Client extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Client implements Iface{public Client(TProtocol prot){this(prot,prot);}public Client(TProtocol iprot,TProtocol oprot){super(iprot,oprot);}public void execute(String query)throws HiveServerException,TException{send_execute(query);recv_execute();}public void send_execute(String query)throws TException{oprot_.writeMessageBegin(new TMessage(\"execute\",TMessageType.CALL,seqid_));execute_args args=new execute_args();args.query=query;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_execute()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}execute_result result=new execute_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.ex){throw result.ex;}return;}public String fetchOne()throws HiveServerException,TException{send_fetchOne();return recv_fetchOne();}public void send_fetchOne()throws TException{oprot_.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.CALL,seqid_));fetchOne_args args=new fetchOne_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public String recv_fetchOne()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}fetchOne_result result=new fetchOne_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ex){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"fetchOne failed: unknown result\");}public List<String>fetchN(int numRows)throws HiveServerException,TException{send_fetchN(numRows);return recv_fetchN();}public void send_fetchN(int numRows)throws TException{oprot_.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.CALL,seqid_));fetchN_args args=new fetchN_args();args.numRows=numRows;args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_fetchN()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}fetchN_result result=new fetchN_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ex){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"fetchN failed: unknown result\");}public List<String>fetchAll()throws HiveServerException,TException{send_fetchAll();return recv_fetchAll();}public void send_fetchAll()throws TException{oprot_.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.CALL,seqid_));fetchAll_args args=new fetchAll_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_fetchAll()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}fetchAll_result result=new fetchAll_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ex){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"fetchAll failed: unknown result\");}public String getSchema()throws HiveServerException,TException{send_getSchema();return recv_getSchema();}public void send_getSchema()throws TException{oprot_.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.CALL,seqid_));getSchema_args args=new getSchema_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public String recv_getSchema()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}getSchema_result result=new getSchema_result();result.read(iprot_);iprot_.readMessageEnd();if(result.__isset.success){return result.success;}if(result.__isset.ex){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"getSchema failed: unknown result\");}}public static class Processor extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Processor implements TProcessor{public Processor(Iface iface){super(iface);iface_=iface;processMap_.put(\"execute\",new execute());processMap_.put(\"fetchOne\",new fetchOne());processMap_.put(\"fetchN\",new fetchN());processMap_.put(\"fetchAll\",new fetchAll());processMap_.put(\"getSchema\",new getSchema());}private Iface iface_;public boolean process(TProtocol iprot,TProtocol oprot)throws TException{TMessage msg=iprot.readMessageBegin();ProcessFunction fn=processMap_.get(msg.name);if(fn==null){TProtocolUtil.skip(iprot,TType.STRUCT);iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.UNKNOWN_METHOD,\"Invalid method name: '\"+msg.name+\"'\");oprot.writeMessageBegin(new TMessage(msg.name,TMessageType.EXCEPTION,msg.seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return true;}fn.process(msg.seqid,iprot,oprot);return true;}private class execute implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{execute_args args=new execute_args();args.read(iprot);iprot.readMessageEnd();execute_result result=new execute_result();try{iface_.execute(args.query);}catch(HiveServerException ex){result.ex=ex;result.__isset.ex=true;}oprot.writeMessageBegin(new TMessage(\"execute\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class fetchOne implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{fetchOne_args args=new fetchOne_args();args.read(iprot);iprot.readMessageEnd();fetchOne_result result=new fetchOne_result();try{result.success=iface_.fetchOne();result.__isset.success=true;}catch(HiveServerException ex){result.ex=ex;result.__isset.ex=true;}oprot.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class fetchN implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{fetchN_args args=new fetchN_args();args.read(iprot);iprot.readMessageEnd();fetchN_result result=new fetchN_result();try{result.success=iface_.fetchN(args.numRows);result.__isset.success=true;}catch(HiveServerException ex){result.ex=ex;result.__isset.ex=true;}oprot.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class fetchAll implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{fetchAll_args args=new fetchAll_args();args.read(iprot);iprot.readMessageEnd();fetchAll_result result=new fetchAll_result();try{result.success=iface_.fetchAll();result.__isset.success=true;}catch(HiveServerException ex){result.ex=ex;result.__isset.ex=true;}oprot.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class getSchema implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{getSchema_args args=new getSchema_args();args.read(iprot);iprot.readMessageEnd();getSchema_result result=new getSchema_result();try{result.success=iface_.getSchema();result.__isset.success=true;}catch(HiveServerException ex){result.ex=ex;result.__isset.ex=true;}oprot.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}}public static class execute_args implements TBase,java.io.Serializable{private String query;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean query=false;}public execute_args(){}public execute_args(String query){this();this.query=query;this.__isset.query=true;}public String getQuery(){return this.query;}public void setQuery(String query){this.query=query;this.__isset.query=true;}public void unsetQuery(){this.__isset.query=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof execute_args)return this.equals((execute_args)that);return false;}public boolean equals(execute_args that){if(that==null)return false;boolean this_present_query=true &&(this.query!=null);boolean that_present_query=true &&(that.query!=null);if(this_present_query || that_present_query){if(!(this_present_query && that_present_query))return false;if(!this.query.equals(that.query))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.query=iprot.readString();this.__isset.query=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"execute_args\");oprot.writeStructBegin(struct);TField field=new TField();if(this.query!=null){field.name=\"query\";field.type=TType.STRING;field.id=1;oprot.writeFieldBegin(field);oprot.writeString(this.query);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class execute_result implements TBase,java.io.Serializable{private HiveServerException ex;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean ex=false;}public execute_result(){}public execute_result(HiveServerException ex){this();this.ex=ex;this.__isset.ex=true;}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;this.__isset.ex=true;}public void unsetEx(){this.ex=null;this.__isset.ex=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof execute_result)return this.equals((execute_result)that);return false;}public boolean equals(execute_result that){if(that==null)return false;boolean this_present_ex=true &&(this.ex!=null);boolean that_present_ex=true &&(that.ex!=null);if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);this.__isset.ex=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"execute_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.ex){if(this.ex!=null){field.name=\"ex\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ex.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class fetchOne_args implements TBase,java.io.Serializable{public fetchOne_args(){}public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchOne_args)return this.equals((fetchOne_args)that);return false;}public boolean equals(fetchOne_args that){if(that==null)return false;return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"fetchOne_args\");oprot.writeStructBegin(struct);oprot.writeFieldStop();oprot.writeStructEnd();}}public static class fetchOne_result implements TBase,java.io.Serializable{private String success;private HiveServerException ex;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ex=false;}public fetchOne_result(){}public fetchOne_result(String success,HiveServerException ex){this();this.success=success;this.__isset.success=true;this.ex=ex;this.__isset.ex=true;}public String getSuccess(){return this.success;}public void setSuccess(String success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;this.__isset.ex=true;}public void unsetEx(){this.ex=null;this.__isset.ex=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchOne_result)return this.equals((fetchOne_result)that);return false;}public boolean equals(fetchOne_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true &&(this.ex!=null);boolean that_present_ex=true &&(that.ex!=null);if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRING){this.success=iprot.readString();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);this.__isset.ex=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"fetchOne_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRING;field.id=0;oprot.writeFieldBegin(field);oprot.writeString(this.success);oprot.writeFieldEnd();}}else if(this.__isset.ex){if(this.ex!=null){field.name=\"ex\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ex.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class fetchN_args implements TBase,java.io.Serializable{private int numRows;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean numRows=false;}public fetchN_args(){}public fetchN_args(int numRows){this();this.numRows=numRows;this.__isset.numRows=true;}public int getNumRows(){return this.numRows;}public void setNumRows(int numRows){this.numRows=numRows;this.__isset.numRows=true;}public void unsetNumRows(){this.__isset.numRows=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchN_args)return this.equals((fetchN_args)that);return false;}public boolean equals(fetchN_args that){if(that==null)return false;boolean this_present_numRows=true;boolean that_present_numRows=true;if(this_present_numRows || that_present_numRows){if(!(this_present_numRows && that_present_numRows))return false;if(this.numRows!=that.numRows)return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.I32){this.numRows=iprot.readI32();this.__isset.numRows=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"fetchN_args\");oprot.writeStructBegin(struct);TField field=new TField();field.name=\"numRows\";field.type=TType.I32;field.id=1;oprot.writeFieldBegin(field);oprot.writeI32(this.numRows);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}}public static class fetchN_result implements TBase,java.io.Serializable{private List<String>success;private HiveServerException ex;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ex=false;}public fetchN_result(){}public fetchN_result(List<String>success,HiveServerException ex){this();this.success=success;this.__isset.success=true;this.ex=ex;this.__isset.ex=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;this.__isset.ex=true;}public void unsetEx(){this.ex=null;this.__isset.ex=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchN_result)return this.equals((fetchN_result)that);return false;}public boolean equals(fetchN_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true &&(this.ex!=null);boolean that_present_ex=true &&(that.ex!=null);if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list0=iprot.readListBegin();this.success=new ArrayList<String>(_list0.size);for(int _i1=0;_i1<_list0.size;++_i1){String _elem2=null;_elem2=iprot.readString();this.success.add(_elem2);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);this.__isset.ex=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"fetchN_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter3 : this.success){oprot.writeString(_iter3);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ex){if(this.ex!=null){field.name=\"ex\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ex.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class fetchAll_args implements TBase,java.io.Serializable{public fetchAll_args(){}public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchAll_args)return this.equals((fetchAll_args)that);return false;}public boolean equals(fetchAll_args that){if(that==null)return false;return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"fetchAll_args\");oprot.writeStructBegin(struct);oprot.writeFieldStop();oprot.writeStructEnd();}}public static class fetchAll_result implements TBase,java.io.Serializable{private List<String>success;private HiveServerException ex;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ex=false;}public fetchAll_result(){}public fetchAll_result(List<String>success,HiveServerException ex){this();this.success=success;this.__isset.success=true;this.ex=ex;this.__isset.ex=true;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);this.__isset.success=true;}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.success=null;this.__isset.success=false;}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;this.__isset.ex=true;}public void unsetEx(){this.ex=null;this.__isset.ex=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchAll_result)return this.equals((fetchAll_result)that);return false;}public boolean equals(fetchAll_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true &&(this.ex!=null);boolean that_present_ex=true &&(that.ex!=null);if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list4=iprot.readListBegin();this.success=new ArrayList<String>(_list4.size);for(int _i5=0;_i5<_list4.size;++_i5){String _elem6=null;_elem6=iprot.readString();this.success.add(_elem6);}iprot.readListEnd();}this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);this.__isset.ex=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"fetchAll_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.LIST;field.id=0;oprot.writeFieldBegin(field);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter7 : this.success){oprot.writeString(_iter7);}oprot.writeListEnd();}oprot.writeFieldEnd();}}else if(this.__isset.ex){if(this.ex!=null){field.name=\"ex\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ex.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}public static class getSchema_args implements TBase,java.io.Serializable{public getSchema_args(){}public boolean equals(Object that){if(that==null)return false;if(that instanceof getSchema_args)return this.equals((getSchema_args)that);return false;}public boolean equals(getSchema_args that){if(that==null)return false;return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"getSchema_args\");oprot.writeStructBegin(struct);oprot.writeFieldStop();oprot.writeStructEnd();}}public static class getSchema_result implements TBase,java.io.Serializable{private String success;private HiveServerException ex;public final Isset __isset=new Isset();public static final class Isset implements java.io.Serializable{public boolean success=false;public boolean ex=false;}public getSchema_result(){}public getSchema_result(String success,HiveServerException ex){this();this.success=success;this.__isset.success=true;this.ex=ex;this.__isset.ex=true;}public String getSuccess(){return this.success;}public void setSuccess(String success){this.success=success;this.__isset.success=true;}public void unsetSuccess(){this.__isset.success=false;}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;this.__isset.ex=true;}public void unsetEx(){this.ex=null;this.__isset.ex=false;}public boolean equals(Object that){if(that==null)return false;if(that instanceof getSchema_result)return this.equals((getSchema_result)that);return false;}public boolean equals(getSchema_result that){if(that==null)return false;boolean this_present_success=true &&(this.success!=null);boolean that_present_success=true &&(that.success!=null);if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true &&(this.ex!=null);boolean that_present_ex=true &&(that.ex!=null);if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}public int hashCode(){return 0;}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRING){this.success=iprot.readString();this.__isset.success=true;}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);this.__isset.ex=true;}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);break;}iprot.readFieldEnd();}iprot.readStructEnd();}public void write(TProtocol oprot)throws TException{TStruct struct=new TStruct(\"getSchema_result\");oprot.writeStructBegin(struct);TField field=new TField();if(this.__isset.success){if(this.success!=null){field.name=\"success\";field.type=TType.STRING;field.id=0;oprot.writeFieldBegin(field);oprot.writeString(this.success);oprot.writeFieldEnd();}}else if(this.__isset.ex){if(this.ex!=null){field.name=\"ex\";field.type=TType.STRUCT;field.id=1;oprot.writeFieldBegin(field);this.ex.write(oprot);oprot.writeFieldEnd();}}oprot.writeFieldStop();oprot.writeStructEnd();}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class HiveClient extends ThriftHive.Client implements HiveInterface{public HiveClient(TProtocol prot){super(prot,prot);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class DeadlineException extends Exception{public DeadlineException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class MapTezProcessor extends TezProcessor{public MapTezProcessor(){super(true);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class ReduceTezProcessor extends TezProcessor{public ReduceTezProcessor(){super(false);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Autogenerated by Thrift**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*/public class ThriftHiveMetastore{public interface Iface extends com.facebook.fb303.FacebookService.Iface{public void create_database(Database database)throws AlreadyExistsException,InvalidObjectException,MetaException,TException;public Database get_database(String name)throws NoSuchObjectException,MetaException,TException;public void drop_database(String name,boolean deleteData)throws NoSuchObjectException,InvalidOperationException,MetaException,TException;public List<String>get_databases(String pattern)throws MetaException,TException;public List<String>get_all_databases()throws MetaException,TException;public Type get_type(String name)throws MetaException,NoSuchObjectException,TException;public boolean create_type(Type type)throws AlreadyExistsException,InvalidObjectException,MetaException,TException;public boolean drop_type(String type)throws MetaException,NoSuchObjectException,TException;public Map<String,Type>get_type_all(String name)throws MetaException,TException;public List<FieldSchema>get_fields(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public List<FieldSchema>get_schema(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException;public void create_table(Table tbl)throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException;public void drop_table(String dbname,String name,boolean deleteData)throws NoSuchObjectException,MetaException,TException;public List<String>get_tables(String db_name,String pattern)throws MetaException,TException;public List<String>get_all_tables(String db_name)throws MetaException,TException;public Table get_table(String dbname,String tbl_name)throws MetaException,NoSuchObjectException,TException;public void alter_table(String dbname,String tbl_name,Table new_tbl)throws InvalidOperationException,MetaException,TException;public Partition add_partition(Partition new_part)throws InvalidObjectException,AlreadyExistsException,MetaException,TException;public Partition append_partition(String db_name,String tbl_name,List<String>part_vals)throws InvalidObjectException,AlreadyExistsException,MetaException,TException;public Partition append_partition_by_name(String db_name,String tbl_name,String part_name)throws InvalidObjectException,AlreadyExistsException,MetaException,TException;public boolean drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData)throws NoSuchObjectException,MetaException,TException;public boolean drop_partition_by_name(String db_name,String tbl_name,String part_name,boolean deleteData)throws NoSuchObjectException,MetaException,TException;public Partition get_partition(String db_name,String tbl_name,List<String>part_vals)throws MetaException,NoSuchObjectException,TException;public Partition get_partition_by_name(String db_name,String tbl_name,String part_name)throws MetaException,NoSuchObjectException,TException;public List<Partition>get_partitions(String db_name,String tbl_name,short max_parts)throws NoSuchObjectException,MetaException,TException;public List<String>get_partition_names(String db_name,String tbl_name,short max_parts)throws MetaException,TException;public List<Partition>get_partitions_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts)throws MetaException,TException;public List<String>get_partition_names_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts)throws MetaException,TException;public List<Partition>get_partitions_by_filter(String db_name,String tbl_name,String filter,short max_parts)throws MetaException,NoSuchObjectException,TException;public void alter_partition(String db_name,String tbl_name,Partition new_part)throws InvalidOperationException,MetaException,TException;public String get_config_value(String name,String defaultValue)throws ConfigValSecurityException,TException;public List<String>partition_name_to_vals(String part_name)throws MetaException,TException;public Map<String,String>partition_name_to_spec(String part_name)throws MetaException,TException;public Index add_index(Index new_index,Table index_table)throws InvalidObjectException,AlreadyExistsException,MetaException,TException;public void alter_index(String dbname,String base_tbl_name,String idx_name,Index new_idx)throws InvalidOperationException,MetaException,TException;public boolean drop_index_by_name(String db_name,String tbl_name,String index_name,boolean deleteData)throws NoSuchObjectException,MetaException,TException;public Index get_index_by_name(String db_name,String tbl_name,String index_name)throws MetaException,NoSuchObjectException,TException;public List<Index>get_indexes(String db_name,String tbl_name,short max_indexes)throws NoSuchObjectException,MetaException,TException;public List<String>get_index_names(String db_name,String tbl_name,short max_indexes)throws MetaException,TException;}public interface AsyncIface extends com.facebook.fb303.FacebookService.AsyncIface{public void create_database(Database database,AsyncMethodCallback<AsyncClient.create_database_call>resultHandler)throws TException;public void get_database(String name,AsyncMethodCallback<AsyncClient.get_database_call>resultHandler)throws TException;public void drop_database(String name,boolean deleteData,AsyncMethodCallback<AsyncClient.drop_database_call>resultHandler)throws TException;public void get_databases(String pattern,AsyncMethodCallback<AsyncClient.get_databases_call>resultHandler)throws TException;public void get_all_databases(AsyncMethodCallback<AsyncClient.get_all_databases_call>resultHandler)throws TException;public void get_type(String name,AsyncMethodCallback<AsyncClient.get_type_call>resultHandler)throws TException;public void create_type(Type type,AsyncMethodCallback<AsyncClient.create_type_call>resultHandler)throws TException;public void drop_type(String type,AsyncMethodCallback<AsyncClient.drop_type_call>resultHandler)throws TException;public void get_type_all(String name,AsyncMethodCallback<AsyncClient.get_type_all_call>resultHandler)throws TException;public void get_fields(String db_name,String table_name,AsyncMethodCallback<AsyncClient.get_fields_call>resultHandler)throws TException;public void get_schema(String db_name,String table_name,AsyncMethodCallback<AsyncClient.get_schema_call>resultHandler)throws TException;public void create_table(Table tbl,AsyncMethodCallback<AsyncClient.create_table_call>resultHandler)throws TException;public void drop_table(String dbname,String name,boolean deleteData,AsyncMethodCallback<AsyncClient.drop_table_call>resultHandler)throws TException;public void get_tables(String db_name,String pattern,AsyncMethodCallback<AsyncClient.get_tables_call>resultHandler)throws TException;public void get_all_tables(String db_name,AsyncMethodCallback<AsyncClient.get_all_tables_call>resultHandler)throws TException;public void get_table(String dbname,String tbl_name,AsyncMethodCallback<AsyncClient.get_table_call>resultHandler)throws TException;public void alter_table(String dbname,String tbl_name,Table new_tbl,AsyncMethodCallback<AsyncClient.alter_table_call>resultHandler)throws TException;public void add_partition(Partition new_part,AsyncMethodCallback<AsyncClient.add_partition_call>resultHandler)throws TException;public void append_partition(String db_name,String tbl_name,List<String>part_vals,AsyncMethodCallback<AsyncClient.append_partition_call>resultHandler)throws TException;public void append_partition_by_name(String db_name,String tbl_name,String part_name,AsyncMethodCallback<AsyncClient.append_partition_by_name_call>resultHandler)throws TException;public void drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData,AsyncMethodCallback<AsyncClient.drop_partition_call>resultHandler)throws TException;public void drop_partition_by_name(String db_name,String tbl_name,String part_name,boolean deleteData,AsyncMethodCallback<AsyncClient.drop_partition_by_name_call>resultHandler)throws TException;public void get_partition(String db_name,String tbl_name,List<String>part_vals,AsyncMethodCallback<AsyncClient.get_partition_call>resultHandler)throws TException;public void get_partition_by_name(String db_name,String tbl_name,String part_name,AsyncMethodCallback<AsyncClient.get_partition_by_name_call>resultHandler)throws TException;public void get_partitions(String db_name,String tbl_name,short max_parts,AsyncMethodCallback<AsyncClient.get_partitions_call>resultHandler)throws TException;public void get_partition_names(String db_name,String tbl_name,short max_parts,AsyncMethodCallback<AsyncClient.get_partition_names_call>resultHandler)throws TException;public void get_partitions_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts,AsyncMethodCallback<AsyncClient.get_partitions_ps_call>resultHandler)throws TException;public void get_partition_names_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts,AsyncMethodCallback<AsyncClient.get_partition_names_ps_call>resultHandler)throws TException;public void get_partitions_by_filter(String db_name,String tbl_name,String filter,short max_parts,AsyncMethodCallback<AsyncClient.get_partitions_by_filter_call>resultHandler)throws TException;public void alter_partition(String db_name,String tbl_name,Partition new_part,AsyncMethodCallback<AsyncClient.alter_partition_call>resultHandler)throws TException;public void get_config_value(String name,String defaultValue,AsyncMethodCallback<AsyncClient.get_config_value_call>resultHandler)throws TException;public void partition_name_to_vals(String part_name,AsyncMethodCallback<AsyncClient.partition_name_to_vals_call>resultHandler)throws TException;public void partition_name_to_spec(String part_name,AsyncMethodCallback<AsyncClient.partition_name_to_spec_call>resultHandler)throws TException;public void add_index(Index new_index,Table index_table,AsyncMethodCallback<AsyncClient.add_index_call>resultHandler)throws TException;public void alter_index(String dbname,String base_tbl_name,String idx_name,Index new_idx,AsyncMethodCallback<AsyncClient.alter_index_call>resultHandler)throws TException;public void drop_index_by_name(String db_name,String tbl_name,String index_name,boolean deleteData,AsyncMethodCallback<AsyncClient.drop_index_by_name_call>resultHandler)throws TException;public void get_index_by_name(String db_name,String tbl_name,String index_name,AsyncMethodCallback<AsyncClient.get_index_by_name_call>resultHandler)throws TException;public void get_indexes(String db_name,String tbl_name,short max_indexes,AsyncMethodCallback<AsyncClient.get_indexes_call>resultHandler)throws TException;public void get_index_names(String db_name,String tbl_name,short max_indexes,AsyncMethodCallback<AsyncClient.get_index_names_call>resultHandler)throws TException;}public static class Client extends com.facebook.fb303.FacebookService.Client implements TServiceClient,Iface{public static class Factory implements TServiceClientFactory<Client>{public Factory(){}public Client getClient(TProtocol prot){return new Client(prot);}public Client getClient(TProtocol iprot,TProtocol oprot){return new Client(iprot,oprot);}}public Client(TProtocol prot){this(prot,prot);}public Client(TProtocol iprot,TProtocol oprot){super(iprot,oprot);}public void create_database(Database database)throws AlreadyExistsException,InvalidObjectException,MetaException,TException{send_create_database(database);recv_create_database();}public void send_create_database(Database database)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_database\",TMessageType.CALL,++seqid_));create_database_args args=new create_database_args();args.setDatabase(database);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_create_database()throws AlreadyExistsException,InvalidObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"create_database failed: out of sequence response\");}create_database_result result=new create_database_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}return;}public Database get_database(String name)throws NoSuchObjectException,MetaException,TException{send_get_database(name);return recv_get_database();}public void send_get_database(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_database\",TMessageType.CALL,++seqid_));get_database_args args=new get_database_args();args.setName(name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Database recv_get_database()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_database failed: out of sequence response\");}get_database_result result=new get_database_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_database failed: unknown result\");}public void drop_database(String name,boolean deleteData)throws NoSuchObjectException,InvalidOperationException,MetaException,TException{send_drop_database(name,deleteData);recv_drop_database();}public void send_drop_database(String name,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.CALL,++seqid_));drop_database_args args=new drop_database_args();args.setName(name);args.setDeleteData(deleteData);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_drop_database()throws NoSuchObjectException,InvalidOperationException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"drop_database failed: out of sequence response\");}drop_database_result result=new drop_database_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}return;}public List<String>get_databases(String pattern)throws MetaException,TException{send_get_databases(pattern);return recv_get_databases();}public void send_get_databases(String pattern)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.CALL,++seqid_));get_databases_args args=new get_databases_args();args.setPattern(pattern);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_databases()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_databases failed: out of sequence response\");}get_databases_result result=new get_databases_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_databases failed: unknown result\");}public List<String>get_all_databases()throws MetaException,TException{send_get_all_databases();return recv_get_all_databases();}public void send_get_all_databases()throws TException{oprot_.writeMessageBegin(new TMessage(\"get_all_databases\",TMessageType.CALL,++seqid_));get_all_databases_args args=new get_all_databases_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_all_databases()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_all_databases failed: out of sequence response\");}get_all_databases_result result=new get_all_databases_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_all_databases failed: unknown result\");}public Type get_type(String name)throws MetaException,NoSuchObjectException,TException{send_get_type(name);return recv_get_type();}public void send_get_type(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_type\",TMessageType.CALL,++seqid_));get_type_args args=new get_type_args();args.setName(name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Type recv_get_type()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_type failed: out of sequence response\");}get_type_result result=new get_type_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_type failed: unknown result\");}public boolean create_type(Type type)throws AlreadyExistsException,InvalidObjectException,MetaException,TException{send_create_type(type);return recv_create_type();}public void send_create_type(Type type)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_type\",TMessageType.CALL,++seqid_));create_type_args args=new create_type_args();args.setType(type);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_create_type()throws AlreadyExistsException,InvalidObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"create_type failed: out of sequence response\");}create_type_result result=new create_type_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"create_type failed: unknown result\");}public boolean drop_type(String type)throws MetaException,NoSuchObjectException,TException{send_drop_type(type);return recv_drop_type();}public void send_drop_type(String type)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.CALL,++seqid_));drop_type_args args=new drop_type_args();args.setType(type);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_type()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"drop_type failed: out of sequence response\");}drop_type_result result=new drop_type_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_type failed: unknown result\");}public Map<String,Type>get_type_all(String name)throws MetaException,TException{send_get_type_all(name);return recv_get_type_all();}public void send_get_type_all(String name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.CALL,++seqid_));get_type_all_args args=new get_type_all_args();args.setName(name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Map<String,Type>recv_get_type_all()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_type_all failed: out of sequence response\");}get_type_all_result result=new get_type_all_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_type_all failed: unknown result\");}public List<FieldSchema>get_fields(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_fields(db_name,table_name);return recv_get_fields();}public void send_get_fields(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.CALL,++seqid_));get_fields_args args=new get_fields_args();args.setDb_name(db_name);args.setTable_name(table_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<FieldSchema>recv_get_fields()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_fields failed: out of sequence response\");}get_fields_result result=new get_fields_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_fields failed: unknown result\");}public List<FieldSchema>get_schema(String db_name,String table_name)throws MetaException,UnknownTableException,UnknownDBException,TException{send_get_schema(db_name,table_name);return recv_get_schema();}public void send_get_schema(String db_name,String table_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.CALL,++seqid_));get_schema_args args=new get_schema_args();args.setDb_name(db_name);args.setTable_name(table_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<FieldSchema>recv_get_schema()throws MetaException,UnknownTableException,UnknownDBException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_schema failed: out of sequence response\");}get_schema_result result=new get_schema_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_schema failed: unknown result\");}public void create_table(Table tbl)throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException{send_create_table(tbl);recv_create_table();}public void send_create_table(Table tbl)throws TException{oprot_.writeMessageBegin(new TMessage(\"create_table\",TMessageType.CALL,++seqid_));create_table_args args=new create_table_args();args.setTbl(tbl);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_create_table()throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"create_table failed: out of sequence response\");}create_table_result result=new create_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}if(result.o4!=null){throw result.o4;}return;}public void drop_table(String dbname,String name,boolean deleteData)throws NoSuchObjectException,MetaException,TException{send_drop_table(dbname,name,deleteData);recv_drop_table();}public void send_drop_table(String dbname,String name,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.CALL,++seqid_));drop_table_args args=new drop_table_args();args.setDbname(dbname);args.setName(name);args.setDeleteData(deleteData);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_drop_table()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"drop_table failed: out of sequence response\");}drop_table_result result=new drop_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o3!=null){throw result.o3;}return;}public List<String>get_tables(String db_name,String pattern)throws MetaException,TException{send_get_tables(db_name,pattern);return recv_get_tables();}public void send_get_tables(String db_name,String pattern)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.CALL,++seqid_));get_tables_args args=new get_tables_args();args.setDb_name(db_name);args.setPattern(pattern);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_tables()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_tables failed: out of sequence response\");}get_tables_result result=new get_tables_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_tables failed: unknown result\");}public List<String>get_all_tables(String db_name)throws MetaException,TException{send_get_all_tables(db_name);return recv_get_all_tables();}public void send_get_all_tables(String db_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_all_tables\",TMessageType.CALL,++seqid_));get_all_tables_args args=new get_all_tables_args();args.setDb_name(db_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_all_tables()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_all_tables failed: out of sequence response\");}get_all_tables_result result=new get_all_tables_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_all_tables failed: unknown result\");}public Table get_table(String dbname,String tbl_name)throws MetaException,NoSuchObjectException,TException{send_get_table(dbname,tbl_name);return recv_get_table();}public void send_get_table(String dbname,String tbl_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_table\",TMessageType.CALL,++seqid_));get_table_args args=new get_table_args();args.setDbname(dbname);args.setTbl_name(tbl_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Table recv_get_table()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_table failed: out of sequence response\");}get_table_result result=new get_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_table failed: unknown result\");}public void alter_table(String dbname,String tbl_name,Table new_tbl)throws InvalidOperationException,MetaException,TException{send_alter_table(dbname,tbl_name,new_tbl);recv_alter_table();}public void send_alter_table(String dbname,String tbl_name,Table new_tbl)throws TException{oprot_.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.CALL,++seqid_));alter_table_args args=new alter_table_args();args.setDbname(dbname);args.setTbl_name(tbl_name);args.setNew_tbl(new_tbl);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_alter_table()throws InvalidOperationException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"alter_table failed: out of sequence response\");}alter_table_result result=new alter_table_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}return;}public Partition add_partition(Partition new_part)throws InvalidObjectException,AlreadyExistsException,MetaException,TException{send_add_partition(new_part);return recv_add_partition();}public void send_add_partition(Partition new_part)throws TException{oprot_.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.CALL,++seqid_));add_partition_args args=new add_partition_args();args.setNew_part(new_part);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_add_partition()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"add_partition failed: out of sequence response\");}add_partition_result result=new add_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"add_partition failed: unknown result\");}public Partition append_partition(String db_name,String tbl_name,List<String>part_vals)throws InvalidObjectException,AlreadyExistsException,MetaException,TException{send_append_partition(db_name,tbl_name,part_vals);return recv_append_partition();}public void send_append_partition(String db_name,String tbl_name,List<String>part_vals)throws TException{oprot_.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.CALL,++seqid_));append_partition_args args=new append_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_append_partition()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"append_partition failed: out of sequence response\");}append_partition_result result=new append_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"append_partition failed: unknown result\");}public Partition append_partition_by_name(String db_name,String tbl_name,String part_name)throws InvalidObjectException,AlreadyExistsException,MetaException,TException{send_append_partition_by_name(db_name,tbl_name,part_name);return recv_append_partition_by_name();}public void send_append_partition_by_name(String db_name,String tbl_name,String part_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"append_partition_by_name\",TMessageType.CALL,++seqid_));append_partition_by_name_args args=new append_partition_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_name(part_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_append_partition_by_name()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"append_partition_by_name failed: out of sequence response\");}append_partition_by_name_result result=new append_partition_by_name_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"append_partition_by_name failed: unknown result\");}public boolean drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData)throws NoSuchObjectException,MetaException,TException{send_drop_partition(db_name,tbl_name,part_vals,deleteData);return recv_drop_partition();}public void send_drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.CALL,++seqid_));drop_partition_args args=new drop_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.setDeleteData(deleteData);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_partition()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"drop_partition failed: out of sequence response\");}drop_partition_result result=new drop_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_partition failed: unknown result\");}public boolean drop_partition_by_name(String db_name,String tbl_name,String part_name,boolean deleteData)throws NoSuchObjectException,MetaException,TException{send_drop_partition_by_name(db_name,tbl_name,part_name,deleteData);return recv_drop_partition_by_name();}public void send_drop_partition_by_name(String db_name,String tbl_name,String part_name,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_partition_by_name\",TMessageType.CALL,++seqid_));drop_partition_by_name_args args=new drop_partition_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_name(part_name);args.setDeleteData(deleteData);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_partition_by_name()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"drop_partition_by_name failed: out of sequence response\");}drop_partition_by_name_result result=new drop_partition_by_name_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_partition_by_name failed: unknown result\");}public Partition get_partition(String db_name,String tbl_name,List<String>part_vals)throws MetaException,NoSuchObjectException,TException{send_get_partition(db_name,tbl_name,part_vals);return recv_get_partition();}public void send_get_partition(String db_name,String tbl_name,List<String>part_vals)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.CALL,++seqid_));get_partition_args args=new get_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_get_partition()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partition failed: out of sequence response\");}get_partition_result result=new get_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partition failed: unknown result\");}public Partition get_partition_by_name(String db_name,String tbl_name,String part_name)throws MetaException,NoSuchObjectException,TException{send_get_partition_by_name(db_name,tbl_name,part_name);return recv_get_partition_by_name();}public void send_get_partition_by_name(String db_name,String tbl_name,String part_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partition_by_name\",TMessageType.CALL,++seqid_));get_partition_by_name_args args=new get_partition_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_name(part_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Partition recv_get_partition_by_name()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partition_by_name failed: out of sequence response\");}get_partition_by_name_result result=new get_partition_by_name_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partition_by_name failed: unknown result\");}public List<Partition>get_partitions(String db_name,String tbl_name,short max_parts)throws NoSuchObjectException,MetaException,TException{send_get_partitions(db_name,tbl_name,max_parts);return recv_get_partitions();}public void send_get_partitions(String db_name,String tbl_name,short max_parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.CALL,++seqid_));get_partitions_args args=new get_partitions_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_parts(max_parts);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<Partition>recv_get_partitions()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partitions failed: out of sequence response\");}get_partitions_result result=new get_partitions_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partitions failed: unknown result\");}public List<String>get_partition_names(String db_name,String tbl_name,short max_parts)throws MetaException,TException{send_get_partition_names(db_name,tbl_name,max_parts);return recv_get_partition_names();}public void send_get_partition_names(String db_name,String tbl_name,short max_parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partition_names\",TMessageType.CALL,++seqid_));get_partition_names_args args=new get_partition_names_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_parts(max_parts);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_partition_names()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partition_names failed: out of sequence response\");}get_partition_names_result result=new get_partition_names_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partition_names failed: unknown result\");}public List<Partition>get_partitions_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts)throws MetaException,TException{send_get_partitions_ps(db_name,tbl_name,part_vals,max_parts);return recv_get_partitions_ps();}public void send_get_partitions_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partitions_ps\",TMessageType.CALL,++seqid_));get_partitions_ps_args args=new get_partitions_ps_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.setMax_parts(max_parts);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<Partition>recv_get_partitions_ps()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partitions_ps failed: out of sequence response\");}get_partitions_ps_result result=new get_partitions_ps_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partitions_ps failed: unknown result\");}public List<String>get_partition_names_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts)throws MetaException,TException{send_get_partition_names_ps(db_name,tbl_name,part_vals,max_parts);return recv_get_partition_names_ps();}public void send_get_partition_names_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partition_names_ps\",TMessageType.CALL,++seqid_));get_partition_names_ps_args args=new get_partition_names_ps_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.setMax_parts(max_parts);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_partition_names_ps()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partition_names_ps failed: out of sequence response\");}get_partition_names_ps_result result=new get_partition_names_ps_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partition_names_ps failed: unknown result\");}public List<Partition>get_partitions_by_filter(String db_name,String tbl_name,String filter,short max_parts)throws MetaException,NoSuchObjectException,TException{send_get_partitions_by_filter(db_name,tbl_name,filter,max_parts);return recv_get_partitions_by_filter();}public void send_get_partitions_by_filter(String db_name,String tbl_name,String filter,short max_parts)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_partitions_by_filter\",TMessageType.CALL,++seqid_));get_partitions_by_filter_args args=new get_partitions_by_filter_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setFilter(filter);args.setMax_parts(max_parts);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<Partition>recv_get_partitions_by_filter()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_partitions_by_filter failed: out of sequence response\");}get_partitions_by_filter_result result=new get_partitions_by_filter_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_partitions_by_filter failed: unknown result\");}public void alter_partition(String db_name,String tbl_name,Partition new_part)throws InvalidOperationException,MetaException,TException{send_alter_partition(db_name,tbl_name,new_part);recv_alter_partition();}public void send_alter_partition(String db_name,String tbl_name,Partition new_part)throws TException{oprot_.writeMessageBegin(new TMessage(\"alter_partition\",TMessageType.CALL,++seqid_));alter_partition_args args=new alter_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setNew_part(new_part);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_alter_partition()throws InvalidOperationException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"alter_partition failed: out of sequence response\");}alter_partition_result result=new alter_partition_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}return;}public String get_config_value(String name,String defaultValue)throws ConfigValSecurityException,TException{send_get_config_value(name,defaultValue);return recv_get_config_value();}public void send_get_config_value(String name,String defaultValue)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_config_value\",TMessageType.CALL,++seqid_));get_config_value_args args=new get_config_value_args();args.setName(name);args.setDefaultValue(defaultValue);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public String recv_get_config_value()throws ConfigValSecurityException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_config_value failed: out of sequence response\");}get_config_value_result result=new get_config_value_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_config_value failed: unknown result\");}public List<String>partition_name_to_vals(String part_name)throws MetaException,TException{send_partition_name_to_vals(part_name);return recv_partition_name_to_vals();}public void send_partition_name_to_vals(String part_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"partition_name_to_vals\",TMessageType.CALL,++seqid_));partition_name_to_vals_args args=new partition_name_to_vals_args();args.setPart_name(part_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_partition_name_to_vals()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"partition_name_to_vals failed: out of sequence response\");}partition_name_to_vals_result result=new partition_name_to_vals_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"partition_name_to_vals failed: unknown result\");}public Map<String,String>partition_name_to_spec(String part_name)throws MetaException,TException{send_partition_name_to_spec(part_name);return recv_partition_name_to_spec();}public void send_partition_name_to_spec(String part_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"partition_name_to_spec\",TMessageType.CALL,++seqid_));partition_name_to_spec_args args=new partition_name_to_spec_args();args.setPart_name(part_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Map<String,String>recv_partition_name_to_spec()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"partition_name_to_spec failed: out of sequence response\");}partition_name_to_spec_result result=new partition_name_to_spec_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"partition_name_to_spec failed: unknown result\");}public Index add_index(Index new_index,Table index_table)throws InvalidObjectException,AlreadyExistsException,MetaException,TException{send_add_index(new_index,index_table);return recv_add_index();}public void send_add_index(Index new_index,Table index_table)throws TException{oprot_.writeMessageBegin(new TMessage(\"add_index\",TMessageType.CALL,++seqid_));add_index_args args=new add_index_args();args.setNew_index(new_index);args.setIndex_table(index_table);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Index recv_add_index()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"add_index failed: out of sequence response\");}add_index_result result=new add_index_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}if(result.o3!=null){throw result.o3;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"add_index failed: unknown result\");}public void alter_index(String dbname,String base_tbl_name,String idx_name,Index new_idx)throws InvalidOperationException,MetaException,TException{send_alter_index(dbname,base_tbl_name,idx_name,new_idx);recv_alter_index();}public void send_alter_index(String dbname,String base_tbl_name,String idx_name,Index new_idx)throws TException{oprot_.writeMessageBegin(new TMessage(\"alter_index\",TMessageType.CALL,++seqid_));alter_index_args args=new alter_index_args();args.setDbname(dbname);args.setBase_tbl_name(base_tbl_name);args.setIdx_name(idx_name);args.setNew_idx(new_idx);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_alter_index()throws InvalidOperationException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"alter_index failed: out of sequence response\");}alter_index_result result=new alter_index_result();result.read(iprot_);iprot_.readMessageEnd();if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}return;}public boolean drop_index_by_name(String db_name,String tbl_name,String index_name,boolean deleteData)throws NoSuchObjectException,MetaException,TException{send_drop_index_by_name(db_name,tbl_name,index_name,deleteData);return recv_drop_index_by_name();}public void send_drop_index_by_name(String db_name,String tbl_name,String index_name,boolean deleteData)throws TException{oprot_.writeMessageBegin(new TMessage(\"drop_index_by_name\",TMessageType.CALL,++seqid_));drop_index_by_name_args args=new drop_index_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setIndex_name(index_name);args.setDeleteData(deleteData);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public boolean recv_drop_index_by_name()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"drop_index_by_name failed: out of sequence response\");}drop_index_by_name_result result=new drop_index_by_name_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"drop_index_by_name failed: unknown result\");}public Index get_index_by_name(String db_name,String tbl_name,String index_name)throws MetaException,NoSuchObjectException,TException{send_get_index_by_name(db_name,tbl_name,index_name);return recv_get_index_by_name();}public void send_get_index_by_name(String db_name,String tbl_name,String index_name)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_index_by_name\",TMessageType.CALL,++seqid_));get_index_by_name_args args=new get_index_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setIndex_name(index_name);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public Index recv_get_index_by_name()throws MetaException,NoSuchObjectException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_index_by_name failed: out of sequence response\");}get_index_by_name_result result=new get_index_by_name_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_index_by_name failed: unknown result\");}public List<Index>get_indexes(String db_name,String tbl_name,short max_indexes)throws NoSuchObjectException,MetaException,TException{send_get_indexes(db_name,tbl_name,max_indexes);return recv_get_indexes();}public void send_get_indexes(String db_name,String tbl_name,short max_indexes)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_indexes\",TMessageType.CALL,++seqid_));get_indexes_args args=new get_indexes_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_indexes(max_indexes);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<Index>recv_get_indexes()throws NoSuchObjectException,MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_indexes failed: out of sequence response\");}get_indexes_result result=new get_indexes_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o1!=null){throw result.o1;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_indexes failed: unknown result\");}public List<String>get_index_names(String db_name,String tbl_name,short max_indexes)throws MetaException,TException{send_get_index_names(db_name,tbl_name,max_indexes);return recv_get_index_names();}public void send_get_index_names(String db_name,String tbl_name,short max_indexes)throws TException{oprot_.writeMessageBegin(new TMessage(\"get_index_names\",TMessageType.CALL,++seqid_));get_index_names_args args=new get_index_names_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_indexes(max_indexes);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_get_index_names()throws MetaException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"get_index_names failed: out of sequence response\");}get_index_names_result result=new get_index_names_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.o2!=null){throw result.o2;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"get_index_names failed: unknown result\");}}public static class AsyncClient extends com.facebook.fb303.FacebookService.AsyncClient implements AsyncIface{public static class Factory implements TAsyncClientFactory<AsyncClient>{private TAsyncClientManager clientManager;private TProtocolFactory protocolFactory;public Factory(TAsyncClientManager clientManager,TProtocolFactory protocolFactory){this.clientManager=clientManager;this.protocolFactory=protocolFactory;}public AsyncClient getAsyncClient(TNonblockingTransport transport){return new AsyncClient(protocolFactory,clientManager,transport);}}public AsyncClient(TProtocolFactory protocolFactory,TAsyncClientManager clientManager,TNonblockingTransport transport){super(protocolFactory,clientManager,transport);}public void create_database(Database database,AsyncMethodCallback<create_database_call>resultHandler)throws TException{checkReady();create_database_call method_call=new create_database_call(database,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class create_database_call extends TAsyncMethodCall{private Database database;public create_database_call(Database database,AsyncMethodCallback<create_database_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.database=database;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"create_database\",TMessageType.CALL,0));create_database_args args=new create_database_args();args.setDatabase(database);args.write(prot);prot.writeMessageEnd();}public void getResult()throws AlreadyExistsException,InvalidObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_create_database();}}public void get_database(String name,AsyncMethodCallback<get_database_call>resultHandler)throws TException{checkReady();get_database_call method_call=new get_database_call(name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_database_call extends TAsyncMethodCall{private String name;public get_database_call(String name,AsyncMethodCallback<get_database_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.name=name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_database\",TMessageType.CALL,0));get_database_args args=new get_database_args();args.setName(name);args.write(prot);prot.writeMessageEnd();}public Database getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_database();}}public void drop_database(String name,boolean deleteData,AsyncMethodCallback<drop_database_call>resultHandler)throws TException{checkReady();drop_database_call method_call=new drop_database_call(name,deleteData,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class drop_database_call extends TAsyncMethodCall{private String name;private boolean deleteData;public drop_database_call(String name,boolean deleteData,AsyncMethodCallback<drop_database_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.name=name;this.deleteData=deleteData;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.CALL,0));drop_database_args args=new drop_database_args();args.setName(name);args.setDeleteData(deleteData);args.write(prot);prot.writeMessageEnd();}public void getResult()throws NoSuchObjectException,InvalidOperationException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_drop_database();}}public void get_databases(String pattern,AsyncMethodCallback<get_databases_call>resultHandler)throws TException{checkReady();get_databases_call method_call=new get_databases_call(pattern,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_databases_call extends TAsyncMethodCall{private String pattern;public get_databases_call(String pattern,AsyncMethodCallback<get_databases_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.pattern=pattern;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.CALL,0));get_databases_args args=new get_databases_args();args.setPattern(pattern);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_databases();}}public void get_all_databases(AsyncMethodCallback<get_all_databases_call>resultHandler)throws TException{checkReady();get_all_databases_call method_call=new get_all_databases_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_all_databases_call extends TAsyncMethodCall{public get_all_databases_call(AsyncMethodCallback<get_all_databases_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_all_databases\",TMessageType.CALL,0));get_all_databases_args args=new get_all_databases_args();args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_all_databases();}}public void get_type(String name,AsyncMethodCallback<get_type_call>resultHandler)throws TException{checkReady();get_type_call method_call=new get_type_call(name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_type_call extends TAsyncMethodCall{private String name;public get_type_call(String name,AsyncMethodCallback<get_type_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.name=name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_type\",TMessageType.CALL,0));get_type_args args=new get_type_args();args.setName(name);args.write(prot);prot.writeMessageEnd();}public Type getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_type();}}public void create_type(Type type,AsyncMethodCallback<create_type_call>resultHandler)throws TException{checkReady();create_type_call method_call=new create_type_call(type,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class create_type_call extends TAsyncMethodCall{private Type type;public create_type_call(Type type,AsyncMethodCallback<create_type_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.type=type;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"create_type\",TMessageType.CALL,0));create_type_args args=new create_type_args();args.setType(type);args.write(prot);prot.writeMessageEnd();}public boolean getResult()throws AlreadyExistsException,InvalidObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_create_type();}}public void drop_type(String type,AsyncMethodCallback<drop_type_call>resultHandler)throws TException{checkReady();drop_type_call method_call=new drop_type_call(type,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class drop_type_call extends TAsyncMethodCall{private String type;public drop_type_call(String type,AsyncMethodCallback<drop_type_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.type=type;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.CALL,0));drop_type_args args=new drop_type_args();args.setType(type);args.write(prot);prot.writeMessageEnd();}public boolean getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_drop_type();}}public void get_type_all(String name,AsyncMethodCallback<get_type_all_call>resultHandler)throws TException{checkReady();get_type_all_call method_call=new get_type_all_call(name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_type_all_call extends TAsyncMethodCall{private String name;public get_type_all_call(String name,AsyncMethodCallback<get_type_all_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.name=name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.CALL,0));get_type_all_args args=new get_type_all_args();args.setName(name);args.write(prot);prot.writeMessageEnd();}public Map<String,Type>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_type_all();}}public void get_fields(String db_name,String table_name,AsyncMethodCallback<get_fields_call>resultHandler)throws TException{checkReady();get_fields_call method_call=new get_fields_call(db_name,table_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_fields_call extends TAsyncMethodCall{private String db_name;private String table_name;public get_fields_call(String db_name,String table_name,AsyncMethodCallback<get_fields_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.table_name=table_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.CALL,0));get_fields_args args=new get_fields_args();args.setDb_name(db_name);args.setTable_name(table_name);args.write(prot);prot.writeMessageEnd();}public List<FieldSchema>getResult()throws MetaException,UnknownTableException,UnknownDBException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_fields();}}public void get_schema(String db_name,String table_name,AsyncMethodCallback<get_schema_call>resultHandler)throws TException{checkReady();get_schema_call method_call=new get_schema_call(db_name,table_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_schema_call extends TAsyncMethodCall{private String db_name;private String table_name;public get_schema_call(String db_name,String table_name,AsyncMethodCallback<get_schema_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.table_name=table_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.CALL,0));get_schema_args args=new get_schema_args();args.setDb_name(db_name);args.setTable_name(table_name);args.write(prot);prot.writeMessageEnd();}public List<FieldSchema>getResult()throws MetaException,UnknownTableException,UnknownDBException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_schema();}}public void create_table(Table tbl,AsyncMethodCallback<create_table_call>resultHandler)throws TException{checkReady();create_table_call method_call=new create_table_call(tbl,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class create_table_call extends TAsyncMethodCall{private Table tbl;public create_table_call(Table tbl,AsyncMethodCallback<create_table_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.tbl=tbl;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"create_table\",TMessageType.CALL,0));create_table_args args=new create_table_args();args.setTbl(tbl);args.write(prot);prot.writeMessageEnd();}public void getResult()throws AlreadyExistsException,InvalidObjectException,MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_create_table();}}public void drop_table(String dbname,String name,boolean deleteData,AsyncMethodCallback<drop_table_call>resultHandler)throws TException{checkReady();drop_table_call method_call=new drop_table_call(dbname,name,deleteData,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class drop_table_call extends TAsyncMethodCall{private String dbname;private String name;private boolean deleteData;public drop_table_call(String dbname,String name,boolean deleteData,AsyncMethodCallback<drop_table_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.dbname=dbname;this.name=name;this.deleteData=deleteData;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.CALL,0));drop_table_args args=new drop_table_args();args.setDbname(dbname);args.setName(name);args.setDeleteData(deleteData);args.write(prot);prot.writeMessageEnd();}public void getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_drop_table();}}public void get_tables(String db_name,String pattern,AsyncMethodCallback<get_tables_call>resultHandler)throws TException{checkReady();get_tables_call method_call=new get_tables_call(db_name,pattern,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_tables_call extends TAsyncMethodCall{private String db_name;private String pattern;public get_tables_call(String db_name,String pattern,AsyncMethodCallback<get_tables_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.pattern=pattern;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.CALL,0));get_tables_args args=new get_tables_args();args.setDb_name(db_name);args.setPattern(pattern);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_tables();}}public void get_all_tables(String db_name,AsyncMethodCallback<get_all_tables_call>resultHandler)throws TException{checkReady();get_all_tables_call method_call=new get_all_tables_call(db_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_all_tables_call extends TAsyncMethodCall{private String db_name;public get_all_tables_call(String db_name,AsyncMethodCallback<get_all_tables_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_all_tables\",TMessageType.CALL,0));get_all_tables_args args=new get_all_tables_args();args.setDb_name(db_name);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_all_tables();}}public void get_table(String dbname,String tbl_name,AsyncMethodCallback<get_table_call>resultHandler)throws TException{checkReady();get_table_call method_call=new get_table_call(dbname,tbl_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_table_call extends TAsyncMethodCall{private String dbname;private String tbl_name;public get_table_call(String dbname,String tbl_name,AsyncMethodCallback<get_table_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.dbname=dbname;this.tbl_name=tbl_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_table\",TMessageType.CALL,0));get_table_args args=new get_table_args();args.setDbname(dbname);args.setTbl_name(tbl_name);args.write(prot);prot.writeMessageEnd();}public Table getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_table();}}public void alter_table(String dbname,String tbl_name,Table new_tbl,AsyncMethodCallback<alter_table_call>resultHandler)throws TException{checkReady();alter_table_call method_call=new alter_table_call(dbname,tbl_name,new_tbl,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class alter_table_call extends TAsyncMethodCall{private String dbname;private String tbl_name;private Table new_tbl;public alter_table_call(String dbname,String tbl_name,Table new_tbl,AsyncMethodCallback<alter_table_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.dbname=dbname;this.tbl_name=tbl_name;this.new_tbl=new_tbl;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.CALL,0));alter_table_args args=new alter_table_args();args.setDbname(dbname);args.setTbl_name(tbl_name);args.setNew_tbl(new_tbl);args.write(prot);prot.writeMessageEnd();}public void getResult()throws InvalidOperationException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_alter_table();}}public void add_partition(Partition new_part,AsyncMethodCallback<add_partition_call>resultHandler)throws TException{checkReady();add_partition_call method_call=new add_partition_call(new_part,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class add_partition_call extends TAsyncMethodCall{private Partition new_part;public add_partition_call(Partition new_part,AsyncMethodCallback<add_partition_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.new_part=new_part;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.CALL,0));add_partition_args args=new add_partition_args();args.setNew_part(new_part);args.write(prot);prot.writeMessageEnd();}public Partition getResult()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_add_partition();}}public void append_partition(String db_name,String tbl_name,List<String>part_vals,AsyncMethodCallback<append_partition_call>resultHandler)throws TException{checkReady();append_partition_call method_call=new append_partition_call(db_name,tbl_name,part_vals,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class append_partition_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private List<String>part_vals;public append_partition_call(String db_name,String tbl_name,List<String>part_vals,AsyncMethodCallback<append_partition_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.CALL,0));append_partition_args args=new append_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.write(prot);prot.writeMessageEnd();}public Partition getResult()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_append_partition();}}public void append_partition_by_name(String db_name,String tbl_name,String part_name,AsyncMethodCallback<append_partition_by_name_call>resultHandler)throws TException{checkReady();append_partition_by_name_call method_call=new append_partition_by_name_call(db_name,tbl_name,part_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class append_partition_by_name_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private String part_name;public append_partition_by_name_call(String db_name,String tbl_name,String part_name,AsyncMethodCallback<append_partition_by_name_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_name=part_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"append_partition_by_name\",TMessageType.CALL,0));append_partition_by_name_args args=new append_partition_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_name(part_name);args.write(prot);prot.writeMessageEnd();}public Partition getResult()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_append_partition_by_name();}}public void drop_partition(String db_name,String tbl_name,List<String>part_vals,boolean deleteData,AsyncMethodCallback<drop_partition_call>resultHandler)throws TException{checkReady();drop_partition_call method_call=new drop_partition_call(db_name,tbl_name,part_vals,deleteData,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class drop_partition_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private List<String>part_vals;private boolean deleteData;public drop_partition_call(String db_name,String tbl_name,List<String>part_vals,boolean deleteData,AsyncMethodCallback<drop_partition_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;this.deleteData=deleteData;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.CALL,0));drop_partition_args args=new drop_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.setDeleteData(deleteData);args.write(prot);prot.writeMessageEnd();}public boolean getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_drop_partition();}}public void drop_partition_by_name(String db_name,String tbl_name,String part_name,boolean deleteData,AsyncMethodCallback<drop_partition_by_name_call>resultHandler)throws TException{checkReady();drop_partition_by_name_call method_call=new drop_partition_by_name_call(db_name,tbl_name,part_name,deleteData,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class drop_partition_by_name_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private String part_name;private boolean deleteData;public drop_partition_by_name_call(String db_name,String tbl_name,String part_name,boolean deleteData,AsyncMethodCallback<drop_partition_by_name_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_name=part_name;this.deleteData=deleteData;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"drop_partition_by_name\",TMessageType.CALL,0));drop_partition_by_name_args args=new drop_partition_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_name(part_name);args.setDeleteData(deleteData);args.write(prot);prot.writeMessageEnd();}public boolean getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_drop_partition_by_name();}}public void get_partition(String db_name,String tbl_name,List<String>part_vals,AsyncMethodCallback<get_partition_call>resultHandler)throws TException{checkReady();get_partition_call method_call=new get_partition_call(db_name,tbl_name,part_vals,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partition_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private List<String>part_vals;public get_partition_call(String db_name,String tbl_name,List<String>part_vals,AsyncMethodCallback<get_partition_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.CALL,0));get_partition_args args=new get_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.write(prot);prot.writeMessageEnd();}public Partition getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partition();}}public void get_partition_by_name(String db_name,String tbl_name,String part_name,AsyncMethodCallback<get_partition_by_name_call>resultHandler)throws TException{checkReady();get_partition_by_name_call method_call=new get_partition_by_name_call(db_name,tbl_name,part_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partition_by_name_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private String part_name;public get_partition_by_name_call(String db_name,String tbl_name,String part_name,AsyncMethodCallback<get_partition_by_name_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_name=part_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partition_by_name\",TMessageType.CALL,0));get_partition_by_name_args args=new get_partition_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_name(part_name);args.write(prot);prot.writeMessageEnd();}public Partition getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partition_by_name();}}public void get_partitions(String db_name,String tbl_name,short max_parts,AsyncMethodCallback<get_partitions_call>resultHandler)throws TException{checkReady();get_partitions_call method_call=new get_partitions_call(db_name,tbl_name,max_parts,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partitions_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private short max_parts;public get_partitions_call(String db_name,String tbl_name,short max_parts,AsyncMethodCallback<get_partitions_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.max_parts=max_parts;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.CALL,0));get_partitions_args args=new get_partitions_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_parts(max_parts);args.write(prot);prot.writeMessageEnd();}public List<Partition>getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partitions();}}public void get_partition_names(String db_name,String tbl_name,short max_parts,AsyncMethodCallback<get_partition_names_call>resultHandler)throws TException{checkReady();get_partition_names_call method_call=new get_partition_names_call(db_name,tbl_name,max_parts,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partition_names_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private short max_parts;public get_partition_names_call(String db_name,String tbl_name,short max_parts,AsyncMethodCallback<get_partition_names_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.max_parts=max_parts;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partition_names\",TMessageType.CALL,0));get_partition_names_args args=new get_partition_names_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_parts(max_parts);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partition_names();}}public void get_partitions_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts,AsyncMethodCallback<get_partitions_ps_call>resultHandler)throws TException{checkReady();get_partitions_ps_call method_call=new get_partitions_ps_call(db_name,tbl_name,part_vals,max_parts,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partitions_ps_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private List<String>part_vals;private short max_parts;public get_partitions_ps_call(String db_name,String tbl_name,List<String>part_vals,short max_parts,AsyncMethodCallback<get_partitions_ps_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;this.max_parts=max_parts;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partitions_ps\",TMessageType.CALL,0));get_partitions_ps_args args=new get_partitions_ps_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.setMax_parts(max_parts);args.write(prot);prot.writeMessageEnd();}public List<Partition>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partitions_ps();}}public void get_partition_names_ps(String db_name,String tbl_name,List<String>part_vals,short max_parts,AsyncMethodCallback<get_partition_names_ps_call>resultHandler)throws TException{checkReady();get_partition_names_ps_call method_call=new get_partition_names_ps_call(db_name,tbl_name,part_vals,max_parts,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partition_names_ps_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private List<String>part_vals;private short max_parts;public get_partition_names_ps_call(String db_name,String tbl_name,List<String>part_vals,short max_parts,AsyncMethodCallback<get_partition_names_ps_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;this.max_parts=max_parts;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partition_names_ps\",TMessageType.CALL,0));get_partition_names_ps_args args=new get_partition_names_ps_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setPart_vals(part_vals);args.setMax_parts(max_parts);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partition_names_ps();}}public void get_partitions_by_filter(String db_name,String tbl_name,String filter,short max_parts,AsyncMethodCallback<get_partitions_by_filter_call>resultHandler)throws TException{checkReady();get_partitions_by_filter_call method_call=new get_partitions_by_filter_call(db_name,tbl_name,filter,max_parts,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_partitions_by_filter_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private String filter;private short max_parts;public get_partitions_by_filter_call(String db_name,String tbl_name,String filter,short max_parts,AsyncMethodCallback<get_partitions_by_filter_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.filter=filter;this.max_parts=max_parts;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_partitions_by_filter\",TMessageType.CALL,0));get_partitions_by_filter_args args=new get_partitions_by_filter_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setFilter(filter);args.setMax_parts(max_parts);args.write(prot);prot.writeMessageEnd();}public List<Partition>getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_partitions_by_filter();}}public void alter_partition(String db_name,String tbl_name,Partition new_part,AsyncMethodCallback<alter_partition_call>resultHandler)throws TException{checkReady();alter_partition_call method_call=new alter_partition_call(db_name,tbl_name,new_part,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class alter_partition_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private Partition new_part;public alter_partition_call(String db_name,String tbl_name,Partition new_part,AsyncMethodCallback<alter_partition_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.new_part=new_part;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"alter_partition\",TMessageType.CALL,0));alter_partition_args args=new alter_partition_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setNew_part(new_part);args.write(prot);prot.writeMessageEnd();}public void getResult()throws InvalidOperationException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_alter_partition();}}public void get_config_value(String name,String defaultValue,AsyncMethodCallback<get_config_value_call>resultHandler)throws TException{checkReady();get_config_value_call method_call=new get_config_value_call(name,defaultValue,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_config_value_call extends TAsyncMethodCall{private String name;private String defaultValue;public get_config_value_call(String name,String defaultValue,AsyncMethodCallback<get_config_value_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.name=name;this.defaultValue=defaultValue;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_config_value\",TMessageType.CALL,0));get_config_value_args args=new get_config_value_args();args.setName(name);args.setDefaultValue(defaultValue);args.write(prot);prot.writeMessageEnd();}public String getResult()throws ConfigValSecurityException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_config_value();}}public void partition_name_to_vals(String part_name,AsyncMethodCallback<partition_name_to_vals_call>resultHandler)throws TException{checkReady();partition_name_to_vals_call method_call=new partition_name_to_vals_call(part_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class partition_name_to_vals_call extends TAsyncMethodCall{private String part_name;public partition_name_to_vals_call(String part_name,AsyncMethodCallback<partition_name_to_vals_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.part_name=part_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"partition_name_to_vals\",TMessageType.CALL,0));partition_name_to_vals_args args=new partition_name_to_vals_args();args.setPart_name(part_name);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_partition_name_to_vals();}}public void partition_name_to_spec(String part_name,AsyncMethodCallback<partition_name_to_spec_call>resultHandler)throws TException{checkReady();partition_name_to_spec_call method_call=new partition_name_to_spec_call(part_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class partition_name_to_spec_call extends TAsyncMethodCall{private String part_name;public partition_name_to_spec_call(String part_name,AsyncMethodCallback<partition_name_to_spec_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.part_name=part_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"partition_name_to_spec\",TMessageType.CALL,0));partition_name_to_spec_args args=new partition_name_to_spec_args();args.setPart_name(part_name);args.write(prot);prot.writeMessageEnd();}public Map<String,String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_partition_name_to_spec();}}public void add_index(Index new_index,Table index_table,AsyncMethodCallback<add_index_call>resultHandler)throws TException{checkReady();add_index_call method_call=new add_index_call(new_index,index_table,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class add_index_call extends TAsyncMethodCall{private Index new_index;private Table index_table;public add_index_call(Index new_index,Table index_table,AsyncMethodCallback<add_index_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.new_index=new_index;this.index_table=index_table;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"add_index\",TMessageType.CALL,0));add_index_args args=new add_index_args();args.setNew_index(new_index);args.setIndex_table(index_table);args.write(prot);prot.writeMessageEnd();}public Index getResult()throws InvalidObjectException,AlreadyExistsException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_add_index();}}public void alter_index(String dbname,String base_tbl_name,String idx_name,Index new_idx,AsyncMethodCallback<alter_index_call>resultHandler)throws TException{checkReady();alter_index_call method_call=new alter_index_call(dbname,base_tbl_name,idx_name,new_idx,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class alter_index_call extends TAsyncMethodCall{private String dbname;private String base_tbl_name;private String idx_name;private Index new_idx;public alter_index_call(String dbname,String base_tbl_name,String idx_name,Index new_idx,AsyncMethodCallback<alter_index_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.dbname=dbname;this.base_tbl_name=base_tbl_name;this.idx_name=idx_name;this.new_idx=new_idx;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"alter_index\",TMessageType.CALL,0));alter_index_args args=new alter_index_args();args.setDbname(dbname);args.setBase_tbl_name(base_tbl_name);args.setIdx_name(idx_name);args.setNew_idx(new_idx);args.write(prot);prot.writeMessageEnd();}public void getResult()throws InvalidOperationException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_alter_index();}}public void drop_index_by_name(String db_name,String tbl_name,String index_name,boolean deleteData,AsyncMethodCallback<drop_index_by_name_call>resultHandler)throws TException{checkReady();drop_index_by_name_call method_call=new drop_index_by_name_call(db_name,tbl_name,index_name,deleteData,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class drop_index_by_name_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private String index_name;private boolean deleteData;public drop_index_by_name_call(String db_name,String tbl_name,String index_name,boolean deleteData,AsyncMethodCallback<drop_index_by_name_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.index_name=index_name;this.deleteData=deleteData;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"drop_index_by_name\",TMessageType.CALL,0));drop_index_by_name_args args=new drop_index_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setIndex_name(index_name);args.setDeleteData(deleteData);args.write(prot);prot.writeMessageEnd();}public boolean getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_drop_index_by_name();}}public void get_index_by_name(String db_name,String tbl_name,String index_name,AsyncMethodCallback<get_index_by_name_call>resultHandler)throws TException{checkReady();get_index_by_name_call method_call=new get_index_by_name_call(db_name,tbl_name,index_name,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_index_by_name_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private String index_name;public get_index_by_name_call(String db_name,String tbl_name,String index_name,AsyncMethodCallback<get_index_by_name_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.index_name=index_name;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_index_by_name\",TMessageType.CALL,0));get_index_by_name_args args=new get_index_by_name_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setIndex_name(index_name);args.write(prot);prot.writeMessageEnd();}public Index getResult()throws MetaException,NoSuchObjectException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_index_by_name();}}public void get_indexes(String db_name,String tbl_name,short max_indexes,AsyncMethodCallback<get_indexes_call>resultHandler)throws TException{checkReady();get_indexes_call method_call=new get_indexes_call(db_name,tbl_name,max_indexes,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_indexes_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private short max_indexes;public get_indexes_call(String db_name,String tbl_name,short max_indexes,AsyncMethodCallback<get_indexes_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.max_indexes=max_indexes;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_indexes\",TMessageType.CALL,0));get_indexes_args args=new get_indexes_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_indexes(max_indexes);args.write(prot);prot.writeMessageEnd();}public List<Index>getResult()throws NoSuchObjectException,MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_indexes();}}public void get_index_names(String db_name,String tbl_name,short max_indexes,AsyncMethodCallback<get_index_names_call>resultHandler)throws TException{checkReady();get_index_names_call method_call=new get_index_names_call(db_name,tbl_name,max_indexes,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class get_index_names_call extends TAsyncMethodCall{private String db_name;private String tbl_name;private short max_indexes;public get_index_names_call(String db_name,String tbl_name,short max_indexes,AsyncMethodCallback<get_index_names_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.db_name=db_name;this.tbl_name=tbl_name;this.max_indexes=max_indexes;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"get_index_names\",TMessageType.CALL,0));get_index_names_args args=new get_index_names_args();args.setDb_name(db_name);args.setTbl_name(tbl_name);args.setMax_indexes(max_indexes);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws MetaException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_get_index_names();}}}public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor{private static final Logger LOGGER=LoggerFactory.getLogger(Processor.class.getName());public Processor(Iface iface){super(iface);iface_=iface;processMap_.put(\"create_database\",new create_database());processMap_.put(\"get_database\",new get_database());processMap_.put(\"drop_database\",new drop_database());processMap_.put(\"get_databases\",new get_databases());processMap_.put(\"get_all_databases\",new get_all_databases());processMap_.put(\"get_type\",new get_type());processMap_.put(\"create_type\",new create_type());processMap_.put(\"drop_type\",new drop_type());processMap_.put(\"get_type_all\",new get_type_all());processMap_.put(\"get_fields\",new get_fields());processMap_.put(\"get_schema\",new get_schema());processMap_.put(\"create_table\",new create_table());processMap_.put(\"drop_table\",new drop_table());processMap_.put(\"get_tables\",new get_tables());processMap_.put(\"get_all_tables\",new get_all_tables());processMap_.put(\"get_table\",new get_table());processMap_.put(\"alter_table\",new alter_table());processMap_.put(\"add_partition\",new add_partition());processMap_.put(\"append_partition\",new append_partition());processMap_.put(\"append_partition_by_name\",new append_partition_by_name());processMap_.put(\"drop_partition\",new drop_partition());processMap_.put(\"drop_partition_by_name\",new drop_partition_by_name());processMap_.put(\"get_partition\",new get_partition());processMap_.put(\"get_partition_by_name\",new get_partition_by_name());processMap_.put(\"get_partitions\",new get_partitions());processMap_.put(\"get_partition_names\",new get_partition_names());processMap_.put(\"get_partitions_ps\",new get_partitions_ps());processMap_.put(\"get_partition_names_ps\",new get_partition_names_ps());processMap_.put(\"get_partitions_by_filter\",new get_partitions_by_filter());processMap_.put(\"alter_partition\",new alter_partition());processMap_.put(\"get_config_value\",new get_config_value());processMap_.put(\"partition_name_to_vals\",new partition_name_to_vals());processMap_.put(\"partition_name_to_spec\",new partition_name_to_spec());processMap_.put(\"add_index\",new add_index());processMap_.put(\"alter_index\",new alter_index());processMap_.put(\"drop_index_by_name\",new drop_index_by_name());processMap_.put(\"get_index_by_name\",new get_index_by_name());processMap_.put(\"get_indexes\",new get_indexes());processMap_.put(\"get_index_names\",new get_index_names());}private Iface iface_;public boolean process(TProtocol iprot,TProtocol oprot)throws TException{TMessage msg=iprot.readMessageBegin();ProcessFunction fn=processMap_.get(msg.name);if(fn==null){TProtocolUtil.skip(iprot,TType.STRUCT);iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.UNKNOWN_METHOD,\"Invalid method name: '\"+msg.name+\"'\");oprot.writeMessageBegin(new TMessage(msg.name,TMessageType.EXCEPTION,msg.seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return true;}fn.process(msg.seqid,iprot,oprot);return true;}private class create_database implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_database_args args=new create_database_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"create_database\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();create_database_result result=new create_database_result();try{iface_.create_database(args.database);}catch(AlreadyExistsException o1){result.o1=o1;}catch(InvalidObjectException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing create_database\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing create_database\");oprot.writeMessageBegin(new TMessage(\"create_database\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"create_database\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_database implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_database_args args=new get_database_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_database\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_database_result result=new get_database_result();try{result.success=iface_.get_database(args.name);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_database\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_database\");oprot.writeMessageBegin(new TMessage(\"get_database\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_database\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_database implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_database_args args=new drop_database_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();drop_database_result result=new drop_database_result();try{iface_.drop_database(args.name,args.deleteData);}catch(NoSuchObjectException o1){result.o1=o1;}catch(InvalidOperationException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing drop_database\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing drop_database\");oprot.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"drop_database\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_databases implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_databases_args args=new get_databases_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_databases_result result=new get_databases_result();try{result.success=iface_.get_databases(args.pattern);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_databases\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_databases\");oprot.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_databases\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_all_databases implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_all_databases_args args=new get_all_databases_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_all_databases\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_all_databases_result result=new get_all_databases_result();try{result.success=iface_.get_all_databases();}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_all_databases\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_all_databases\");oprot.writeMessageBegin(new TMessage(\"get_all_databases\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_all_databases\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_type implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_type_args args=new get_type_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_type\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_type_result result=new get_type_result();try{result.success=iface_.get_type(args.name);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_type\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_type\");oprot.writeMessageBegin(new TMessage(\"get_type\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_type\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class create_type implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_type_args args=new create_type_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"create_type\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();create_type_result result=new create_type_result();try{result.success=iface_.create_type(args.type);result.setSuccessIsSet(true);}catch(AlreadyExistsException o1){result.o1=o1;}catch(InvalidObjectException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing create_type\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing create_type\");oprot.writeMessageBegin(new TMessage(\"create_type\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"create_type\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_type implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_type_args args=new drop_type_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();drop_type_result result=new drop_type_result();try{result.success=iface_.drop_type(args.type);result.setSuccessIsSet(true);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing drop_type\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing drop_type\");oprot.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"drop_type\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_type_all implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_type_all_args args=new get_type_all_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_type_all_result result=new get_type_all_result();try{result.success=iface_.get_type_all(args.name);}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_type_all\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_type_all\");oprot.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_type_all\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_fields implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_fields_args args=new get_fields_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_fields_result result=new get_fields_result();try{result.success=iface_.get_fields(args.db_name,args.table_name);}catch(MetaException o1){result.o1=o1;}catch(UnknownTableException o2){result.o2=o2;}catch(UnknownDBException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing get_fields\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_fields\");oprot.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_fields\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_schema implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_schema_args args=new get_schema_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_schema_result result=new get_schema_result();try{result.success=iface_.get_schema(args.db_name,args.table_name);}catch(MetaException o1){result.o1=o1;}catch(UnknownTableException o2){result.o2=o2;}catch(UnknownDBException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing get_schema\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_schema\");oprot.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_schema\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class create_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{create_table_args args=new create_table_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"create_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();create_table_result result=new create_table_result();try{iface_.create_table(args.tbl);}catch(AlreadyExistsException o1){result.o1=o1;}catch(InvalidObjectException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(NoSuchObjectException o4){result.o4=o4;}catch(Throwable th){LOGGER.error(\"Internal error processing create_table\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing create_table\");oprot.writeMessageBegin(new TMessage(\"create_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"create_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_table_args args=new drop_table_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();drop_table_result result=new drop_table_result();try{iface_.drop_table(args.dbname,args.name,args.deleteData);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing drop_table\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing drop_table\");oprot.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"drop_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_tables implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_tables_args args=new get_tables_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_tables_result result=new get_tables_result();try{result.success=iface_.get_tables(args.db_name,args.pattern);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_tables\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_tables\");oprot.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_tables\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_all_tables implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_all_tables_args args=new get_all_tables_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_all_tables\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_all_tables_result result=new get_all_tables_result();try{result.success=iface_.get_all_tables(args.db_name);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_all_tables\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_all_tables\");oprot.writeMessageBegin(new TMessage(\"get_all_tables\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_all_tables\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_table_args args=new get_table_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_table_result result=new get_table_result();try{result.success=iface_.get_table(args.dbname,args.tbl_name);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_table\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_table\");oprot.writeMessageBegin(new TMessage(\"get_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class alter_table implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{alter_table_args args=new alter_table_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();alter_table_result result=new alter_table_result();try{iface_.alter_table(args.dbname,args.tbl_name,args.new_tbl);}catch(InvalidOperationException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing alter_table\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing alter_table\");oprot.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"alter_table\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class add_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{add_partition_args args=new add_partition_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();add_partition_result result=new add_partition_result();try{result.success=iface_.add_partition(args.new_part);}catch(InvalidObjectException o1){result.o1=o1;}catch(AlreadyExistsException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing add_partition\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing add_partition\");oprot.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"add_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class append_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{append_partition_args args=new append_partition_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();append_partition_result result=new append_partition_result();try{result.success=iface_.append_partition(args.db_name,args.tbl_name,args.part_vals);}catch(InvalidObjectException o1){result.o1=o1;}catch(AlreadyExistsException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing append_partition\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing append_partition\");oprot.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"append_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class append_partition_by_name implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{append_partition_by_name_args args=new append_partition_by_name_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"append_partition_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();append_partition_by_name_result result=new append_partition_by_name_result();try{result.success=iface_.append_partition_by_name(args.db_name,args.tbl_name,args.part_name);}catch(InvalidObjectException o1){result.o1=o1;}catch(AlreadyExistsException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing append_partition_by_name\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing append_partition_by_name\");oprot.writeMessageBegin(new TMessage(\"append_partition_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"append_partition_by_name\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_partition_args args=new drop_partition_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();drop_partition_result result=new drop_partition_result();try{result.success=iface_.drop_partition(args.db_name,args.tbl_name,args.part_vals,args.deleteData);result.setSuccessIsSet(true);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing drop_partition\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing drop_partition\");oprot.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"drop_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_partition_by_name implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_partition_by_name_args args=new drop_partition_by_name_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"drop_partition_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();drop_partition_by_name_result result=new drop_partition_by_name_result();try{result.success=iface_.drop_partition_by_name(args.db_name,args.tbl_name,args.part_name,args.deleteData);result.setSuccessIsSet(true);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing drop_partition_by_name\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing drop_partition_by_name\");oprot.writeMessageBegin(new TMessage(\"drop_partition_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"drop_partition_by_name\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partition_args args=new get_partition_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partition_result result=new get_partition_result();try{result.success=iface_.get_partition(args.db_name,args.tbl_name,args.part_vals);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partition\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partition\");oprot.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partition_by_name implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partition_by_name_args args=new get_partition_by_name_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partition_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partition_by_name_result result=new get_partition_by_name_result();try{result.success=iface_.get_partition_by_name(args.db_name,args.tbl_name,args.part_name);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partition_by_name\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partition_by_name\");oprot.writeMessageBegin(new TMessage(\"get_partition_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partition_by_name\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partitions implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partitions_args args=new get_partitions_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partitions_result result=new get_partitions_result();try{result.success=iface_.get_partitions(args.db_name,args.tbl_name,args.max_parts);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partitions\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partitions\");oprot.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partitions\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partition_names implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partition_names_args args=new get_partition_names_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partition_names\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partition_names_result result=new get_partition_names_result();try{result.success=iface_.get_partition_names(args.db_name,args.tbl_name,args.max_parts);}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partition_names\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partition_names\");oprot.writeMessageBegin(new TMessage(\"get_partition_names\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partition_names\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partitions_ps implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partitions_ps_args args=new get_partitions_ps_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partitions_ps\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partitions_ps_result result=new get_partitions_ps_result();try{result.success=iface_.get_partitions_ps(args.db_name,args.tbl_name,args.part_vals,args.max_parts);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partitions_ps\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partitions_ps\");oprot.writeMessageBegin(new TMessage(\"get_partitions_ps\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partitions_ps\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partition_names_ps implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partition_names_ps_args args=new get_partition_names_ps_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partition_names_ps\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partition_names_ps_result result=new get_partition_names_ps_result();try{result.success=iface_.get_partition_names_ps(args.db_name,args.tbl_name,args.part_vals,args.max_parts);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partition_names_ps\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partition_names_ps\");oprot.writeMessageBegin(new TMessage(\"get_partition_names_ps\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partition_names_ps\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_partitions_by_filter implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_partitions_by_filter_args args=new get_partitions_by_filter_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_partitions_by_filter\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_partitions_by_filter_result result=new get_partitions_by_filter_result();try{result.success=iface_.get_partitions_by_filter(args.db_name,args.tbl_name,args.filter,args.max_parts);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_partitions_by_filter\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_partitions_by_filter\");oprot.writeMessageBegin(new TMessage(\"get_partitions_by_filter\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_partitions_by_filter\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class alter_partition implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{alter_partition_args args=new alter_partition_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"alter_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();alter_partition_result result=new alter_partition_result();try{iface_.alter_partition(args.db_name,args.tbl_name,args.new_part);}catch(InvalidOperationException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing alter_partition\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing alter_partition\");oprot.writeMessageBegin(new TMessage(\"alter_partition\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"alter_partition\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_config_value implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_config_value_args args=new get_config_value_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_config_value\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_config_value_result result=new get_config_value_result();try{result.success=iface_.get_config_value(args.name,args.defaultValue);}catch(ConfigValSecurityException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing get_config_value\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_config_value\");oprot.writeMessageBegin(new TMessage(\"get_config_value\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_config_value\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class partition_name_to_vals implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{partition_name_to_vals_args args=new partition_name_to_vals_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"partition_name_to_vals\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();partition_name_to_vals_result result=new partition_name_to_vals_result();try{result.success=iface_.partition_name_to_vals(args.part_name);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing partition_name_to_vals\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing partition_name_to_vals\");oprot.writeMessageBegin(new TMessage(\"partition_name_to_vals\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"partition_name_to_vals\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class partition_name_to_spec implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{partition_name_to_spec_args args=new partition_name_to_spec_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"partition_name_to_spec\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();partition_name_to_spec_result result=new partition_name_to_spec_result();try{result.success=iface_.partition_name_to_spec(args.part_name);}catch(MetaException o1){result.o1=o1;}catch(Throwable th){LOGGER.error(\"Internal error processing partition_name_to_spec\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing partition_name_to_spec\");oprot.writeMessageBegin(new TMessage(\"partition_name_to_spec\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"partition_name_to_spec\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class add_index implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{add_index_args args=new add_index_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"add_index\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();add_index_result result=new add_index_result();try{result.success=iface_.add_index(args.new_index,args.index_table);}catch(InvalidObjectException o1){result.o1=o1;}catch(AlreadyExistsException o2){result.o2=o2;}catch(MetaException o3){result.o3=o3;}catch(Throwable th){LOGGER.error(\"Internal error processing add_index\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing add_index\");oprot.writeMessageBegin(new TMessage(\"add_index\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"add_index\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class alter_index implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{alter_index_args args=new alter_index_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"alter_index\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();alter_index_result result=new alter_index_result();try{iface_.alter_index(args.dbname,args.base_tbl_name,args.idx_name,args.new_idx);}catch(InvalidOperationException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing alter_index\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing alter_index\");oprot.writeMessageBegin(new TMessage(\"alter_index\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"alter_index\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class drop_index_by_name implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{drop_index_by_name_args args=new drop_index_by_name_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"drop_index_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();drop_index_by_name_result result=new drop_index_by_name_result();try{result.success=iface_.drop_index_by_name(args.db_name,args.tbl_name,args.index_name,args.deleteData);result.setSuccessIsSet(true);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing drop_index_by_name\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing drop_index_by_name\");oprot.writeMessageBegin(new TMessage(\"drop_index_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"drop_index_by_name\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_index_by_name implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_index_by_name_args args=new get_index_by_name_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_index_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_index_by_name_result result=new get_index_by_name_result();try{result.success=iface_.get_index_by_name(args.db_name,args.tbl_name,args.index_name);}catch(MetaException o1){result.o1=o1;}catch(NoSuchObjectException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_index_by_name\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_index_by_name\");oprot.writeMessageBegin(new TMessage(\"get_index_by_name\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_index_by_name\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_indexes implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_indexes_args args=new get_indexes_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_indexes\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_indexes_result result=new get_indexes_result();try{result.success=iface_.get_indexes(args.db_name,args.tbl_name,args.max_indexes);}catch(NoSuchObjectException o1){result.o1=o1;}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_indexes\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_indexes\");oprot.writeMessageBegin(new TMessage(\"get_indexes\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_indexes\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class get_index_names implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{get_index_names_args args=new get_index_names_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"get_index_names\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();get_index_names_result result=new get_index_names_result();try{result.success=iface_.get_index_names(args.db_name,args.tbl_name,args.max_indexes);}catch(MetaException o2){result.o2=o2;}catch(Throwable th){LOGGER.error(\"Internal error processing get_index_names\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing get_index_names\");oprot.writeMessageBegin(new TMessage(\"get_index_names\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"get_index_names\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}}public static class create_database_args implements TBase<create_database_args,create_database_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"create_database_args\");private static final TField DATABASE_FIELD_DESC=new TField(\"database\",TType.STRUCT,(short)1);private Database database;public enum _Fields implements TFieldIdEnum{DATABASE((short)1,\"database\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DATABASE;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DATABASE,new FieldMetaData(\"database\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Database.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(create_database_args.class,metaDataMap);}public create_database_args(){}public create_database_args(Database database){this();this.database=database;}public create_database_args(create_database_args other){if(other.isSetDatabase()){this.database=new Database(other.database);}}public create_database_args deepCopy(){return new create_database_args(this);}@Override public void clear(){this.database=null;}public Database getDatabase(){return this.database;}public void setDatabase(Database database){this.database=database;}public void unsetDatabase(){this.database=null;}public boolean isSetDatabase(){return this.database!=null;}public void setDatabaseIsSet(boolean value){if(!value){this.database=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DATABASE: if(value==null){unsetDatabase();}else{setDatabase((Database)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DATABASE: return getDatabase();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DATABASE: return isSetDatabase();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof create_database_args)return this.equals((create_database_args)that);return false;}public boolean equals(create_database_args that){if(that==null)return false;boolean this_present_database=true && this.isSetDatabase();boolean that_present_database=true && that.isSetDatabase();if(this_present_database || that_present_database){if(!(this_present_database && that_present_database))return false;if(!this.database.equals(that.database))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(create_database_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;create_database_args typedOther=(create_database_args)other;lastComparison=Boolean.valueOf(isSetDatabase()).compareTo(typedOther.isSetDatabase());if(lastComparison!=0){return lastComparison;}if(isSetDatabase()){lastComparison=TBaseHelper.compareTo(this.database,typedOther.database);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.database=new Database();this.database.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.database!=null){oprot.writeFieldBegin(DATABASE_FIELD_DESC);this.database.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class create_database_result implements TBase<create_database_result,create_database_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"create_database_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private AlreadyExistsException o1;private InvalidObjectException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(create_database_result.class,metaDataMap);}public create_database_result(){}public create_database_result(AlreadyExistsException o1,InvalidObjectException o2,MetaException o3){this();this.o1=o1;this.o2=o2;this.o3=o3;}public create_database_result(create_database_result other){if(other.isSetO1()){this.o1=new AlreadyExistsException(other.o1);}if(other.isSetO2()){this.o2=new InvalidObjectException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public create_database_result deepCopy(){return new create_database_result(this);}@Override public void clear(){this.o1=null;this.o2=null;this.o3=null;}public AlreadyExistsException getO1(){return this.o1;}public void setO1(AlreadyExistsException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public InvalidObjectException getO2(){return this.o2;}public void setO2(InvalidObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((AlreadyExistsException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((InvalidObjectException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof create_database_result)return this.equals((create_database_result)that);return false;}public boolean equals(create_database_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(create_database_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;create_database_result typedOther=(create_database_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new AlreadyExistsException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new InvalidObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_database_args implements TBase<get_database_args,get_database_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_database_args\");private static final TField NAME_FIELD_DESC=new TField(\"name\",TType.STRING,(short)1);private String name;public enum _Fields implements TFieldIdEnum{NAME((short)1,\"name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NAME,new FieldMetaData(\"name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_database_args.class,metaDataMap);}public get_database_args(){}public get_database_args(String name){this();this.name=name;}public get_database_args(get_database_args other){if(other.isSetName()){this.name=other.name;}}public get_database_args deepCopy(){return new get_database_args(this);}@Override public void clear(){this.name=null;}public String getName(){return this.name;}public void setName(String name){this.name=name;}public void unsetName(){this.name=null;}public boolean isSetName(){return this.name!=null;}public void setNameIsSet(boolean value){if(!value){this.name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case NAME: if(value==null){unsetName();}else{setName((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NAME: return getName();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NAME: return isSetName();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_database_args)return this.equals((get_database_args)that);return false;}public boolean equals(get_database_args that){if(that==null)return false;boolean this_present_name=true && this.isSetName();boolean that_present_name=true && that.isSetName();if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_database_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_database_args typedOther=(get_database_args)other;lastComparison=Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());if(lastComparison!=0){return lastComparison;}if(isSetName()){lastComparison=TBaseHelper.compareTo(this.name,typedOther.name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.name!=null){oprot.writeFieldBegin(NAME_FIELD_DESC);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_database_result implements TBase<get_database_result,get_database_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_database_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private Database success;private NoSuchObjectException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Database.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_database_result.class,metaDataMap);}public get_database_result(){}public get_database_result(Database success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_database_result(get_database_result other){if(other.isSetSuccess()){this.success=new Database(other.success);}if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public get_database_result deepCopy(){return new get_database_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public Database getSuccess(){return this.success;}public void setSuccess(Database success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Database)value);}break;case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_database_result)return this.equals((get_database_result)that);return false;}public boolean equals(get_database_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_database_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_database_result typedOther=(get_database_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Database();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_database_args implements TBase<drop_database_args,drop_database_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_database_args\");private static final TField NAME_FIELD_DESC=new TField(\"name\",TType.STRING,(short)1);private static final TField DELETE_DATA_FIELD_DESC=new TField(\"deleteData\",TType.BOOL,(short)2);private String name;private boolean deleteData;public enum _Fields implements TFieldIdEnum{NAME((short)1,\"name\"),DELETE_DATA((short)2,\"deleteData\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NAME;case 2: return DELETE_DATA;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __DELETEDATA_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NAME,new FieldMetaData(\"name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.DELETE_DATA,new FieldMetaData(\"deleteData\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_database_args.class,metaDataMap);}public drop_database_args(){}public drop_database_args(String name,boolean deleteData){this();this.name=name;this.deleteData=deleteData;setDeleteDataIsSet(true);}public drop_database_args(drop_database_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetName()){this.name=other.name;}this.deleteData=other.deleteData;}public drop_database_args deepCopy(){return new drop_database_args(this);}@Override public void clear(){this.name=null;setDeleteDataIsSet(false);this.deleteData=false;}public String getName(){return this.name;}public void setName(String name){this.name=name;}public void unsetName(){this.name=null;}public boolean isSetName(){return this.name!=null;}public void setNameIsSet(boolean value){if(!value){this.name=null;}}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;setDeleteDataIsSet(true);}public void unsetDeleteData(){__isset_bit_vector.clear(__DELETEDATA_ISSET_ID);}public boolean isSetDeleteData(){return __isset_bit_vector.get(__DELETEDATA_ISSET_ID);}public void setDeleteDataIsSet(boolean value){__isset_bit_vector.set(__DELETEDATA_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case NAME: if(value==null){unsetName();}else{setName((String)value);}break;case DELETE_DATA: if(value==null){unsetDeleteData();}else{setDeleteData((Boolean)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NAME: return getName();case DELETE_DATA: return new Boolean(isDeleteData());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NAME: return isSetName();case DELETE_DATA: return isSetDeleteData();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_database_args)return this.equals((drop_database_args)that);return false;}public boolean equals(drop_database_args that){if(that==null)return false;boolean this_present_name=true && this.isSetName();boolean that_present_name=true && that.isSetName();if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_database_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_database_args typedOther=(drop_database_args)other;lastComparison=Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());if(lastComparison!=0){return lastComparison;}if(isSetName()){lastComparison=TBaseHelper.compareTo(this.name,typedOther.name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDeleteData()).compareTo(typedOther.isSetDeleteData());if(lastComparison!=0){return lastComparison;}if(isSetDeleteData()){lastComparison=TBaseHelper.compareTo(this.deleteData,typedOther.deleteData);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();setDeleteDataIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.name!=null){oprot.writeFieldBegin(NAME_FIELD_DESC);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_database_result implements TBase<drop_database_result,drop_database_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_database_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private NoSuchObjectException o1;private InvalidOperationException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_database_result.class,metaDataMap);}public drop_database_result(){}public drop_database_result(NoSuchObjectException o1,InvalidOperationException o2,MetaException o3){this();this.o1=o1;this.o2=o2;this.o3=o3;}public drop_database_result(drop_database_result other){if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new InvalidOperationException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public drop_database_result deepCopy(){return new drop_database_result(this);}@Override public void clear(){this.o1=null;this.o2=null;this.o3=null;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public InvalidOperationException getO2(){return this.o2;}public void setO2(InvalidOperationException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((InvalidOperationException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_database_result)return this.equals((drop_database_result)that);return false;}public boolean equals(drop_database_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_database_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_database_result typedOther=(drop_database_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new InvalidOperationException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_databases_args implements TBase<get_databases_args,get_databases_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_databases_args\");private static final TField PATTERN_FIELD_DESC=new TField(\"pattern\",TType.STRING,(short)1);private String pattern;public enum _Fields implements TFieldIdEnum{PATTERN((short)1,\"pattern\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return PATTERN;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.PATTERN,new FieldMetaData(\"pattern\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_databases_args.class,metaDataMap);}public get_databases_args(){}public get_databases_args(String pattern){this();this.pattern=pattern;}public get_databases_args(get_databases_args other){if(other.isSetPattern()){this.pattern=other.pattern;}}public get_databases_args deepCopy(){return new get_databases_args(this);}@Override public void clear(){this.pattern=null;}public String getPattern(){return this.pattern;}public void setPattern(String pattern){this.pattern=pattern;}public void unsetPattern(){this.pattern=null;}public boolean isSetPattern(){return this.pattern!=null;}public void setPatternIsSet(boolean value){if(!value){this.pattern=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case PATTERN: if(value==null){unsetPattern();}else{setPattern((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case PATTERN: return getPattern();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case PATTERN: return isSetPattern();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_databases_args)return this.equals((get_databases_args)that);return false;}public boolean equals(get_databases_args that){if(that==null)return false;boolean this_present_pattern=true && this.isSetPattern();boolean that_present_pattern=true && that.isSetPattern();if(this_present_pattern || that_present_pattern){if(!(this_present_pattern && that_present_pattern))return false;if(!this.pattern.equals(that.pattern))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_databases_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_databases_args typedOther=(get_databases_args)other;lastComparison=Boolean.valueOf(isSetPattern()).compareTo(typedOther.isSetPattern());if(lastComparison!=0){return lastComparison;}if(isSetPattern()){lastComparison=TBaseHelper.compareTo(this.pattern,typedOther.pattern);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.pattern=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.pattern!=null){oprot.writeFieldBegin(PATTERN_FIELD_DESC);oprot.writeString(this.pattern);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_databases_result implements TBase<get_databases_result,get_databases_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_databases_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_databases_result.class,metaDataMap);}public get_databases_result(){}public get_databases_result(List<String>success,MetaException o1){this();this.success=success;this.o1=o1;}public get_databases_result(get_databases_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public get_databases_result deepCopy(){return new get_databases_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_databases_result)return this.equals((get_databases_result)that);return false;}public boolean equals(get_databases_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_databases_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_databases_result typedOther=(get_databases_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list63=iprot.readListBegin();this.success=new ArrayList<String>(_list63.size);for(int _i64=0;_i64<_list63.size;++_i64){String _elem65;_elem65=iprot.readString();this.success.add(_elem65);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter66 : this.success){oprot.writeString(_iter66);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_all_databases_args implements TBase<get_all_databases_args,get_all_databases_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_all_databases_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_all_databases_args.class,metaDataMap);}public get_all_databases_args(){}public get_all_databases_args(get_all_databases_args other){}public get_all_databases_args deepCopy(){return new get_all_databases_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_all_databases_args)return this.equals((get_all_databases_args)that);return false;}public boolean equals(get_all_databases_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(get_all_databases_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_all_databases_args typedOther=(get_all_databases_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_all_databases_result implements TBase<get_all_databases_result,get_all_databases_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_all_databases_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_all_databases_result.class,metaDataMap);}public get_all_databases_result(){}public get_all_databases_result(List<String>success,MetaException o1){this();this.success=success;this.o1=o1;}public get_all_databases_result(get_all_databases_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public get_all_databases_result deepCopy(){return new get_all_databases_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_all_databases_result)return this.equals((get_all_databases_result)that);return false;}public boolean equals(get_all_databases_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_all_databases_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_all_databases_result typedOther=(get_all_databases_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list67=iprot.readListBegin();this.success=new ArrayList<String>(_list67.size);for(int _i68=0;_i68<_list67.size;++_i68){String _elem69;_elem69=iprot.readString();this.success.add(_elem69);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter70 : this.success){oprot.writeString(_iter70);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_type_args implements TBase<get_type_args,get_type_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_type_args\");private static final TField NAME_FIELD_DESC=new TField(\"name\",TType.STRING,(short)1);private String name;public enum _Fields implements TFieldIdEnum{NAME((short)1,\"name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NAME,new FieldMetaData(\"name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_type_args.class,metaDataMap);}public get_type_args(){}public get_type_args(String name){this();this.name=name;}public get_type_args(get_type_args other){if(other.isSetName()){this.name=other.name;}}public get_type_args deepCopy(){return new get_type_args(this);}@Override public void clear(){this.name=null;}public String getName(){return this.name;}public void setName(String name){this.name=name;}public void unsetName(){this.name=null;}public boolean isSetName(){return this.name!=null;}public void setNameIsSet(boolean value){if(!value){this.name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case NAME: if(value==null){unsetName();}else{setName((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NAME: return getName();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NAME: return isSetName();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_args)return this.equals((get_type_args)that);return false;}public boolean equals(get_type_args that){if(that==null)return false;boolean this_present_name=true && this.isSetName();boolean that_present_name=true && that.isSetName();if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_type_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_type_args typedOther=(get_type_args)other;lastComparison=Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());if(lastComparison!=0){return lastComparison;}if(isSetName()){lastComparison=TBaseHelper.compareTo(this.name,typedOther.name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.name!=null){oprot.writeFieldBegin(NAME_FIELD_DESC);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_type_result implements TBase<get_type_result,get_type_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_type_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private Type success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Type.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_type_result.class,metaDataMap);}public get_type_result(){}public get_type_result(Type success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_type_result(get_type_result other){if(other.isSetSuccess()){this.success=new Type(other.success);}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public get_type_result deepCopy(){return new get_type_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public Type getSuccess(){return this.success;}public void setSuccess(Type success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Type)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_result)return this.equals((get_type_result)that);return false;}public boolean equals(get_type_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_type_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_type_result typedOther=(get_type_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Type();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class create_type_args implements TBase<create_type_args,create_type_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"create_type_args\");private static final TField TYPE_FIELD_DESC=new TField(\"type\",TType.STRUCT,(short)1);private Type type;public enum _Fields implements TFieldIdEnum{TYPE((short)1,\"type\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return TYPE;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.TYPE,new FieldMetaData(\"type\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Type.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(create_type_args.class,metaDataMap);}public create_type_args(){}public create_type_args(Type type){this();this.type=type;}public create_type_args(create_type_args other){if(other.isSetType()){this.type=new Type(other.type);}}public create_type_args deepCopy(){return new create_type_args(this);}@Override public void clear(){this.type=null;}public Type getType(){return this.type;}public void setType(Type type){this.type=type;}public void unsetType(){this.type=null;}public boolean isSetType(){return this.type!=null;}public void setTypeIsSet(boolean value){if(!value){this.type=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case TYPE: if(value==null){unsetType();}else{setType((Type)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case TYPE: return getType();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case TYPE: return isSetType();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof create_type_args)return this.equals((create_type_args)that);return false;}public boolean equals(create_type_args that){if(that==null)return false;boolean this_present_type=true && this.isSetType();boolean that_present_type=true && that.isSetType();if(this_present_type || that_present_type){if(!(this_present_type && that_present_type))return false;if(!this.type.equals(that.type))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(create_type_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;create_type_args typedOther=(create_type_args)other;lastComparison=Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());if(lastComparison!=0){return lastComparison;}if(isSetType()){lastComparison=TBaseHelper.compareTo(this.type,typedOther.type);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.type=new Type();this.type.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.type!=null){oprot.writeFieldBegin(TYPE_FIELD_DESC);this.type.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class create_type_result implements TBase<create_type_result,create_type_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"create_type_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.BOOL,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private boolean success;private AlreadyExistsException o1;private InvalidObjectException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __SUCCESS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(create_type_result.class,metaDataMap);}public create_type_result(){}public create_type_result(boolean success,AlreadyExistsException o1,InvalidObjectException o2,MetaException o3){this();this.success=success;setSuccessIsSet(true);this.o1=o1;this.o2=o2;this.o3=o3;}public create_type_result(create_type_result other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);this.success=other.success;if(other.isSetO1()){this.o1=new AlreadyExistsException(other.o1);}if(other.isSetO2()){this.o2=new InvalidObjectException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public create_type_result deepCopy(){return new create_type_result(this);}@Override public void clear(){setSuccessIsSet(false);this.success=false;this.o1=null;this.o2=null;this.o3=null;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;setSuccessIsSet(true);}public void unsetSuccess(){__isset_bit_vector.clear(__SUCCESS_ISSET_ID);}public boolean isSetSuccess(){return __isset_bit_vector.get(__SUCCESS_ISSET_ID);}public void setSuccessIsSet(boolean value){__isset_bit_vector.set(__SUCCESS_ISSET_ID,value);}public AlreadyExistsException getO1(){return this.o1;}public void setO1(AlreadyExistsException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public InvalidObjectException getO2(){return this.o2;}public void setO2(InvalidObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Boolean)value);}break;case O1: if(value==null){unsetO1();}else{setO1((AlreadyExistsException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((InvalidObjectException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return new Boolean(isSuccess());case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof create_type_result)return this.equals((create_type_result)that);return false;}public boolean equals(create_type_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(create_type_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;create_type_result typedOther=(create_type_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();setSuccessIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new AlreadyExistsException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new InvalidObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_type_args implements TBase<drop_type_args,drop_type_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_type_args\");private static final TField TYPE_FIELD_DESC=new TField(\"type\",TType.STRING,(short)1);private String type;public enum _Fields implements TFieldIdEnum{TYPE((short)1,\"type\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return TYPE;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.TYPE,new FieldMetaData(\"type\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_type_args.class,metaDataMap);}public drop_type_args(){}public drop_type_args(String type){this();this.type=type;}public drop_type_args(drop_type_args other){if(other.isSetType()){this.type=other.type;}}public drop_type_args deepCopy(){return new drop_type_args(this);}@Override public void clear(){this.type=null;}public String getType(){return this.type;}public void setType(String type){this.type=type;}public void unsetType(){this.type=null;}public boolean isSetType(){return this.type!=null;}public void setTypeIsSet(boolean value){if(!value){this.type=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case TYPE: if(value==null){unsetType();}else{setType((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case TYPE: return getType();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case TYPE: return isSetType();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_type_args)return this.equals((drop_type_args)that);return false;}public boolean equals(drop_type_args that){if(that==null)return false;boolean this_present_type=true && this.isSetType();boolean that_present_type=true && that.isSetType();if(this_present_type || that_present_type){if(!(this_present_type && that_present_type))return false;if(!this.type.equals(that.type))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_type_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_type_args typedOther=(drop_type_args)other;lastComparison=Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());if(lastComparison!=0){return lastComparison;}if(isSetType()){lastComparison=TBaseHelper.compareTo(this.type,typedOther.type);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.type=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.type!=null){oprot.writeFieldBegin(TYPE_FIELD_DESC);oprot.writeString(this.type);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_type_result implements TBase<drop_type_result,drop_type_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_type_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.BOOL,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private boolean success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __SUCCESS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_type_result.class,metaDataMap);}public drop_type_result(){}public drop_type_result(boolean success,MetaException o1,NoSuchObjectException o2){this();this.success=success;setSuccessIsSet(true);this.o1=o1;this.o2=o2;}public drop_type_result(drop_type_result other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);this.success=other.success;if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public drop_type_result deepCopy(){return new drop_type_result(this);}@Override public void clear(){setSuccessIsSet(false);this.success=false;this.o1=null;this.o2=null;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;setSuccessIsSet(true);}public void unsetSuccess(){__isset_bit_vector.clear(__SUCCESS_ISSET_ID);}public boolean isSetSuccess(){return __isset_bit_vector.get(__SUCCESS_ISSET_ID);}public void setSuccessIsSet(boolean value){__isset_bit_vector.set(__SUCCESS_ISSET_ID,value);}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Boolean)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return new Boolean(isSuccess());case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_type_result)return this.equals((drop_type_result)that);return false;}public boolean equals(drop_type_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_type_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_type_result typedOther=(drop_type_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();setSuccessIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_type_all_args implements TBase<get_type_all_args,get_type_all_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_type_all_args\");private static final TField NAME_FIELD_DESC=new TField(\"name\",TType.STRING,(short)1);private String name;public enum _Fields implements TFieldIdEnum{NAME((short)1,\"name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NAME,new FieldMetaData(\"name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_type_all_args.class,metaDataMap);}public get_type_all_args(){}public get_type_all_args(String name){this();this.name=name;}public get_type_all_args(get_type_all_args other){if(other.isSetName()){this.name=other.name;}}public get_type_all_args deepCopy(){return new get_type_all_args(this);}@Override public void clear(){this.name=null;}public String getName(){return this.name;}public void setName(String name){this.name=name;}public void unsetName(){this.name=null;}public boolean isSetName(){return this.name!=null;}public void setNameIsSet(boolean value){if(!value){this.name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case NAME: if(value==null){unsetName();}else{setName((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NAME: return getName();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NAME: return isSetName();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_all_args)return this.equals((get_type_all_args)that);return false;}public boolean equals(get_type_all_args that){if(that==null)return false;boolean this_present_name=true && this.isSetName();boolean that_present_name=true && that.isSetName();if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_type_all_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_type_all_args typedOther=(get_type_all_args)other;lastComparison=Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());if(lastComparison!=0){return lastComparison;}if(isSetName()){lastComparison=TBaseHelper.compareTo(this.name,typedOther.name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.name!=null){oprot.writeFieldBegin(NAME_FIELD_DESC);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_type_all_result implements TBase<get_type_all_result,get_type_all_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_type_all_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.MAP,(short)0);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)1);private Map<String,Type>success;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O2((short)1,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new MapMetaData(TType.MAP,new FieldValueMetaData(TType.STRING),new StructMetaData(TType.STRUCT,Type.class))));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_type_all_result.class,metaDataMap);}public get_type_all_result(){}public get_type_all_result(Map<String,Type>success,MetaException o2){this();this.success=success;this.o2=o2;}public get_type_all_result(get_type_all_result other){if(other.isSetSuccess()){Map<String,Type>__this__success=new HashMap<String,Type>();for(Map.Entry<String,Type>other_element : other.success.entrySet()){String other_element_key=other_element.getKey();Type other_element_value=other_element.getValue();String __this__success_copy_key=other_element_key;Type __this__success_copy_value=new Type(other_element_value);__this__success.put(__this__success_copy_key,__this__success_copy_value);}this.success=__this__success;}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public get_type_all_result deepCopy(){return new get_type_all_result(this);}@Override public void clear(){this.success=null;this.o2=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public void putToSuccess(String key,Type val){if(this.success==null){this.success=new HashMap<String,Type>();}this.success.put(key,val);}public Map<String,Type>getSuccess(){return this.success;}public void setSuccess(Map<String,Type>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Map<String,Type>)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_type_all_result)return this.equals((get_type_all_result)that);return false;}public boolean equals(get_type_all_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_type_all_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_type_all_result typedOther=(get_type_all_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.MAP){{TMap _map71=iprot.readMapBegin();this.success=new HashMap<String,Type>(2*_map71.size);for(int _i72=0;_i72<_map71.size;++_i72){String _key73;Type _val74;_key73=iprot.readString();_val74=new Type();_val74.read(iprot);this.success.put(_key73,_val74);}iprot.readMapEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRUCT,this.success.size()));for(Map.Entry<String,Type>_iter75 : this.success.entrySet()){oprot.writeString(_iter75.getKey());_iter75.getValue().write(oprot);}oprot.writeMapEnd();}oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_fields_args implements TBase<get_fields_args,get_fields_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_fields_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TABLE_NAME_FIELD_DESC=new TField(\"table_name\",TType.STRING,(short)2);private String db_name;private String table_name;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TABLE_NAME((short)2,\"table_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TABLE_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TABLE_NAME,new FieldMetaData(\"table_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_fields_args.class,metaDataMap);}public get_fields_args(){}public get_fields_args(String db_name,String table_name){this();this.db_name=db_name;this.table_name=table_name;}public get_fields_args(get_fields_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTable_name()){this.table_name=other.table_name;}}public get_fields_args deepCopy(){return new get_fields_args(this);}@Override public void clear(){this.db_name=null;this.table_name=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;}public void unsetTable_name(){this.table_name=null;}public boolean isSetTable_name(){return this.table_name!=null;}public void setTable_nameIsSet(boolean value){if(!value){this.table_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TABLE_NAME: if(value==null){unsetTable_name();}else{setTable_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TABLE_NAME: return getTable_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TABLE_NAME: return isSetTable_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_fields_args)return this.equals((get_fields_args)that);return false;}public boolean equals(get_fields_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true && this.isSetTable_name();boolean that_present_table_name=true && that.isSetTable_name();if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_fields_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_fields_args typedOther=(get_fields_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());if(lastComparison!=0){return lastComparison;}if(isSetTable_name()){lastComparison=TBaseHelper.compareTo(this.table_name,typedOther.table_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.table_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_fields_result implements TBase<get_fields_result,get_fields_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_fields_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private List<FieldSchema>success;private MetaException o1;private UnknownTableException o2;private UnknownDBException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new StructMetaData(TType.STRUCT,FieldSchema.class))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_fields_result.class,metaDataMap);}public get_fields_result(){}public get_fields_result(List<FieldSchema>success,MetaException o1,UnknownTableException o2,UnknownDBException o3){this();this.success=success;this.o1=o1;this.o2=o2;this.o3=o3;}public get_fields_result(get_fields_result other){if(other.isSetSuccess()){List<FieldSchema>__this__success=new ArrayList<FieldSchema>();for(FieldSchema other_element : other.success){__this__success.add(new FieldSchema(other_element));}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new UnknownTableException(other.o2);}if(other.isSetO3()){this.o3=new UnknownDBException(other.o3);}}public get_fields_result deepCopy(){return new get_fields_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;this.o3=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<FieldSchema>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(FieldSchema elem){if(this.success==null){this.success=new ArrayList<FieldSchema>();}this.success.add(elem);}public List<FieldSchema>getSuccess(){return this.success;}public void setSuccess(List<FieldSchema>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public UnknownTableException getO2(){return this.o2;}public void setO2(UnknownTableException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public UnknownDBException getO3(){return this.o3;}public void setO3(UnknownDBException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<FieldSchema>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((UnknownTableException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((UnknownDBException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_fields_result)return this.equals((get_fields_result)that);return false;}public boolean equals(get_fields_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_fields_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_fields_result typedOther=(get_fields_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list76=iprot.readListBegin();this.success=new ArrayList<FieldSchema>(_list76.size);for(int _i77=0;_i77<_list76.size;++_i77){FieldSchema _elem78;_elem78=new FieldSchema();_elem78.read(iprot);this.success.add(_elem78);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new UnknownTableException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new UnknownDBException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(FieldSchema _iter79 : this.success){_iter79.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_schema_args implements TBase<get_schema_args,get_schema_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_schema_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TABLE_NAME_FIELD_DESC=new TField(\"table_name\",TType.STRING,(short)2);private String db_name;private String table_name;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TABLE_NAME((short)2,\"table_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TABLE_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TABLE_NAME,new FieldMetaData(\"table_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_schema_args.class,metaDataMap);}public get_schema_args(){}public get_schema_args(String db_name,String table_name){this();this.db_name=db_name;this.table_name=table_name;}public get_schema_args(get_schema_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTable_name()){this.table_name=other.table_name;}}public get_schema_args deepCopy(){return new get_schema_args(this);}@Override public void clear(){this.db_name=null;this.table_name=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTable_name(){return this.table_name;}public void setTable_name(String table_name){this.table_name=table_name;}public void unsetTable_name(){this.table_name=null;}public boolean isSetTable_name(){return this.table_name!=null;}public void setTable_nameIsSet(boolean value){if(!value){this.table_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TABLE_NAME: if(value==null){unsetTable_name();}else{setTable_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TABLE_NAME: return getTable_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TABLE_NAME: return isSetTable_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_schema_args)return this.equals((get_schema_args)that);return false;}public boolean equals(get_schema_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_table_name=true && this.isSetTable_name();boolean that_present_table_name=true && that.isSetTable_name();if(this_present_table_name || that_present_table_name){if(!(this_present_table_name && that_present_table_name))return false;if(!this.table_name.equals(that.table_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_schema_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_schema_args typedOther=(get_schema_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTable_name()).compareTo(typedOther.isSetTable_name());if(lastComparison!=0){return lastComparison;}if(isSetTable_name()){lastComparison=TBaseHelper.compareTo(this.table_name,typedOther.table_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.table_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.table_name!=null){oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);oprot.writeString(this.table_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_schema_result implements TBase<get_schema_result,get_schema_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_schema_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private List<FieldSchema>success;private MetaException o1;private UnknownTableException o2;private UnknownDBException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new StructMetaData(TType.STRUCT,FieldSchema.class))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_schema_result.class,metaDataMap);}public get_schema_result(){}public get_schema_result(List<FieldSchema>success,MetaException o1,UnknownTableException o2,UnknownDBException o3){this();this.success=success;this.o1=o1;this.o2=o2;this.o3=o3;}public get_schema_result(get_schema_result other){if(other.isSetSuccess()){List<FieldSchema>__this__success=new ArrayList<FieldSchema>();for(FieldSchema other_element : other.success){__this__success.add(new FieldSchema(other_element));}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new UnknownTableException(other.o2);}if(other.isSetO3()){this.o3=new UnknownDBException(other.o3);}}public get_schema_result deepCopy(){return new get_schema_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;this.o3=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<FieldSchema>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(FieldSchema elem){if(this.success==null){this.success=new ArrayList<FieldSchema>();}this.success.add(elem);}public List<FieldSchema>getSuccess(){return this.success;}public void setSuccess(List<FieldSchema>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public UnknownTableException getO2(){return this.o2;}public void setO2(UnknownTableException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public UnknownDBException getO3(){return this.o3;}public void setO3(UnknownDBException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<FieldSchema>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((UnknownTableException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((UnknownDBException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_schema_result)return this.equals((get_schema_result)that);return false;}public boolean equals(get_schema_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_schema_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_schema_result typedOther=(get_schema_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list80=iprot.readListBegin();this.success=new ArrayList<FieldSchema>(_list80.size);for(int _i81=0;_i81<_list80.size;++_i81){FieldSchema _elem82;_elem82=new FieldSchema();_elem82.read(iprot);this.success.add(_elem82);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new UnknownTableException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new UnknownDBException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(FieldSchema _iter83 : this.success){_iter83.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class create_table_args implements TBase<create_table_args,create_table_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"create_table_args\");private static final TField TBL_FIELD_DESC=new TField(\"tbl\",TType.STRUCT,(short)1);private Table tbl;public enum _Fields implements TFieldIdEnum{TBL((short)1,\"tbl\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return TBL;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.TBL,new FieldMetaData(\"tbl\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Table.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(create_table_args.class,metaDataMap);}public create_table_args(){}public create_table_args(Table tbl){this();this.tbl=tbl;}public create_table_args(create_table_args other){if(other.isSetTbl()){this.tbl=new Table(other.tbl);}}public create_table_args deepCopy(){return new create_table_args(this);}@Override public void clear(){this.tbl=null;}public Table getTbl(){return this.tbl;}public void setTbl(Table tbl){this.tbl=tbl;}public void unsetTbl(){this.tbl=null;}public boolean isSetTbl(){return this.tbl!=null;}public void setTblIsSet(boolean value){if(!value){this.tbl=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case TBL: if(value==null){unsetTbl();}else{setTbl((Table)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case TBL: return getTbl();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case TBL: return isSetTbl();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof create_table_args)return this.equals((create_table_args)that);return false;}public boolean equals(create_table_args that){if(that==null)return false;boolean this_present_tbl=true && this.isSetTbl();boolean that_present_tbl=true && that.isSetTbl();if(this_present_tbl || that_present_tbl){if(!(this_present_tbl && that_present_tbl))return false;if(!this.tbl.equals(that.tbl))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(create_table_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;create_table_args typedOther=(create_table_args)other;lastComparison=Boolean.valueOf(isSetTbl()).compareTo(typedOther.isSetTbl());if(lastComparison!=0){return lastComparison;}if(isSetTbl()){lastComparison=TBaseHelper.compareTo(this.tbl,typedOther.tbl);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.tbl=new Table();this.tbl.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.tbl!=null){oprot.writeFieldBegin(TBL_FIELD_DESC);this.tbl.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class create_table_result implements TBase<create_table_result,create_table_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"create_table_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private static final TField O4_FIELD_DESC=new TField(\"o4\",TType.STRUCT,(short)4);private AlreadyExistsException o1;private InvalidObjectException o2;private MetaException o3;private NoSuchObjectException o4;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\"),O4((short)4,\"o4\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O2;case 3: return O3;case 4: return O4;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O4,new FieldMetaData(\"o4\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(create_table_result.class,metaDataMap);}public create_table_result(){}public create_table_result(AlreadyExistsException o1,InvalidObjectException o2,MetaException o3,NoSuchObjectException o4){this();this.o1=o1;this.o2=o2;this.o3=o3;this.o4=o4;}public create_table_result(create_table_result other){if(other.isSetO1()){this.o1=new AlreadyExistsException(other.o1);}if(other.isSetO2()){this.o2=new InvalidObjectException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}if(other.isSetO4()){this.o4=new NoSuchObjectException(other.o4);}}public create_table_result deepCopy(){return new create_table_result(this);}@Override public void clear(){this.o1=null;this.o2=null;this.o3=null;this.o4=null;}public AlreadyExistsException getO1(){return this.o1;}public void setO1(AlreadyExistsException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public InvalidObjectException getO2(){return this.o2;}public void setO2(InvalidObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public NoSuchObjectException getO4(){return this.o4;}public void setO4(NoSuchObjectException o4){this.o4=o4;}public void unsetO4(){this.o4=null;}public boolean isSetO4(){return this.o4!=null;}public void setO4IsSet(boolean value){if(!value){this.o4=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((AlreadyExistsException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((InvalidObjectException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;case O4: if(value==null){unsetO4();}else{setO4((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O2: return getO2();case O3: return getO3();case O4: return getO4();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();case O4: return isSetO4();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof create_table_result)return this.equals((create_table_result)that);return false;}public boolean equals(create_table_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}boolean this_present_o4=true && this.isSetO4();boolean that_present_o4=true && that.isSetO4();if(this_present_o4 || that_present_o4){if(!(this_present_o4 && that_present_o4))return false;if(!this.o4.equals(that.o4))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(create_table_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;create_table_result typedOther=(create_table_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO4()).compareTo(typedOther.isSetO4());if(lastComparison!=0){return lastComparison;}if(isSetO4()){lastComparison=TBaseHelper.compareTo(this.o4,typedOther.o4);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new AlreadyExistsException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new InvalidObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.STRUCT){this.o4=new NoSuchObjectException();this.o4.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO4()){oprot.writeFieldBegin(O4_FIELD_DESC);this.o4.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_table_args implements TBase<drop_table_args,drop_table_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_table_args\");private static final TField DBNAME_FIELD_DESC=new TField(\"dbname\",TType.STRING,(short)1);private static final TField NAME_FIELD_DESC=new TField(\"name\",TType.STRING,(short)2);private static final TField DELETE_DATA_FIELD_DESC=new TField(\"deleteData\",TType.BOOL,(short)3);private String dbname;private String name;private boolean deleteData;public enum _Fields implements TFieldIdEnum{DBNAME((short)1,\"dbname\"),NAME((short)2,\"name\"),DELETE_DATA((short)3,\"deleteData\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DBNAME;case 2: return NAME;case 3: return DELETE_DATA;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __DELETEDATA_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DBNAME,new FieldMetaData(\"dbname\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.NAME,new FieldMetaData(\"name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.DELETE_DATA,new FieldMetaData(\"deleteData\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_table_args.class,metaDataMap);}public drop_table_args(){}public drop_table_args(String dbname,String name,boolean deleteData){this();this.dbname=dbname;this.name=name;this.deleteData=deleteData;setDeleteDataIsSet(true);}public drop_table_args(drop_table_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDbname()){this.dbname=other.dbname;}if(other.isSetName()){this.name=other.name;}this.deleteData=other.deleteData;}public drop_table_args deepCopy(){return new drop_table_args(this);}@Override public void clear(){this.dbname=null;this.name=null;setDeleteDataIsSet(false);this.deleteData=false;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;}public void unsetDbname(){this.dbname=null;}public boolean isSetDbname(){return this.dbname!=null;}public void setDbnameIsSet(boolean value){if(!value){this.dbname=null;}}public String getName(){return this.name;}public void setName(String name){this.name=name;}public void unsetName(){this.name=null;}public boolean isSetName(){return this.name!=null;}public void setNameIsSet(boolean value){if(!value){this.name=null;}}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;setDeleteDataIsSet(true);}public void unsetDeleteData(){__isset_bit_vector.clear(__DELETEDATA_ISSET_ID);}public boolean isSetDeleteData(){return __isset_bit_vector.get(__DELETEDATA_ISSET_ID);}public void setDeleteDataIsSet(boolean value){__isset_bit_vector.set(__DELETEDATA_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DBNAME: if(value==null){unsetDbname();}else{setDbname((String)value);}break;case NAME: if(value==null){unsetName();}else{setName((String)value);}break;case DELETE_DATA: if(value==null){unsetDeleteData();}else{setDeleteData((Boolean)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DBNAME: return getDbname();case NAME: return getName();case DELETE_DATA: return new Boolean(isDeleteData());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DBNAME: return isSetDbname();case NAME: return isSetName();case DELETE_DATA: return isSetDeleteData();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_table_args)return this.equals((drop_table_args)that);return false;}public boolean equals(drop_table_args that){if(that==null)return false;boolean this_present_dbname=true && this.isSetDbname();boolean that_present_dbname=true && that.isSetDbname();if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_name=true && this.isSetName();boolean that_present_name=true && that.isSetName();if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_table_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_table_args typedOther=(drop_table_args)other;lastComparison=Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());if(lastComparison!=0){return lastComparison;}if(isSetDbname()){lastComparison=TBaseHelper.compareTo(this.dbname,typedOther.dbname);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());if(lastComparison!=0){return lastComparison;}if(isSetName()){lastComparison=TBaseHelper.compareTo(this.name,typedOther.name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDeleteData()).compareTo(typedOther.isSetDeleteData());if(lastComparison!=0){return lastComparison;}if(isSetDeleteData()){lastComparison=TBaseHelper.compareTo(this.deleteData,typedOther.deleteData);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();setDeleteDataIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.dbname!=null){oprot.writeFieldBegin(DBNAME_FIELD_DESC);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.name!=null){oprot.writeFieldBegin(NAME_FIELD_DESC);oprot.writeString(this.name);oprot.writeFieldEnd();}oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_table_result implements TBase<drop_table_result,drop_table_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_table_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)2);private NoSuchObjectException o1;private MetaException o3;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O3((short)2,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_table_result.class,metaDataMap);}public drop_table_result(){}public drop_table_result(NoSuchObjectException o1,MetaException o3){this();this.o1=o1;this.o3=o3;}public drop_table_result(drop_table_result other){if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public drop_table_result deepCopy(){return new drop_table_result(this);}@Override public void clear(){this.o1=null;this.o3=null;}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_table_result)return this.equals((drop_table_result)that);return false;}public boolean equals(drop_table_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_table_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_table_result typedOther=(drop_table_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_tables_args implements TBase<get_tables_args,get_tables_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_tables_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField PATTERN_FIELD_DESC=new TField(\"pattern\",TType.STRING,(short)2);private String db_name;private String pattern;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),PATTERN((short)2,\"pattern\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return PATTERN;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PATTERN,new FieldMetaData(\"pattern\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_tables_args.class,metaDataMap);}public get_tables_args(){}public get_tables_args(String db_name,String pattern){this();this.db_name=db_name;this.pattern=pattern;}public get_tables_args(get_tables_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetPattern()){this.pattern=other.pattern;}}public get_tables_args deepCopy(){return new get_tables_args(this);}@Override public void clear(){this.db_name=null;this.pattern=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getPattern(){return this.pattern;}public void setPattern(String pattern){this.pattern=pattern;}public void unsetPattern(){this.pattern=null;}public boolean isSetPattern(){return this.pattern!=null;}public void setPatternIsSet(boolean value){if(!value){this.pattern=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case PATTERN: if(value==null){unsetPattern();}else{setPattern((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case PATTERN: return getPattern();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case PATTERN: return isSetPattern();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_tables_args)return this.equals((get_tables_args)that);return false;}public boolean equals(get_tables_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_pattern=true && this.isSetPattern();boolean that_present_pattern=true && that.isSetPattern();if(this_present_pattern || that_present_pattern){if(!(this_present_pattern && that_present_pattern))return false;if(!this.pattern.equals(that.pattern))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_tables_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_tables_args typedOther=(get_tables_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPattern()).compareTo(typedOther.isSetPattern());if(lastComparison!=0){return lastComparison;}if(isSetPattern()){lastComparison=TBaseHelper.compareTo(this.pattern,typedOther.pattern);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.pattern=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.pattern!=null){oprot.writeFieldBegin(PATTERN_FIELD_DESC);oprot.writeString(this.pattern);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_tables_result implements TBase<get_tables_result,get_tables_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_tables_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_tables_result.class,metaDataMap);}public get_tables_result(){}public get_tables_result(List<String>success,MetaException o1){this();this.success=success;this.o1=o1;}public get_tables_result(get_tables_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public get_tables_result deepCopy(){return new get_tables_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_tables_result)return this.equals((get_tables_result)that);return false;}public boolean equals(get_tables_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_tables_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_tables_result typedOther=(get_tables_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list84=iprot.readListBegin();this.success=new ArrayList<String>(_list84.size);for(int _i85=0;_i85<_list84.size;++_i85){String _elem86;_elem86=iprot.readString();this.success.add(_elem86);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter87 : this.success){oprot.writeString(_iter87);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_all_tables_args implements TBase<get_all_tables_args,get_all_tables_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_all_tables_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private String db_name;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_all_tables_args.class,metaDataMap);}public get_all_tables_args(){}public get_all_tables_args(String db_name){this();this.db_name=db_name;}public get_all_tables_args(get_all_tables_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}}public get_all_tables_args deepCopy(){return new get_all_tables_args(this);}@Override public void clear(){this.db_name=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_all_tables_args)return this.equals((get_all_tables_args)that);return false;}public boolean equals(get_all_tables_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_all_tables_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_all_tables_args typedOther=(get_all_tables_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_all_tables_result implements TBase<get_all_tables_result,get_all_tables_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_all_tables_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_all_tables_result.class,metaDataMap);}public get_all_tables_result(){}public get_all_tables_result(List<String>success,MetaException o1){this();this.success=success;this.o1=o1;}public get_all_tables_result(get_all_tables_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public get_all_tables_result deepCopy(){return new get_all_tables_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_all_tables_result)return this.equals((get_all_tables_result)that);return false;}public boolean equals(get_all_tables_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_all_tables_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_all_tables_result typedOther=(get_all_tables_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list88=iprot.readListBegin();this.success=new ArrayList<String>(_list88.size);for(int _i89=0;_i89<_list88.size;++_i89){String _elem90;_elem90=iprot.readString();this.success.add(_elem90);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter91 : this.success){oprot.writeString(_iter91);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_table_args implements TBase<get_table_args,get_table_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_table_args\");private static final TField DBNAME_FIELD_DESC=new TField(\"dbname\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private String dbname;private String tbl_name;public enum _Fields implements TFieldIdEnum{DBNAME((short)1,\"dbname\"),TBL_NAME((short)2,\"tbl_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DBNAME;case 2: return TBL_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DBNAME,new FieldMetaData(\"dbname\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_table_args.class,metaDataMap);}public get_table_args(){}public get_table_args(String dbname,String tbl_name){this();this.dbname=dbname;this.tbl_name=tbl_name;}public get_table_args(get_table_args other){if(other.isSetDbname()){this.dbname=other.dbname;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}}public get_table_args deepCopy(){return new get_table_args(this);}@Override public void clear(){this.dbname=null;this.tbl_name=null;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;}public void unsetDbname(){this.dbname=null;}public boolean isSetDbname(){return this.dbname!=null;}public void setDbnameIsSet(boolean value){if(!value){this.dbname=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DBNAME: if(value==null){unsetDbname();}else{setDbname((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DBNAME: return getDbname();case TBL_NAME: return getTbl_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DBNAME: return isSetDbname();case TBL_NAME: return isSetTbl_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_table_args)return this.equals((get_table_args)that);return false;}public boolean equals(get_table_args that){if(that==null)return false;boolean this_present_dbname=true && this.isSetDbname();boolean that_present_dbname=true && that.isSetDbname();if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_table_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_table_args typedOther=(get_table_args)other;lastComparison=Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());if(lastComparison!=0){return lastComparison;}if(isSetDbname()){lastComparison=TBaseHelper.compareTo(this.dbname,typedOther.dbname);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.dbname!=null){oprot.writeFieldBegin(DBNAME_FIELD_DESC);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_table_result implements TBase<get_table_result,get_table_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_table_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private Table success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Table.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_table_result.class,metaDataMap);}public get_table_result(){}public get_table_result(Table success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_table_result(get_table_result other){if(other.isSetSuccess()){this.success=new Table(other.success);}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public get_table_result deepCopy(){return new get_table_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public Table getSuccess(){return this.success;}public void setSuccess(Table success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Table)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_table_result)return this.equals((get_table_result)that);return false;}public boolean equals(get_table_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_table_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_table_result typedOther=(get_table_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Table();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class alter_table_args implements TBase<alter_table_args,alter_table_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"alter_table_args\");private static final TField DBNAME_FIELD_DESC=new TField(\"dbname\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField NEW_TBL_FIELD_DESC=new TField(\"new_tbl\",TType.STRUCT,(short)3);private String dbname;private String tbl_name;private Table new_tbl;public enum _Fields implements TFieldIdEnum{DBNAME((short)1,\"dbname\"),TBL_NAME((short)2,\"tbl_name\"),NEW_TBL((short)3,\"new_tbl\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DBNAME;case 2: return TBL_NAME;case 3: return NEW_TBL;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DBNAME,new FieldMetaData(\"dbname\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.NEW_TBL,new FieldMetaData(\"new_tbl\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Table.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(alter_table_args.class,metaDataMap);}public alter_table_args(){}public alter_table_args(String dbname,String tbl_name,Table new_tbl){this();this.dbname=dbname;this.tbl_name=tbl_name;this.new_tbl=new_tbl;}public alter_table_args(alter_table_args other){if(other.isSetDbname()){this.dbname=other.dbname;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetNew_tbl()){this.new_tbl=new Table(other.new_tbl);}}public alter_table_args deepCopy(){return new alter_table_args(this);}@Override public void clear(){this.dbname=null;this.tbl_name=null;this.new_tbl=null;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;}public void unsetDbname(){this.dbname=null;}public boolean isSetDbname(){return this.dbname!=null;}public void setDbnameIsSet(boolean value){if(!value){this.dbname=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public Table getNew_tbl(){return this.new_tbl;}public void setNew_tbl(Table new_tbl){this.new_tbl=new_tbl;}public void unsetNew_tbl(){this.new_tbl=null;}public boolean isSetNew_tbl(){return this.new_tbl!=null;}public void setNew_tblIsSet(boolean value){if(!value){this.new_tbl=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DBNAME: if(value==null){unsetDbname();}else{setDbname((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case NEW_TBL: if(value==null){unsetNew_tbl();}else{setNew_tbl((Table)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DBNAME: return getDbname();case TBL_NAME: return getTbl_name();case NEW_TBL: return getNew_tbl();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DBNAME: return isSetDbname();case TBL_NAME: return isSetTbl_name();case NEW_TBL: return isSetNew_tbl();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_table_args)return this.equals((alter_table_args)that);return false;}public boolean equals(alter_table_args that){if(that==null)return false;boolean this_present_dbname=true && this.isSetDbname();boolean that_present_dbname=true && that.isSetDbname();if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_new_tbl=true && this.isSetNew_tbl();boolean that_present_new_tbl=true && that.isSetNew_tbl();if(this_present_new_tbl || that_present_new_tbl){if(!(this_present_new_tbl && that_present_new_tbl))return false;if(!this.new_tbl.equals(that.new_tbl))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(alter_table_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;alter_table_args typedOther=(alter_table_args)other;lastComparison=Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());if(lastComparison!=0){return lastComparison;}if(isSetDbname()){lastComparison=TBaseHelper.compareTo(this.dbname,typedOther.dbname);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetNew_tbl()).compareTo(typedOther.isSetNew_tbl());if(lastComparison!=0){return lastComparison;}if(isSetNew_tbl()){lastComparison=TBaseHelper.compareTo(this.new_tbl,typedOther.new_tbl);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.new_tbl=new Table();this.new_tbl.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.dbname!=null){oprot.writeFieldBegin(DBNAME_FIELD_DESC);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.new_tbl!=null){oprot.writeFieldBegin(NEW_TBL_FIELD_DESC);this.new_tbl.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class alter_table_result implements TBase<alter_table_result,alter_table_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"alter_table_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private InvalidOperationException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(alter_table_result.class,metaDataMap);}public alter_table_result(){}public alter_table_result(InvalidOperationException o1,MetaException o2){this();this.o1=o1;this.o2=o2;}public alter_table_result(alter_table_result other){if(other.isSetO1()){this.o1=new InvalidOperationException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public alter_table_result deepCopy(){return new alter_table_result(this);}@Override public void clear(){this.o1=null;this.o2=null;}public InvalidOperationException getO1(){return this.o1;}public void setO1(InvalidOperationException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((InvalidOperationException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_table_result)return this.equals((alter_table_result)that);return false;}public boolean equals(alter_table_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(alter_table_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;alter_table_result typedOther=(alter_table_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new InvalidOperationException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class add_partition_args implements TBase<add_partition_args,add_partition_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"add_partition_args\");private static final TField NEW_PART_FIELD_DESC=new TField(\"new_part\",TType.STRUCT,(short)1);private Partition new_part;public enum _Fields implements TFieldIdEnum{NEW_PART((short)1,\"new_part\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NEW_PART;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NEW_PART,new FieldMetaData(\"new_part\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(add_partition_args.class,metaDataMap);}public add_partition_args(){}public add_partition_args(Partition new_part){this();this.new_part=new_part;}public add_partition_args(add_partition_args other){if(other.isSetNew_part()){this.new_part=new Partition(other.new_part);}}public add_partition_args deepCopy(){return new add_partition_args(this);}@Override public void clear(){this.new_part=null;}public Partition getNew_part(){return this.new_part;}public void setNew_part(Partition new_part){this.new_part=new_part;}public void unsetNew_part(){this.new_part=null;}public boolean isSetNew_part(){return this.new_part!=null;}public void setNew_partIsSet(boolean value){if(!value){this.new_part=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case NEW_PART: if(value==null){unsetNew_part();}else{setNew_part((Partition)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NEW_PART: return getNew_part();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NEW_PART: return isSetNew_part();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof add_partition_args)return this.equals((add_partition_args)that);return false;}public boolean equals(add_partition_args that){if(that==null)return false;boolean this_present_new_part=true && this.isSetNew_part();boolean that_present_new_part=true && that.isSetNew_part();if(this_present_new_part || that_present_new_part){if(!(this_present_new_part && that_present_new_part))return false;if(!this.new_part.equals(that.new_part))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(add_partition_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;add_partition_args typedOther=(add_partition_args)other;lastComparison=Boolean.valueOf(isSetNew_part()).compareTo(typedOther.isSetNew_part());if(lastComparison!=0){return lastComparison;}if(isSetNew_part()){lastComparison=TBaseHelper.compareTo(this.new_part,typedOther.new_part);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.new_part=new Partition();this.new_part.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.new_part!=null){oprot.writeFieldBegin(NEW_PART_FIELD_DESC);this.new_part.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class add_partition_result implements TBase<add_partition_result,add_partition_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"add_partition_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private Partition success;private InvalidObjectException o1;private AlreadyExistsException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(add_partition_result.class,metaDataMap);}public add_partition_result(){}public add_partition_result(Partition success,InvalidObjectException o1,AlreadyExistsException o2,MetaException o3){this();this.success=success;this.o1=o1;this.o2=o2;this.o3=o3;}public add_partition_result(add_partition_result other){if(other.isSetSuccess()){this.success=new Partition(other.success);}if(other.isSetO1()){this.o1=new InvalidObjectException(other.o1);}if(other.isSetO2()){this.o2=new AlreadyExistsException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public add_partition_result deepCopy(){return new add_partition_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;this.o3=null;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public InvalidObjectException getO1(){return this.o1;}public void setO1(InvalidObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public AlreadyExistsException getO2(){return this.o2;}public void setO2(AlreadyExistsException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Partition)value);}break;case O1: if(value==null){unsetO1();}else{setO1((InvalidObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((AlreadyExistsException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof add_partition_result)return this.equals((add_partition_result)that);return false;}public boolean equals(add_partition_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(add_partition_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;add_partition_result typedOther=(add_partition_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new AlreadyExistsException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class append_partition_args implements TBase<append_partition_args,append_partition_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"append_partition_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_VALS_FIELD_DESC=new TField(\"part_vals\",TType.LIST,(short)3);private String db_name;private String tbl_name;private List<String>part_vals;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_VALS((short)3,\"part_vals\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_VALS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_VALS,new FieldMetaData(\"part_vals\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(append_partition_args.class,metaDataMap);}public append_partition_args(){}public append_partition_args(String db_name,String tbl_name,List<String>part_vals){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;}public append_partition_args(append_partition_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_vals()){List<String>__this__part_vals=new ArrayList<String>();for(String other_element : other.part_vals){__this__part_vals.add(other_element);}this.part_vals=__this__part_vals;}}public append_partition_args deepCopy(){return new append_partition_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_vals=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;}public void unsetPart_vals(){this.part_vals=null;}public boolean isSetPart_vals(){return this.part_vals!=null;}public void setPart_valsIsSet(boolean value){if(!value){this.part_vals=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_VALS: if(value==null){unsetPart_vals();}else{setPart_vals((List<String>)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_VALS: return getPart_vals();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_VALS: return isSetPart_vals();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof append_partition_args)return this.equals((append_partition_args)that);return false;}public boolean equals(append_partition_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true && this.isSetPart_vals();boolean that_present_part_vals=true && that.isSetPart_vals();if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(append_partition_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;append_partition_args typedOther=(append_partition_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_vals()).compareTo(typedOther.isSetPart_vals());if(lastComparison!=0){return lastComparison;}if(isSetPart_vals()){lastComparison=TBaseHelper.compareTo(this.part_vals,typedOther.part_vals);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list92=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list92.size);for(int _i93=0;_i93<_list92.size;++_i93){String _elem94;_elem94=iprot.readString();this.part_vals.add(_elem94);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){oprot.writeFieldBegin(PART_VALS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter95 : this.part_vals){oprot.writeString(_iter95);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class append_partition_result implements TBase<append_partition_result,append_partition_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"append_partition_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private Partition success;private InvalidObjectException o1;private AlreadyExistsException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(append_partition_result.class,metaDataMap);}public append_partition_result(){}public append_partition_result(Partition success,InvalidObjectException o1,AlreadyExistsException o2,MetaException o3){this();this.success=success;this.o1=o1;this.o2=o2;this.o3=o3;}public append_partition_result(append_partition_result other){if(other.isSetSuccess()){this.success=new Partition(other.success);}if(other.isSetO1()){this.o1=new InvalidObjectException(other.o1);}if(other.isSetO2()){this.o2=new AlreadyExistsException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public append_partition_result deepCopy(){return new append_partition_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;this.o3=null;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public InvalidObjectException getO1(){return this.o1;}public void setO1(InvalidObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public AlreadyExistsException getO2(){return this.o2;}public void setO2(AlreadyExistsException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Partition)value);}break;case O1: if(value==null){unsetO1();}else{setO1((InvalidObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((AlreadyExistsException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof append_partition_result)return this.equals((append_partition_result)that);return false;}public boolean equals(append_partition_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(append_partition_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;append_partition_result typedOther=(append_partition_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new AlreadyExistsException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class append_partition_by_name_args implements TBase<append_partition_by_name_args,append_partition_by_name_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"append_partition_by_name_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_NAME_FIELD_DESC=new TField(\"part_name\",TType.STRING,(short)3);private String db_name;private String tbl_name;private String part_name;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_NAME((short)3,\"part_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_NAME,new FieldMetaData(\"part_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(append_partition_by_name_args.class,metaDataMap);}public append_partition_by_name_args(){}public append_partition_by_name_args(String db_name,String tbl_name,String part_name){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_name=part_name;}public append_partition_by_name_args(append_partition_by_name_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_name()){this.part_name=other.part_name;}}public append_partition_by_name_args deepCopy(){return new append_partition_by_name_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_name=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public String getPart_name(){return this.part_name;}public void setPart_name(String part_name){this.part_name=part_name;}public void unsetPart_name(){this.part_name=null;}public boolean isSetPart_name(){return this.part_name!=null;}public void setPart_nameIsSet(boolean value){if(!value){this.part_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_NAME: if(value==null){unsetPart_name();}else{setPart_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_NAME: return getPart_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_NAME: return isSetPart_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof append_partition_by_name_args)return this.equals((append_partition_by_name_args)that);return false;}public boolean equals(append_partition_by_name_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_name=true && this.isSetPart_name();boolean that_present_part_name=true && that.isSetPart_name();if(this_present_part_name || that_present_part_name){if(!(this_present_part_name && that_present_part_name))return false;if(!this.part_name.equals(that.part_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(append_partition_by_name_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;append_partition_by_name_args typedOther=(append_partition_by_name_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_name()).compareTo(typedOther.isSetPart_name());if(lastComparison!=0){return lastComparison;}if(isSetPart_name()){lastComparison=TBaseHelper.compareTo(this.part_name,typedOther.part_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.part_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_name!=null){oprot.writeFieldBegin(PART_NAME_FIELD_DESC);oprot.writeString(this.part_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class append_partition_by_name_result implements TBase<append_partition_by_name_result,append_partition_by_name_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"append_partition_by_name_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private Partition success;private InvalidObjectException o1;private AlreadyExistsException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(append_partition_by_name_result.class,metaDataMap);}public append_partition_by_name_result(){}public append_partition_by_name_result(Partition success,InvalidObjectException o1,AlreadyExistsException o2,MetaException o3){this();this.success=success;this.o1=o1;this.o2=o2;this.o3=o3;}public append_partition_by_name_result(append_partition_by_name_result other){if(other.isSetSuccess()){this.success=new Partition(other.success);}if(other.isSetO1()){this.o1=new InvalidObjectException(other.o1);}if(other.isSetO2()){this.o2=new AlreadyExistsException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public append_partition_by_name_result deepCopy(){return new append_partition_by_name_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;this.o3=null;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public InvalidObjectException getO1(){return this.o1;}public void setO1(InvalidObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public AlreadyExistsException getO2(){return this.o2;}public void setO2(AlreadyExistsException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Partition)value);}break;case O1: if(value==null){unsetO1();}else{setO1((InvalidObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((AlreadyExistsException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof append_partition_by_name_result)return this.equals((append_partition_by_name_result)that);return false;}public boolean equals(append_partition_by_name_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(append_partition_by_name_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;append_partition_by_name_result typedOther=(append_partition_by_name_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new AlreadyExistsException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_partition_args implements TBase<drop_partition_args,drop_partition_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_partition_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_VALS_FIELD_DESC=new TField(\"part_vals\",TType.LIST,(short)3);private static final TField DELETE_DATA_FIELD_DESC=new TField(\"deleteData\",TType.BOOL,(short)4);private String db_name;private String tbl_name;private List<String>part_vals;private boolean deleteData;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_VALS((short)3,\"part_vals\"),DELETE_DATA((short)4,\"deleteData\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_VALS;case 4: return DELETE_DATA;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __DELETEDATA_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_VALS,new FieldMetaData(\"part_vals\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.DELETE_DATA,new FieldMetaData(\"deleteData\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_partition_args.class,metaDataMap);}public drop_partition_args(){}public drop_partition_args(String db_name,String tbl_name,List<String>part_vals,boolean deleteData){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;this.deleteData=deleteData;setDeleteDataIsSet(true);}public drop_partition_args(drop_partition_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_vals()){List<String>__this__part_vals=new ArrayList<String>();for(String other_element : other.part_vals){__this__part_vals.add(other_element);}this.part_vals=__this__part_vals;}this.deleteData=other.deleteData;}public drop_partition_args deepCopy(){return new drop_partition_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_vals=null;setDeleteDataIsSet(false);this.deleteData=false;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;}public void unsetPart_vals(){this.part_vals=null;}public boolean isSetPart_vals(){return this.part_vals!=null;}public void setPart_valsIsSet(boolean value){if(!value){this.part_vals=null;}}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;setDeleteDataIsSet(true);}public void unsetDeleteData(){__isset_bit_vector.clear(__DELETEDATA_ISSET_ID);}public boolean isSetDeleteData(){return __isset_bit_vector.get(__DELETEDATA_ISSET_ID);}public void setDeleteDataIsSet(boolean value){__isset_bit_vector.set(__DELETEDATA_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_VALS: if(value==null){unsetPart_vals();}else{setPart_vals((List<String>)value);}break;case DELETE_DATA: if(value==null){unsetDeleteData();}else{setDeleteData((Boolean)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_VALS: return getPart_vals();case DELETE_DATA: return new Boolean(isDeleteData());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_VALS: return isSetPart_vals();case DELETE_DATA: return isSetDeleteData();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_partition_args)return this.equals((drop_partition_args)that);return false;}public boolean equals(drop_partition_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true && this.isSetPart_vals();boolean that_present_part_vals=true && that.isSetPart_vals();if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_partition_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_partition_args typedOther=(drop_partition_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_vals()).compareTo(typedOther.isSetPart_vals());if(lastComparison!=0){return lastComparison;}if(isSetPart_vals()){lastComparison=TBaseHelper.compareTo(this.part_vals,typedOther.part_vals);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDeleteData()).compareTo(typedOther.isSetDeleteData());if(lastComparison!=0){return lastComparison;}if(isSetDeleteData()){lastComparison=TBaseHelper.compareTo(this.deleteData,typedOther.deleteData);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list96=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list96.size);for(int _i97=0;_i97<_list96.size;++_i97){String _elem98;_elem98=iprot.readString();this.part_vals.add(_elem98);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();setDeleteDataIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){oprot.writeFieldBegin(PART_VALS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter99 : this.part_vals){oprot.writeString(_iter99);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_partition_result implements TBase<drop_partition_result,drop_partition_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_partition_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.BOOL,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private boolean success;private NoSuchObjectException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __SUCCESS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_partition_result.class,metaDataMap);}public drop_partition_result(){}public drop_partition_result(boolean success,NoSuchObjectException o1,MetaException o2){this();this.success=success;setSuccessIsSet(true);this.o1=o1;this.o2=o2;}public drop_partition_result(drop_partition_result other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);this.success=other.success;if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public drop_partition_result deepCopy(){return new drop_partition_result(this);}@Override public void clear(){setSuccessIsSet(false);this.success=false;this.o1=null;this.o2=null;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;setSuccessIsSet(true);}public void unsetSuccess(){__isset_bit_vector.clear(__SUCCESS_ISSET_ID);}public boolean isSetSuccess(){return __isset_bit_vector.get(__SUCCESS_ISSET_ID);}public void setSuccessIsSet(boolean value){__isset_bit_vector.set(__SUCCESS_ISSET_ID,value);}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Boolean)value);}break;case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return new Boolean(isSuccess());case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_partition_result)return this.equals((drop_partition_result)that);return false;}public boolean equals(drop_partition_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_partition_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_partition_result typedOther=(drop_partition_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();setSuccessIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_partition_by_name_args implements TBase<drop_partition_by_name_args,drop_partition_by_name_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_partition_by_name_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_NAME_FIELD_DESC=new TField(\"part_name\",TType.STRING,(short)3);private static final TField DELETE_DATA_FIELD_DESC=new TField(\"deleteData\",TType.BOOL,(short)4);private String db_name;private String tbl_name;private String part_name;private boolean deleteData;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_NAME((short)3,\"part_name\"),DELETE_DATA((short)4,\"deleteData\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_NAME;case 4: return DELETE_DATA;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __DELETEDATA_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_NAME,new FieldMetaData(\"part_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.DELETE_DATA,new FieldMetaData(\"deleteData\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_partition_by_name_args.class,metaDataMap);}public drop_partition_by_name_args(){}public drop_partition_by_name_args(String db_name,String tbl_name,String part_name,boolean deleteData){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_name=part_name;this.deleteData=deleteData;setDeleteDataIsSet(true);}public drop_partition_by_name_args(drop_partition_by_name_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_name()){this.part_name=other.part_name;}this.deleteData=other.deleteData;}public drop_partition_by_name_args deepCopy(){return new drop_partition_by_name_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_name=null;setDeleteDataIsSet(false);this.deleteData=false;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public String getPart_name(){return this.part_name;}public void setPart_name(String part_name){this.part_name=part_name;}public void unsetPart_name(){this.part_name=null;}public boolean isSetPart_name(){return this.part_name!=null;}public void setPart_nameIsSet(boolean value){if(!value){this.part_name=null;}}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;setDeleteDataIsSet(true);}public void unsetDeleteData(){__isset_bit_vector.clear(__DELETEDATA_ISSET_ID);}public boolean isSetDeleteData(){return __isset_bit_vector.get(__DELETEDATA_ISSET_ID);}public void setDeleteDataIsSet(boolean value){__isset_bit_vector.set(__DELETEDATA_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_NAME: if(value==null){unsetPart_name();}else{setPart_name((String)value);}break;case DELETE_DATA: if(value==null){unsetDeleteData();}else{setDeleteData((Boolean)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_NAME: return getPart_name();case DELETE_DATA: return new Boolean(isDeleteData());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_NAME: return isSetPart_name();case DELETE_DATA: return isSetDeleteData();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_partition_by_name_args)return this.equals((drop_partition_by_name_args)that);return false;}public boolean equals(drop_partition_by_name_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_name=true && this.isSetPart_name();boolean that_present_part_name=true && that.isSetPart_name();if(this_present_part_name || that_present_part_name){if(!(this_present_part_name && that_present_part_name))return false;if(!this.part_name.equals(that.part_name))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_partition_by_name_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_partition_by_name_args typedOther=(drop_partition_by_name_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_name()).compareTo(typedOther.isSetPart_name());if(lastComparison!=0){return lastComparison;}if(isSetPart_name()){lastComparison=TBaseHelper.compareTo(this.part_name,typedOther.part_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDeleteData()).compareTo(typedOther.isSetDeleteData());if(lastComparison!=0){return lastComparison;}if(isSetDeleteData()){lastComparison=TBaseHelper.compareTo(this.deleteData,typedOther.deleteData);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.part_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();setDeleteDataIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_name!=null){oprot.writeFieldBegin(PART_NAME_FIELD_DESC);oprot.writeString(this.part_name);oprot.writeFieldEnd();}oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_partition_by_name_result implements TBase<drop_partition_by_name_result,drop_partition_by_name_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_partition_by_name_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.BOOL,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private boolean success;private NoSuchObjectException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __SUCCESS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_partition_by_name_result.class,metaDataMap);}public drop_partition_by_name_result(){}public drop_partition_by_name_result(boolean success,NoSuchObjectException o1,MetaException o2){this();this.success=success;setSuccessIsSet(true);this.o1=o1;this.o2=o2;}public drop_partition_by_name_result(drop_partition_by_name_result other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);this.success=other.success;if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public drop_partition_by_name_result deepCopy(){return new drop_partition_by_name_result(this);}@Override public void clear(){setSuccessIsSet(false);this.success=false;this.o1=null;this.o2=null;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;setSuccessIsSet(true);}public void unsetSuccess(){__isset_bit_vector.clear(__SUCCESS_ISSET_ID);}public boolean isSetSuccess(){return __isset_bit_vector.get(__SUCCESS_ISSET_ID);}public void setSuccessIsSet(boolean value){__isset_bit_vector.set(__SUCCESS_ISSET_ID,value);}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Boolean)value);}break;case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return new Boolean(isSuccess());case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_partition_by_name_result)return this.equals((drop_partition_by_name_result)that);return false;}public boolean equals(drop_partition_by_name_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_partition_by_name_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_partition_by_name_result typedOther=(drop_partition_by_name_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();setSuccessIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_args implements TBase<get_partition_args,get_partition_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_VALS_FIELD_DESC=new TField(\"part_vals\",TType.LIST,(short)3);private String db_name;private String tbl_name;private List<String>part_vals;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_VALS((short)3,\"part_vals\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_VALS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_VALS,new FieldMetaData(\"part_vals\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_args.class,metaDataMap);}public get_partition_args(){}public get_partition_args(String db_name,String tbl_name,List<String>part_vals){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;}public get_partition_args(get_partition_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_vals()){List<String>__this__part_vals=new ArrayList<String>();for(String other_element : other.part_vals){__this__part_vals.add(other_element);}this.part_vals=__this__part_vals;}}public get_partition_args deepCopy(){return new get_partition_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_vals=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;}public void unsetPart_vals(){this.part_vals=null;}public boolean isSetPart_vals(){return this.part_vals!=null;}public void setPart_valsIsSet(boolean value){if(!value){this.part_vals=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_VALS: if(value==null){unsetPart_vals();}else{setPart_vals((List<String>)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_VALS: return getPart_vals();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_VALS: return isSetPart_vals();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_args)return this.equals((get_partition_args)that);return false;}public boolean equals(get_partition_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true && this.isSetPart_vals();boolean that_present_part_vals=true && that.isSetPart_vals();if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_args typedOther=(get_partition_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_vals()).compareTo(typedOther.isSetPart_vals());if(lastComparison!=0){return lastComparison;}if(isSetPart_vals()){lastComparison=TBaseHelper.compareTo(this.part_vals,typedOther.part_vals);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list100=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list100.size);for(int _i101=0;_i101<_list100.size;++_i101){String _elem102;_elem102=iprot.readString();this.part_vals.add(_elem102);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){oprot.writeFieldBegin(PART_VALS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter103 : this.part_vals){oprot.writeString(_iter103);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_result implements TBase<get_partition_result,get_partition_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private Partition success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_result.class,metaDataMap);}public get_partition_result(){}public get_partition_result(Partition success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_partition_result(get_partition_result other){if(other.isSetSuccess()){this.success=new Partition(other.success);}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public get_partition_result deepCopy(){return new get_partition_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Partition)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_result)return this.equals((get_partition_result)that);return false;}public boolean equals(get_partition_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_result typedOther=(get_partition_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_by_name_args implements TBase<get_partition_by_name_args,get_partition_by_name_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_by_name_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_NAME_FIELD_DESC=new TField(\"part_name\",TType.STRING,(short)3);private String db_name;private String tbl_name;private String part_name;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_NAME((short)3,\"part_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_NAME,new FieldMetaData(\"part_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_by_name_args.class,metaDataMap);}public get_partition_by_name_args(){}public get_partition_by_name_args(String db_name,String tbl_name,String part_name){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_name=part_name;}public get_partition_by_name_args(get_partition_by_name_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_name()){this.part_name=other.part_name;}}public get_partition_by_name_args deepCopy(){return new get_partition_by_name_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_name=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public String getPart_name(){return this.part_name;}public void setPart_name(String part_name){this.part_name=part_name;}public void unsetPart_name(){this.part_name=null;}public boolean isSetPart_name(){return this.part_name!=null;}public void setPart_nameIsSet(boolean value){if(!value){this.part_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_NAME: if(value==null){unsetPart_name();}else{setPart_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_NAME: return getPart_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_NAME: return isSetPart_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_by_name_args)return this.equals((get_partition_by_name_args)that);return false;}public boolean equals(get_partition_by_name_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_name=true && this.isSetPart_name();boolean that_present_part_name=true && that.isSetPart_name();if(this_present_part_name || that_present_part_name){if(!(this_present_part_name && that_present_part_name))return false;if(!this.part_name.equals(that.part_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_by_name_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_by_name_args typedOther=(get_partition_by_name_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_name()).compareTo(typedOther.isSetPart_name());if(lastComparison!=0){return lastComparison;}if(isSetPart_name()){lastComparison=TBaseHelper.compareTo(this.part_name,typedOther.part_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.part_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_name!=null){oprot.writeFieldBegin(PART_NAME_FIELD_DESC);oprot.writeString(this.part_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_by_name_result implements TBase<get_partition_by_name_result,get_partition_by_name_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_by_name_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private Partition success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_by_name_result.class,metaDataMap);}public get_partition_by_name_result(){}public get_partition_by_name_result(Partition success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_partition_by_name_result(get_partition_by_name_result other){if(other.isSetSuccess()){this.success=new Partition(other.success);}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public get_partition_by_name_result deepCopy(){return new get_partition_by_name_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public Partition getSuccess(){return this.success;}public void setSuccess(Partition success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Partition)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_by_name_result)return this.equals((get_partition_by_name_result)that);return false;}public boolean equals(get_partition_by_name_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_by_name_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_by_name_result typedOther=(get_partition_by_name_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Partition();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partitions_args implements TBase<get_partitions_args,get_partitions_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partitions_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField MAX_PARTS_FIELD_DESC=new TField(\"max_parts\",TType.I16,(short)3);private String db_name;private String tbl_name;private short max_parts;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),MAX_PARTS((short)3,\"max_parts\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return MAX_PARTS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_PARTS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.MAX_PARTS,new FieldMetaData(\"max_parts\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partitions_args.class,metaDataMap);}public get_partitions_args(){this.max_parts=(short)-1;}public get_partitions_args(String db_name,String tbl_name,short max_parts){this();this.db_name=db_name;this.tbl_name=tbl_name;this.max_parts=max_parts;setMax_partsIsSet(true);}public get_partitions_args(get_partitions_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}this.max_parts=other.max_parts;}public get_partitions_args deepCopy(){return new get_partitions_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.max_parts=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public short getMax_parts(){return this.max_parts;}public void setMax_parts(short max_parts){this.max_parts=max_parts;setMax_partsIsSet(true);}public void unsetMax_parts(){__isset_bit_vector.clear(__MAX_PARTS_ISSET_ID);}public boolean isSetMax_parts(){return __isset_bit_vector.get(__MAX_PARTS_ISSET_ID);}public void setMax_partsIsSet(boolean value){__isset_bit_vector.set(__MAX_PARTS_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case MAX_PARTS: if(value==null){unsetMax_parts();}else{setMax_parts((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case MAX_PARTS: return new Short(getMax_parts());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case MAX_PARTS: return isSetMax_parts();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_args)return this.equals((get_partitions_args)that);return false;}public boolean equals(get_partitions_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_max_parts=true;boolean that_present_max_parts=true;if(this_present_max_parts || that_present_max_parts){if(!(this_present_max_parts && that_present_max_parts))return false;if(this.max_parts!=that.max_parts)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partitions_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partitions_args typedOther=(get_partitions_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_parts()).compareTo(typedOther.isSetMax_parts());if(lastComparison!=0){return lastComparison;}if(isSetMax_parts()){lastComparison=TBaseHelper.compareTo(this.max_parts,typedOther.max_parts);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.I16){this.max_parts=iprot.readI16();setMax_partsIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);oprot.writeI16(this.max_parts);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partitions_result implements TBase<get_partitions_result,get_partitions_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partitions_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private List<Partition>success;private NoSuchObjectException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new StructMetaData(TType.STRUCT,Partition.class))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partitions_result.class,metaDataMap);}public get_partitions_result(){}public get_partitions_result(List<Partition>success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_partitions_result(get_partitions_result other){if(other.isSetSuccess()){List<Partition>__this__success=new ArrayList<Partition>();for(Partition other_element : other.success){__this__success.add(new Partition(other_element));}this.success=__this__success;}if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public get_partitions_result deepCopy(){return new get_partitions_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<Partition>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(Partition elem){if(this.success==null){this.success=new ArrayList<Partition>();}this.success.add(elem);}public List<Partition>getSuccess(){return this.success;}public void setSuccess(List<Partition>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<Partition>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_result)return this.equals((get_partitions_result)that);return false;}public boolean equals(get_partitions_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partitions_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partitions_result typedOther=(get_partitions_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list104=iprot.readListBegin();this.success=new ArrayList<Partition>(_list104.size);for(int _i105=0;_i105<_list104.size;++_i105){Partition _elem106;_elem106=new Partition();_elem106.read(iprot);this.success.add(_elem106);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(Partition _iter107 : this.success){_iter107.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_names_args implements TBase<get_partition_names_args,get_partition_names_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_names_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField MAX_PARTS_FIELD_DESC=new TField(\"max_parts\",TType.I16,(short)3);private String db_name;private String tbl_name;private short max_parts;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),MAX_PARTS((short)3,\"max_parts\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return MAX_PARTS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_PARTS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.MAX_PARTS,new FieldMetaData(\"max_parts\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_names_args.class,metaDataMap);}public get_partition_names_args(){this.max_parts=(short)-1;}public get_partition_names_args(String db_name,String tbl_name,short max_parts){this();this.db_name=db_name;this.tbl_name=tbl_name;this.max_parts=max_parts;setMax_partsIsSet(true);}public get_partition_names_args(get_partition_names_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}this.max_parts=other.max_parts;}public get_partition_names_args deepCopy(){return new get_partition_names_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.max_parts=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public short getMax_parts(){return this.max_parts;}public void setMax_parts(short max_parts){this.max_parts=max_parts;setMax_partsIsSet(true);}public void unsetMax_parts(){__isset_bit_vector.clear(__MAX_PARTS_ISSET_ID);}public boolean isSetMax_parts(){return __isset_bit_vector.get(__MAX_PARTS_ISSET_ID);}public void setMax_partsIsSet(boolean value){__isset_bit_vector.set(__MAX_PARTS_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case MAX_PARTS: if(value==null){unsetMax_parts();}else{setMax_parts((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case MAX_PARTS: return new Short(getMax_parts());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case MAX_PARTS: return isSetMax_parts();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_names_args)return this.equals((get_partition_names_args)that);return false;}public boolean equals(get_partition_names_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_max_parts=true;boolean that_present_max_parts=true;if(this_present_max_parts || that_present_max_parts){if(!(this_present_max_parts && that_present_max_parts))return false;if(this.max_parts!=that.max_parts)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_names_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_names_args typedOther=(get_partition_names_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_parts()).compareTo(typedOther.isSetMax_parts());if(lastComparison!=0){return lastComparison;}if(isSetMax_parts()){lastComparison=TBaseHelper.compareTo(this.max_parts,typedOther.max_parts);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.I16){this.max_parts=iprot.readI16();setMax_partsIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);oprot.writeI16(this.max_parts);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_names_result implements TBase<get_partition_names_result,get_partition_names_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_names_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)1);private List<String>success;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O2((short)1,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_names_result.class,metaDataMap);}public get_partition_names_result(){}public get_partition_names_result(List<String>success,MetaException o2){this();this.success=success;this.o2=o2;}public get_partition_names_result(get_partition_names_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public get_partition_names_result deepCopy(){return new get_partition_names_result(this);}@Override public void clear(){this.success=null;this.o2=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_names_result)return this.equals((get_partition_names_result)that);return false;}public boolean equals(get_partition_names_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_names_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_names_result typedOther=(get_partition_names_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list108=iprot.readListBegin();this.success=new ArrayList<String>(_list108.size);for(int _i109=0;_i109<_list108.size;++_i109){String _elem110;_elem110=iprot.readString();this.success.add(_elem110);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter111 : this.success){oprot.writeString(_iter111);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partitions_ps_args implements TBase<get_partitions_ps_args,get_partitions_ps_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partitions_ps_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_VALS_FIELD_DESC=new TField(\"part_vals\",TType.LIST,(short)3);private static final TField MAX_PARTS_FIELD_DESC=new TField(\"max_parts\",TType.I16,(short)4);private String db_name;private String tbl_name;private List<String>part_vals;private short max_parts;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_VALS((short)3,\"part_vals\"),MAX_PARTS((short)4,\"max_parts\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_VALS;case 4: return MAX_PARTS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_PARTS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_VALS,new FieldMetaData(\"part_vals\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.MAX_PARTS,new FieldMetaData(\"max_parts\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partitions_ps_args.class,metaDataMap);}public get_partitions_ps_args(){this.max_parts=(short)-1;}public get_partitions_ps_args(String db_name,String tbl_name,List<String>part_vals,short max_parts){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;this.max_parts=max_parts;setMax_partsIsSet(true);}public get_partitions_ps_args(get_partitions_ps_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_vals()){List<String>__this__part_vals=new ArrayList<String>();for(String other_element : other.part_vals){__this__part_vals.add(other_element);}this.part_vals=__this__part_vals;}this.max_parts=other.max_parts;}public get_partitions_ps_args deepCopy(){return new get_partitions_ps_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_vals=null;this.max_parts=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;}public void unsetPart_vals(){this.part_vals=null;}public boolean isSetPart_vals(){return this.part_vals!=null;}public void setPart_valsIsSet(boolean value){if(!value){this.part_vals=null;}}public short getMax_parts(){return this.max_parts;}public void setMax_parts(short max_parts){this.max_parts=max_parts;setMax_partsIsSet(true);}public void unsetMax_parts(){__isset_bit_vector.clear(__MAX_PARTS_ISSET_ID);}public boolean isSetMax_parts(){return __isset_bit_vector.get(__MAX_PARTS_ISSET_ID);}public void setMax_partsIsSet(boolean value){__isset_bit_vector.set(__MAX_PARTS_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_VALS: if(value==null){unsetPart_vals();}else{setPart_vals((List<String>)value);}break;case MAX_PARTS: if(value==null){unsetMax_parts();}else{setMax_parts((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_VALS: return getPart_vals();case MAX_PARTS: return new Short(getMax_parts());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_VALS: return isSetPart_vals();case MAX_PARTS: return isSetMax_parts();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_ps_args)return this.equals((get_partitions_ps_args)that);return false;}public boolean equals(get_partitions_ps_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true && this.isSetPart_vals();boolean that_present_part_vals=true && that.isSetPart_vals();if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}boolean this_present_max_parts=true;boolean that_present_max_parts=true;if(this_present_max_parts || that_present_max_parts){if(!(this_present_max_parts && that_present_max_parts))return false;if(this.max_parts!=that.max_parts)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partitions_ps_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partitions_ps_args typedOther=(get_partitions_ps_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_vals()).compareTo(typedOther.isSetPart_vals());if(lastComparison!=0){return lastComparison;}if(isSetPart_vals()){lastComparison=TBaseHelper.compareTo(this.part_vals,typedOther.part_vals);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_parts()).compareTo(typedOther.isSetMax_parts());if(lastComparison!=0){return lastComparison;}if(isSetMax_parts()){lastComparison=TBaseHelper.compareTo(this.max_parts,typedOther.max_parts);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list112=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list112.size);for(int _i113=0;_i113<_list112.size;++_i113){String _elem114;_elem114=iprot.readString();this.part_vals.add(_elem114);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.I16){this.max_parts=iprot.readI16();setMax_partsIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){oprot.writeFieldBegin(PART_VALS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter115 : this.part_vals){oprot.writeString(_iter115);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);oprot.writeI16(this.max_parts);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partitions_ps_result implements TBase<get_partitions_ps_result,get_partitions_ps_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partitions_ps_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<Partition>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new StructMetaData(TType.STRUCT,Partition.class))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partitions_ps_result.class,metaDataMap);}public get_partitions_ps_result(){}public get_partitions_ps_result(List<Partition>success,MetaException o1){this();this.success=success;this.o1=o1;}public get_partitions_ps_result(get_partitions_ps_result other){if(other.isSetSuccess()){List<Partition>__this__success=new ArrayList<Partition>();for(Partition other_element : other.success){__this__success.add(new Partition(other_element));}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public get_partitions_ps_result deepCopy(){return new get_partitions_ps_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<Partition>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(Partition elem){if(this.success==null){this.success=new ArrayList<Partition>();}this.success.add(elem);}public List<Partition>getSuccess(){return this.success;}public void setSuccess(List<Partition>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<Partition>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_ps_result)return this.equals((get_partitions_ps_result)that);return false;}public boolean equals(get_partitions_ps_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partitions_ps_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partitions_ps_result typedOther=(get_partitions_ps_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list116=iprot.readListBegin();this.success=new ArrayList<Partition>(_list116.size);for(int _i117=0;_i117<_list116.size;++_i117){Partition _elem118;_elem118=new Partition();_elem118.read(iprot);this.success.add(_elem118);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(Partition _iter119 : this.success){_iter119.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_names_ps_args implements TBase<get_partition_names_ps_args,get_partition_names_ps_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_names_ps_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField PART_VALS_FIELD_DESC=new TField(\"part_vals\",TType.LIST,(short)3);private static final TField MAX_PARTS_FIELD_DESC=new TField(\"max_parts\",TType.I16,(short)4);private String db_name;private String tbl_name;private List<String>part_vals;private short max_parts;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),PART_VALS((short)3,\"part_vals\"),MAX_PARTS((short)4,\"max_parts\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return PART_VALS;case 4: return MAX_PARTS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_PARTS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.PART_VALS,new FieldMetaData(\"part_vals\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.MAX_PARTS,new FieldMetaData(\"max_parts\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_names_ps_args.class,metaDataMap);}public get_partition_names_ps_args(){this.max_parts=(short)-1;}public get_partition_names_ps_args(String db_name,String tbl_name,List<String>part_vals,short max_parts){this();this.db_name=db_name;this.tbl_name=tbl_name;this.part_vals=part_vals;this.max_parts=max_parts;setMax_partsIsSet(true);}public get_partition_names_ps_args(get_partition_names_ps_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetPart_vals()){List<String>__this__part_vals=new ArrayList<String>();for(String other_element : other.part_vals){__this__part_vals.add(other_element);}this.part_vals=__this__part_vals;}this.max_parts=other.max_parts;}public get_partition_names_ps_args deepCopy(){return new get_partition_names_ps_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.part_vals=null;this.max_parts=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public int getPart_valsSize(){return(this.part_vals==null)? 0 : this.part_vals.size();}public java.util.Iterator<String>getPart_valsIterator(){return(this.part_vals==null)? null : this.part_vals.iterator();}public void addToPart_vals(String elem){if(this.part_vals==null){this.part_vals=new ArrayList<String>();}this.part_vals.add(elem);}public List<String>getPart_vals(){return this.part_vals;}public void setPart_vals(List<String>part_vals){this.part_vals=part_vals;}public void unsetPart_vals(){this.part_vals=null;}public boolean isSetPart_vals(){return this.part_vals!=null;}public void setPart_valsIsSet(boolean value){if(!value){this.part_vals=null;}}public short getMax_parts(){return this.max_parts;}public void setMax_parts(short max_parts){this.max_parts=max_parts;setMax_partsIsSet(true);}public void unsetMax_parts(){__isset_bit_vector.clear(__MAX_PARTS_ISSET_ID);}public boolean isSetMax_parts(){return __isset_bit_vector.get(__MAX_PARTS_ISSET_ID);}public void setMax_partsIsSet(boolean value){__isset_bit_vector.set(__MAX_PARTS_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case PART_VALS: if(value==null){unsetPart_vals();}else{setPart_vals((List<String>)value);}break;case MAX_PARTS: if(value==null){unsetMax_parts();}else{setMax_parts((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case PART_VALS: return getPart_vals();case MAX_PARTS: return new Short(getMax_parts());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case PART_VALS: return isSetPart_vals();case MAX_PARTS: return isSetMax_parts();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_names_ps_args)return this.equals((get_partition_names_ps_args)that);return false;}public boolean equals(get_partition_names_ps_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_part_vals=true && this.isSetPart_vals();boolean that_present_part_vals=true && that.isSetPart_vals();if(this_present_part_vals || that_present_part_vals){if(!(this_present_part_vals && that_present_part_vals))return false;if(!this.part_vals.equals(that.part_vals))return false;}boolean this_present_max_parts=true;boolean that_present_max_parts=true;if(this_present_max_parts || that_present_max_parts){if(!(this_present_max_parts && that_present_max_parts))return false;if(this.max_parts!=that.max_parts)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_names_ps_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_names_ps_args typedOther=(get_partition_names_ps_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetPart_vals()).compareTo(typedOther.isSetPart_vals());if(lastComparison!=0){return lastComparison;}if(isSetPart_vals()){lastComparison=TBaseHelper.compareTo(this.part_vals,typedOther.part_vals);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_parts()).compareTo(typedOther.isSetMax_parts());if(lastComparison!=0){return lastComparison;}if(isSetMax_parts()){lastComparison=TBaseHelper.compareTo(this.max_parts,typedOther.max_parts);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.LIST){{TList _list120=iprot.readListBegin();this.part_vals=new ArrayList<String>(_list120.size);for(int _i121=0;_i121<_list120.size;++_i121){String _elem122;_elem122=iprot.readString();this.part_vals.add(_elem122);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.I16){this.max_parts=iprot.readI16();setMax_partsIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.part_vals!=null){oprot.writeFieldBegin(PART_VALS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.part_vals.size()));for(String _iter123 : this.part_vals){oprot.writeString(_iter123);}oprot.writeListEnd();}oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);oprot.writeI16(this.max_parts);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partition_names_ps_result implements TBase<get_partition_names_ps_result,get_partition_names_ps_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partition_names_ps_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partition_names_ps_result.class,metaDataMap);}public get_partition_names_ps_result(){}public get_partition_names_ps_result(List<String>success,MetaException o1){this();this.success=success;this.o1=o1;}public get_partition_names_ps_result(get_partition_names_ps_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public get_partition_names_ps_result deepCopy(){return new get_partition_names_ps_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partition_names_ps_result)return this.equals((get_partition_names_ps_result)that);return false;}public boolean equals(get_partition_names_ps_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partition_names_ps_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partition_names_ps_result typedOther=(get_partition_names_ps_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list124=iprot.readListBegin();this.success=new ArrayList<String>(_list124.size);for(int _i125=0;_i125<_list124.size;++_i125){String _elem126;_elem126=iprot.readString();this.success.add(_elem126);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter127 : this.success){oprot.writeString(_iter127);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partitions_by_filter_args implements TBase<get_partitions_by_filter_args,get_partitions_by_filter_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partitions_by_filter_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField FILTER_FIELD_DESC=new TField(\"filter\",TType.STRING,(short)3);private static final TField MAX_PARTS_FIELD_DESC=new TField(\"max_parts\",TType.I16,(short)4);private String db_name;private String tbl_name;private String filter;private short max_parts;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),FILTER((short)3,\"filter\"),MAX_PARTS((short)4,\"max_parts\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return FILTER;case 4: return MAX_PARTS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_PARTS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.FILTER,new FieldMetaData(\"filter\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.MAX_PARTS,new FieldMetaData(\"max_parts\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partitions_by_filter_args.class,metaDataMap);}public get_partitions_by_filter_args(){this.max_parts=(short)-1;}public get_partitions_by_filter_args(String db_name,String tbl_name,String filter,short max_parts){this();this.db_name=db_name;this.tbl_name=tbl_name;this.filter=filter;this.max_parts=max_parts;setMax_partsIsSet(true);}public get_partitions_by_filter_args(get_partitions_by_filter_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetFilter()){this.filter=other.filter;}this.max_parts=other.max_parts;}public get_partitions_by_filter_args deepCopy(){return new get_partitions_by_filter_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.filter=null;this.max_parts=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public String getFilter(){return this.filter;}public void setFilter(String filter){this.filter=filter;}public void unsetFilter(){this.filter=null;}public boolean isSetFilter(){return this.filter!=null;}public void setFilterIsSet(boolean value){if(!value){this.filter=null;}}public short getMax_parts(){return this.max_parts;}public void setMax_parts(short max_parts){this.max_parts=max_parts;setMax_partsIsSet(true);}public void unsetMax_parts(){__isset_bit_vector.clear(__MAX_PARTS_ISSET_ID);}public boolean isSetMax_parts(){return __isset_bit_vector.get(__MAX_PARTS_ISSET_ID);}public void setMax_partsIsSet(boolean value){__isset_bit_vector.set(__MAX_PARTS_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case FILTER: if(value==null){unsetFilter();}else{setFilter((String)value);}break;case MAX_PARTS: if(value==null){unsetMax_parts();}else{setMax_parts((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case FILTER: return getFilter();case MAX_PARTS: return new Short(getMax_parts());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case FILTER: return isSetFilter();case MAX_PARTS: return isSetMax_parts();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_by_filter_args)return this.equals((get_partitions_by_filter_args)that);return false;}public boolean equals(get_partitions_by_filter_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_filter=true && this.isSetFilter();boolean that_present_filter=true && that.isSetFilter();if(this_present_filter || that_present_filter){if(!(this_present_filter && that_present_filter))return false;if(!this.filter.equals(that.filter))return false;}boolean this_present_max_parts=true;boolean that_present_max_parts=true;if(this_present_max_parts || that_present_max_parts){if(!(this_present_max_parts && that_present_max_parts))return false;if(this.max_parts!=that.max_parts)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partitions_by_filter_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partitions_by_filter_args typedOther=(get_partitions_by_filter_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetFilter()).compareTo(typedOther.isSetFilter());if(lastComparison!=0){return lastComparison;}if(isSetFilter()){lastComparison=TBaseHelper.compareTo(this.filter,typedOther.filter);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_parts()).compareTo(typedOther.isSetMax_parts());if(lastComparison!=0){return lastComparison;}if(isSetMax_parts()){lastComparison=TBaseHelper.compareTo(this.max_parts,typedOther.max_parts);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.filter=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.I16){this.max_parts=iprot.readI16();setMax_partsIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.filter!=null){oprot.writeFieldBegin(FILTER_FIELD_DESC);oprot.writeString(this.filter);oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_PARTS_FIELD_DESC);oprot.writeI16(this.max_parts);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_partitions_by_filter_result implements TBase<get_partitions_by_filter_result,get_partitions_by_filter_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_partitions_by_filter_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private List<Partition>success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new StructMetaData(TType.STRUCT,Partition.class))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_partitions_by_filter_result.class,metaDataMap);}public get_partitions_by_filter_result(){}public get_partitions_by_filter_result(List<Partition>success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_partitions_by_filter_result(get_partitions_by_filter_result other){if(other.isSetSuccess()){List<Partition>__this__success=new ArrayList<Partition>();for(Partition other_element : other.success){__this__success.add(new Partition(other_element));}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public get_partitions_by_filter_result deepCopy(){return new get_partitions_by_filter_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<Partition>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(Partition elem){if(this.success==null){this.success=new ArrayList<Partition>();}this.success.add(elem);}public List<Partition>getSuccess(){return this.success;}public void setSuccess(List<Partition>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<Partition>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_partitions_by_filter_result)return this.equals((get_partitions_by_filter_result)that);return false;}public boolean equals(get_partitions_by_filter_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_partitions_by_filter_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_partitions_by_filter_result typedOther=(get_partitions_by_filter_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list128=iprot.readListBegin();this.success=new ArrayList<Partition>(_list128.size);for(int _i129=0;_i129<_list128.size;++_i129){Partition _elem130;_elem130=new Partition();_elem130.read(iprot);this.success.add(_elem130);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(Partition _iter131 : this.success){_iter131.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class alter_partition_args implements TBase<alter_partition_args,alter_partition_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"alter_partition_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField NEW_PART_FIELD_DESC=new TField(\"new_part\",TType.STRUCT,(short)3);private String db_name;private String tbl_name;private Partition new_part;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),NEW_PART((short)3,\"new_part\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return NEW_PART;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.NEW_PART,new FieldMetaData(\"new_part\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Partition.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(alter_partition_args.class,metaDataMap);}public alter_partition_args(){}public alter_partition_args(String db_name,String tbl_name,Partition new_part){this();this.db_name=db_name;this.tbl_name=tbl_name;this.new_part=new_part;}public alter_partition_args(alter_partition_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetNew_part()){this.new_part=new Partition(other.new_part);}}public alter_partition_args deepCopy(){return new alter_partition_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.new_part=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public Partition getNew_part(){return this.new_part;}public void setNew_part(Partition new_part){this.new_part=new_part;}public void unsetNew_part(){this.new_part=null;}public boolean isSetNew_part(){return this.new_part!=null;}public void setNew_partIsSet(boolean value){if(!value){this.new_part=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case NEW_PART: if(value==null){unsetNew_part();}else{setNew_part((Partition)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case NEW_PART: return getNew_part();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case NEW_PART: return isSetNew_part();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_partition_args)return this.equals((alter_partition_args)that);return false;}public boolean equals(alter_partition_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_new_part=true && this.isSetNew_part();boolean that_present_new_part=true && that.isSetNew_part();if(this_present_new_part || that_present_new_part){if(!(this_present_new_part && that_present_new_part))return false;if(!this.new_part.equals(that.new_part))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(alter_partition_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;alter_partition_args typedOther=(alter_partition_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetNew_part()).compareTo(typedOther.isSetNew_part());if(lastComparison!=0){return lastComparison;}if(isSetNew_part()){lastComparison=TBaseHelper.compareTo(this.new_part,typedOther.new_part);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.new_part=new Partition();this.new_part.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.new_part!=null){oprot.writeFieldBegin(NEW_PART_FIELD_DESC);this.new_part.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class alter_partition_result implements TBase<alter_partition_result,alter_partition_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"alter_partition_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private InvalidOperationException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(alter_partition_result.class,metaDataMap);}public alter_partition_result(){}public alter_partition_result(InvalidOperationException o1,MetaException o2){this();this.o1=o1;this.o2=o2;}public alter_partition_result(alter_partition_result other){if(other.isSetO1()){this.o1=new InvalidOperationException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public alter_partition_result deepCopy(){return new alter_partition_result(this);}@Override public void clear(){this.o1=null;this.o2=null;}public InvalidOperationException getO1(){return this.o1;}public void setO1(InvalidOperationException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((InvalidOperationException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_partition_result)return this.equals((alter_partition_result)that);return false;}public boolean equals(alter_partition_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(alter_partition_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;alter_partition_result typedOther=(alter_partition_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new InvalidOperationException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_config_value_args implements TBase<get_config_value_args,get_config_value_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_config_value_args\");private static final TField NAME_FIELD_DESC=new TField(\"name\",TType.STRING,(short)1);private static final TField DEFAULT_VALUE_FIELD_DESC=new TField(\"defaultValue\",TType.STRING,(short)2);private String name;private String defaultValue;public enum _Fields implements TFieldIdEnum{NAME((short)1,\"name\"),DEFAULT_VALUE((short)2,\"defaultValue\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NAME;case 2: return DEFAULT_VALUE;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NAME,new FieldMetaData(\"name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.DEFAULT_VALUE,new FieldMetaData(\"defaultValue\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_config_value_args.class,metaDataMap);}public get_config_value_args(){}public get_config_value_args(String name,String defaultValue){this();this.name=name;this.defaultValue=defaultValue;}public get_config_value_args(get_config_value_args other){if(other.isSetName()){this.name=other.name;}if(other.isSetDefaultValue()){this.defaultValue=other.defaultValue;}}public get_config_value_args deepCopy(){return new get_config_value_args(this);}@Override public void clear(){this.name=null;this.defaultValue=null;}public String getName(){return this.name;}public void setName(String name){this.name=name;}public void unsetName(){this.name=null;}public boolean isSetName(){return this.name!=null;}public void setNameIsSet(boolean value){if(!value){this.name=null;}}public String getDefaultValue(){return this.defaultValue;}public void setDefaultValue(String defaultValue){this.defaultValue=defaultValue;}public void unsetDefaultValue(){this.defaultValue=null;}public boolean isSetDefaultValue(){return this.defaultValue!=null;}public void setDefaultValueIsSet(boolean value){if(!value){this.defaultValue=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case NAME: if(value==null){unsetName();}else{setName((String)value);}break;case DEFAULT_VALUE: if(value==null){unsetDefaultValue();}else{setDefaultValue((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NAME: return getName();case DEFAULT_VALUE: return getDefaultValue();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NAME: return isSetName();case DEFAULT_VALUE: return isSetDefaultValue();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_config_value_args)return this.equals((get_config_value_args)that);return false;}public boolean equals(get_config_value_args that){if(that==null)return false;boolean this_present_name=true && this.isSetName();boolean that_present_name=true && that.isSetName();if(this_present_name || that_present_name){if(!(this_present_name && that_present_name))return false;if(!this.name.equals(that.name))return false;}boolean this_present_defaultValue=true && this.isSetDefaultValue();boolean that_present_defaultValue=true && that.isSetDefaultValue();if(this_present_defaultValue || that_present_defaultValue){if(!(this_present_defaultValue && that_present_defaultValue))return false;if(!this.defaultValue.equals(that.defaultValue))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_config_value_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_config_value_args typedOther=(get_config_value_args)other;lastComparison=Boolean.valueOf(isSetName()).compareTo(typedOther.isSetName());if(lastComparison!=0){return lastComparison;}if(isSetName()){lastComparison=TBaseHelper.compareTo(this.name,typedOther.name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDefaultValue()).compareTo(typedOther.isSetDefaultValue());if(lastComparison!=0){return lastComparison;}if(isSetDefaultValue()){lastComparison=TBaseHelper.compareTo(this.defaultValue,typedOther.defaultValue);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.defaultValue=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.name!=null){oprot.writeFieldBegin(NAME_FIELD_DESC);oprot.writeString(this.name);oprot.writeFieldEnd();}if(this.defaultValue!=null){oprot.writeFieldBegin(DEFAULT_VALUE_FIELD_DESC);oprot.writeString(this.defaultValue);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_config_value_result implements TBase<get_config_value_result,get_config_value_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_config_value_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRING,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private String success;private ConfigValSecurityException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_config_value_result.class,metaDataMap);}public get_config_value_result(){}public get_config_value_result(String success,ConfigValSecurityException o1){this();this.success=success;this.o1=o1;}public get_config_value_result(get_config_value_result other){if(other.isSetSuccess()){this.success=other.success;}if(other.isSetO1()){this.o1=new ConfigValSecurityException(other.o1);}}public get_config_value_result deepCopy(){return new get_config_value_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public String getSuccess(){return this.success;}public void setSuccess(String success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public ConfigValSecurityException getO1(){return this.o1;}public void setO1(ConfigValSecurityException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((String)value);}break;case O1: if(value==null){unsetO1();}else{setO1((ConfigValSecurityException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_config_value_result)return this.equals((get_config_value_result)that);return false;}public boolean equals(get_config_value_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_config_value_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_config_value_result typedOther=(get_config_value_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRING){this.success=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new ConfigValSecurityException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeString(this.success);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class partition_name_to_vals_args implements TBase<partition_name_to_vals_args,partition_name_to_vals_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"partition_name_to_vals_args\");private static final TField PART_NAME_FIELD_DESC=new TField(\"part_name\",TType.STRING,(short)1);private String part_name;public enum _Fields implements TFieldIdEnum{PART_NAME((short)1,\"part_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return PART_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.PART_NAME,new FieldMetaData(\"part_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(partition_name_to_vals_args.class,metaDataMap);}public partition_name_to_vals_args(){}public partition_name_to_vals_args(String part_name){this();this.part_name=part_name;}public partition_name_to_vals_args(partition_name_to_vals_args other){if(other.isSetPart_name()){this.part_name=other.part_name;}}public partition_name_to_vals_args deepCopy(){return new partition_name_to_vals_args(this);}@Override public void clear(){this.part_name=null;}public String getPart_name(){return this.part_name;}public void setPart_name(String part_name){this.part_name=part_name;}public void unsetPart_name(){this.part_name=null;}public boolean isSetPart_name(){return this.part_name!=null;}public void setPart_nameIsSet(boolean value){if(!value){this.part_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case PART_NAME: if(value==null){unsetPart_name();}else{setPart_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case PART_NAME: return getPart_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case PART_NAME: return isSetPart_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof partition_name_to_vals_args)return this.equals((partition_name_to_vals_args)that);return false;}public boolean equals(partition_name_to_vals_args that){if(that==null)return false;boolean this_present_part_name=true && this.isSetPart_name();boolean that_present_part_name=true && that.isSetPart_name();if(this_present_part_name || that_present_part_name){if(!(this_present_part_name && that_present_part_name))return false;if(!this.part_name.equals(that.part_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(partition_name_to_vals_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;partition_name_to_vals_args typedOther=(partition_name_to_vals_args)other;lastComparison=Boolean.valueOf(isSetPart_name()).compareTo(typedOther.isSetPart_name());if(lastComparison!=0){return lastComparison;}if(isSetPart_name()){lastComparison=TBaseHelper.compareTo(this.part_name,typedOther.part_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.part_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.part_name!=null){oprot.writeFieldBegin(PART_NAME_FIELD_DESC);oprot.writeString(this.part_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class partition_name_to_vals_result implements TBase<partition_name_to_vals_result,partition_name_to_vals_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"partition_name_to_vals_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private List<String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(partition_name_to_vals_result.class,metaDataMap);}public partition_name_to_vals_result(){}public partition_name_to_vals_result(List<String>success,MetaException o1){this();this.success=success;this.o1=o1;}public partition_name_to_vals_result(partition_name_to_vals_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public partition_name_to_vals_result deepCopy(){return new partition_name_to_vals_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof partition_name_to_vals_result)return this.equals((partition_name_to_vals_result)that);return false;}public boolean equals(partition_name_to_vals_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(partition_name_to_vals_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;partition_name_to_vals_result typedOther=(partition_name_to_vals_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list132=iprot.readListBegin();this.success=new ArrayList<String>(_list132.size);for(int _i133=0;_i133<_list132.size;++_i133){String _elem134;_elem134=iprot.readString();this.success.add(_elem134);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter135 : this.success){oprot.writeString(_iter135);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class partition_name_to_spec_args implements TBase<partition_name_to_spec_args,partition_name_to_spec_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"partition_name_to_spec_args\");private static final TField PART_NAME_FIELD_DESC=new TField(\"part_name\",TType.STRING,(short)1);private String part_name;public enum _Fields implements TFieldIdEnum{PART_NAME((short)1,\"part_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return PART_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.PART_NAME,new FieldMetaData(\"part_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(partition_name_to_spec_args.class,metaDataMap);}public partition_name_to_spec_args(){}public partition_name_to_spec_args(String part_name){this();this.part_name=part_name;}public partition_name_to_spec_args(partition_name_to_spec_args other){if(other.isSetPart_name()){this.part_name=other.part_name;}}public partition_name_to_spec_args deepCopy(){return new partition_name_to_spec_args(this);}@Override public void clear(){this.part_name=null;}public String getPart_name(){return this.part_name;}public void setPart_name(String part_name){this.part_name=part_name;}public void unsetPart_name(){this.part_name=null;}public boolean isSetPart_name(){return this.part_name!=null;}public void setPart_nameIsSet(boolean value){if(!value){this.part_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case PART_NAME: if(value==null){unsetPart_name();}else{setPart_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case PART_NAME: return getPart_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case PART_NAME: return isSetPart_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof partition_name_to_spec_args)return this.equals((partition_name_to_spec_args)that);return false;}public boolean equals(partition_name_to_spec_args that){if(that==null)return false;boolean this_present_part_name=true && this.isSetPart_name();boolean that_present_part_name=true && that.isSetPart_name();if(this_present_part_name || that_present_part_name){if(!(this_present_part_name && that_present_part_name))return false;if(!this.part_name.equals(that.part_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(partition_name_to_spec_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;partition_name_to_spec_args typedOther=(partition_name_to_spec_args)other;lastComparison=Boolean.valueOf(isSetPart_name()).compareTo(typedOther.isSetPart_name());if(lastComparison!=0){return lastComparison;}if(isSetPart_name()){lastComparison=TBaseHelper.compareTo(this.part_name,typedOther.part_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.part_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.part_name!=null){oprot.writeFieldBegin(PART_NAME_FIELD_DESC);oprot.writeString(this.part_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class partition_name_to_spec_result implements TBase<partition_name_to_spec_result,partition_name_to_spec_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"partition_name_to_spec_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.MAP,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private Map<String,String>success;private MetaException o1;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new MapMetaData(TType.MAP,new FieldValueMetaData(TType.STRING),new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(partition_name_to_spec_result.class,metaDataMap);}public partition_name_to_spec_result(){}public partition_name_to_spec_result(Map<String,String>success,MetaException o1){this();this.success=success;this.o1=o1;}public partition_name_to_spec_result(partition_name_to_spec_result other){if(other.isSetSuccess()){Map<String,String>__this__success=new HashMap<String,String>();for(Map.Entry<String,String>other_element : other.success.entrySet()){String other_element_key=other_element.getKey();String other_element_value=other_element.getValue();String __this__success_copy_key=other_element_key;String __this__success_copy_value=other_element_value;__this__success.put(__this__success_copy_key,__this__success_copy_value);}this.success=__this__success;}if(other.isSetO1()){this.o1=new MetaException(other.o1);}}public partition_name_to_spec_result deepCopy(){return new partition_name_to_spec_result(this);}@Override public void clear(){this.success=null;this.o1=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public void putToSuccess(String key,String val){if(this.success==null){this.success=new HashMap<String,String>();}this.success.put(key,val);}public Map<String,String>getSuccess(){return this.success;}public void setSuccess(Map<String,String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Map<String,String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof partition_name_to_spec_result)return this.equals((partition_name_to_spec_result)that);return false;}public boolean equals(partition_name_to_spec_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(partition_name_to_spec_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;partition_name_to_spec_result typedOther=(partition_name_to_spec_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.MAP){{TMap _map136=iprot.readMapBegin();this.success=new HashMap<String,String>(2*_map136.size);for(int _i137=0;_i137<_map136.size;++_i137){String _key138;String _val139;_key138=iprot.readString();_val139=iprot.readString();this.success.put(_key138,_val139);}iprot.readMapEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.success.size()));for(Map.Entry<String,String>_iter140 : this.success.entrySet()){oprot.writeString(_iter140.getKey());oprot.writeString(_iter140.getValue());}oprot.writeMapEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class add_index_args implements TBase<add_index_args,add_index_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"add_index_args\");private static final TField NEW_INDEX_FIELD_DESC=new TField(\"new_index\",TType.STRUCT,(short)1);private static final TField INDEX_TABLE_FIELD_DESC=new TField(\"index_table\",TType.STRUCT,(short)2);private Index new_index;private Table index_table;public enum _Fields implements TFieldIdEnum{NEW_INDEX((short)1,\"new_index\"),INDEX_TABLE((short)2,\"index_table\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NEW_INDEX;case 2: return INDEX_TABLE;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NEW_INDEX,new FieldMetaData(\"new_index\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Index.class)));tmpMap.put(_Fields.INDEX_TABLE,new FieldMetaData(\"index_table\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Table.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(add_index_args.class,metaDataMap);}public add_index_args(){}public add_index_args(Index new_index,Table index_table){this();this.new_index=new_index;this.index_table=index_table;}public add_index_args(add_index_args other){if(other.isSetNew_index()){this.new_index=new Index(other.new_index);}if(other.isSetIndex_table()){this.index_table=new Table(other.index_table);}}public add_index_args deepCopy(){return new add_index_args(this);}@Override public void clear(){this.new_index=null;this.index_table=null;}public Index getNew_index(){return this.new_index;}public void setNew_index(Index new_index){this.new_index=new_index;}public void unsetNew_index(){this.new_index=null;}public boolean isSetNew_index(){return this.new_index!=null;}public void setNew_indexIsSet(boolean value){if(!value){this.new_index=null;}}public Table getIndex_table(){return this.index_table;}public void setIndex_table(Table index_table){this.index_table=index_table;}public void unsetIndex_table(){this.index_table=null;}public boolean isSetIndex_table(){return this.index_table!=null;}public void setIndex_tableIsSet(boolean value){if(!value){this.index_table=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case NEW_INDEX: if(value==null){unsetNew_index();}else{setNew_index((Index)value);}break;case INDEX_TABLE: if(value==null){unsetIndex_table();}else{setIndex_table((Table)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NEW_INDEX: return getNew_index();case INDEX_TABLE: return getIndex_table();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NEW_INDEX: return isSetNew_index();case INDEX_TABLE: return isSetIndex_table();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof add_index_args)return this.equals((add_index_args)that);return false;}public boolean equals(add_index_args that){if(that==null)return false;boolean this_present_new_index=true && this.isSetNew_index();boolean that_present_new_index=true && that.isSetNew_index();if(this_present_new_index || that_present_new_index){if(!(this_present_new_index && that_present_new_index))return false;if(!this.new_index.equals(that.new_index))return false;}boolean this_present_index_table=true && this.isSetIndex_table();boolean that_present_index_table=true && that.isSetIndex_table();if(this_present_index_table || that_present_index_table){if(!(this_present_index_table && that_present_index_table))return false;if(!this.index_table.equals(that.index_table))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(add_index_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;add_index_args typedOther=(add_index_args)other;lastComparison=Boolean.valueOf(isSetNew_index()).compareTo(typedOther.isSetNew_index());if(lastComparison!=0){return lastComparison;}if(isSetNew_index()){lastComparison=TBaseHelper.compareTo(this.new_index,typedOther.new_index);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetIndex_table()).compareTo(typedOther.isSetIndex_table());if(lastComparison!=0){return lastComparison;}if(isSetIndex_table()){lastComparison=TBaseHelper.compareTo(this.index_table,typedOther.index_table);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.new_index=new Index();this.new_index.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.index_table=new Table();this.index_table.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.new_index!=null){oprot.writeFieldBegin(NEW_INDEX_FIELD_DESC);this.new_index.write(oprot);oprot.writeFieldEnd();}if(this.index_table!=null){oprot.writeFieldBegin(INDEX_TABLE_FIELD_DESC);this.index_table.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class add_index_result implements TBase<add_index_result,add_index_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"add_index_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private static final TField O3_FIELD_DESC=new TField(\"o3\",TType.STRUCT,(short)3);private Index success;private InvalidObjectException o1;private AlreadyExistsException o2;private MetaException o3;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\"),O3((short)3,\"o3\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;case 3: return O3;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Index.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O3,new FieldMetaData(\"o3\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(add_index_result.class,metaDataMap);}public add_index_result(){}public add_index_result(Index success,InvalidObjectException o1,AlreadyExistsException o2,MetaException o3){this();this.success=success;this.o1=o1;this.o2=o2;this.o3=o3;}public add_index_result(add_index_result other){if(other.isSetSuccess()){this.success=new Index(other.success);}if(other.isSetO1()){this.o1=new InvalidObjectException(other.o1);}if(other.isSetO2()){this.o2=new AlreadyExistsException(other.o2);}if(other.isSetO3()){this.o3=new MetaException(other.o3);}}public add_index_result deepCopy(){return new add_index_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;this.o3=null;}public Index getSuccess(){return this.success;}public void setSuccess(Index success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public InvalidObjectException getO1(){return this.o1;}public void setO1(InvalidObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public AlreadyExistsException getO2(){return this.o2;}public void setO2(AlreadyExistsException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public MetaException getO3(){return this.o3;}public void setO3(MetaException o3){this.o3=o3;}public void unsetO3(){this.o3=null;}public boolean isSetO3(){return this.o3!=null;}public void setO3IsSet(boolean value){if(!value){this.o3=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Index)value);}break;case O1: if(value==null){unsetO1();}else{setO1((InvalidObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((AlreadyExistsException)value);}break;case O3: if(value==null){unsetO3();}else{setO3((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();case O3: return getO3();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();case O3: return isSetO3();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof add_index_result)return this.equals((add_index_result)that);return false;}public boolean equals(add_index_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}boolean this_present_o3=true && this.isSetO3();boolean that_present_o3=true && that.isSetO3();if(this_present_o3 || that_present_o3){if(!(this_present_o3 && that_present_o3))return false;if(!this.o3.equals(that.o3))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(add_index_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;add_index_result typedOther=(add_index_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO3()).compareTo(typedOther.isSetO3());if(lastComparison!=0){return lastComparison;}if(isSetO3()){lastComparison=TBaseHelper.compareTo(this.o3,typedOther.o3);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Index();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new InvalidObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new AlreadyExistsException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRUCT){this.o3=new MetaException();this.o3.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO3()){oprot.writeFieldBegin(O3_FIELD_DESC);this.o3.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class alter_index_args implements TBase<alter_index_args,alter_index_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"alter_index_args\");private static final TField DBNAME_FIELD_DESC=new TField(\"dbname\",TType.STRING,(short)1);private static final TField BASE_TBL_NAME_FIELD_DESC=new TField(\"base_tbl_name\",TType.STRING,(short)2);private static final TField IDX_NAME_FIELD_DESC=new TField(\"idx_name\",TType.STRING,(short)3);private static final TField NEW_IDX_FIELD_DESC=new TField(\"new_idx\",TType.STRUCT,(short)4);private String dbname;private String base_tbl_name;private String idx_name;private Index new_idx;public enum _Fields implements TFieldIdEnum{DBNAME((short)1,\"dbname\"),BASE_TBL_NAME((short)2,\"base_tbl_name\"),IDX_NAME((short)3,\"idx_name\"),NEW_IDX((short)4,\"new_idx\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DBNAME;case 2: return BASE_TBL_NAME;case 3: return IDX_NAME;case 4: return NEW_IDX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DBNAME,new FieldMetaData(\"dbname\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.BASE_TBL_NAME,new FieldMetaData(\"base_tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.IDX_NAME,new FieldMetaData(\"idx_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.NEW_IDX,new FieldMetaData(\"new_idx\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Index.class)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(alter_index_args.class,metaDataMap);}public alter_index_args(){}public alter_index_args(String dbname,String base_tbl_name,String idx_name,Index new_idx){this();this.dbname=dbname;this.base_tbl_name=base_tbl_name;this.idx_name=idx_name;this.new_idx=new_idx;}public alter_index_args(alter_index_args other){if(other.isSetDbname()){this.dbname=other.dbname;}if(other.isSetBase_tbl_name()){this.base_tbl_name=other.base_tbl_name;}if(other.isSetIdx_name()){this.idx_name=other.idx_name;}if(other.isSetNew_idx()){this.new_idx=new Index(other.new_idx);}}public alter_index_args deepCopy(){return new alter_index_args(this);}@Override public void clear(){this.dbname=null;this.base_tbl_name=null;this.idx_name=null;this.new_idx=null;}public String getDbname(){return this.dbname;}public void setDbname(String dbname){this.dbname=dbname;}public void unsetDbname(){this.dbname=null;}public boolean isSetDbname(){return this.dbname!=null;}public void setDbnameIsSet(boolean value){if(!value){this.dbname=null;}}public String getBase_tbl_name(){return this.base_tbl_name;}public void setBase_tbl_name(String base_tbl_name){this.base_tbl_name=base_tbl_name;}public void unsetBase_tbl_name(){this.base_tbl_name=null;}public boolean isSetBase_tbl_name(){return this.base_tbl_name!=null;}public void setBase_tbl_nameIsSet(boolean value){if(!value){this.base_tbl_name=null;}}public String getIdx_name(){return this.idx_name;}public void setIdx_name(String idx_name){this.idx_name=idx_name;}public void unsetIdx_name(){this.idx_name=null;}public boolean isSetIdx_name(){return this.idx_name!=null;}public void setIdx_nameIsSet(boolean value){if(!value){this.idx_name=null;}}public Index getNew_idx(){return this.new_idx;}public void setNew_idx(Index new_idx){this.new_idx=new_idx;}public void unsetNew_idx(){this.new_idx=null;}public boolean isSetNew_idx(){return this.new_idx!=null;}public void setNew_idxIsSet(boolean value){if(!value){this.new_idx=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DBNAME: if(value==null){unsetDbname();}else{setDbname((String)value);}break;case BASE_TBL_NAME: if(value==null){unsetBase_tbl_name();}else{setBase_tbl_name((String)value);}break;case IDX_NAME: if(value==null){unsetIdx_name();}else{setIdx_name((String)value);}break;case NEW_IDX: if(value==null){unsetNew_idx();}else{setNew_idx((Index)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DBNAME: return getDbname();case BASE_TBL_NAME: return getBase_tbl_name();case IDX_NAME: return getIdx_name();case NEW_IDX: return getNew_idx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DBNAME: return isSetDbname();case BASE_TBL_NAME: return isSetBase_tbl_name();case IDX_NAME: return isSetIdx_name();case NEW_IDX: return isSetNew_idx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_index_args)return this.equals((alter_index_args)that);return false;}public boolean equals(alter_index_args that){if(that==null)return false;boolean this_present_dbname=true && this.isSetDbname();boolean that_present_dbname=true && that.isSetDbname();if(this_present_dbname || that_present_dbname){if(!(this_present_dbname && that_present_dbname))return false;if(!this.dbname.equals(that.dbname))return false;}boolean this_present_base_tbl_name=true && this.isSetBase_tbl_name();boolean that_present_base_tbl_name=true && that.isSetBase_tbl_name();if(this_present_base_tbl_name || that_present_base_tbl_name){if(!(this_present_base_tbl_name && that_present_base_tbl_name))return false;if(!this.base_tbl_name.equals(that.base_tbl_name))return false;}boolean this_present_idx_name=true && this.isSetIdx_name();boolean that_present_idx_name=true && that.isSetIdx_name();if(this_present_idx_name || that_present_idx_name){if(!(this_present_idx_name && that_present_idx_name))return false;if(!this.idx_name.equals(that.idx_name))return false;}boolean this_present_new_idx=true && this.isSetNew_idx();boolean that_present_new_idx=true && that.isSetNew_idx();if(this_present_new_idx || that_present_new_idx){if(!(this_present_new_idx && that_present_new_idx))return false;if(!this.new_idx.equals(that.new_idx))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(alter_index_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;alter_index_args typedOther=(alter_index_args)other;lastComparison=Boolean.valueOf(isSetDbname()).compareTo(typedOther.isSetDbname());if(lastComparison!=0){return lastComparison;}if(isSetDbname()){lastComparison=TBaseHelper.compareTo(this.dbname,typedOther.dbname);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetBase_tbl_name()).compareTo(typedOther.isSetBase_tbl_name());if(lastComparison!=0){return lastComparison;}if(isSetBase_tbl_name()){lastComparison=TBaseHelper.compareTo(this.base_tbl_name,typedOther.base_tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetIdx_name()).compareTo(typedOther.isSetIdx_name());if(lastComparison!=0){return lastComparison;}if(isSetIdx_name()){lastComparison=TBaseHelper.compareTo(this.idx_name,typedOther.idx_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetNew_idx()).compareTo(typedOther.isSetNew_idx());if(lastComparison!=0){return lastComparison;}if(isSetNew_idx()){lastComparison=TBaseHelper.compareTo(this.new_idx,typedOther.new_idx);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.dbname=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.base_tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.idx_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.STRUCT){this.new_idx=new Index();this.new_idx.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.dbname!=null){oprot.writeFieldBegin(DBNAME_FIELD_DESC);oprot.writeString(this.dbname);oprot.writeFieldEnd();}if(this.base_tbl_name!=null){oprot.writeFieldBegin(BASE_TBL_NAME_FIELD_DESC);oprot.writeString(this.base_tbl_name);oprot.writeFieldEnd();}if(this.idx_name!=null){oprot.writeFieldBegin(IDX_NAME_FIELD_DESC);oprot.writeString(this.idx_name);oprot.writeFieldEnd();}if(this.new_idx!=null){oprot.writeFieldBegin(NEW_IDX_FIELD_DESC);this.new_idx.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class alter_index_result implements TBase<alter_index_result,alter_index_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"alter_index_result\");private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private InvalidOperationException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(alter_index_result.class,metaDataMap);}public alter_index_result(){}public alter_index_result(InvalidOperationException o1,MetaException o2){this();this.o1=o1;this.o2=o2;}public alter_index_result(alter_index_result other){if(other.isSetO1()){this.o1=new InvalidOperationException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public alter_index_result deepCopy(){return new alter_index_result(this);}@Override public void clear(){this.o1=null;this.o2=null;}public InvalidOperationException getO1(){return this.o1;}public void setO1(InvalidOperationException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case O1: if(value==null){unsetO1();}else{setO1((InvalidOperationException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof alter_index_result)return this.equals((alter_index_result)that);return false;}public boolean equals(alter_index_result that){if(that==null)return false;boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(alter_index_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;alter_index_result typedOther=(alter_index_result)other;lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.o1=new InvalidOperationException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_index_by_name_args implements TBase<drop_index_by_name_args,drop_index_by_name_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_index_by_name_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField INDEX_NAME_FIELD_DESC=new TField(\"index_name\",TType.STRING,(short)3);private static final TField DELETE_DATA_FIELD_DESC=new TField(\"deleteData\",TType.BOOL,(short)4);private String db_name;private String tbl_name;private String index_name;private boolean deleteData;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),INDEX_NAME((short)3,\"index_name\"),DELETE_DATA((short)4,\"deleteData\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return INDEX_NAME;case 4: return DELETE_DATA;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __DELETEDATA_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.INDEX_NAME,new FieldMetaData(\"index_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.DELETE_DATA,new FieldMetaData(\"deleteData\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_index_by_name_args.class,metaDataMap);}public drop_index_by_name_args(){}public drop_index_by_name_args(String db_name,String tbl_name,String index_name,boolean deleteData){this();this.db_name=db_name;this.tbl_name=tbl_name;this.index_name=index_name;this.deleteData=deleteData;setDeleteDataIsSet(true);}public drop_index_by_name_args(drop_index_by_name_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetIndex_name()){this.index_name=other.index_name;}this.deleteData=other.deleteData;}public drop_index_by_name_args deepCopy(){return new drop_index_by_name_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.index_name=null;setDeleteDataIsSet(false);this.deleteData=false;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public String getIndex_name(){return this.index_name;}public void setIndex_name(String index_name){this.index_name=index_name;}public void unsetIndex_name(){this.index_name=null;}public boolean isSetIndex_name(){return this.index_name!=null;}public void setIndex_nameIsSet(boolean value){if(!value){this.index_name=null;}}public boolean isDeleteData(){return this.deleteData;}public void setDeleteData(boolean deleteData){this.deleteData=deleteData;setDeleteDataIsSet(true);}public void unsetDeleteData(){__isset_bit_vector.clear(__DELETEDATA_ISSET_ID);}public boolean isSetDeleteData(){return __isset_bit_vector.get(__DELETEDATA_ISSET_ID);}public void setDeleteDataIsSet(boolean value){__isset_bit_vector.set(__DELETEDATA_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case INDEX_NAME: if(value==null){unsetIndex_name();}else{setIndex_name((String)value);}break;case DELETE_DATA: if(value==null){unsetDeleteData();}else{setDeleteData((Boolean)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case INDEX_NAME: return getIndex_name();case DELETE_DATA: return new Boolean(isDeleteData());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case INDEX_NAME: return isSetIndex_name();case DELETE_DATA: return isSetDeleteData();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_index_by_name_args)return this.equals((drop_index_by_name_args)that);return false;}public boolean equals(drop_index_by_name_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_index_name=true && this.isSetIndex_name();boolean that_present_index_name=true && that.isSetIndex_name();if(this_present_index_name || that_present_index_name){if(!(this_present_index_name && that_present_index_name))return false;if(!this.index_name.equals(that.index_name))return false;}boolean this_present_deleteData=true;boolean that_present_deleteData=true;if(this_present_deleteData || that_present_deleteData){if(!(this_present_deleteData && that_present_deleteData))return false;if(this.deleteData!=that.deleteData)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_index_by_name_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_index_by_name_args typedOther=(drop_index_by_name_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetIndex_name()).compareTo(typedOther.isSetIndex_name());if(lastComparison!=0){return lastComparison;}if(isSetIndex_name()){lastComparison=TBaseHelper.compareTo(this.index_name,typedOther.index_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDeleteData()).compareTo(typedOther.isSetDeleteData());if(lastComparison!=0){return lastComparison;}if(isSetDeleteData()){lastComparison=TBaseHelper.compareTo(this.deleteData,typedOther.deleteData);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.index_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.BOOL){this.deleteData=iprot.readBool();setDeleteDataIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.index_name!=null){oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);oprot.writeString(this.index_name);oprot.writeFieldEnd();}oprot.writeFieldBegin(DELETE_DATA_FIELD_DESC);oprot.writeBool(this.deleteData);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class drop_index_by_name_result implements TBase<drop_index_by_name_result,drop_index_by_name_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"drop_index_by_name_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.BOOL,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private boolean success;private NoSuchObjectException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __SUCCESS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(drop_index_by_name_result.class,metaDataMap);}public drop_index_by_name_result(){}public drop_index_by_name_result(boolean success,NoSuchObjectException o1,MetaException o2){this();this.success=success;setSuccessIsSet(true);this.o1=o1;this.o2=o2;}public drop_index_by_name_result(drop_index_by_name_result other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);this.success=other.success;if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public drop_index_by_name_result deepCopy(){return new drop_index_by_name_result(this);}@Override public void clear(){setSuccessIsSet(false);this.success=false;this.o1=null;this.o2=null;}public boolean isSuccess(){return this.success;}public void setSuccess(boolean success){this.success=success;setSuccessIsSet(true);}public void unsetSuccess(){__isset_bit_vector.clear(__SUCCESS_ISSET_ID);}public boolean isSetSuccess(){return __isset_bit_vector.get(__SUCCESS_ISSET_ID);}public void setSuccessIsSet(boolean value){__isset_bit_vector.set(__SUCCESS_ISSET_ID,value);}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Boolean)value);}break;case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return new Boolean(isSuccess());case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof drop_index_by_name_result)return this.equals((drop_index_by_name_result)that);return false;}public boolean equals(drop_index_by_name_result that){if(that==null)return false;boolean this_present_success=true;boolean that_present_success=true;if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(this.success!=that.success)return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(drop_index_by_name_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;drop_index_by_name_result typedOther=(drop_index_by_name_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.BOOL){this.success=iprot.readBool();setSuccessIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeBool(this.success);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_index_by_name_args implements TBase<get_index_by_name_args,get_index_by_name_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_index_by_name_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField INDEX_NAME_FIELD_DESC=new TField(\"index_name\",TType.STRING,(short)3);private String db_name;private String tbl_name;private String index_name;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),INDEX_NAME((short)3,\"index_name\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return INDEX_NAME;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.INDEX_NAME,new FieldMetaData(\"index_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_index_by_name_args.class,metaDataMap);}public get_index_by_name_args(){}public get_index_by_name_args(String db_name,String tbl_name,String index_name){this();this.db_name=db_name;this.tbl_name=tbl_name;this.index_name=index_name;}public get_index_by_name_args(get_index_by_name_args other){if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}if(other.isSetIndex_name()){this.index_name=other.index_name;}}public get_index_by_name_args deepCopy(){return new get_index_by_name_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.index_name=null;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public String getIndex_name(){return this.index_name;}public void setIndex_name(String index_name){this.index_name=index_name;}public void unsetIndex_name(){this.index_name=null;}public boolean isSetIndex_name(){return this.index_name!=null;}public void setIndex_nameIsSet(boolean value){if(!value){this.index_name=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case INDEX_NAME: if(value==null){unsetIndex_name();}else{setIndex_name((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case INDEX_NAME: return getIndex_name();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case INDEX_NAME: return isSetIndex_name();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_index_by_name_args)return this.equals((get_index_by_name_args)that);return false;}public boolean equals(get_index_by_name_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_index_name=true && this.isSetIndex_name();boolean that_present_index_name=true && that.isSetIndex_name();if(this_present_index_name || that_present_index_name){if(!(this_present_index_name && that_present_index_name))return false;if(!this.index_name.equals(that.index_name))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_index_by_name_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_index_by_name_args typedOther=(get_index_by_name_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetIndex_name()).compareTo(typedOther.isSetIndex_name());if(lastComparison!=0){return lastComparison;}if(isSetIndex_name()){lastComparison=TBaseHelper.compareTo(this.index_name,typedOther.index_name);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.STRING){this.index_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}if(this.index_name!=null){oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);oprot.writeString(this.index_name);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_index_by_name_result implements TBase<get_index_by_name_result,get_index_by_name_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_index_by_name_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private Index success;private MetaException o1;private NoSuchObjectException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,Index.class)));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_index_by_name_result.class,metaDataMap);}public get_index_by_name_result(){}public get_index_by_name_result(Index success,MetaException o1,NoSuchObjectException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_index_by_name_result(get_index_by_name_result other){if(other.isSetSuccess()){this.success=new Index(other.success);}if(other.isSetO1()){this.o1=new MetaException(other.o1);}if(other.isSetO2()){this.o2=new NoSuchObjectException(other.o2);}}public get_index_by_name_result deepCopy(){return new get_index_by_name_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public Index getSuccess(){return this.success;}public void setSuccess(Index success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO1(){return this.o1;}public void setO1(MetaException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public NoSuchObjectException getO2(){return this.o2;}public void setO2(NoSuchObjectException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Index)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((NoSuchObjectException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_index_by_name_result)return this.equals((get_index_by_name_result)that);return false;}public boolean equals(get_index_by_name_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_index_by_name_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_index_by_name_result typedOther=(get_index_by_name_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new Index();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new MetaException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new NoSuchObjectException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_indexes_args implements TBase<get_indexes_args,get_indexes_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_indexes_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField MAX_INDEXES_FIELD_DESC=new TField(\"max_indexes\",TType.I16,(short)3);private String db_name;private String tbl_name;private short max_indexes;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),MAX_INDEXES((short)3,\"max_indexes\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return MAX_INDEXES;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_INDEXES_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.MAX_INDEXES,new FieldMetaData(\"max_indexes\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_indexes_args.class,metaDataMap);}public get_indexes_args(){this.max_indexes=(short)-1;}public get_indexes_args(String db_name,String tbl_name,short max_indexes){this();this.db_name=db_name;this.tbl_name=tbl_name;this.max_indexes=max_indexes;setMax_indexesIsSet(true);}public get_indexes_args(get_indexes_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}this.max_indexes=other.max_indexes;}public get_indexes_args deepCopy(){return new get_indexes_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.max_indexes=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public short getMax_indexes(){return this.max_indexes;}public void setMax_indexes(short max_indexes){this.max_indexes=max_indexes;setMax_indexesIsSet(true);}public void unsetMax_indexes(){__isset_bit_vector.clear(__MAX_INDEXES_ISSET_ID);}public boolean isSetMax_indexes(){return __isset_bit_vector.get(__MAX_INDEXES_ISSET_ID);}public void setMax_indexesIsSet(boolean value){__isset_bit_vector.set(__MAX_INDEXES_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case MAX_INDEXES: if(value==null){unsetMax_indexes();}else{setMax_indexes((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case MAX_INDEXES: return new Short(getMax_indexes());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case MAX_INDEXES: return isSetMax_indexes();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_indexes_args)return this.equals((get_indexes_args)that);return false;}public boolean equals(get_indexes_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_max_indexes=true;boolean that_present_max_indexes=true;if(this_present_max_indexes || that_present_max_indexes){if(!(this_present_max_indexes && that_present_max_indexes))return false;if(this.max_indexes!=that.max_indexes)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_indexes_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_indexes_args typedOther=(get_indexes_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_indexes()).compareTo(typedOther.isSetMax_indexes());if(lastComparison!=0){return lastComparison;}if(isSetMax_indexes()){lastComparison=TBaseHelper.compareTo(this.max_indexes,typedOther.max_indexes);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.I16){this.max_indexes=iprot.readI16();setMax_indexesIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_INDEXES_FIELD_DESC);oprot.writeI16(this.max_indexes);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_indexes_result implements TBase<get_indexes_result,get_indexes_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_indexes_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O1_FIELD_DESC=new TField(\"o1\",TType.STRUCT,(short)1);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)2);private List<Index>success;private NoSuchObjectException o1;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O1((short)1,\"o1\"),O2((short)2,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O1;case 2: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new StructMetaData(TType.STRUCT,Index.class))));tmpMap.put(_Fields.O1,new FieldMetaData(\"o1\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_indexes_result.class,metaDataMap);}public get_indexes_result(){}public get_indexes_result(List<Index>success,NoSuchObjectException o1,MetaException o2){this();this.success=success;this.o1=o1;this.o2=o2;}public get_indexes_result(get_indexes_result other){if(other.isSetSuccess()){List<Index>__this__success=new ArrayList<Index>();for(Index other_element : other.success){__this__success.add(new Index(other_element));}this.success=__this__success;}if(other.isSetO1()){this.o1=new NoSuchObjectException(other.o1);}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public get_indexes_result deepCopy(){return new get_indexes_result(this);}@Override public void clear(){this.success=null;this.o1=null;this.o2=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<Index>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(Index elem){if(this.success==null){this.success=new ArrayList<Index>();}this.success.add(elem);}public List<Index>getSuccess(){return this.success;}public void setSuccess(List<Index>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public NoSuchObjectException getO1(){return this.o1;}public void setO1(NoSuchObjectException o1){this.o1=o1;}public void unsetO1(){this.o1=null;}public boolean isSetO1(){return this.o1!=null;}public void setO1IsSet(boolean value){if(!value){this.o1=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<Index>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((NoSuchObjectException)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O1: return getO1();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_indexes_result)return this.equals((get_indexes_result)that);return false;}public boolean equals(get_indexes_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o1=true && this.isSetO1();boolean that_present_o1=true && that.isSetO1();if(this_present_o1 || that_present_o1){if(!(this_present_o1 && that_present_o1))return false;if(!this.o1.equals(that.o1))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_indexes_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_indexes_result typedOther=(get_indexes_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO1()).compareTo(typedOther.isSetO1());if(lastComparison!=0){return lastComparison;}if(isSetO1()){lastComparison=TBaseHelper.compareTo(this.o1,typedOther.o1);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list141=iprot.readListBegin();this.success=new ArrayList<Index>(_list141.size);for(int _i142=0;_i142<_list141.size;++_i142){Index _elem143;_elem143=new Index();_elem143.read(iprot);this.success.add(_elem143);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o1=new NoSuchObjectException();this.o1.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRUCT,this.success.size()));for(Index _iter144 : this.success){_iter144.write(oprot);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO1()){oprot.writeFieldBegin(O1_FIELD_DESC);this.o1.write(oprot);oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_index_names_args implements TBase<get_index_names_args,get_index_names_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_index_names_args\");private static final TField DB_NAME_FIELD_DESC=new TField(\"db_name\",TType.STRING,(short)1);private static final TField TBL_NAME_FIELD_DESC=new TField(\"tbl_name\",TType.STRING,(short)2);private static final TField MAX_INDEXES_FIELD_DESC=new TField(\"max_indexes\",TType.I16,(short)3);private String db_name;private String tbl_name;private short max_indexes;public enum _Fields implements TFieldIdEnum{DB_NAME((short)1,\"db_name\"),TBL_NAME((short)2,\"tbl_name\"),MAX_INDEXES((short)3,\"max_indexes\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return DB_NAME;case 2: return TBL_NAME;case 3: return MAX_INDEXES;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __MAX_INDEXES_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.DB_NAME,new FieldMetaData(\"db_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.TBL_NAME,new FieldMetaData(\"tbl_name\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.MAX_INDEXES,new FieldMetaData(\"max_indexes\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I16)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_index_names_args.class,metaDataMap);}public get_index_names_args(){this.max_indexes=(short)-1;}public get_index_names_args(String db_name,String tbl_name,short max_indexes){this();this.db_name=db_name;this.tbl_name=tbl_name;this.max_indexes=max_indexes;setMax_indexesIsSet(true);}public get_index_names_args(get_index_names_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetDb_name()){this.db_name=other.db_name;}if(other.isSetTbl_name()){this.tbl_name=other.tbl_name;}this.max_indexes=other.max_indexes;}public get_index_names_args deepCopy(){return new get_index_names_args(this);}@Override public void clear(){this.db_name=null;this.tbl_name=null;this.max_indexes=(short)-1;}public String getDb_name(){return this.db_name;}public void setDb_name(String db_name){this.db_name=db_name;}public void unsetDb_name(){this.db_name=null;}public boolean isSetDb_name(){return this.db_name!=null;}public void setDb_nameIsSet(boolean value){if(!value){this.db_name=null;}}public String getTbl_name(){return this.tbl_name;}public void setTbl_name(String tbl_name){this.tbl_name=tbl_name;}public void unsetTbl_name(){this.tbl_name=null;}public boolean isSetTbl_name(){return this.tbl_name!=null;}public void setTbl_nameIsSet(boolean value){if(!value){this.tbl_name=null;}}public short getMax_indexes(){return this.max_indexes;}public void setMax_indexes(short max_indexes){this.max_indexes=max_indexes;setMax_indexesIsSet(true);}public void unsetMax_indexes(){__isset_bit_vector.clear(__MAX_INDEXES_ISSET_ID);}public boolean isSetMax_indexes(){return __isset_bit_vector.get(__MAX_INDEXES_ISSET_ID);}public void setMax_indexesIsSet(boolean value){__isset_bit_vector.set(__MAX_INDEXES_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case DB_NAME: if(value==null){unsetDb_name();}else{setDb_name((String)value);}break;case TBL_NAME: if(value==null){unsetTbl_name();}else{setTbl_name((String)value);}break;case MAX_INDEXES: if(value==null){unsetMax_indexes();}else{setMax_indexes((Short)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case DB_NAME: return getDb_name();case TBL_NAME: return getTbl_name();case MAX_INDEXES: return new Short(getMax_indexes());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case DB_NAME: return isSetDb_name();case TBL_NAME: return isSetTbl_name();case MAX_INDEXES: return isSetMax_indexes();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_index_names_args)return this.equals((get_index_names_args)that);return false;}public boolean equals(get_index_names_args that){if(that==null)return false;boolean this_present_db_name=true && this.isSetDb_name();boolean that_present_db_name=true && that.isSetDb_name();if(this_present_db_name || that_present_db_name){if(!(this_present_db_name && that_present_db_name))return false;if(!this.db_name.equals(that.db_name))return false;}boolean this_present_tbl_name=true && this.isSetTbl_name();boolean that_present_tbl_name=true && that.isSetTbl_name();if(this_present_tbl_name || that_present_tbl_name){if(!(this_present_tbl_name && that_present_tbl_name))return false;if(!this.tbl_name.equals(that.tbl_name))return false;}boolean this_present_max_indexes=true;boolean that_present_max_indexes=true;if(this_present_max_indexes || that_present_max_indexes){if(!(this_present_max_indexes && that_present_max_indexes))return false;if(this.max_indexes!=that.max_indexes)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_index_names_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_index_names_args typedOther=(get_index_names_args)other;lastComparison=Boolean.valueOf(isSetDb_name()).compareTo(typedOther.isSetDb_name());if(lastComparison!=0){return lastComparison;}if(isSetDb_name()){lastComparison=TBaseHelper.compareTo(this.db_name,typedOther.db_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetTbl_name()).compareTo(typedOther.isSetTbl_name());if(lastComparison!=0){return lastComparison;}if(isSetTbl_name()){lastComparison=TBaseHelper.compareTo(this.tbl_name,typedOther.tbl_name);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetMax_indexes()).compareTo(typedOther.isSetMax_indexes());if(lastComparison!=0){return lastComparison;}if(isSetMax_indexes()){lastComparison=TBaseHelper.compareTo(this.max_indexes,typedOther.max_indexes);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.db_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.STRING){this.tbl_name=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.I16){this.max_indexes=iprot.readI16();setMax_indexesIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.db_name!=null){oprot.writeFieldBegin(DB_NAME_FIELD_DESC);oprot.writeString(this.db_name);oprot.writeFieldEnd();}if(this.tbl_name!=null){oprot.writeFieldBegin(TBL_NAME_FIELD_DESC);oprot.writeString(this.tbl_name);oprot.writeFieldEnd();}oprot.writeFieldBegin(MAX_INDEXES_FIELD_DESC);oprot.writeI16(this.max_indexes);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class get_index_names_result implements TBase<get_index_names_result,get_index_names_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"get_index_names_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField O2_FIELD_DESC=new TField(\"o2\",TType.STRUCT,(short)1);private List<String>success;private MetaException o2;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),O2((short)1,\"o2\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return O2;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.O2,new FieldMetaData(\"o2\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(get_index_names_result.class,metaDataMap);}public get_index_names_result(){}public get_index_names_result(List<String>success,MetaException o2){this();this.success=success;this.o2=o2;}public get_index_names_result(get_index_names_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetO2()){this.o2=new MetaException(other.o2);}}public get_index_names_result deepCopy(){return new get_index_names_result(this);}@Override public void clear(){this.success=null;this.o2=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public MetaException getO2(){return this.o2;}public void setO2(MetaException o2){this.o2=o2;}public void unsetO2(){this.o2=null;}public boolean isSetO2(){return this.o2!=null;}public void setO2IsSet(boolean value){if(!value){this.o2=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O2: if(value==null){unsetO2();}else{setO2((MetaException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case O2: return getO2();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case O2: return isSetO2();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof get_index_names_result)return this.equals((get_index_names_result)that);return false;}public boolean equals(get_index_names_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_o2=true && this.isSetO2();boolean that_present_o2=true && that.isSetO2();if(this_present_o2 || that_present_o2){if(!(this_present_o2 && that_present_o2))return false;if(!this.o2.equals(that.o2))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(get_index_names_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;get_index_names_result typedOther=(get_index_names_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetO2()).compareTo(typedOther.isSetO2());if(lastComparison!=0){return lastComparison;}if(isSetO2()){lastComparison=TBaseHelper.compareTo(this.o2,typedOther.o2);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list145=iprot.readListBegin();this.success=new ArrayList<String>(_list145.size);for(int _i146=0;_i146<_list145.size;++_i146){String _elem147;_elem147=iprot.readString();this.success.add(_elem147);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.o2=new MetaException();this.o2.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter148 : this.success){oprot.writeString(_iter148);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetO2()){oprot.writeFieldBegin(O2_FIELD_DESC);this.o2.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/***Autogenerated by Thrift**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*/public class Operator implements TBase<Operator,Operator._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"Operator\");private static final TField OPERATOR_ID_FIELD_DESC=new TField(\"operatorId\",TType.STRING,(short)1);private static final TField OPERATOR_TYPE_FIELD_DESC=new TField(\"operatorType\",TType.I32,(short)2);private static final TField OPERATOR_ATTRIBUTES_FIELD_DESC=new TField(\"operatorAttributes\",TType.MAP,(short)3);private static final TField OPERATOR_COUNTERS_FIELD_DESC=new TField(\"operatorCounters\",TType.MAP,(short)4);private static final TField DONE_FIELD_DESC=new TField(\"done\",TType.BOOL,(short)5);private static final TField STARTED_FIELD_DESC=new TField(\"started\",TType.BOOL,(short)6);private String operatorId;private OperatorType operatorType;private Map<String,String>operatorAttributes;private Map<String,Long>operatorCounters;private boolean done;private boolean started;public enum _Fields implements TFieldIdEnum{OPERATOR_ID((short)1,\"operatorId\"),OPERATOR_TYPE((short)2,\"operatorType\"),OPERATOR_ATTRIBUTES((short)3,\"operatorAttributes\"),OPERATOR_COUNTERS((short)4,\"operatorCounters\"),DONE((short)5,\"done\"),STARTED((short)6,\"started\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return OPERATOR_ID;case 2: return OPERATOR_TYPE;case 3: return OPERATOR_ATTRIBUTES;case 4: return OPERATOR_COUNTERS;case 5: return DONE;case 6: return STARTED;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __DONE_ISSET_ID=0;private static final int __STARTED_ISSET_ID=1;private BitSet __isset_bit_vector=new BitSet(2);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.OPERATOR_ID,new FieldMetaData(\"operatorId\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.OPERATOR_TYPE,new FieldMetaData(\"operatorType\",TFieldRequirementType.DEFAULT,new EnumMetaData(TType.ENUM,OperatorType.class)));tmpMap.put(_Fields.OPERATOR_ATTRIBUTES,new FieldMetaData(\"operatorAttributes\",TFieldRequirementType.DEFAULT,new MapMetaData(TType.MAP,new FieldValueMetaData(TType.STRING),new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.OPERATOR_COUNTERS,new FieldMetaData(\"operatorCounters\",TFieldRequirementType.DEFAULT,new MapMetaData(TType.MAP,new FieldValueMetaData(TType.STRING),new FieldValueMetaData(TType.I64))));tmpMap.put(_Fields.DONE,new FieldMetaData(\"done\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));tmpMap.put(_Fields.STARTED,new FieldMetaData(\"started\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.BOOL)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(Operator.class,metaDataMap);}public Operator(){}public Operator(String operatorId,OperatorType operatorType,Map<String,String>operatorAttributes,Map<String,Long>operatorCounters,boolean done,boolean started){this();this.operatorId=operatorId;this.operatorType=operatorType;this.operatorAttributes=operatorAttributes;this.operatorCounters=operatorCounters;this.done=done;setDoneIsSet(true);this.started=started;setStartedIsSet(true);}public Operator(Operator other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);if(other.isSetOperatorId()){this.operatorId=other.operatorId;}if(other.isSetOperatorType()){this.operatorType=other.operatorType;}if(other.isSetOperatorAttributes()){Map<String,String>__this__operatorAttributes=new HashMap<String,String>();for(Map.Entry<String,String>other_element : other.operatorAttributes.entrySet()){String other_element_key=other_element.getKey();String other_element_value=other_element.getValue();String __this__operatorAttributes_copy_key=other_element_key;String __this__operatorAttributes_copy_value=other_element_value;__this__operatorAttributes.put(__this__operatorAttributes_copy_key,__this__operatorAttributes_copy_value);}this.operatorAttributes=__this__operatorAttributes;}if(other.isSetOperatorCounters()){Map<String,Long>__this__operatorCounters=new HashMap<String,Long>();for(Map.Entry<String,Long>other_element : other.operatorCounters.entrySet()){String other_element_key=other_element.getKey();Long other_element_value=other_element.getValue();String __this__operatorCounters_copy_key=other_element_key;Long __this__operatorCounters_copy_value=other_element_value;__this__operatorCounters.put(__this__operatorCounters_copy_key,__this__operatorCounters_copy_value);}this.operatorCounters=__this__operatorCounters;}this.done=other.done;this.started=other.started;}public Operator deepCopy(){return new Operator(this);}@Override public void clear(){this.operatorId=null;this.operatorType=null;this.operatorAttributes=null;this.operatorCounters=null;setDoneIsSet(false);this.done=false;setStartedIsSet(false);this.started=false;}public String getOperatorId(){return this.operatorId;}public void setOperatorId(String operatorId){this.operatorId=operatorId;}public void unsetOperatorId(){this.operatorId=null;}public boolean isSetOperatorId(){return this.operatorId!=null;}public void setOperatorIdIsSet(boolean value){if(!value){this.operatorId=null;}}public OperatorType getOperatorType(){return this.operatorType;}public void setOperatorType(OperatorType operatorType){this.operatorType=operatorType;}public void unsetOperatorType(){this.operatorType=null;}public boolean isSetOperatorType(){return this.operatorType!=null;}public void setOperatorTypeIsSet(boolean value){if(!value){this.operatorType=null;}}public int getOperatorAttributesSize(){return(this.operatorAttributes==null)? 0 : this.operatorAttributes.size();}public void putToOperatorAttributes(String key,String val){if(this.operatorAttributes==null){this.operatorAttributes=new HashMap<String,String>();}this.operatorAttributes.put(key,val);}public Map<String,String>getOperatorAttributes(){return this.operatorAttributes;}public void setOperatorAttributes(Map<String,String>operatorAttributes){this.operatorAttributes=operatorAttributes;}public void unsetOperatorAttributes(){this.operatorAttributes=null;}public boolean isSetOperatorAttributes(){return this.operatorAttributes!=null;}public void setOperatorAttributesIsSet(boolean value){if(!value){this.operatorAttributes=null;}}public int getOperatorCountersSize(){return(this.operatorCounters==null)? 0 : this.operatorCounters.size();}public void putToOperatorCounters(String key,long val){if(this.operatorCounters==null){this.operatorCounters=new HashMap<String,Long>();}this.operatorCounters.put(key,val);}public Map<String,Long>getOperatorCounters(){return this.operatorCounters;}public void setOperatorCounters(Map<String,Long>operatorCounters){this.operatorCounters=operatorCounters;}public void unsetOperatorCounters(){this.operatorCounters=null;}public boolean isSetOperatorCounters(){return this.operatorCounters!=null;}public void setOperatorCountersIsSet(boolean value){if(!value){this.operatorCounters=null;}}public boolean isDone(){return this.done;}public void setDone(boolean done){this.done=done;setDoneIsSet(true);}public void unsetDone(){__isset_bit_vector.clear(__DONE_ISSET_ID);}public boolean isSetDone(){return __isset_bit_vector.get(__DONE_ISSET_ID);}public void setDoneIsSet(boolean value){__isset_bit_vector.set(__DONE_ISSET_ID,value);}public boolean isStarted(){return this.started;}public void setStarted(boolean started){this.started=started;setStartedIsSet(true);}public void unsetStarted(){__isset_bit_vector.clear(__STARTED_ISSET_ID);}public boolean isSetStarted(){return __isset_bit_vector.get(__STARTED_ISSET_ID);}public void setStartedIsSet(boolean value){__isset_bit_vector.set(__STARTED_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case OPERATOR_ID: if(value==null){unsetOperatorId();}else{setOperatorId((String)value);}break;case OPERATOR_TYPE: if(value==null){unsetOperatorType();}else{setOperatorType((OperatorType)value);}break;case OPERATOR_ATTRIBUTES: if(value==null){unsetOperatorAttributes();}else{setOperatorAttributes((Map<String,String>)value);}break;case OPERATOR_COUNTERS: if(value==null){unsetOperatorCounters();}else{setOperatorCounters((Map<String,Long>)value);}break;case DONE: if(value==null){unsetDone();}else{setDone((Boolean)value);}break;case STARTED: if(value==null){unsetStarted();}else{setStarted((Boolean)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case OPERATOR_ID: return getOperatorId();case OPERATOR_TYPE: return getOperatorType();case OPERATOR_ATTRIBUTES: return getOperatorAttributes();case OPERATOR_COUNTERS: return getOperatorCounters();case DONE: return new Boolean(isDone());case STARTED: return new Boolean(isStarted());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case OPERATOR_ID: return isSetOperatorId();case OPERATOR_TYPE: return isSetOperatorType();case OPERATOR_ATTRIBUTES: return isSetOperatorAttributes();case OPERATOR_COUNTERS: return isSetOperatorCounters();case DONE: return isSetDone();case STARTED: return isSetStarted();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof Operator)return this.equals((Operator)that);return false;}public boolean equals(Operator that){if(that==null)return false;boolean this_present_operatorId=true && this.isSetOperatorId();boolean that_present_operatorId=true && that.isSetOperatorId();if(this_present_operatorId || that_present_operatorId){if(!(this_present_operatorId && that_present_operatorId))return false;if(!this.operatorId.equals(that.operatorId))return false;}boolean this_present_operatorType=true && this.isSetOperatorType();boolean that_present_operatorType=true && that.isSetOperatorType();if(this_present_operatorType || that_present_operatorType){if(!(this_present_operatorType && that_present_operatorType))return false;if(!this.operatorType.equals(that.operatorType))return false;}boolean this_present_operatorAttributes=true && this.isSetOperatorAttributes();boolean that_present_operatorAttributes=true && that.isSetOperatorAttributes();if(this_present_operatorAttributes || that_present_operatorAttributes){if(!(this_present_operatorAttributes && that_present_operatorAttributes))return false;if(!this.operatorAttributes.equals(that.operatorAttributes))return false;}boolean this_present_operatorCounters=true && this.isSetOperatorCounters();boolean that_present_operatorCounters=true && that.isSetOperatorCounters();if(this_present_operatorCounters || that_present_operatorCounters){if(!(this_present_operatorCounters && that_present_operatorCounters))return false;if(!this.operatorCounters.equals(that.operatorCounters))return false;}boolean this_present_done=true;boolean that_present_done=true;if(this_present_done || that_present_done){if(!(this_present_done && that_present_done))return false;if(this.done!=that.done)return false;}boolean this_present_started=true;boolean that_present_started=true;if(this_present_started || that_present_started){if(!(this_present_started && that_present_started))return false;if(this.started!=that.started)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(Operator other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;Operator typedOther=(Operator)other;lastComparison=Boolean.valueOf(isSetOperatorId()).compareTo(typedOther.isSetOperatorId());if(lastComparison!=0){return lastComparison;}if(isSetOperatorId()){lastComparison=TBaseHelper.compareTo(this.operatorId,typedOther.operatorId);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetOperatorType()).compareTo(typedOther.isSetOperatorType());if(lastComparison!=0){return lastComparison;}if(isSetOperatorType()){lastComparison=TBaseHelper.compareTo(this.operatorType,typedOther.operatorType);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetOperatorAttributes()).compareTo(typedOther.isSetOperatorAttributes());if(lastComparison!=0){return lastComparison;}if(isSetOperatorAttributes()){lastComparison=TBaseHelper.compareTo(this.operatorAttributes,typedOther.operatorAttributes);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetOperatorCounters()).compareTo(typedOther.isSetOperatorCounters());if(lastComparison!=0){return lastComparison;}if(isSetOperatorCounters()){lastComparison=TBaseHelper.compareTo(this.operatorCounters,typedOther.operatorCounters);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetDone()).compareTo(typedOther.isSetDone());if(lastComparison!=0){return lastComparison;}if(isSetDone()){lastComparison=TBaseHelper.compareTo(this.done,typedOther.done);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetStarted()).compareTo(typedOther.isSetStarted());if(lastComparison!=0){return lastComparison;}if(isSetStarted()){lastComparison=TBaseHelper.compareTo(this.started,typedOther.started);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.operatorId=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 2: if(field.type==TType.I32){this.operatorType=OperatorType.findByValue(iprot.readI32());}else{TProtocolUtil.skip(iprot,field.type);}break;case 3: if(field.type==TType.MAP){{TMap _map12=iprot.readMapBegin();this.operatorAttributes=new HashMap<String,String>(2*_map12.size);for(int _i13=0;_i13<_map12.size;++_i13){String _key14;String _val15;_key14=iprot.readString();_val15=iprot.readString();this.operatorAttributes.put(_key14,_val15);}iprot.readMapEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 4: if(field.type==TType.MAP){{TMap _map16=iprot.readMapBegin();this.operatorCounters=new HashMap<String,Long>(2*_map16.size);for(int _i17=0;_i17<_map16.size;++_i17){String _key18;long _val19;_key18=iprot.readString();_val19=iprot.readI64();this.operatorCounters.put(_key18,_val19);}iprot.readMapEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 5: if(field.type==TType.BOOL){this.done=iprot.readBool();setDoneIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;case 6: if(field.type==TType.BOOL){this.started=iprot.readBool();setStartedIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.operatorId!=null){oprot.writeFieldBegin(OPERATOR_ID_FIELD_DESC);oprot.writeString(this.operatorId);oprot.writeFieldEnd();}if(this.operatorType!=null){oprot.writeFieldBegin(OPERATOR_TYPE_FIELD_DESC);oprot.writeI32(this.operatorType.getValue());oprot.writeFieldEnd();}if(this.operatorAttributes!=null){oprot.writeFieldBegin(OPERATOR_ATTRIBUTES_FIELD_DESC);{oprot.writeMapBegin(new TMap(TType.STRING,TType.STRING,this.operatorAttributes.size()));for(Map.Entry<String,String>_iter20 : this.operatorAttributes.entrySet()){oprot.writeString(_iter20.getKey());oprot.writeString(_iter20.getValue());}oprot.writeMapEnd();}oprot.writeFieldEnd();}if(this.operatorCounters!=null){oprot.writeFieldBegin(OPERATOR_COUNTERS_FIELD_DESC);{oprot.writeMapBegin(new TMap(TType.STRING,TType.I64,this.operatorCounters.size()));for(Map.Entry<String,Long>_iter21 : this.operatorCounters.entrySet()){oprot.writeString(_iter21.getKey());oprot.writeI64(_iter21.getValue());}oprot.writeMapEnd();}oprot.writeFieldEnd();}oprot.writeFieldBegin(DONE_FIELD_DESC);oprot.writeBool(this.done);oprot.writeFieldEnd();oprot.writeFieldBegin(STARTED_FIELD_DESC);oprot.writeBool(this.started);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Autogenerated by Thrift**DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING*/public class ThriftHive{public interface Iface extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Iface{public void execute(String query)throws HiveServerException,TException;public String fetchOne()throws HiveServerException,TException;public List<String>fetchN(int numRows)throws HiveServerException,TException;public List<String>fetchAll()throws HiveServerException,TException;public org.apache.hadoop.hive.metastore.api.Schema getSchema()throws HiveServerException,TException;public org.apache.hadoop.hive.metastore.api.Schema getThriftSchema()throws HiveServerException,TException;public HiveClusterStatus getClusterStatus()throws HiveServerException,TException;public org.apache.hadoop.hive.ql.plan.api.QueryPlan getQueryPlan()throws HiveServerException,TException;}public interface AsyncIface extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.AsyncIface{public void execute(String query,AsyncMethodCallback<AsyncClient.execute_call>resultHandler)throws TException;public void fetchOne(AsyncMethodCallback<AsyncClient.fetchOne_call>resultHandler)throws TException;public void fetchN(int numRows,AsyncMethodCallback<AsyncClient.fetchN_call>resultHandler)throws TException;public void fetchAll(AsyncMethodCallback<AsyncClient.fetchAll_call>resultHandler)throws TException;public void getSchema(AsyncMethodCallback<AsyncClient.getSchema_call>resultHandler)throws TException;public void getThriftSchema(AsyncMethodCallback<AsyncClient.getThriftSchema_call>resultHandler)throws TException;public void getClusterStatus(AsyncMethodCallback<AsyncClient.getClusterStatus_call>resultHandler)throws TException;public void getQueryPlan(AsyncMethodCallback<AsyncClient.getQueryPlan_call>resultHandler)throws TException;}public static class Client extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Client implements TServiceClient,Iface{public static class Factory implements TServiceClientFactory<Client>{public Factory(){}public Client getClient(TProtocol prot){return new Client(prot);}public Client getClient(TProtocol iprot,TProtocol oprot){return new Client(iprot,oprot);}}public Client(TProtocol prot){this(prot,prot);}public Client(TProtocol iprot,TProtocol oprot){super(iprot,oprot);}public void execute(String query)throws HiveServerException,TException{send_execute(query);recv_execute();}public void send_execute(String query)throws TException{oprot_.writeMessageBegin(new TMessage(\"execute\",TMessageType.CALL,++seqid_));execute_args args=new execute_args();args.setQuery(query);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public void recv_execute()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"execute failed: out of sequence response\");}execute_result result=new execute_result();result.read(iprot_);iprot_.readMessageEnd();if(result.ex!=null){throw result.ex;}return;}public String fetchOne()throws HiveServerException,TException{send_fetchOne();return recv_fetchOne();}public void send_fetchOne()throws TException{oprot_.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.CALL,++seqid_));fetchOne_args args=new fetchOne_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public String recv_fetchOne()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"fetchOne failed: out of sequence response\");}fetchOne_result result=new fetchOne_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"fetchOne failed: unknown result\");}public List<String>fetchN(int numRows)throws HiveServerException,TException{send_fetchN(numRows);return recv_fetchN();}public void send_fetchN(int numRows)throws TException{oprot_.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.CALL,++seqid_));fetchN_args args=new fetchN_args();args.setNumRows(numRows);args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_fetchN()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"fetchN failed: out of sequence response\");}fetchN_result result=new fetchN_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"fetchN failed: unknown result\");}public List<String>fetchAll()throws HiveServerException,TException{send_fetchAll();return recv_fetchAll();}public void send_fetchAll()throws TException{oprot_.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.CALL,++seqid_));fetchAll_args args=new fetchAll_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public List<String>recv_fetchAll()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"fetchAll failed: out of sequence response\");}fetchAll_result result=new fetchAll_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"fetchAll failed: unknown result\");}public org.apache.hadoop.hive.metastore.api.Schema getSchema()throws HiveServerException,TException{send_getSchema();return recv_getSchema();}public void send_getSchema()throws TException{oprot_.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.CALL,++seqid_));getSchema_args args=new getSchema_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public org.apache.hadoop.hive.metastore.api.Schema recv_getSchema()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"getSchema failed: out of sequence response\");}getSchema_result result=new getSchema_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"getSchema failed: unknown result\");}public org.apache.hadoop.hive.metastore.api.Schema getThriftSchema()throws HiveServerException,TException{send_getThriftSchema();return recv_getThriftSchema();}public void send_getThriftSchema()throws TException{oprot_.writeMessageBegin(new TMessage(\"getThriftSchema\",TMessageType.CALL,++seqid_));getThriftSchema_args args=new getThriftSchema_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public org.apache.hadoop.hive.metastore.api.Schema recv_getThriftSchema()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"getThriftSchema failed: out of sequence response\");}getThriftSchema_result result=new getThriftSchema_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"getThriftSchema failed: unknown result\");}public HiveClusterStatus getClusterStatus()throws HiveServerException,TException{send_getClusterStatus();return recv_getClusterStatus();}public void send_getClusterStatus()throws TException{oprot_.writeMessageBegin(new TMessage(\"getClusterStatus\",TMessageType.CALL,++seqid_));getClusterStatus_args args=new getClusterStatus_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public HiveClusterStatus recv_getClusterStatus()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"getClusterStatus failed: out of sequence response\");}getClusterStatus_result result=new getClusterStatus_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"getClusterStatus failed: unknown result\");}public org.apache.hadoop.hive.ql.plan.api.QueryPlan getQueryPlan()throws HiveServerException,TException{send_getQueryPlan();return recv_getQueryPlan();}public void send_getQueryPlan()throws TException{oprot_.writeMessageBegin(new TMessage(\"getQueryPlan\",TMessageType.CALL,++seqid_));getQueryPlan_args args=new getQueryPlan_args();args.write(oprot_);oprot_.writeMessageEnd();oprot_.getTransport().flush();}public org.apache.hadoop.hive.ql.plan.api.QueryPlan recv_getQueryPlan()throws HiveServerException,TException{TMessage msg=iprot_.readMessageBegin();if(msg.type==TMessageType.EXCEPTION){TApplicationException x=TApplicationException.read(iprot_);iprot_.readMessageEnd();throw x;}if(msg.seqid!=seqid_){throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID,\"getQueryPlan failed: out of sequence response\");}getQueryPlan_result result=new getQueryPlan_result();result.read(iprot_);iprot_.readMessageEnd();if(result.isSetSuccess()){return result.success;}if(result.ex!=null){throw result.ex;}throw new TApplicationException(TApplicationException.MISSING_RESULT,\"getQueryPlan failed: unknown result\");}}public static class AsyncClient extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.AsyncClient implements AsyncIface{public static class Factory implements TAsyncClientFactory<AsyncClient>{private TAsyncClientManager clientManager;private TProtocolFactory protocolFactory;public Factory(TAsyncClientManager clientManager,TProtocolFactory protocolFactory){this.clientManager=clientManager;this.protocolFactory=protocolFactory;}public AsyncClient getAsyncClient(TNonblockingTransport transport){return new AsyncClient(protocolFactory,clientManager,transport);}}public AsyncClient(TProtocolFactory protocolFactory,TAsyncClientManager clientManager,TNonblockingTransport transport){super(protocolFactory,clientManager,transport);}public void execute(String query,AsyncMethodCallback<execute_call>resultHandler)throws TException{checkReady();execute_call method_call=new execute_call(query,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class execute_call extends TAsyncMethodCall{private String query;public execute_call(String query,AsyncMethodCallback<execute_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.query=query;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"execute\",TMessageType.CALL,0));execute_args args=new execute_args();args.setQuery(query);args.write(prot);prot.writeMessageEnd();}public void getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);(new Client(prot)).recv_execute();}}public void fetchOne(AsyncMethodCallback<fetchOne_call>resultHandler)throws TException{checkReady();fetchOne_call method_call=new fetchOne_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class fetchOne_call extends TAsyncMethodCall{public fetchOne_call(AsyncMethodCallback<fetchOne_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.CALL,0));fetchOne_args args=new fetchOne_args();args.write(prot);prot.writeMessageEnd();}public String getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_fetchOne();}}public void fetchN(int numRows,AsyncMethodCallback<fetchN_call>resultHandler)throws TException{checkReady();fetchN_call method_call=new fetchN_call(numRows,resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class fetchN_call extends TAsyncMethodCall{private int numRows;public fetchN_call(int numRows,AsyncMethodCallback<fetchN_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);this.numRows=numRows;}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.CALL,0));fetchN_args args=new fetchN_args();args.setNumRows(numRows);args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_fetchN();}}public void fetchAll(AsyncMethodCallback<fetchAll_call>resultHandler)throws TException{checkReady();fetchAll_call method_call=new fetchAll_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class fetchAll_call extends TAsyncMethodCall{public fetchAll_call(AsyncMethodCallback<fetchAll_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.CALL,0));fetchAll_args args=new fetchAll_args();args.write(prot);prot.writeMessageEnd();}public List<String>getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_fetchAll();}}public void getSchema(AsyncMethodCallback<getSchema_call>resultHandler)throws TException{checkReady();getSchema_call method_call=new getSchema_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class getSchema_call extends TAsyncMethodCall{public getSchema_call(AsyncMethodCallback<getSchema_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.CALL,0));getSchema_args args=new getSchema_args();args.write(prot);prot.writeMessageEnd();}public org.apache.hadoop.hive.metastore.api.Schema getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_getSchema();}}public void getThriftSchema(AsyncMethodCallback<getThriftSchema_call>resultHandler)throws TException{checkReady();getThriftSchema_call method_call=new getThriftSchema_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class getThriftSchema_call extends TAsyncMethodCall{public getThriftSchema_call(AsyncMethodCallback<getThriftSchema_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"getThriftSchema\",TMessageType.CALL,0));getThriftSchema_args args=new getThriftSchema_args();args.write(prot);prot.writeMessageEnd();}public org.apache.hadoop.hive.metastore.api.Schema getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_getThriftSchema();}}public void getClusterStatus(AsyncMethodCallback<getClusterStatus_call>resultHandler)throws TException{checkReady();getClusterStatus_call method_call=new getClusterStatus_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class getClusterStatus_call extends TAsyncMethodCall{public getClusterStatus_call(AsyncMethodCallback<getClusterStatus_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"getClusterStatus\",TMessageType.CALL,0));getClusterStatus_args args=new getClusterStatus_args();args.write(prot);prot.writeMessageEnd();}public HiveClusterStatus getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_getClusterStatus();}}public void getQueryPlan(AsyncMethodCallback<getQueryPlan_call>resultHandler)throws TException{checkReady();getQueryPlan_call method_call=new getQueryPlan_call(resultHandler,this,protocolFactory,transport);manager.call(method_call);}public static class getQueryPlan_call extends TAsyncMethodCall{public getQueryPlan_call(AsyncMethodCallback<getQueryPlan_call>resultHandler,TAsyncClient client,TProtocolFactory protocolFactory,TNonblockingTransport transport)throws TException{super(client,protocolFactory,transport,resultHandler,false);}public void write_args(TProtocol prot)throws TException{prot.writeMessageBegin(new TMessage(\"getQueryPlan\",TMessageType.CALL,0));getQueryPlan_args args=new getQueryPlan_args();args.write(prot);prot.writeMessageEnd();}public org.apache.hadoop.hive.ql.plan.api.QueryPlan getResult()throws HiveServerException,TException{if(getState()!=State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}TMemoryInputTransport memoryTransport=new TMemoryInputTransport(getFrameBuffer().array());TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_getQueryPlan();}}}public static class Processor extends org.apache.hadoop.hive.metastore.api.ThriftHiveMetastore.Processor implements TProcessor{private static final Logger LOGGER=LoggerFactory.getLogger(Processor.class.getName());public Processor(Iface iface){super(iface);iface_=iface;processMap_.put(\"execute\",new execute());processMap_.put(\"fetchOne\",new fetchOne());processMap_.put(\"fetchN\",new fetchN());processMap_.put(\"fetchAll\",new fetchAll());processMap_.put(\"getSchema\",new getSchema());processMap_.put(\"getThriftSchema\",new getThriftSchema());processMap_.put(\"getClusterStatus\",new getClusterStatus());processMap_.put(\"getQueryPlan\",new getQueryPlan());}private Iface iface_;public boolean process(TProtocol iprot,TProtocol oprot)throws TException{TMessage msg=iprot.readMessageBegin();ProcessFunction fn=processMap_.get(msg.name);if(fn==null){TProtocolUtil.skip(iprot,TType.STRUCT);iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.UNKNOWN_METHOD,\"Invalid method name: '\"+msg.name+\"'\");oprot.writeMessageBegin(new TMessage(msg.name,TMessageType.EXCEPTION,msg.seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return true;}fn.process(msg.seqid,iprot,oprot);return true;}private class execute implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{execute_args args=new execute_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"execute\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();execute_result result=new execute_result();try{iface_.execute(args.query);}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing execute\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing execute\");oprot.writeMessageBegin(new TMessage(\"execute\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"execute\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class fetchOne implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{fetchOne_args args=new fetchOne_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();fetchOne_result result=new fetchOne_result();try{result.success=iface_.fetchOne();}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing fetchOne\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing fetchOne\");oprot.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"fetchOne\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class fetchN implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{fetchN_args args=new fetchN_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();fetchN_result result=new fetchN_result();try{result.success=iface_.fetchN(args.numRows);}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing fetchN\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing fetchN\");oprot.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"fetchN\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class fetchAll implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{fetchAll_args args=new fetchAll_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();fetchAll_result result=new fetchAll_result();try{result.success=iface_.fetchAll();}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing fetchAll\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing fetchAll\");oprot.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"fetchAll\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class getSchema implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{getSchema_args args=new getSchema_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();getSchema_result result=new getSchema_result();try{result.success=iface_.getSchema();}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing getSchema\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing getSchema\");oprot.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"getSchema\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class getThriftSchema implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{getThriftSchema_args args=new getThriftSchema_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"getThriftSchema\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();getThriftSchema_result result=new getThriftSchema_result();try{result.success=iface_.getThriftSchema();}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing getThriftSchema\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing getThriftSchema\");oprot.writeMessageBegin(new TMessage(\"getThriftSchema\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"getThriftSchema\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class getClusterStatus implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{getClusterStatus_args args=new getClusterStatus_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"getClusterStatus\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();getClusterStatus_result result=new getClusterStatus_result();try{result.success=iface_.getClusterStatus();}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing getClusterStatus\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing getClusterStatus\");oprot.writeMessageBegin(new TMessage(\"getClusterStatus\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"getClusterStatus\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}private class getQueryPlan implements ProcessFunction{public void process(int seqid,TProtocol iprot,TProtocol oprot)throws TException{getQueryPlan_args args=new getQueryPlan_args();try{args.read(iprot);}catch(TProtocolException e){iprot.readMessageEnd();TApplicationException x=new TApplicationException(TApplicationException.PROTOCOL_ERROR,e.getMessage());oprot.writeMessageBegin(new TMessage(\"getQueryPlan\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}iprot.readMessageEnd();getQueryPlan_result result=new getQueryPlan_result();try{result.success=iface_.getQueryPlan();}catch(HiveServerException ex){result.ex=ex;}catch(Throwable th){LOGGER.error(\"Internal error processing getQueryPlan\",th);TApplicationException x=new TApplicationException(TApplicationException.INTERNAL_ERROR,\"Internal error processing getQueryPlan\");oprot.writeMessageBegin(new TMessage(\"getQueryPlan\",TMessageType.EXCEPTION,seqid));x.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();return;}oprot.writeMessageBegin(new TMessage(\"getQueryPlan\",TMessageType.REPLY,seqid));result.write(oprot);oprot.writeMessageEnd();oprot.getTransport().flush();}}}public static class execute_args implements TBase<execute_args,execute_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"execute_args\");private static final TField QUERY_FIELD_DESC=new TField(\"query\",TType.STRING,(short)1);private String query;public enum _Fields implements TFieldIdEnum{QUERY((short)1,\"query\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return QUERY;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.QUERY,new FieldMetaData(\"query\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(execute_args.class,metaDataMap);}public execute_args(){}public execute_args(String query){this();this.query=query;}public execute_args(execute_args other){if(other.isSetQuery()){this.query=other.query;}}public execute_args deepCopy(){return new execute_args(this);}@Override public void clear(){this.query=null;}public String getQuery(){return this.query;}public void setQuery(String query){this.query=query;}public void unsetQuery(){this.query=null;}public boolean isSetQuery(){return this.query!=null;}public void setQueryIsSet(boolean value){if(!value){this.query=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case QUERY: if(value==null){unsetQuery();}else{setQuery((String)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case QUERY: return getQuery();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case QUERY: return isSetQuery();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof execute_args)return this.equals((execute_args)that);return false;}public boolean equals(execute_args that){if(that==null)return false;boolean this_present_query=true && this.isSetQuery();boolean that_present_query=true && that.isSetQuery();if(this_present_query || that_present_query){if(!(this_present_query && that_present_query))return false;if(!this.query.equals(that.query))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(execute_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;execute_args typedOther=(execute_args)other;lastComparison=Boolean.valueOf(isSetQuery()).compareTo(typedOther.isSetQuery());if(lastComparison!=0){return lastComparison;}if(isSetQuery()){lastComparison=TBaseHelper.compareTo(this.query,typedOther.query);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRING){this.query=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);if(this.query!=null){oprot.writeFieldBegin(QUERY_FIELD_DESC);oprot.writeString(this.query);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class execute_result implements TBase<execute_result,execute_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"execute_result\");private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private HiveServerException ex;public enum _Fields implements TFieldIdEnum{EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(execute_result.class,metaDataMap);}public execute_result(){}public execute_result(HiveServerException ex){this();this.ex=ex;}public execute_result(execute_result other){if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public execute_result deepCopy(){return new execute_result(this);}@Override public void clear(){this.ex=null;}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof execute_result)return this.equals((execute_result)that);return false;}public boolean equals(execute_result that){if(that==null)return false;boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(execute_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;execute_result typedOther=(execute_result)other;lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class fetchOne_args implements TBase<fetchOne_args,fetchOne_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"fetchOne_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(fetchOne_args.class,metaDataMap);}public fetchOne_args(){}public fetchOne_args(fetchOne_args other){}public fetchOne_args deepCopy(){return new fetchOne_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchOne_args)return this.equals((fetchOne_args)that);return false;}public boolean equals(fetchOne_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(fetchOne_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;fetchOne_args typedOther=(fetchOne_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class fetchOne_result implements TBase<fetchOne_result,fetchOne_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"fetchOne_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRING,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private String success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRING)));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(fetchOne_result.class,metaDataMap);}public fetchOne_result(){}public fetchOne_result(String success,HiveServerException ex){this();this.success=success;this.ex=ex;}public fetchOne_result(fetchOne_result other){if(other.isSetSuccess()){this.success=other.success;}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public fetchOne_result deepCopy(){return new fetchOne_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public String getSuccess(){return this.success;}public void setSuccess(String success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((String)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchOne_result)return this.equals((fetchOne_result)that);return false;}public boolean equals(fetchOne_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(fetchOne_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;fetchOne_result typedOther=(fetchOne_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRING){this.success=iprot.readString();}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);oprot.writeString(this.success);oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class fetchN_args implements TBase<fetchN_args,fetchN_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"fetchN_args\");private static final TField NUM_ROWS_FIELD_DESC=new TField(\"numRows\",TType.I32,(short)1);private int numRows;public enum _Fields implements TFieldIdEnum{NUM_ROWS((short)1,\"numRows\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return NUM_ROWS;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}private static final int __NUMROWS_ISSET_ID=0;private BitSet __isset_bit_vector=new BitSet(1);public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.NUM_ROWS,new FieldMetaData(\"numRows\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.I32)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(fetchN_args.class,metaDataMap);}public fetchN_args(){}public fetchN_args(int numRows){this();this.numRows=numRows;setNumRowsIsSet(true);}public fetchN_args(fetchN_args other){__isset_bit_vector.clear();__isset_bit_vector.or(other.__isset_bit_vector);this.numRows=other.numRows;}public fetchN_args deepCopy(){return new fetchN_args(this);}@Override public void clear(){setNumRowsIsSet(false);this.numRows=0;}public int getNumRows(){return this.numRows;}public void setNumRows(int numRows){this.numRows=numRows;setNumRowsIsSet(true);}public void unsetNumRows(){__isset_bit_vector.clear(__NUMROWS_ISSET_ID);}public boolean isSetNumRows(){return __isset_bit_vector.get(__NUMROWS_ISSET_ID);}public void setNumRowsIsSet(boolean value){__isset_bit_vector.set(__NUMROWS_ISSET_ID,value);}public void setFieldValue(_Fields field,Object value){switch(field){case NUM_ROWS: if(value==null){unsetNumRows();}else{setNumRows((Integer)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case NUM_ROWS: return new Integer(getNumRows());}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NUM_ROWS: return isSetNumRows();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchN_args)return this.equals((fetchN_args)that);return false;}public boolean equals(fetchN_args that){if(that==null)return false;boolean this_present_numRows=true;boolean that_present_numRows=true;if(this_present_numRows || that_present_numRows){if(!(this_present_numRows && that_present_numRows))return false;if(this.numRows!=that.numRows)return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(fetchN_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;fetchN_args typedOther=(fetchN_args)other;lastComparison=Boolean.valueOf(isSetNumRows()).compareTo(typedOther.isSetNumRows());if(lastComparison!=0){return lastComparison;}if(isSetNumRows()){lastComparison=TBaseHelper.compareTo(this.numRows,typedOther.numRows);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 1: if(field.type==TType.I32){this.numRows=iprot.readI32();setNumRowsIsSet(true);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldBegin(NUM_ROWS_FIELD_DESC);oprot.writeI32(this.numRows);oprot.writeFieldEnd();oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class fetchN_result implements TBase<fetchN_result,fetchN_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"fetchN_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private List<String>success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(fetchN_result.class,metaDataMap);}public fetchN_result(){}public fetchN_result(List<String>success,HiveServerException ex){this();this.success=success;this.ex=ex;}public fetchN_result(fetchN_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public fetchN_result deepCopy(){return new fetchN_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchN_result)return this.equals((fetchN_result)that);return false;}public boolean equals(fetchN_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(fetchN_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;fetchN_result typedOther=(fetchN_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list0=iprot.readListBegin();this.success=new ArrayList<String>(_list0.size);for(int _i1=0;_i1<_list0.size;++_i1){String _elem2;_elem2=iprot.readString();this.success.add(_elem2);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter3 : this.success){oprot.writeString(_iter3);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class fetchAll_args implements TBase<fetchAll_args,fetchAll_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"fetchAll_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(fetchAll_args.class,metaDataMap);}public fetchAll_args(){}public fetchAll_args(fetchAll_args other){}public fetchAll_args deepCopy(){return new fetchAll_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchAll_args)return this.equals((fetchAll_args)that);return false;}public boolean equals(fetchAll_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(fetchAll_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;fetchAll_args typedOther=(fetchAll_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class fetchAll_result implements TBase<fetchAll_result,fetchAll_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"fetchAll_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.LIST,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private List<String>success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new ListMetaData(TType.LIST,new FieldValueMetaData(TType.STRING))));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(fetchAll_result.class,metaDataMap);}public fetchAll_result(){}public fetchAll_result(List<String>success,HiveServerException ex){this();this.success=success;this.ex=ex;}public fetchAll_result(fetchAll_result other){if(other.isSetSuccess()){List<String>__this__success=new ArrayList<String>();for(String other_element : other.success){__this__success.add(other_element);}this.success=__this__success;}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public fetchAll_result deepCopy(){return new fetchAll_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public int getSuccessSize(){return(this.success==null)? 0 : this.success.size();}public java.util.Iterator<String>getSuccessIterator(){return(this.success==null)? null : this.success.iterator();}public void addToSuccess(String elem){if(this.success==null){this.success=new ArrayList<String>();}this.success.add(elem);}public List<String>getSuccess(){return this.success;}public void setSuccess(List<String>success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof fetchAll_result)return this.equals((fetchAll_result)that);return false;}public boolean equals(fetchAll_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(fetchAll_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;fetchAll_result typedOther=(fetchAll_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.LIST){{TList _list4=iprot.readListBegin();this.success=new ArrayList<String>(_list4.size);for(int _i5=0;_i5<_list4.size;++_i5){String _elem6;_elem6=iprot.readString();this.success.add(_elem6);}iprot.readListEnd();}}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);{oprot.writeListBegin(new TList(TType.STRING,this.success.size()));for(String _iter7 : this.success){oprot.writeString(_iter7);}oprot.writeListEnd();}oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getSchema_args implements TBase<getSchema_args,getSchema_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getSchema_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getSchema_args.class,metaDataMap);}public getSchema_args(){}public getSchema_args(getSchema_args other){}public getSchema_args deepCopy(){return new getSchema_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getSchema_args)return this.equals((getSchema_args)that);return false;}public boolean equals(getSchema_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(getSchema_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getSchema_args typedOther=(getSchema_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getSchema_result implements TBase<getSchema_result,getSchema_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getSchema_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private org.apache.hadoop.hive.metastore.api.Schema success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,org.apache.hadoop.hive.metastore.api.Schema.class)));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getSchema_result.class,metaDataMap);}public getSchema_result(){}public getSchema_result(org.apache.hadoop.hive.metastore.api.Schema success,HiveServerException ex){this();this.success=success;this.ex=ex;}public getSchema_result(getSchema_result other){if(other.isSetSuccess()){this.success=new org.apache.hadoop.hive.metastore.api.Schema(other.success);}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public getSchema_result deepCopy(){return new getSchema_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public org.apache.hadoop.hive.metastore.api.Schema getSuccess(){return this.success;}public void setSuccess(org.apache.hadoop.hive.metastore.api.Schema success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((org.apache.hadoop.hive.metastore.api.Schema)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getSchema_result)return this.equals((getSchema_result)that);return false;}public boolean equals(getSchema_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(getSchema_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getSchema_result typedOther=(getSchema_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new org.apache.hadoop.hive.metastore.api.Schema();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getThriftSchema_args implements TBase<getThriftSchema_args,getThriftSchema_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getThriftSchema_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getThriftSchema_args.class,metaDataMap);}public getThriftSchema_args(){}public getThriftSchema_args(getThriftSchema_args other){}public getThriftSchema_args deepCopy(){return new getThriftSchema_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getThriftSchema_args)return this.equals((getThriftSchema_args)that);return false;}public boolean equals(getThriftSchema_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(getThriftSchema_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getThriftSchema_args typedOther=(getThriftSchema_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getThriftSchema_result implements TBase<getThriftSchema_result,getThriftSchema_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getThriftSchema_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private org.apache.hadoop.hive.metastore.api.Schema success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,org.apache.hadoop.hive.metastore.api.Schema.class)));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getThriftSchema_result.class,metaDataMap);}public getThriftSchema_result(){}public getThriftSchema_result(org.apache.hadoop.hive.metastore.api.Schema success,HiveServerException ex){this();this.success=success;this.ex=ex;}public getThriftSchema_result(getThriftSchema_result other){if(other.isSetSuccess()){this.success=new org.apache.hadoop.hive.metastore.api.Schema(other.success);}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public getThriftSchema_result deepCopy(){return new getThriftSchema_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public org.apache.hadoop.hive.metastore.api.Schema getSuccess(){return this.success;}public void setSuccess(org.apache.hadoop.hive.metastore.api.Schema success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((org.apache.hadoop.hive.metastore.api.Schema)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getThriftSchema_result)return this.equals((getThriftSchema_result)that);return false;}public boolean equals(getThriftSchema_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(getThriftSchema_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getThriftSchema_result typedOther=(getThriftSchema_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new org.apache.hadoop.hive.metastore.api.Schema();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getClusterStatus_args implements TBase<getClusterStatus_args,getClusterStatus_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getClusterStatus_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getClusterStatus_args.class,metaDataMap);}public getClusterStatus_args(){}public getClusterStatus_args(getClusterStatus_args other){}public getClusterStatus_args deepCopy(){return new getClusterStatus_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getClusterStatus_args)return this.equals((getClusterStatus_args)that);return false;}public boolean equals(getClusterStatus_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(getClusterStatus_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getClusterStatus_args typedOther=(getClusterStatus_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getClusterStatus_result implements TBase<getClusterStatus_result,getClusterStatus_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getClusterStatus_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private HiveClusterStatus success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,HiveClusterStatus.class)));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getClusterStatus_result.class,metaDataMap);}public getClusterStatus_result(){}public getClusterStatus_result(HiveClusterStatus success,HiveServerException ex){this();this.success=success;this.ex=ex;}public getClusterStatus_result(getClusterStatus_result other){if(other.isSetSuccess()){this.success=new HiveClusterStatus(other.success);}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public getClusterStatus_result deepCopy(){return new getClusterStatus_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public HiveClusterStatus getSuccess(){return this.success;}public void setSuccess(HiveClusterStatus success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((HiveClusterStatus)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getClusterStatus_result)return this.equals((getClusterStatus_result)that);return false;}public boolean equals(getClusterStatus_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(getClusterStatus_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getClusterStatus_result typedOther=(getClusterStatus_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new HiveClusterStatus();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getQueryPlan_args implements TBase<getQueryPlan_args,getQueryPlan_args._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getQueryPlan_args\");public enum _Fields implements TFieldIdEnum{;private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getQueryPlan_args.class,metaDataMap);}public getQueryPlan_args(){}public getQueryPlan_args(getQueryPlan_args other){}public getQueryPlan_args deepCopy(){return new getQueryPlan_args(this);}@Override public void clear(){}public void setFieldValue(_Fields field,Object value){switch(field){}}public Object getFieldValue(_Fields field){switch(field){}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getQueryPlan_args)return this.equals((getQueryPlan_args)that);return false;}public boolean equals(getQueryPlan_args that){if(that==null)return false;return true;}@Override public int hashCode(){return 0;}public int compareTo(getQueryPlan_args other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getQueryPlan_args typedOther=(getQueryPlan_args)other;return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}public static class getQueryPlan_result implements TBase<getQueryPlan_result,getQueryPlan_result._Fields>,java.io.Serializable,Cloneable{private static final TStruct STRUCT_DESC=new TStruct(\"getQueryPlan_result\");private static final TField SUCCESS_FIELD_DESC=new TField(\"success\",TType.STRUCT,(short)0);private static final TField EX_FIELD_DESC=new TField(\"ex\",TType.STRUCT,(short)1);private org.apache.hadoop.hive.ql.plan.api.QueryPlan success;private HiveServerException ex;public enum _Fields implements TFieldIdEnum{SUCCESS((short)0,\"success\"),EX((short)1,\"ex\");private static final Map<String,_Fields>byName=new HashMap<String,_Fields>();static{for(_Fields field : EnumSet.allOf(_Fields.class)){byName.put(field.getFieldName(),field);}}public static _Fields findByThriftId(int fieldId){switch(fieldId){case 0: return SUCCESS;case 1: return EX;default: return null;}}public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}public static _Fields findByName(String name){return byName.get(name);}private final short _thriftId;private final String _fieldName;_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}public short getThriftFieldId(){return _thriftId;}public String getFieldName(){return _fieldName;}}public static final Map<_Fields,FieldMetaData>metaDataMap;static{Map<_Fields,FieldMetaData>tmpMap=new EnumMap<_Fields,FieldMetaData>(_Fields.class);tmpMap.put(_Fields.SUCCESS,new FieldMetaData(\"success\",TFieldRequirementType.DEFAULT,new StructMetaData(TType.STRUCT,org.apache.hadoop.hive.ql.plan.api.QueryPlan.class)));tmpMap.put(_Fields.EX,new FieldMetaData(\"ex\",TFieldRequirementType.DEFAULT,new FieldValueMetaData(TType.STRUCT)));metaDataMap=Collections.unmodifiableMap(tmpMap);FieldMetaData.addStructMetaDataMap(getQueryPlan_result.class,metaDataMap);}public getQueryPlan_result(){}public getQueryPlan_result(org.apache.hadoop.hive.ql.plan.api.QueryPlan success,HiveServerException ex){this();this.success=success;this.ex=ex;}public getQueryPlan_result(getQueryPlan_result other){if(other.isSetSuccess()){this.success=new org.apache.hadoop.hive.ql.plan.api.QueryPlan(other.success);}if(other.isSetEx()){this.ex=new HiveServerException(other.ex);}}public getQueryPlan_result deepCopy(){return new getQueryPlan_result(this);}@Override public void clear(){this.success=null;this.ex=null;}public org.apache.hadoop.hive.ql.plan.api.QueryPlan getSuccess(){return this.success;}public void setSuccess(org.apache.hadoop.hive.ql.plan.api.QueryPlan success){this.success=success;}public void unsetSuccess(){this.success=null;}public boolean isSetSuccess(){return this.success!=null;}public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}public HiveServerException getEx(){return this.ex;}public void setEx(HiveServerException ex){this.ex=ex;}public void unsetEx(){this.ex=null;}public boolean isSetEx(){return this.ex!=null;}public void setExIsSet(boolean value){if(!value){this.ex=null;}}public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((org.apache.hadoop.hive.ql.plan.api.QueryPlan)value);}break;case EX: if(value==null){unsetEx();}else{setEx((HiveServerException)value);}break;}}public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case EX: return getEx();}throw new IllegalStateException();}public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case SUCCESS: return isSetSuccess();case EX: return isSetEx();}throw new IllegalStateException();}@Override public boolean equals(Object that){if(that==null)return false;if(that instanceof getQueryPlan_result)return this.equals((getQueryPlan_result)that);return false;}public boolean equals(getQueryPlan_result that){if(that==null)return false;boolean this_present_success=true && this.isSetSuccess();boolean that_present_success=true && that.isSetSuccess();if(this_present_success || that_present_success){if(!(this_present_success && that_present_success))return false;if(!this.success.equals(that.success))return false;}boolean this_present_ex=true && this.isSetEx();boolean that_present_ex=true && that.isSetEx();if(this_present_ex || that_present_ex){if(!(this_present_ex && that_present_ex))return false;if(!this.ex.equals(that.ex))return false;}return true;}@Override public int hashCode(){return 0;}public int compareTo(getQueryPlan_result other){if(!getClass().equals(other.getClass())){return getClass().getName().compareTo(other.getClass().getName());}int lastComparison=0;getQueryPlan_result typedOther=(getQueryPlan_result)other;lastComparison=Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());if(lastComparison!=0){return lastComparison;}if(isSetSuccess()){lastComparison=TBaseHelper.compareTo(this.success,typedOther.success);if(lastComparison!=0){return lastComparison;}}lastComparison=Boolean.valueOf(isSetEx()).compareTo(typedOther.isSetEx());if(lastComparison!=0){return lastComparison;}if(isSetEx()){lastComparison=TBaseHelper.compareTo(this.ex,typedOther.ex);if(lastComparison!=0){return lastComparison;}}return 0;}public _Fields fieldForId(int fieldId){return _Fields.findByThriftId(fieldId);}public void read(TProtocol iprot)throws TException{TField field;iprot.readStructBegin();while(true){field=iprot.readFieldBegin();if(field.type==TType.STOP){break;}switch(field.id){case 0: if(field.type==TType.STRUCT){this.success=new org.apache.hadoop.hive.ql.plan.api.QueryPlan();this.success.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;case 1: if(field.type==TType.STRUCT){this.ex=new HiveServerException();this.ex.read(iprot);}else{TProtocolUtil.skip(iprot,field.type);}break;default: TProtocolUtil.skip(iprot,field.type);}iprot.readFieldEnd();}iprot.readStructEnd();validate();}public void write(TProtocol oprot)throws TException{oprot.writeStructBegin(STRUCT_DESC);if(this.isSetSuccess()){oprot.writeFieldBegin(SUCCESS_FIELD_DESC);this.success.write(oprot);oprot.writeFieldEnd();}else if(this.isSetEx()){oprot.writeFieldBegin(EX_FIELD_DESC);this.ex.write(oprot);oprot.writeFieldEnd();}oprot.writeFieldStop();oprot.writeStructEnd();}public void validate()throws TException{}}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/abstract class EntityBase{String region;String tableName;String dbName;Map<String,String>partitionKVs;abstract static class Entity extends EntityBase{public String getRegion(){return region;}public String getTableName(){return tableName;}public String getDbName(){return dbName;}public Map<String,String>getPartitionKVs(){return partitionKVs;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class CreateDatabaseMessage extends HCatEventMessage{protected CreateDatabaseMessage(){super(EventType.CREATE_DATABASE);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class DropDatabaseMessage extends HCatEventMessage{protected DropDatabaseMessage(){super(EventType.DROP_DATABASE);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/@Immutable public class ProxyAuthenticationStrategy extends AuthenticationStrategyImpl{public ProxyAuthenticationStrategy(){super(HttpStatus.SC_PROXY_AUTHENTICATION_REQUIRED,AUTH.PROXY_AUTH,AuthPNames.PROXY_AUTH_PREF);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/@Immutable public class TargetAuthenticationStrategy extends AuthenticationStrategyImpl{public TargetAuthenticationStrategy(){super(HttpStatus.SC_UNAUTHORIZED,AUTH.WWW_AUTH,AuthPNames.TARGET_AUTH_PREF);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$HeadURL$*$Revision$*$Date$**====================================================================**Licensed to the Apache Software Foundation(ASF)under one or more*contributor license agreements.See the NOTICE file distributed with*this work for additional information regarding copyright ownership.*The ASF licenses this file to You under the Apache License,Version 2.0*(the \"License\");you may not use this file except in compliance with*the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class HttpConnParams{public static final String DEFAULT_PROXY=\"http.default-proxy\";private HttpConnParams(){}}"
    },
    {
        "code_smells": [
            "LargeClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/java/org/apache/commons/httpclient/Cookie.java,v 1.44 2004/06/05 16:49:20 olegk Exp $*$Revision$*$Date$**====================================================================**Copyright 1999-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class Cookie extends NameValuePair{public Cookie(){this(null,\"noname\",null,null,null,false);}public Cookie(String domain,String name,String value){this(domain,name,value,null,null,false);}public Cookie(String domain,String name,String value,String path,Date expires,boolean secure){super(name,value);if(name==null){throw new IllegalArgumentException(\"Cookie name may not be null\");}if(name.trim().equals(\"\")){throw new IllegalArgumentException(\"Cookie name may not be blank\");}this.setPath(path);this.setDomain(domain);this.setExpiryDate(expires);this.setSecure(secure);}public Cookie(String domain,String name,String value,String path,int maxAge,boolean secure){this(domain,name,value,path,null,secure);if(maxAge<-1){throw new IllegalArgumentException(\"Invalid max age: \"+Integer.toString(maxAge));}if(maxAge>=0){setExpiryDate(new Date(System.currentTimeMillis()+maxAge*1000L));}}public String getComment(){return cookieComment;}public void setComment(String comment){cookieComment=comment;}public Date getExpiryDate(){return cookieExpiryDate;}public void setExpiryDate(Date expiryDate){cookieExpiryDate=expiryDate;}public boolean isPersistent(){return(null!=cookieExpiryDate);}public String getDomain(){return cookieDomain;}public void setDomain(String domain){if(domain!=null){int ndx=domain.indexOf(\":\");if(ndx!=-1){domain=domain.substring(0,ndx);}cookieDomain=domain.toLowerCase();}}public String getPath(){return cookiePath;}public void setPath(String path){cookiePath=path;}public boolean getSecure(){return isSecure;}public void setSecure(boolean secure){isSecure=secure;}public int getVersion(){return cookieVersion;}public void setVersion(int version){cookieVersion=version;}public boolean isExpired(){return(cookieExpiryDate!=null && cookieExpiryDate.getTime()<=System.currentTimeMillis());}public boolean isExpired(Date now){return(cookieExpiryDate!=null && cookieExpiryDate.getTime()<=now.getTime());}public void setPathAttributeSpecified(boolean value){hasPathAttribute=value;}public boolean isPathAttributeSpecified(){return hasPathAttribute;}public void setDomainAttributeSpecified(boolean value){hasDomainAttribute=value;}public boolean isDomainAttributeSpecified(){return hasDomainAttribute;}public int hashCode(){int hash=LangUtils.HASH_SEED;hash=LangUtils.hashCode(hash,this.getName());hash=LangUtils.hashCode(hash,this.cookieDomain);hash=LangUtils.hashCode(hash,this.cookiePath);return hash;}public boolean equals(Object obj){if(obj==null)return false;if(this==obj)return true;if(obj instanceof Cookie){Cookie that=(Cookie)obj;return LangUtils.equals(this.getName(),that.getName())&& LangUtils.equals(this.cookieDomain,that.cookieDomain)&& LangUtils.equals(this.cookiePath,that.cookiePath);}else{return false;}}private String cookieComment;private String cookieDomain;private Date cookieExpiryDate;private String cookiePath;private boolean isSecure;private boolean hasPathAttribute=false;private boolean hasDomainAttribute=false;private int cookieVersion=0;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public final class SimpleRequestProducer extends DefaultAsyncRequestProducer{public SimpleRequestProducer(final SimpleHttpRequest request){super(Args.notNull(request,\"Request\"),request.getBody()!=null ? new StringAsyncEntityProducer(request.getBody(),request.getContentType()): null);}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class HttpAuthenticator{private final Log log;public HttpAuthenticator(final Log log){super();this.log=log!=null ? log : LogFactory.getLog(getClass());}public HttpAuthenticator(){this(null);}public boolean authenticate(final HttpHost host,final HttpResponse response,final AuthenticationHandler authHandler,final AuthState authState,final CredentialsProvider credsProvider,final HttpContext context){try{if(this.log.isDebugEnabled()){this.log.debug(host.toHostString()+\" requested authentication\");}Map<String,Header>challenges=authHandler.getChallenges(response,context);AuthScheme authScheme=authState.getAuthScheme();if(authScheme==null){authScheme=authHandler.selectScheme(challenges,response,context);authState.setAuthScheme(authScheme);}String id=authScheme.getSchemeName();Header challenge=challenges.get(id.toLowerCase(Locale.US));if(challenge==null){if(this.log.isWarnEnabled()){this.log.warn(id+\" authorization challenge expected,but not found\");}return false;}authScheme.processChallenge(challenge);this.log.debug(\"Authorization challenge processed\");AuthScope authScope=new AuthScope(host.getHostName(),host.getPort(),authScheme.getRealm(),authScheme.getSchemeName());if(this.log.isDebugEnabled()){this.log.debug(\"Authentication scope: \"+authScope);}Credentials creds=authState.getCredentials();if(creds==null){creds=credsProvider.getCredentials(authScope);if(this.log.isDebugEnabled()){if(creds!=null){this.log.debug(\"Found credentials\");}else{this.log.debug(\"Credentials not found\");}}}else{if(authScheme.isComplete()){this.log.debug(\"Authentication failed\");creds=null;}}authState.setAuthScope(authScope);authState.setCredentials(creds);return creds!=null;}catch(MalformedChallengeException ex){if(this.log.isWarnEnabled()){this.log.warn(\"Malformed challenge: \"+ex.getMessage());}return false;}catch(AuthenticationException ex){if(this.log.isWarnEnabled()){this.log.warn(\"Authentication error: \"+ex.getMessage());}return false;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class HPackException extends IOException{public HPackException(final String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$Header:/home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//httpclient/src/java/org/apache/commons/httpclient/ProtocolException.java,v 1.4 2004/05/13 04:03:25 mbecke Exp $*$Revision: 1.4 $*$Date: 2004/05/13 04:03:25 $**====================================================================**Copyright 1999-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ProtocolException extends HttpException{public ProtocolException(){super();}public ProtocolException(String message){super(message);}public ProtocolException(String message,Throwable cause){super(message,cause);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class H2CorruptFrameException extends IOException{public H2CorruptFrameException(final String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class StreamClosedException extends IOException{public StreamClosedException(final String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/@Contract(threading=ThreadingBehavior.IMMUTABLE_CONDITIONAL)public class ClientHttp2IOEventHandler extends AbstractHttp2IOEventHandler{public ClientHttp2IOEventHandler(final ClientHttp2StreamMultiplexer streamMultiplexer){super(streamMultiplexer);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/@Contract(threading=ThreadingBehavior.IMMUTABLE_CONDITIONAL)public class ServerHttp2IOEventHandler extends AbstractHttp2IOEventHandler{public ServerHttp2IOEventHandler(final ServerHttp2StreamMultiplexer streamMultiplexer){super(streamMultiplexer);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/@Contract(threading=ThreadingBehavior.IMMUTABLE_CONDITIONAL)public class ClientHttp1IOEventHandler extends AbstractHttp1IOEventHandler{public ClientHttp1IOEventHandler(final ClientHttp1StreamDuplexer streamDuplexer){super(streamDuplexer);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/@Contract(threading=ThreadingBehavior.IMMUTABLE_CONDITIONAL)public class ServerHttp1IOEventHandler extends AbstractHttp1IOEventHandler{public ServerHttp1IOEventHandler(final ServerHttp1StreamDuplexer streamDuplexer){super(streamDuplexer);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**====================================================================*Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class ClassicTestClientTestingAdapter extends ClientTestingAdapter{public ClassicTestClientTestingAdapter(){super(new ClassicTestClientAdapter());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$HeadURL$*$Revision$*$Date$**====================================================================**Copyright 1999-2006 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class GeneratedHeader extends Header{public GeneratedHeader(final String name,final String value){super(name,value);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**$HeadURL$*$Revision$*$Date$**====================================================================**Copyright 1999-2004 The Apache Software Foundation**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation.For more*information on the Apache Software Foundation,please see*<http://www.apache.org/>.**/public class NoHttpResponseException extends IOException{public NoHttpResponseException(){super();}public NoHttpResponseException(String message){super(message);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**The Apache Software License,Version 1.1***Copyright(c)1999 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,*if any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"<WebSig>\" and \"Apache Software Foundation\" must*not be used to endorse or promote products derived from this*software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\",*nor may \"Apache\" appear in their name,without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation and was*originally based on software copyright(c)2001,Institute for*Data Communications Systems,<http://www.nue.et-inf.uni-siegen.de/>.*The development of this software was partly funded by the European*Commission in the<WebSig>project in the ISIS Programme.*For more information on the Apache Software Foundation,please see*<http://www.apache.org/>.*/public class Canonicalizer20010315OmitComments extends Canonicalizer20010315{public Canonicalizer20010315OmitComments(){this.engineSetIncludeComments(false);this.engineSetURI(Canonicalizer.ALGO_ID_C14N_OMIT_COMMENTS);this.engineSetXPath(Canonicalizer.XPATH_C14N_OMIT_COMMENTS_SINGLE_NODE);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**The Apache Software License,Version 1.1***Copyright(c)1999 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,*if any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"<WebSig>\" and \"Apache Software Foundation\" must*not be used to endorse or promote products derived from this*software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\",*nor may \"Apache\" appear in their name,without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation and was*originally based on software copyright(c)2001,Institute for*Data Communications Systems,<http://www.nue.et-inf.uni-siegen.de/>.*The development of this software was partly funded by the European*Commission in the<WebSig>project in the ISIS Programme.*For more information on the Apache Software Foundation,please see*<http://www.apache.org/>.*/public class Canonicalizer20010315WithComments extends Canonicalizer20010315{public Canonicalizer20010315WithComments(){this.engineSetIncludeComments(true);this.engineSetURI(Canonicalizer.ALGO_ID_C14N_WITH_COMMENTS);this.engineSetXPath(Canonicalizer.XPATH_C14N_WITH_COMMENTS_SINGLE_NODE);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**The Apache Software License,Version 1.1***Copyright(c)1999 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,*if any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"<WebSig>\" and \"Apache Software Foundation\" must*not be used to endorse or promote products derived from this*software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\",*nor may \"Apache\" appear in their name,without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation and was*originally based on software copyright(c)2001,Institute for*Data Communications Systems,<http://www.nue.et-inf.uni-siegen.de/>.*The development of this software was partly funded by the European*Commission in the<WebSig>project in the ISIS Programme.*For more information on the Apache Software Foundation,please see*<http://www.apache.org/>.*/public class Canonicalizer20010315WithoutXPathSupportOmitComments extends Canonicalizer20010315WithoutXPathSupport{public Canonicalizer20010315WithoutXPathSupportOmitComments(){super(false);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**The Apache Software License,Version 1.1***Copyright(c)1999 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,*if any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"<WebSig>\" and \"Apache Software Foundation\" must*not be used to endorse or promote products derived from this*software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\",*nor may \"Apache\" appear in their name,without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation and was*originally based on software copyright(c)2001,Institute for*Data Communications Systems,<http://www.nue.et-inf.uni-siegen.de/>.*The development of this software was partly funded by the European*Commission in the<WebSig>project in the ISIS Programme.*For more information on the Apache Software Foundation,please see*<http://www.apache.org/>.*/public class Canonicalizer20010315WithoutXPathSupportWithComments extends Canonicalizer20010315WithoutXPathSupport{public Canonicalizer20010315WithoutXPathSupportWithComments(){super(true);}}"
    },
    {
        "code_smells": [
            "LargeClass"
        ],
        "source_code": "/**The Apache Software License,Version 1.1***Copyright(c)1999 The Apache Software Foundation.All rights*reserved.**Redistribution and use in source and binary forms,with or without*modification,are permitted provided that the following conditions*are met:**1.Redistributions of source code must retain the above copyright*notice,this list of conditions and the following disclaimer.**2.Redistributions in binary form must reproduce the above copyright*notice,this list of conditions and the following disclaimer in*the documentation and/or other materials provided with the*distribution.**3.The end-user documentation included with the redistribution,*if any,must include the following acknowledgment:*\"This product includes software developed by the*Apache Software Foundation(http://www.apache.org/).\"*Alternately,this acknowledgment may appear in the software itself,*if and wherever such third-party acknowledgments normally appear.**4.The names \"<WebSig>\" and \"Apache Software Foundation\" must*not be used to endorse or promote products derived from this*software without prior written permission.For written*permission,please contact apache@apache.org.**5.Products derived from this software may not be called \"Apache\",*nor may \"Apache\" appear in their name,without prior written*permission of the Apache Software Foundation.**THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED*WARRANTIES,INCLUDING,BUT NOT LIMITED TO,THE IMPLIED WARRANTIES*OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE*DISCLAIMED.IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR*ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,INDIRECT,INCIDENTAL,*SPECIAL,EXEMPLARY,OR CONSEQUENTIAL DAMAGES(INCLUDING,BUT NOT*LIMITED TO,PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;LOSS OF*USE,DATA,OR PROFITS;OR BUSINESS INTERRUPTION)HOWEVER CAUSED AND*ON ANY THEORY OF LIABILITY,WHETHER IN CONTRACT,STRICT LIABILITY,*OR TORT(INCLUDING NEGLIGENCE OR OTHERWISE)ARISING IN ANY WAY OUT*OF THE USE OF THIS SOFTWARE,EVEN IF ADVISED OF THE POSSIBILITY OF*SUCH DAMAGE.*====================================================================**This software consists of voluntary contributions made by many*individuals on behalf of the Apache Software Foundation and was*originally based on software copyright(c)2001,Institute for*Data Communications Systems,<http://www.nue.et-inf.uni-siegen.de/>.*The development of this software was partly funded by the European*Commission in the<WebSig>project in the ISIS Programme.*For more information on the Apache Software Foundation,please see*<http://www.apache.org/>.*/public class SampleTransformNone extends TransformSpi{static org.apache.log4j.Category cat=org.apache.log4j.Category.getInstance(SampleTransformNone.class.getName());public static final String implementedTransformURI=\"http://www.xmlsecurity.org/NS/Transforms#none\";protected String engineGetURI(){return this.implementedTransformURI;}public boolean wantsOctetStream(){return true;}public boolean wantsNodeSet(){return true;}public boolean returnsOctetStream(){return true;}public boolean returnsNodeSet(){return true;}protected XMLSignatureInput enginePerformTransform(XMLSignatureInput input){return input;}static{org.apache.xml.security.Init.init();}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class ContentEncryptedElementSecurityEvent extends AbstractSecuredElementSecurityEvent{public ContentEncryptedElementSecurityEvent(SecurityToken securityToken,boolean encrypted,List<XMLSecurityConstants.ContentType>protectionOrder){super(SecurityEventConstants.ContentEncrypted,securityToken,protectionOrder,false,encrypted);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class KeyNameTokenSecurityEvent extends TokenSecurityEvent{public KeyNameTokenSecurityEvent(){super(SecurityEventConstants.KeyNameToken);}}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Copyright 1999-2004 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class SignatureECDSA extends SignatureAlgorithmSpi{static org.apache.commons.logging.Log log=org.apache.commons.logging.LogFactory.getLog(SignatureECDSA.class.getName());public abstract String engineGetURI();private java.security.Signature _signatureAlgorithm=null;public SignatureECDSA()throws XMLSignatureException{String algorithmID=JCEMapper.translateURItoJCEID(this.engineGetURI());if(log.isDebugEnabled())log.debug(\"Created SignatureECDSA using \"+algorithmID);String provider=JCEMapper.getProviderId();try{if(provider==null){this._signatureAlgorithm=Signature.getInstance(algorithmID);}else{this._signatureAlgorithm=Signature.getInstance(algorithmID,provider);}}catch(java.security.NoSuchAlgorithmException ex){Object[]exArgs={algorithmID,ex.getLocalizedMessage()};throw new XMLSignatureException(\"algorithms.NoSuchAlgorithm\",exArgs);}catch(NoSuchProviderException ex){Object[]exArgs={algorithmID,ex.getLocalizedMessage()};throw new XMLSignatureException(\"algorithms.NoSuchAlgorithm\",exArgs);}}protected void engineSetParameter(AlgorithmParameterSpec params)throws XMLSignatureException{try{this._signatureAlgorithm.setParameter(params);}catch(InvalidAlgorithmParameterException ex){throw new XMLSignatureException(\"empty\",ex);}}protected boolean engineVerify(byte[]signature)throws XMLSignatureException{try{return this._signatureAlgorithm.verify(signature);}catch(SignatureException ex){throw new XMLSignatureException(\"empty\",ex);}}protected void engineInitVerify(Key publicKey)throws XMLSignatureException{if(!(publicKey instanceof PublicKey)){String supplied=publicKey.getClass().getName();String needed=PublicKey.class.getName();Object[]exArgs={supplied,needed};throw new XMLSignatureException(\"algorithms.WrongKeyForThisOperation\",exArgs);}try{this._signatureAlgorithm.initVerify((PublicKey)publicKey);}catch(InvalidKeyException ex){throw new XMLSignatureException(\"empty\",ex);}}protected byte[]engineSign()throws XMLSignatureException{try{return this._signatureAlgorithm.sign();}catch(SignatureException ex){throw new XMLSignatureException(\"empty\",ex);}}protected void engineInitSign(Key privateKey,SecureRandom secureRandom)throws XMLSignatureException{if(!(privateKey instanceof PrivateKey)){String supplied=privateKey.getClass().getName();String needed=PrivateKey.class.getName();Object[]exArgs={supplied,needed};throw new XMLSignatureException(\"algorithms.WrongKeyForThisOperation\",exArgs);}try{this._signatureAlgorithm.initSign((PrivateKey)privateKey,secureRandom);}catch(InvalidKeyException ex){throw new XMLSignatureException(\"empty\",ex);}}protected void engineInitSign(Key privateKey)throws XMLSignatureException{if(!(privateKey instanceof PrivateKey)){String supplied=privateKey.getClass().getName();String needed=PrivateKey.class.getName();Object[]exArgs={supplied,needed};throw new XMLSignatureException(\"algorithms.WrongKeyForThisOperation\",exArgs);}try{this._signatureAlgorithm.initSign((PrivateKey)privateKey);}catch(InvalidKeyException ex){throw new XMLSignatureException(\"empty\",ex);}}protected void engineUpdate(byte[]input)throws XMLSignatureException{try{this._signatureAlgorithm.update(input);}catch(SignatureException ex){throw new XMLSignatureException(\"empty\",ex);}}protected void engineUpdate(byte input)throws XMLSignatureException{try{this._signatureAlgorithm.update(input);}catch(SignatureException ex){throw new XMLSignatureException(\"empty\",ex);}}protected void engineUpdate(byte[]buf,int offset,int len)throws XMLSignatureException{try{this._signatureAlgorithm.update(buf,offset,len);}catch(SignatureException ex){throw new XMLSignatureException(\"empty\",ex);}}protected String engineGetJCEAlgorithmString(){return this._signatureAlgorithm.getAlgorithm();}protected String engineGetJCEProviderName(){return this._signatureAlgorithm.getProvider().getName();}protected void engineSetHMACOutputLength(int HMACOutputLength)throws XMLSignatureException{throw new XMLSignatureException(\"algorithms.HMACOutputLengthOnlyForHMAC\");}protected void engineInitSign(Key signingKey,AlgorithmParameterSpec algorithmParameterSpec)throws XMLSignatureException{throw new XMLSignatureException(\"algorithms.CannotUseAlgorithmParameterSpecOnRSA\");}public static class SignatureECDSASHA1 extends SignatureECDSA{public SignatureECDSASHA1()throws XMLSignatureException{super();}public String engineGetURI(){return XMLSignature.ALGO_ID_SIGNATURE_ECDSA_SHA1;}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class DefaultTokenSecurityEvent extends TokenSecurityEvent{public DefaultTokenSecurityEvent(){super(SecurityEventConstants.DefaultToken);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class ElementCheckerImpl{public static class InternedNsChecker implements ElementChecker{public void guaranteeThatElementInCorrectSpace(ElementProxy expected,Element actual)throws XMLSecurityException{String localnameSHOULDBE=expected.getBaseLocalName();String namespaceSHOULDBE=expected.getBaseNamespace();String localnameIS=actual.getLocalName();String namespaceIS=actual.getNamespaceURI();if((namespaceSHOULDBE!=namespaceIS)|| !localnameSHOULDBE.equals(localnameIS)){Object[]exArgs={namespaceIS+\":\"+localnameIS,namespaceSHOULDBE+\":\"+localnameSHOULDBE};throw new XMLSecurityException(\"xml.WrongElement\",exArgs);}}}public static class FullChecker implements ElementChecker{public void guaranteeThatElementInCorrectSpace(ElementProxy expected,Element actual)throws XMLSecurityException{String localnameSHOULDBE=expected.getBaseLocalName();String namespaceSHOULDBE=expected.getBaseNamespace();String localnameIS=actual.getLocalName();String namespaceIS=actual.getNamespaceURI();if((!namespaceSHOULDBE.equals(namespaceIS))|| !localnameSHOULDBE.equals(localnameIS)){Object[]exArgs={namespaceIS+\":\"+localnameIS,namespaceSHOULDBE+\":\"+localnameSHOULDBE};throw new XMLSecurityException(\"xml.WrongElement\",exArgs);}}}public static class EmptyChecker implements ElementChecker{public void guaranteeThatElementInCorrectSpace(ElementProxy expected,Element actual)throws XMLSecurityException{}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class Canonicalizer20010315 extends CanonicalizerBase{public Canonicalizer20010315(boolean includeComments){super(includeComments);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Cipher_AES192_BC{public Cipher_AES192_BC(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Cipher_AES256_BC{public Cipher_AES256_BC(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class EncryptedKeyTokenSecurityEvent extends TokenSecurityEvent{public EncryptedKeyTokenSecurityEvent(){super(SecurityEventConstants.EncryptedKeyToken);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name=\"EncryptedDataType\",namespace=\"http://www.w3.org/2001/04/xmlenc#\")public class EncryptedDataType extends EncryptedType{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name=\"MGFType\",namespace=\"http://www.w3.org/2009/xmlenc11#\")public class MGFType extends AlgorithmIdentifierType{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/@XmlAccessorType(XmlAccessType.FIELD)@XmlType(name=\"PRFAlgorithmIdentifierType\",namespace=\"http://www.w3.org/2009/xmlenc11#\")public class PRFAlgorithmIdentifierType extends AlgorithmIdentifierType{}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class KeySelector{public static class Purpose{private final String name;private Purpose(String name){this.name=name;}public static final Purpose SIGN=new Purpose(\"sign\");public static final Purpose VERIFY=new Purpose(\"verify\");public static final Purpose ENCRYPT=new Purpose(\"encrypt\");public static final Purpose DECRYPT=new Purpose(\"decrypt\");}protected KeySelector(){}public abstract KeySelectorResult select(KeyInfo keyInfo,Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException;public static KeySelector singletonKeySelector(Key key){return new SingletonKeySelector(key);}private static class SingletonKeySelector extends KeySelector{private final Key key;SingletonKeySelector(Key key){if(key==null){throw new NullPointerException();}this.key=key;}public KeySelectorResult select(KeyInfo keyInfo,Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException{return new KeySelectorResult(){public Key getKey(){return key;}};}}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class OctetStreamData implements Data{private InputStream octetStream;private String uri;private String mimeType;public OctetStreamData(InputStream octetStream){if(octetStream==null){throw new NullPointerException(\"octetStream is null\");}this.octetStream=octetStream;}public OctetStreamData(InputStream octetStream,String uri,String mimeType){if(octetStream==null){throw new NullPointerException(\"octetStream is null\");}this.octetStream=octetStream;this.uri=uri;this.mimeType=mimeType;}public InputStream getOctetStream(){return octetStream;}public String getURI(){return uri;}public String getMimeType(){return mimeType;}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class TransformService implements Transform{private String algorithm;private String mechanism;private Provider provider;protected TransformService(){}public static TransformService getInstance(String algorithm,String mechanismType)throws NoSuchAlgorithmException{if(mechanismType==null || algorithm==null){throw new NullPointerException();}return findInstance(algorithm,mechanismType,null);}public static TransformService getInstance(String algorithm,String mechanismType,Provider provider)throws NoSuchAlgorithmException{if(mechanismType==null || algorithm==null || provider==null){throw new NullPointerException();}return findInstance(algorithm,mechanismType,provider);}public static TransformService getInstance(String algorithm,String mechanismType,String provider)throws NoSuchAlgorithmException,NoSuchProviderException{if(mechanismType==null || algorithm==null || provider==null){throw new NullPointerException();}Provider prov=Security.getProvider(provider);if(prov==null){throw new NoSuchProviderException(\"cannot find provider named \"+provider);}return findInstance(algorithm,mechanismType,prov);}private static TransformService findInstance(String algorithm,String mechanismType,Provider provider)throws NoSuchAlgorithmException{Object[]objs=(Object[])XMLDSigSecurity.getImpl(algorithm,new MechanismMapEntry(algorithm,mechanismType),\"TransformService\",provider);TransformService spi=(TransformService)objs[0];spi.mechanism=mechanismType;spi.algorithm=algorithm;spi.provider=(Provider)objs[1];return spi;}private static class MechanismMapEntry implements Map.Entry{private final String mechanism;private final String key;MechanismMapEntry(String algorithm,String mechanism){this.mechanism=mechanism;this.key=\"TransformService.\"+algorithm+\" MechanismType\";}public boolean equals(Object o){if(!(o instanceof Map.Entry)){return false;}Map.Entry e=(Map.Entry)o;return(getKey()==null ? e.getKey()==null : getKey().equals(e.getKey()))&&(getValue()==null ? e.getValue()==null : getValue().equals(e.getValue()));}public Object getKey(){return key;}public Object getValue(){return mechanism;}public Object setValue(Object value){throw new UnsupportedOperationException();}public int hashCode(){return(getKey()==null ? 0 : getKey().hashCode())^(getValue()==null ? 0 : getValue().hashCode());}}public final String getMechanismType(){return mechanism;}public final String getAlgorithm(){return algorithm;}public final Provider getProvider(){return provider;}public abstract void init(TransformParameterSpec params)throws InvalidAlgorithmParameterException;public abstract void marshalParams(XMLStructure parent,XMLCryptoContext context)throws MarshalException;public abstract void init(XMLStructure parent,XMLCryptoContext context)throws InvalidAlgorithmParameterException;}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class XMLSignatureFactory{private String mechanismType;private Provider provider;protected XMLSignatureFactory(){}public static XMLSignatureFactory getInstance(String mechanismType){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}return findInstance(mechanismType,null);}private static XMLSignatureFactory findInstance(String mechanismType,Provider provider){Object[]objs=null;try{objs=(Object[])XMLDSigSecurity.getImpl(mechanismType,\"XMLSignatureFactory\",provider);}catch(NoSuchAlgorithmException nsae){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\",nsae);}XMLSignatureFactory factory=(XMLSignatureFactory)objs[0];factory.mechanismType=mechanismType;factory.provider=(Provider)objs[1];return factory;}public static XMLSignatureFactory getInstance(String mechanismType,Provider provider){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}return findInstance(mechanismType,provider);}public static XMLSignatureFactory getInstance(String mechanismType,String provider)throws NoSuchProviderException{if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}Provider prov=Security.getProvider(provider);if(prov==null){throw new NoSuchProviderException(\"cannot find provider named \"+provider);}return findInstance(mechanismType,prov);}public static XMLSignatureFactory getInstance(){return getInstance(\"DOM\");}public final String getMechanismType(){return mechanismType;}public final Provider getProvider(){return provider;}public abstract XMLSignature newXMLSignature(SignedInfo si,KeyInfo ki);public abstract XMLSignature newXMLSignature(SignedInfo si,KeyInfo ki,List objects,String id,String signatureValueId);public abstract Reference newReference(String uri,DigestMethod dm);public abstract Reference newReference(String uri,DigestMethod dm,List transforms,String type,String id);public abstract Reference newReference(String uri,DigestMethod dm,List transforms,String type,String id,byte[]digestValue);public abstract Reference newReference(String uri,DigestMethod dm,List appliedTransforms,Data result,List transforms,String type,String id);public abstract SignedInfo newSignedInfo(CanonicalizationMethod cm,SignatureMethod sm,List references);public abstract SignedInfo newSignedInfo(CanonicalizationMethod cm,SignatureMethod sm,List references,String id);public abstract XMLObject newXMLObject(List content,String id,String mimeType,String encoding);public abstract Manifest newManifest(List references);public abstract Manifest newManifest(List references,String id);public abstract SignatureProperty newSignatureProperty(List content,String target,String id);public abstract SignatureProperties newSignatureProperties(List properties,String id);public abstract DigestMethod newDigestMethod(String algorithm,DigestMethodParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract SignatureMethod newSignatureMethod(String algorithm,SignatureMethodParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract Transform newTransform(String algorithm,TransformParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract Transform newTransform(String algorithm,XMLStructure params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract CanonicalizationMethod newCanonicalizationMethod(String algorithm,C14NMethodParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract CanonicalizationMethod newCanonicalizationMethod(String algorithm,XMLStructure params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public final KeyInfoFactory getKeyInfoFactory(){return KeyInfoFactory.getInstance(getMechanismType(),getProvider());}public abstract XMLSignature unmarshalXMLSignature(XMLValidateContext context)throws MarshalException;public abstract XMLSignature unmarshalXMLSignature(XMLStructure xmlStructure)throws MarshalException;public abstract boolean isFeatureSupported(String feature);public abstract URIDereferencer getURIDereferencer();}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class KeyInfoFactory{private String mechanismType;private Provider provider;private static Class cl;private static final Class[]getImplParams={String.class,String.class,Provider.class};private static Method getImplMethod;static{try{cl=Class.forName(\"javax.xml.crypto.dsig.XMLDSigSecurity\");}catch(ClassNotFoundException cnfe){}getImplMethod=(Method)AccessController.doPrivileged(new PrivilegedAction(){public Object run(){Method m=null;try{m=cl.getDeclaredMethod(\"getImpl\",getImplParams);if(m!=null)m.setAccessible(true);}catch(NoSuchMethodException nsme){}return m;}});}protected KeyInfoFactory(){}public static KeyInfoFactory getInstance(String mechanismType){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}return findInstance(mechanismType,null);}private static KeyInfoFactory findInstance(String mechanismType,Provider provider){if(getImplMethod==null){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\");}Object[]objs=null;try{objs=(Object[])getImplMethod.invoke(null,new Object[]{mechanismType,\"KeyInfoFactory\",provider});}catch(IllegalAccessException iae){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\",iae);}catch(InvocationTargetException ite){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\",ite);}KeyInfoFactory factory=(KeyInfoFactory)objs[0];factory.mechanismType=mechanismType;factory.provider=(Provider)objs[1];return factory;}public static KeyInfoFactory getInstance(String mechanismType,Provider provider){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}return findInstance(mechanismType,provider);}public static KeyInfoFactory getInstance(String mechanismType,String provider)throws NoSuchProviderException{if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}Provider prov=Security.getProvider(provider);if(prov==null){throw new NoSuchProviderException(\"cannot find provider named \"+provider);}return findInstance(mechanismType,prov);}public static KeyInfoFactory getInstance(){return getInstance(\"DOM\");}public final String getMechanismType(){return mechanismType;}public final Provider getProvider(){return provider;}public abstract KeyInfo newKeyInfo(List content);public abstract KeyInfo newKeyInfo(List content,String id);public abstract KeyName newKeyName(String name);public abstract KeyValue newKeyValue(PublicKey key)throws KeyException;public abstract PGPData newPGPData(byte[]keyId);public abstract PGPData newPGPData(byte[]keyId,byte[]keyPacket,List other);public abstract PGPData newPGPData(byte[]keyPacket,List other);public abstract RetrievalMethod newRetrievalMethod(String uri);public abstract RetrievalMethod newRetrievalMethod(String uri,String type,List transforms);public abstract X509Data newX509Data(List content);public abstract X509IssuerSerial newX509IssuerSerial(String issuerName,BigInteger serialNumber);public abstract boolean isFeatureSupported(String feature);public abstract URIDereferencer getURIDereferencer();public abstract KeyInfo unmarshalKeyInfo(XMLStructure xmlStructure)throws MarshalException;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class XMLSignatureReferenceVerifyInputProcessor extends AbstractSignatureReferenceVerifyInputProcessor{public XMLSignatureReferenceVerifyInputProcessor(SignatureType signatureType,SecurityToken securityToken,XMLSecurityProperties securityProperties)throws XMLSecurityException{super(signatureType,securityToken,securityProperties);this.addAfterProcessor(XMLSignatureReferenceVerifyInputProcessor.class.getName());}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class Canonicalizer20010315 extends CanonicalizerBase{private static final String XMLNS_URI=Constants.NamespaceSpecNS;private static final String XML_LANG_URI=Constants.XML_LANG_SPACE_SpecNS;private boolean firstCall=true;private final SortedSet<Attr>result=new TreeSet<Attr>(COMPARE);private static class XmlAttrStack{static class XmlsStackElement{int level;boolean rendered=false;List<Attr>nodes=new ArrayList<Attr>();}int currentLevel=0;int lastlevel=0;XmlsStackElement cur;List<XmlsStackElement>levels=new ArrayList<XmlsStackElement>();void push(int level){currentLevel=level;if(currentLevel==-1){return;}cur=null;while(lastlevel>=currentLevel){levels.remove(levels.size()-1);if(levels.size()==0){lastlevel=0;return;}lastlevel=(levels.get(levels.size()-1)).level;}}void addXmlnsAttr(Attr n){if(cur==null){cur=new XmlsStackElement();cur.level=currentLevel;levels.add(cur);lastlevel=currentLevel;}cur.nodes.add(n);}void getXmlnsAttr(Collection<Attr>col){int size=levels.size()-1;if(cur==null){cur=new XmlsStackElement();cur.level=currentLevel;lastlevel=currentLevel;levels.add(cur);}boolean parentRendered=false;XmlsStackElement e=null;if(size==-1){parentRendered=true;}else{e=levels.get(size);if(e.rendered && e.level+1==currentLevel){parentRendered=true;}}if(parentRendered){col.addAll(cur.nodes);cur.rendered=true;return;}Map<String,Attr>loa=new HashMap<String,Attr>();for(;size>=0;size--){e=levels.get(size);Iterator<Attr>it=e.nodes.iterator();while(it.hasNext()){Attr n=it.next();if(!loa.containsKey(n.getName())){loa.put(n.getName(),n);}}};cur.rendered=true;col.addAll(loa.values());}}private XmlAttrStack xmlattrStack=new XmlAttrStack();public Canonicalizer20010315(boolean includeComments){super(includeComments);}protected Iterator<Attr>handleAttributesSubtree(Element E,NameSpaceSymbTable ns)throws CanonicalizationException{if(!E.hasAttributes()&& !firstCall){return null;}final SortedSet<Attr>result=this.result;result.clear();NamedNodeMap attrs=E.getAttributes();int attrsLength=attrs.getLength();for(int i=0;i<attrsLength;i++){Attr N=(Attr)attrs.item(i);String NUri=N.getNamespaceURI();if(!XMLNS_URI.equals(NUri)){result.add(N);continue;}String NName=N.getLocalName();String NValue=N.getValue();if(XML.equals(NName)&& XML_LANG_URI.equals(NValue)){continue;}Node n=ns.addMappingAndRender(NName,NValue,N);if(n!=null){result.add((Attr)n);if(C14nHelper.namespaceIsRelative(N)){Object[]exArgs={E.getTagName(),NName,N.getNodeValue()};throw new CanonicalizationException(\"c14n.Canonicalizer.RelativeNamespace\",exArgs);}}}if(firstCall){ns.getUnrenderedNodes(result);xmlattrStack.getXmlnsAttr(result);firstCall=false;}return result.iterator();}protected Iterator<Attr>handleAttributes(Element E,NameSpaceSymbTable ns)throws CanonicalizationException{xmlattrStack.push(ns.getLevel());boolean isRealVisible=isVisibleDO(E,ns.getLevel())==1;NamedNodeMap attrs=null;int attrsLength=0;if(E.hasAttributes()){attrs=E.getAttributes();attrsLength=attrs.getLength();}SortedSet<Attr>result=this.result;result.clear();for(int i=0;i<attrsLength;i++){Attr N=(Attr)attrs.item(i);String NUri=N.getNamespaceURI();if(!XMLNS_URI.equals(NUri)){if(XML_LANG_URI.equals(NUri)){xmlattrStack.addXmlnsAttr(N);}else if(isRealVisible){result.add(N);}continue;}String NName=N.getLocalName();String NValue=N.getValue();if(\"xml\".equals(NName)&& XML_LANG_URI.equals(NValue)){continue;}if(isVisible(N)){if(!isRealVisible && ns.removeMappingIfRender(NName)){continue;}Node n=ns.addMappingAndRender(NName,NValue,N);if(n!=null){result.add((Attr)n);if(C14nHelper.namespaceIsRelative(N)){Object[]exArgs={E.getTagName(),NName,N.getNodeValue()};throw new CanonicalizationException(\"c14n.Canonicalizer.RelativeNamespace\",exArgs);}}}else{if(isRealVisible && !XMLNS.equals(NName)){ns.removeMapping(NName);}else{ns.addMapping(NName,NValue,N);}}}if(isRealVisible){Attr xmlns=E.getAttributeNodeNS(XMLNS_URI,XMLNS);Node n=null;if(xmlns==null){n=ns.getMapping(XMLNS);}else if(!isVisible(xmlns)){n=ns.addMappingAndRender(XMLNS,\"\",nullNode);}if(n!=null){result.add((Attr)n);}xmlattrStack.getXmlnsAttr(result);ns.getUnrenderedNodes(result);}return result.iterator();}public byte[]engineCanonicalizeXPathNodeSet(Set<Node>xpathNodeSet,String inclusiveNamespaces)throws CanonicalizationException{throw new CanonicalizationException(\"c14n.Canonicalizer.UnsupportedOperation\");}public byte[]engineCanonicalizeSubTree(Node rootNode,String inclusiveNamespaces)throws CanonicalizationException{throw new CanonicalizationException(\"c14n.Canonicalizer.UnsupportedOperation\");}protected void circumventBugIfNeeded(XMLSignatureInput input)throws CanonicalizationException,ParserConfigurationException,IOException,SAXException{if(!input.isNeedsToBeExpanded()){return;}Document doc=null;if(input.getSubNode()!=null){doc=XMLUtils.getOwnerDocument(input.getSubNode());}else{doc=XMLUtils.getOwnerDocument(input.getNodeSet());}XMLUtils.circumventBug2650(doc);}protected void handleParent(Element e,NameSpaceSymbTable ns){if(!e.hasAttributes()){return;}xmlattrStack.push(-1);NamedNodeMap attrs=e.getAttributes();int attrsLength=attrs.getLength();for(int i=0;i<attrsLength;i++){Attr N=(Attr)attrs.item(i);if(!Constants.NamespaceSpecNS.equals(N.getNamespaceURI())){if(XML_LANG_URI.equals(N.getNamespaceURI())){xmlattrStack.addXmlnsAttr(N);}continue;}String NName=N.getLocalName();String NValue=N.getNodeValue();if(XML.equals(NName)&& Constants.XML_LANG_SPACE_SpecNS.equals(NValue)){continue;}ns.addMapping(NName,NValue,N);}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class EncryptedElementSecurityEvent extends AbstractSecuredElementSecurityEvent{public EncryptedElementSecurityEvent(SecurityToken securityToken,boolean encrypted,List<XMLSecurityConstants.ContentType>protectionOrder){super(SecurityEventConstants.EncryptedElement,securityToken,protectionOrder,false,encrypted);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class BlockEncryptionAlgorithm extends EncryptionMethod{public BlockEncryptionAlgorithm(Document doc,String AlgorithmURI)throws XMLSecurityException{super(doc,AlgorithmURI);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class KeyTransportAlgorithm_RSA15 extends EncryptionMethod{public KeyTransportAlgorithm_RSA15(Document doc,String AlgorithmURI)throws XMLSecurityException{super(doc,AlgorithmURI);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class KeyTransportAlgorithm_RSAOAEP extends EncryptionMethod{public KeyTransportAlgorithm_RSAOAEP(Document doc,String AlgorithmURI,String digestAlgorithm,byte[]params)throws XMLSecurityException{super(doc,AlgorithmURI);this._OAEPdigestAlgorithm=MessageDigestAlgorithm.getInstance(doc,digestAlgorithm);this._OAEPparams=params;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class StreamEncryptionAlgorithm extends EncryptionMethod{public StreamEncryptionAlgorithm(Document doc,String AlgorithmURI,int keySize)throws XMLSecurityException{super(doc,AlgorithmURI);this._keySize=keySize;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Encryption_AES192_BC{public Encryption_AES192_BC(){}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "public class Encryption_AES256_BC{public Encryption_AES256_BC(){}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class KeySelector{public static class Purpose{private final String name;private Purpose(String name){this.name=name;}public static final Purpose SIGN=new Purpose(\"sign\");public static final Purpose VERIFY=new Purpose(\"verify\");public static final Purpose ENCRYPT=new Purpose(\"encrypt\");public static final Purpose DECRYPT=new Purpose(\"decrypt\");}protected KeySelector(){}public abstract KeySelectorResult select(KeyInfo keyInfo,Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException;public static KeySelector singletonKeySelector(Key key){return new SingletonKeySelector(key);}private static class SingletonKeySelector extends KeySelector{private final Key key;SingletonKeySelector(Key key){if(key==null){throw new NullPointerException();}this.key=key;}public KeySelectorResult select(KeyInfo keyInfo,Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException{return new KeySelectorResult(){public Key getKey(){return key;}};}}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class OctetStreamData implements Data{private InputStream octetStream;private String uri;private String mimeType;public OctetStreamData(InputStream octetStream){if(octetStream==null){throw new NullPointerException(\"octetStream is null\");}this.octetStream=octetStream;}public OctetStreamData(InputStream octetStream,String uri,String mimeType){if(octetStream==null){throw new NullPointerException(\"octetStream is null\");}this.octetStream=octetStream;this.uri=uri;this.mimeType=mimeType;}public InputStream getOctetStream(){return octetStream;}public String getURI(){return uri;}public String getMimeType(){return mimeType;}}"
    },
    {
        "code_smells": [
            "RefusedBequest"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class TransformService implements Transform{private String algorithm;private String mechanism;private Provider provider;protected TransformService(){}public static TransformService getInstance(String algorithm,String mechanismType)throws NoSuchAlgorithmException{if(mechanismType==null || algorithm==null){throw new NullPointerException();}return findInstance(algorithm,mechanismType,null);}public static TransformService getInstance(String algorithm,String mechanismType,Provider provider)throws NoSuchAlgorithmException{if(mechanismType==null || algorithm==null || provider==null){throw new NullPointerException();}return findInstance(algorithm,mechanismType,provider);}public static TransformService getInstance(String algorithm,String mechanismType,String provider)throws NoSuchAlgorithmException,NoSuchProviderException{if(mechanismType==null || algorithm==null || provider==null){throw new NullPointerException();}Provider prov=Security.getProvider(provider);if(prov==null){throw new NoSuchProviderException(\"cannot find provider named \"+provider);}return findInstance(algorithm,mechanismType,prov);}private static TransformService findInstance(String algorithm,String mechanismType,Provider provider)throws NoSuchAlgorithmException{Object[]objs=(Object[])XMLDSigSecurity.getImpl(algorithm,new MechanismMapEntry(algorithm,mechanismType),\"TransformService\",provider);TransformService spi=(TransformService)objs[0];spi.mechanism=mechanismType;spi.algorithm=algorithm;spi.provider=(Provider)objs[1];return spi;}private static class MechanismMapEntry implements Map.Entry{private final String mechanism;private final String algorithm;private final String key;MechanismMapEntry(String algorithm,String mechanism){this.algorithm=algorithm;this.mechanism=mechanism;this.key=\"TransformService.\"+algorithm+\" MechanismType\";}public boolean equals(Object o){if(!(o instanceof Map.Entry)){return false;}Map.Entry e=(Map.Entry)o;return(getKey()==null ? e.getKey()==null : getKey().equals(e.getKey()))&&(getValue()==null ? e.getValue()==null : getValue().equals(e.getValue()));}public Object getKey(){return key;}public Object getValue(){return mechanism;}public Object setValue(Object value){throw new UnsupportedOperationException();}public int hashCode(){return(getKey()==null ? 0 : getKey().hashCode())^(getValue()==null ? 0 : getValue().hashCode());}}public final String getMechanismType(){return mechanism;}public final String getAlgorithm(){return algorithm;}public final Provider getProvider(){return provider;}public abstract void init(TransformParameterSpec params)throws InvalidAlgorithmParameterException;public abstract void marshalParams(XMLStructure parent,XMLCryptoContext context)throws MarshalException;public abstract void init(XMLStructure parent,XMLCryptoContext context)throws InvalidAlgorithmParameterException;}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class XMLSignatureFactory{private String mechanismType;private Provider provider;protected XMLSignatureFactory(){}public static XMLSignatureFactory getInstance(String mechanismType){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}return findInstance(mechanismType,null);}private static XMLSignatureFactory findInstance(String mechanismType,Provider provider){Object[]objs=null;try{objs=(Object[])XMLDSigSecurity.getImpl(mechanismType,\"XMLSignatureFactory\",provider);}catch(NoSuchAlgorithmException nsae){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\",nsae);}XMLSignatureFactory factory=(XMLSignatureFactory)objs[0];factory.mechanismType=mechanismType;factory.provider=(Provider)objs[1];return factory;}public static XMLSignatureFactory getInstance(String mechanismType,Provider provider){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}return findInstance(mechanismType,provider);}public static XMLSignatureFactory getInstance(String mechanismType,String provider)throws NoSuchProviderException{if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}Provider prov=Security.getProvider(provider);if(prov==null){throw new NoSuchProviderException(\"cannot find provider named \"+provider);}return findInstance(mechanismType,prov);}public static XMLSignatureFactory getInstance(){return getInstance(\"DOM\");}public final String getMechanismType(){return mechanismType;}public final Provider getProvider(){return provider;}public abstract XMLSignature newXMLSignature(SignedInfo si,KeyInfo ki);public abstract XMLSignature newXMLSignature(SignedInfo si,KeyInfo ki,List objects,String id,String signatureValueId);public abstract Reference newReference(String uri,DigestMethod dm);public abstract Reference newReference(String uri,DigestMethod dm,List transforms,String type,String id);public abstract Reference newReference(String uri,DigestMethod dm,List transforms,String type,String id,byte[]digestValue);public abstract Reference newReference(String uri,DigestMethod dm,List appliedTransforms,Data result,List transforms,String type,String id);public abstract SignedInfo newSignedInfo(CanonicalizationMethod cm,SignatureMethod sm,List references);public abstract SignedInfo newSignedInfo(CanonicalizationMethod cm,SignatureMethod sm,List references,String id);public abstract XMLObject newXMLObject(List content,String id,String mimeType,String encoding);public abstract Manifest newManifest(List references);public abstract Manifest newManifest(List references,String id);public abstract SignatureProperty newSignatureProperty(List content,String target,String id);public abstract SignatureProperties newSignatureProperties(List properties,String id);public abstract DigestMethod newDigestMethod(String algorithm,DigestMethodParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract SignatureMethod newSignatureMethod(String algorithm,SignatureMethodParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract Transform newTransform(String algorithm,TransformParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract Transform newTransform(String algorithm,XMLStructure params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract CanonicalizationMethod newCanonicalizationMethod(String algorithm,C14NMethodParameterSpec params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public abstract CanonicalizationMethod newCanonicalizationMethod(String algorithm,XMLStructure params)throws NoSuchAlgorithmException,InvalidAlgorithmParameterException;public final KeyInfoFactory getKeyInfoFactory(){return KeyInfoFactory.getInstance(getMechanismType(),getProvider());}public abstract XMLSignature unmarshalXMLSignature(XMLValidateContext context)throws MarshalException;public abstract XMLSignature unmarshalXMLSignature(XMLStructure xmlStructure)throws MarshalException;public abstract boolean isFeatureSupported(String feature);public abstract URIDereferencer getURIDereferencer();}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/**Copyright 2005 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public abstract class KeyInfoFactory{private String mechanismType;private Provider provider;private static Class cl;private static final Class[]getImplParams={String.class,String.class,Provider.class};private static Method getImplMethod;static{try{cl=Class.forName(\"javax.xml.crypto.dsig.XMLDSigSecurity\");}catch(ClassNotFoundException cnfe){}getImplMethod=(Method)AccessController.doPrivileged(new PrivilegedAction(){public Object run(){Method m=null;try{m=cl.getDeclaredMethod(\"getImpl\",getImplParams);if(m!=null)m.setAccessible(true);}catch(NoSuchMethodException nsme){}return m;}});}protected KeyInfoFactory(){}public static KeyInfoFactory getInstance(String mechanismType){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}return findInstance(mechanismType,null);}private static KeyInfoFactory findInstance(String mechanismType,Provider provider){if(getImplMethod==null){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\");}Object[]objs=null;try{objs=(Object[])getImplMethod.invoke(null,new Object[]{mechanismType,\"KeyInfoFactory\",provider});}catch(IllegalAccessException iae){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\",iae);}catch(InvocationTargetException ite){throw new NoSuchMechanismException(\"Cannot find \"+mechanismType+\" mechanism type\",ite);}KeyInfoFactory factory=(KeyInfoFactory)objs[0];factory.mechanismType=mechanismType;factory.provider=(Provider)objs[1];return factory;}public static KeyInfoFactory getInstance(String mechanismType,Provider provider){if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}return findInstance(mechanismType,provider);}public static KeyInfoFactory getInstance(String mechanismType,String provider)throws NoSuchProviderException{if(mechanismType==null){throw new NullPointerException(\"mechanismType cannot be null\");}else if(provider==null){throw new NullPointerException(\"provider cannot be null\");}Provider prov=Security.getProvider(provider);if(prov==null){throw new NoSuchProviderException(\"cannot find provider named \"+provider);}return findInstance(mechanismType,prov);}public static KeyInfoFactory getInstance(){return getInstance(\"DOM\");}public final String getMechanismType(){return mechanismType;}public final Provider getProvider(){return provider;}public abstract KeyInfo newKeyInfo(List content);public abstract KeyInfo newKeyInfo(List content,String id);public abstract KeyName newKeyName(String name);public abstract KeyValue newKeyValue(PublicKey key)throws KeyException;public abstract PGPData newPGPData(byte[]keyId);public abstract PGPData newPGPData(byte[]keyId,byte[]keyPacket,List other);public abstract PGPData newPGPData(byte[]keyPacket,List other);public abstract RetrievalMethod newRetrievalMethod(String uri);public abstract RetrievalMethod newRetrievalMethod(String uri,String type,List transforms);public abstract X509Data newX509Data(List content);public abstract X509IssuerSerial newX509IssuerSerial(String issuerName,BigInteger serialNumber);public abstract boolean isFeatureSupported(String feature);public abstract URIDereferencer getURIDereferencer();public abstract KeyInfo unmarshalKeyInfo(XMLStructure xmlStructure)throws MarshalException;}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Copyright 2006 The Apache Software Foundation.**Licensed under the Apache License,Version 2.0(the \"License\");*you may not use this file except in compliance with the License.*You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.**/public class KeySelectors{public static class SecretKeySelector extends KeySelector{private SecretKey key;public SecretKeySelector(byte[]bytes){key=wrapBytes(bytes);}public SecretKeySelector(SecretKey key){this.key=key;}public KeySelectorResult select(KeyInfo ki,KeySelector.Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException{return new SimpleKSResult(key);}private SecretKey wrapBytes(final byte[]bytes){return new SecretKey(){public String getFormat(){return \"RAW\";}public String getAlgorithm(){return \"Secret key\";}public byte[]getEncoded(){return bytes;}};}}public static class RawX509KeySelector extends KeySelector{public KeySelectorResult select(KeyInfo keyInfo,KeySelector.Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException{if(keyInfo==null){throw new KeySelectorException(\"Null KeyInfo object!\");}Iterator iter=keyInfo.getContent().iterator();while(iter.hasNext()){XMLStructure kiType=(XMLStructure)iter.next();if(kiType instanceof X509Data){X509Data xd=(X509Data)kiType;Object[]entries=xd.getContent().toArray();X509CRL crl=null;for(int i=0;(i<entries.length && crl!=null);i++){if(entries[i]instanceof X509CRL){crl=(X509CRL)entries[i];}}Iterator xi=xd.getContent().iterator();boolean hasCRL=false;while(xi.hasNext()){Object o=xi.next();if(o instanceof X509Certificate){if((purpose!=KeySelector.Purpose.VERIFY)&&(crl!=null)&& crl.isRevoked((X509Certificate)o)){continue;}else{return new SimpleKSResult(((X509Certificate)o).getPublicKey());}}}}}throw new KeySelectorException(\"No X509Certificate found!\");}}public static class KeyValueKeySelector extends KeySelector{public KeySelectorResult select(KeyInfo keyInfo,KeySelector.Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException{if(keyInfo==null){throw new KeySelectorException(\"Null KeyInfo object!\");}SignatureMethod sm=(SignatureMethod)method;List list=keyInfo.getContent();for(int i=0;i<list.size();i++){XMLStructure xmlStructure=(XMLStructure)list.get(i);if(xmlStructure instanceof KeyValue){PublicKey pk=null;try{pk=((KeyValue)xmlStructure).getPublicKey();}catch(KeyException ke){throw new KeySelectorException(ke);}if(algEquals(sm.getAlgorithm(),pk.getAlgorithm())){return new SimpleKSResult(pk);}}}throw new KeySelectorException(\"No KeyValue element found!\");}static boolean algEquals(String algURI,String algName){if(algName.equalsIgnoreCase(\"DSA\")&& algURI.equalsIgnoreCase(SignatureMethod.DSA_SHA1)){return true;}else if(algName.equalsIgnoreCase(\"RSA\")&& algURI.equalsIgnoreCase(SignatureMethod.RSA_SHA1)){return true;}else{return false;}}}public static class CollectionKeySelector extends KeySelector{private CertificateFactory certFac;private File certDir;private Vector certs;private static final int MATCH_SUBJECT=0;private static final int MATCH_ISSUER=1;private static final int MATCH_SERIAL=2;private static final int MATCH_SUBJECT_KEY_ID=3;private static final int MATCH_CERTIFICATE=4;public CollectionKeySelector(File dir){certDir=dir;try{certFac=CertificateFactory.getInstance(\"X509\");}catch(CertificateException ex){}certs=new Vector();File[]files=new File(certDir,\"certs\").listFiles();for(int i=0;i<files.length;i++){try{certs.add((X509Certificate)certFac.generateCertificate(new FileInputStream(files[i])));}catch(Exception ex){}}}public Vector match(int matchType,Object value,Vector pool){Vector matchResult=new Vector();for(int j=0;j<pool.size();j++){X509Certificate c=(X509Certificate)pool.get(j);switch(matchType){case MATCH_SUBJECT: try{if(c.getSubjectDN().equals(new X500Name((String)value))){matchResult.add(c);}}catch(IOException ioe){}break;case MATCH_ISSUER: try{if(c.getIssuerDN().equals(new X500Name((String)value))){matchResult.add(c);}}catch(IOException ioe){}break;case MATCH_SERIAL: if(c.getSerialNumber().equals(value)){matchResult.add(c);}break;case MATCH_SUBJECT_KEY_ID: byte[]extension=c.getExtensionValue(\"2.5.29.14\");if(extension!=null){try{DerValue derValue=new DerValue(extension);DerValue derValue2=new DerValue(derValue.getOctetString());byte[]extVal=derValue2.getOctetString();if(Arrays.equals(extVal,(byte[])value)){matchResult.add(c);}}catch(IOException ex){}}break;case MATCH_CERTIFICATE: if(c.equals(value)){matchResult.add(c);}break;}}return matchResult;}public KeySelectorResult select(KeyInfo keyInfo,KeySelector.Purpose purpose,AlgorithmMethod method,XMLCryptoContext context)throws KeySelectorException{if(keyInfo==null){throw new KeySelectorException(\"Null KeyInfo object!\");}Iterator iter=keyInfo.getContent().iterator();while(iter.hasNext()){XMLStructure xmlStructure=(XMLStructure)iter.next();try{if(xmlStructure instanceof KeyName){String name=((KeyName)xmlStructure).getName();PublicKey pk=null;try{File certFile=new File(new File(certDir,\"certs\"),name.toLowerCase()+\".crt\");X509Certificate cert=(X509Certificate)certFac.generateCertificate(new FileInputStream(certFile));pk=cert.getPublicKey();}catch(FileNotFoundException e){Vector result=match(MATCH_SUBJECT,name,certs);int numOfMatches=(result==null ? 0 : result.size());if(numOfMatches!=1){throw new KeySelectorException((numOfMatches==0 ? \"No\" : \"More than one\")+\" match found\");}pk=((X509Certificate)result.get(0)).getPublicKey();}return new SimpleKSResult(pk);}else if(xmlStructure instanceof RetrievalMethod){RetrievalMethod rm=(RetrievalMethod)xmlStructure;String type=rm.getType();if(type.equals(X509Data.RAW_X509_CERTIFICATE_TYPE)){String uri=rm.getURI();X509Certificate cert=(X509Certificate)certFac.generateCertificate(new FileInputStream(new File(certDir,uri)));return new SimpleKSResult(cert.getPublicKey());}else{throw new KeySelectorException(\"Unsupported RetrievalMethod type\");}}else if(xmlStructure instanceof X509Data){List content=((X509Data)xmlStructure).getContent();int size=content.size();Vector result=null;for(int k=0;k<size;k++){Object obj=content.get(k);if(obj instanceof String){result=match(MATCH_SUBJECT,obj,certs);}else if(obj instanceof byte[]){result=match(MATCH_SUBJECT_KEY_ID,obj,certs);}else if(obj instanceof X509Certificate){result=match(MATCH_CERTIFICATE,obj,certs);}else if(obj instanceof X509IssuerSerial){X509IssuerSerial is=(X509IssuerSerial)obj;result=match(MATCH_SERIAL,is.getSerialNumber(),certs);result=match(MATCH_ISSUER,is.getIssuerName(),result);}else{throw new KeySelectorException(\"Unsupported X509Data: \"+obj);}}int numOfMatches=(result==null ? 0 : result.size());if(numOfMatches!=1){throw new KeySelectorException((numOfMatches==0 ? \"No\" : \"More than one\")+\" match found\");}return new SimpleKSResult(((X509Certificate)result.get(0)).getPublicKey());}}catch(Exception ex){throw new KeySelectorException(ex);}}throw new KeySelectorException(\"No matching key found!\");}}public static class ByteUtil{private static String mapping=\"0123456789ABCDEF\";private static int numBytesPerRow=6;private static String getHex(byte value){int low=value & 0x0f;int high=((value>>4)& 0x0f);char[]res=new char[2];res[0]=mapping.charAt(high);res[1]=mapping.charAt(low);return new String(res);}public static String dumpArray(byte[]in){int numDumped=0;StringBuffer buf=new StringBuffer(512);buf.append(\"{\");for(int i=0;i<(in.length/numBytesPerRow);i++){for(int j=0;j<(numBytesPerRow);j++){buf.append(\"(byte)0x\"+getHex(in[i*numBytesPerRow+j])+\",\");}numDumped+=numBytesPerRow;}while(numDumped<in.length){buf.append(\"(byte)0x\"+getHex(in[numDumped])+\" \");numDumped+=1;}buf.append(\"}\");return buf.toString();}}}class SimpleKSResult implements KeySelectorResult{private final Key key;SimpleKSResult(Key key){this.key=key;}public Key getKey(){return key;}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class SignedElementSecurityEvent extends AbstractSecuredElementSecurityEvent{public SignedElementSecurityEvent(SecurityToken securityToken,boolean signed,List<XMLSecurityConstants.ContentType>protectionOrder){super(SecurityEventConstants.SignedElement,securityToken,protectionOrder,signed,false);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public class X509TokenSecurityEvent extends TokenSecurityEvent{public X509TokenSecurityEvent(){super(SecurityEventConstants.X509Token);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class StandardScheme<T extends TBase>implements IScheme<T>{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/**Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,*software distributed under the License is distributed on an*\"AS IS\" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY*KIND,either express or implied.See the License for the*specific language governing permissions and limitations*under the License.*/public abstract class TupleScheme<T extends TBase>implements IScheme<T>{}"
    },
    {
        "code_smells": [
            "SpeculativeGenerality"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/abstract public class Shell{private static final Logger LOG=Logger.getLogger(Shell.class);public final static String USER_NAME_COMMAND=\"whoami\";public static String[]getGroupsCommand(){return new String[]{\"bash\",\"-c\",\"groups\"};}public static String[]getGroupsForUserCommand(final String user){return new String[]{\"bash\",\"-c\",\"id-Gn \"+user};}public static final String SET_PERMISSION_COMMAND=\"chmod\";public static final String SET_OWNER_COMMAND=\"chown\";public static final String SET_GROUP_COMMAND=\"chgrp\";public static String[]getGET_PERMISSION_COMMAND(){return new String[]{(WINDOWS ? \"ls\" : \"/bin/ls\"),\"-ld\"};}protected long timeOutInterval=0L;private AtomicBoolean timedOut;public static final String ULIMIT_COMMAND=\"ulimit\";public static String[]getUlimitMemoryCommand(int memoryLimit){if(WINDOWS){return null;}return new String[]{ULIMIT_COMMAND,\"-v\",String.valueOf(memoryLimit)};}public static final boolean WINDOWS=System.getProperty(\"os.name\").startsWith(\"Windows\");private long interval;private long lastTime;private Map<String,String>environment;private File dir;private Process process;private int exitCode;private volatile AtomicBoolean completed;public Shell(){this(0L);}public Shell(long interval){this.interval=interval;this.lastTime=(interval<0)? 0 :-interval;}protected void setEnvironment(Map<String,String>env){this.environment=env;}protected void setWorkingDirectory(File dir){this.dir=dir;}protected void run()throws IOException{if(lastTime+interval>System.currentTimeMillis())return;exitCode=0;runCommand();}private void runCommand()throws IOException{ProcessBuilder builder=new ProcessBuilder(getExecString());Timer timeOutTimer=null;ShellTimeoutTimerTask timeoutTimerTask=null;timedOut=new AtomicBoolean(false);completed=new AtomicBoolean(false);if(environment!=null){builder.environment().putAll(this.environment);}if(dir!=null){builder.directory(this.dir);}process=builder.start();if(timeOutInterval>0){timeOutTimer=new Timer();timeoutTimerTask=new ShellTimeoutTimerTask(this);timeOutTimer.schedule(timeoutTimerTask,timeOutInterval);}final BufferedReader errReader=new BufferedReader(new InputStreamReader(process.getErrorStream()));BufferedReader inReader=new BufferedReader(new InputStreamReader(process.getInputStream()));final StringBuffer errMsg=new StringBuffer();Thread errThread=new Thread(){@Override public void run(){try{String line=errReader.readLine();while((line!=null)&& !isInterrupted()){errMsg.append(line);errMsg.append(System.getProperty(\"line.separator\"));line=errReader.readLine();}}catch(IOException ioe){LOG.warn(\"Error reading the error stream\",ioe);}}};try{errThread.start();}catch(IllegalStateException ise){}try{parseExecResult(inReader);String line=inReader.readLine();while(line!=null){line=inReader.readLine();}exitCode=process.waitFor();try{errThread.join();}catch(InterruptedException ie){LOG.warn(\"Interrupted while reading the error stream\",ie);}completed.set(true);if(exitCode!=0){throw new ExitCodeException(exitCode,errMsg.toString());}}catch(InterruptedException ie){throw new IOException(ie.toString());}finally{if((timeOutTimer!=null)&& !timedOut.get()){timeOutTimer.cancel();}try{inReader.close();}catch(IOException ioe){LOG.warn(\"Error while closing the input stream\",ioe);}if(!completed.get()){errThread.interrupt();}try{errReader.close();}catch(IOException ioe){LOG.warn(\"Error while closing the error stream\",ioe);}process.destroy();lastTime=System.currentTimeMillis();}}protected abstract String[]getExecString();protected abstract void parseExecResult(BufferedReader lines)throws IOException;public Process getProcess(){return process;}public int getExitCode(){return exitCode;}@SuppressWarnings(\"serial\")public static class ExitCodeException extends IOException{int exitCode;public ExitCodeException(int exitCode,String message){super(message);this.exitCode=exitCode;}public int getExitCode(){return exitCode;}}public static class ShellCommandExecutor extends Shell{private String[]command;private StringBuffer output;public ShellCommandExecutor(String[]execString){this(execString,null);}public ShellCommandExecutor(String[]execString,File dir){this(execString,dir,null);}public ShellCommandExecutor(String[]execString,File dir,Map<String,String>env){this(execString,dir,env,0L);}public ShellCommandExecutor(String[]execString,File dir,Map<String,String>env,long timeout){command=execString.clone();if(dir!=null){setWorkingDirectory(dir);}if(env!=null){setEnvironment(env);}timeOutInterval=timeout;}public void execute()throws IOException{this.run();}protected String[]getExecString(){return command;}protected void parseExecResult(BufferedReader lines)throws IOException{output=new StringBuffer();char[]buf=new char[512];int nRead;while((nRead=lines.read(buf,0,buf.length))>0){output.append(buf,0,nRead);}}public String getOutput(){return(output==null)? \"\" : output.toString();}}public boolean isTimedOut(){return timedOut.get();}private void setTimedOut(){this.timedOut.set(true);}public static String execCommand(String...cmd)throws IOException{return execCommand(null,cmd,0L);}public static String execCommand(Map<String,String>env,String[]cmd,long timeout)throws IOException{ShellCommandExecutor exec=new ShellCommandExecutor(cmd,null,env,timeout);exec.execute();return exec.getOutput();}public static String execCommand(Map<String,String>env,String...cmd)throws IOException{return execCommand(env,cmd,0L);}private static class ShellTimeoutTimerTask extends TimerTask{private Shell shell;public ShellTimeoutTimerTask(Shell shell){this.shell=shell;}@Override public void run(){Process p=shell.getProcess();try{p.exitValue();}catch(Exception e){if(p!=null && !shell.completed.get()){shell.setTimedOut();p.destroy();}}}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class AsyncOps{public static abstract class AsyncCB{protected final ZooKeeper zk;protected long defaultTimeoutMillis=30000;CountDownLatch latch;Code rc=Code.OK;String path=\"/foo\";String expected;public AsyncCB(ZooKeeper zk,CountDownLatch latch){this.zk=zk;this.latch=latch;}public void setRC(Code rc){this.rc=rc;}public void setPath(String path){this.path=path;}public void processResult(Code rc,String path,Object ctx){this.rc=rc;this.path=path;this.expected=(String)ctx;latch.countDown();}protected void verify(){try{latch.await(defaultTimeoutMillis,TimeUnit.MILLISECONDS);}catch(InterruptedException e){Assert.fail(\"unexpected interrupt\");}Assert.assertSame(0L,latch.getCount());String actual=toString();Assert.assertEquals(expected,actual);}}public static class StringCB extends AsyncCB implements StringCallback{byte[]data=new byte[10];List<ACL>acl=Ids.CREATOR_ALL_ACL;CreateMode flags=CreateMode.PERSISTENT;String name=path;StringCB(ZooKeeper zk){this(zk,new CountDownLatch(1));}StringCB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);}public void setPath(String path){super.setPath(path);this.name=path;}public String nodeName(){return path.substring(path.lastIndexOf('/')+1);}public void processResult(int rc,String path,Object ctx,String name){this.name=name;super.processResult(Code.get(rc),path,ctx);}public AsyncCB create(){zk.create(path,data,acl,flags,this,toString());return this;}public AsyncCB createEphemeral(){zk.create(path,data,acl,CreateMode.EPHEMERAL,this,toString());return this;}public void verifyCreate(){create();verify();}public void verifyCreateEphemeral(){createEphemeral();verify();}public void verifyCreateFailure_NodeExists(){new StringCB(zk).verifyCreate();rc=Code.NODEEXISTS;name=null;zk.create(path,data,acl,flags,this,toString());verify();}public void verifyCreateFailure_NoNode(){rc=Code.NONODE;name=null;path=path+\"/bar\";zk.create(path,data,acl,flags,this,toString());verify();}public void verifyCreateFailure_NoChildForEphemeral(){new StringCB(zk).verifyCreateEphemeral();rc=Code.NOCHILDRENFOREPHEMERALS;name=null;path=path+\"/bar\";zk.create(path,data,acl,flags,this,toString());verify();}}public static class ACLCB extends AsyncCB implements ACLCallback{List<ACL>acl=Ids.CREATOR_ALL_ACL;int version=0;Stat stat=new Stat();byte[]data=\"testing\".getBytes();ACLCB(ZooKeeper zk){this(zk,new CountDownLatch(1));}ACLCB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);stat.setAversion(0);stat.setCversion(0);stat.setEphemeralOwner(0);stat.setVersion(0);}public void processResult(int rc,String path,Object ctx,List<ACL>acl,Stat stat){this.acl=acl;this.stat=stat;super.processResult(Code.get(rc),path,ctx);}public void verifyGetACL(){new StringCB(zk).verifyCreate();zk.getACL(path,stat,this,toString());verify();}public void verifyGetACLFailure_NoNode(){rc=Code.NONODE;stat=null;acl=null;zk.getACL(path,stat,this,toString());verify();}public String toString(List<ACL>acls){if(acls==null){return \"\";}StringBuilder result=new StringBuilder();for(ACL acl : acls){result.append(acl.getPerms()).append(\"::\");}return result.toString();}}public static class ChildrenCB extends AsyncCB implements ChildrenCallback{List<String>children=new ArrayList<String>();ChildrenCB(ZooKeeper zk){this(zk,new CountDownLatch(1));}ChildrenCB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);}public void processResult(int rc,String path,Object ctx,List<String>children){this.children=(children==null ? new ArrayList<String>(): children);Collections.sort(this.children);super.processResult(Code.get(rc),path,ctx);}public StringCB createNode(){StringCB parent=new StringCB(zk);parent.verifyCreate();return parent;}public StringCB createNode(StringCB parent){String childName=\"bar\";return createNode(parent,childName);}public StringCB createNode(StringCB parent,String childName){StringCB child=new StringCB(zk);child.setPath(parent.path+\"/\"+childName);child.verifyCreate();return child;}public void verifyGetChildrenEmpty(){StringCB parent=createNode();path=parent.path;verify();}public void verifyGetChildrenSingle(){StringCB parent=createNode();StringCB child=createNode(parent);path=parent.path;children.add(child.nodeName());verify();}public void verifyGetChildrenTwo(){StringCB parent=createNode();StringCB child1=createNode(parent,\"child1\");StringCB child2=createNode(parent,\"child2\");path=parent.path;children.add(child1.nodeName());children.add(child2.nodeName());verify();}public void verifyGetChildrenFailure_NoNode(){rc=KeeperException.Code.NONODE;verify();}@Override public void verify(){zk.getChildren(path,false,this,toString());super.verify();}}public static class Children2CB extends AsyncCB implements Children2Callback{List<String>children=new ArrayList<String>();Children2CB(ZooKeeper zk){this(zk,new CountDownLatch(1));}Children2CB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);}public void processResult(int rc,String path,Object ctx,List<String>children,Stat stat){this.children=(children==null ? new ArrayList<String>(): children);Collections.sort(this.children);super.processResult(Code.get(rc),path,ctx);}public StringCB createNode(){StringCB parent=new StringCB(zk);parent.verifyCreate();return parent;}public StringCB createNode(StringCB parent){String childName=\"bar\";return createNode(parent,childName);}public StringCB createNode(StringCB parent,String childName){StringCB child=new StringCB(zk);child.setPath(parent.path+\"/\"+childName);child.verifyCreate();return child;}public void verifyGetChildrenEmpty(){StringCB parent=createNode();path=parent.path;verify();}public void verifyGetChildrenSingle(){StringCB parent=createNode();StringCB child=createNode(parent);path=parent.path;children.add(child.nodeName());verify();}public void verifyGetChildrenTwo(){StringCB parent=createNode();StringCB child1=createNode(parent,\"child1\");StringCB child2=createNode(parent,\"child2\");path=parent.path;children.add(child1.nodeName());children.add(child2.nodeName());verify();}public void verifyGetChildrenFailure_NoNode(){rc=KeeperException.Code.NONODE;verify();}@Override public void verify(){zk.getChildren(path,false,this,toString());super.verify();}}public static class Create2CB extends AsyncCB implements Create2Callback{byte[]data=new byte[10];List<ACL>acl=Ids.CREATOR_ALL_ACL;CreateMode flags=CreateMode.PERSISTENT;String name=path;Stat stat=new Stat();Create2CB(ZooKeeper zk){this(zk,new CountDownLatch(1));}Create2CB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);}public void setPath(String path){super.setPath(path);this.name=path;}public String nodeName(){return path.substring(path.lastIndexOf('/')+1);}public void processResult(int rc,String path,Object ctx,String name,Stat stat){this.name=name;this.stat=stat;super.processResult(Code.get(rc),path,ctx);}public AsyncCB create(){zk.create(path,data,acl,flags,this,toString());return this;}public void verifyCreate(){create();verify();}public void verifyCreateFailure_NodeExists(){new Create2CB(zk).verifyCreate();rc=Code.NODEEXISTS;name=null;stat=null;zk.create(path,data,acl,flags,this,toString());verify();}public void verifyCreateFailure_NoNode(){rc=Code.NONODE;name=null;stat=null;path=path+\"/bar\";zk.create(path,data,acl,flags,this,toString());verify();}public void verifyCreateFailure_NoChildForEphemeral(){new StringCB(zk).verifyCreateEphemeral();rc=Code.NOCHILDRENFOREPHEMERALS;name=null;stat=null;path=path+\"/bar\";zk.create(path,data,acl,flags,this,toString());verify();}}public static class DataCB extends AsyncCB implements DataCallback{byte[]data=new byte[10];Stat stat=new Stat();DataCB(ZooKeeper zk){this(zk,new CountDownLatch(1));}DataCB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);stat.setAversion(0);stat.setCversion(0);stat.setEphemeralOwner(0);stat.setVersion(0);}public void processResult(int rc,String path,Object ctx,byte[]data,Stat stat){this.data=data;this.stat=stat;super.processResult(Code.get(rc),path,ctx);}public void verifyGetData(){new StringCB(zk).verifyCreate();zk.getData(path,false,this,toString());verify();}public void verifyGetDataFailure_NoNode(){rc=KeeperException.Code.NONODE;data=null;stat=null;zk.getData(path,false,this,toString());verify();}}public static class StatCB extends AsyncCB implements StatCallback{List<ACL>acl=Ids.CREATOR_ALL_ACL;int version=0;Stat stat=new Stat();byte[]data=\"testing\".getBytes();StatCB(ZooKeeper zk){this(zk,new CountDownLatch(1));}StatCB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);stat.setAversion(0);stat.setCversion(0);stat.setEphemeralOwner(0);stat.setVersion(0);}public void processResult(int rc,String path,Object ctx,Stat stat){this.stat=stat;super.processResult(Code.get(rc),path,ctx);}public void verifySetACL(){stat.setAversion(1);new StringCB(zk).verifyCreate();zk.setACL(path,acl,version,this,toString());verify();}public void verifySetACLFailure_NoNode(){rc=KeeperException.Code.NONODE;stat=null;zk.setACL(path,acl,version,this,toString());verify();}public void verifySetACLFailure_BadVersion(){new StringCB(zk).verifyCreate();rc=Code.BADVERSION;stat=null;zk.setACL(path,acl,version+1,this,toString());verify();}public void setData(){zk.setData(path,data,version,this,toString());}public void verifySetData(){stat.setVersion(1);new StringCB(zk).verifyCreate();setData();verify();}public void verifySetDataFailure_NoNode(){rc=KeeperException.Code.NONODE;stat=null;zk.setData(path,data,version,this,toString());verify();}public void verifySetDataFailure_BadVersion(){new StringCB(zk).verifyCreate();rc=Code.BADVERSION;stat=null;zk.setData(path,data,version+1,this,toString());verify();}public void verifyExists(){new StringCB(zk).verifyCreate();zk.exists(path,false,this,toString());verify();}public void verifyExistsFailure_NoNode(){rc=KeeperException.Code.NONODE;stat=null;zk.exists(path,false,this,toString());verify();}}public static class VoidCB extends AsyncCB implements VoidCallback{int version=0;VoidCB(ZooKeeper zk){this(zk,new CountDownLatch(1));}VoidCB(ZooKeeper zk,CountDownLatch latch){super(zk,latch);}public void processResult(int rc,String path,Object ctx){super.processResult(Code.get(rc),path,ctx);}public void delete(){zk.delete(path,version,this,toString());}public void verifyDelete(){new StringCB(zk).verifyCreate();delete();verify();}public void verifyDeleteFailure_NoNode(){rc=Code.NONODE;zk.delete(path,version,this,toString());verify();}public void verifyDeleteFailure_BadVersion(){new StringCB(zk).verifyCreate();rc=Code.BADVERSION;zk.delete(path,version+1,this,toString());verify();}public void verifyDeleteFailure_NotEmpty(){StringCB scb=new StringCB(zk);scb.create();scb.setPath(path+\"/bar\");scb.create();rc=Code.NOTEMPTY;zk.delete(path,version,this,toString());verify();}public void sync(){zk.sync(path,this,toString());}public void verifySync(){sync();verify();}}public static class MultiCB implements MultiCallback{ZooKeeper zk;int rc;List<OpResult>opResults;final CountDownLatch latch=new CountDownLatch(1);MultiCB(ZooKeeper zk){this.zk=zk;}public void processResult(int rc,String path,Object ctx,List<OpResult>opResults){this.rc=rc;this.opResults=opResults;latch.countDown();}void latch_await(){try{latch.await(10000,TimeUnit.MILLISECONDS);}catch(InterruptedException e){Assert.fail(\"unexpected interrupt\");}Assert.assertSame(0L,latch.getCount());}public void verifyMulti(){List<Op>ops=Arrays.asList(Op.create(\"/multi\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/multi\",-1));zk.multi(ops,this,null);latch_await();Assert.assertEquals(this.rc,KeeperException.Code.OK.intValue());Assert.assertTrue(this.opResults.get(0)instanceof OpResult.CreateResult);Assert.assertTrue(this.opResults.get(1)instanceof OpResult.DeleteResult);}public void verifyMultiFailure_AllErrorResult(){List<Op>ops=Arrays.asList(Op.create(\"/multi\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/nonexist1\",-1),Op.setData(\"/multi\",\"test\".getBytes(),-1));zk.multi(ops,this,null);latch_await();Assert.assertTrue(this.opResults.get(0)instanceof OpResult.ErrorResult);Assert.assertTrue(this.opResults.get(1)instanceof OpResult.ErrorResult);Assert.assertTrue(this.opResults.get(2)instanceof OpResult.ErrorResult);}public void verifyMultiFailure_NoSideEffect()throws KeeperException,InterruptedException{List<Op>ops=Arrays.asList(Op.create(\"/multi\",new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT),Op.delete(\"/nonexist1\",-1));zk.multi(ops,this,null);latch_await();Assert.assertTrue(this.opResults.get(0)instanceof OpResult.ErrorResult);Assert.assertNull(zk.exists(\"/multi\",false));}public void verifyMultiSequential_NoSideEffect()throws Exception{StringCB scb=new StringCB(zk);scb.verifyCreate();String path=scb.path+\"-\";String seqPath=path+\"0000000002\";zk.create(path,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);Assert.assertNotNull(zk.exists(path+\"0000000001\",false));List<Op>ops=Arrays.asList(Op.create(path,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL),Op.delete(\"/nonexist\",-1));zk.multi(ops,this,null);latch_await();Assert.assertNull(zk.exists(seqPath,false));zk.create(path,new byte[0],Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT_SEQUENTIAL);Assert.assertNotNull(zk.exists(seqPath,false));}}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Suite.SuiteClasses({AsyncHammerTest.class})public class NioNettySuiteHammerTest extends NioNettySuiteBase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Suite.SuiteClasses({ACLTest.class,AsyncOpsTest.class,ChrootClientTest.class,ClientTest.class,FourLetterWordsTest.class,NullDataTest.class,SessionTest.class,WatcherTest.class})public class NioNettySuiteTest extends NioNettySuiteBase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Suite.SuiteClasses({AsyncHammerTest.class})public class NettyNettySuiteHammerTest extends NettyNettySuiteBase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/@Suite.SuiteClasses({ACLTest.class,AsyncOpsTest.class,ChrootClientTest.class,ClientTest.class,FourLetterWordsTest.class,NullDataTest.class,SessionTest.class,WatcherTest.class})public class NettyNettySuiteTest extends NettyNettySuiteBase{}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class CommandNotFoundException extends CliException{public CommandNotFoundException(String command){super(\"Command not found: \"+command,127);}}"
    },
    {
        "code_smells": [
            "LazyClass"
        ],
        "source_code": "/***Licensed to the Apache Software Foundation(ASF)under one*or more contributor license agreements.See the NOTICE file*distributed with this work for additional information*regarding copyright ownership.The ASF licenses this file*to you under the Apache License,Version 2.0(the*\"License\");you may not use this file except in compliance*with the License.You may obtain a copy of the License at**http://www.apache.org/licenses/LICENSE-2.0**Unless required by applicable law or agreed to in writing,software*distributed under the License is distributed on an \"AS IS\" BASIS,*WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,either express or implied.*See the License for the specific language governing permissions and*limitations under the License.*/public class MalformedCommandException extends CliException{public MalformedCommandException(String message){super(message);}}"
    }
]