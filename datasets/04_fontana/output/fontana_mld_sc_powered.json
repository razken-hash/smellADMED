[
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.animation.distortion",
        "class": "BendDistortion",
        "method": "transform(Mesh)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/ArtOfIllusion/src/artofillusion/animation/distortion/BendDistortion.java#L86-L189",
        "source_code": "public Mesh transform(Mesh obj){if(previous!=null)obj=previous.transform(obj);Mesh newmesh=(Mesh)obj.duplicate();MeshVertex[]vert=newmesh.getVertices();Vec3[]newvert=new Vec3[vert.length];Vec3 origin=new Vec3();for(int i=0;i<newvert.length;i++){newvert[i]=vert[i].r;if(preTransform!=null)preTransform.transform(newvert[i]);}if(preTransform!=null)preTransform.transform(origin);double min=Double.MAX_VALUE,max=Double.MIN_VALUE;for(int i=0;i<newvert.length;i++){double value;if(axis==X_AXIS)value=newvert[i].x;else if(axis==Y_AXIS)value=newvert[i].y;else value=newvert[i].z;if(value<min)min=value;if(value>max)max=value;}if(min>=max)return obj;if(!forward){double temp=min;min=max;max=temp;}double theta=angle*(Math.PI/180.0);double scale=theta/(max-min);double radius=(max-min)/theta;Vec3 center;if(axis==X_AXIS){if(direction==Y_AXIS)for(int i=0;i<newvert.length;i++){double a=scale*(newvert[i].x-min);double b=newvert[i].y-origin.y-radius;newvert[i].set(min-Math.sin(a)*b,origin.y+radius+Math.cos(a)*b,newvert[i].z);}else for(int i=0;i<newvert.length;i++){double a=scale*(newvert[i].x-min);double b=newvert[i].z-origin.z-radius;newvert[i].set(min-Math.sin(a)*b,newvert[i].y,origin.z+radius+Math.cos(a)*b);}}else if(axis==Y_AXIS){if(direction==X_AXIS)for(int i=0;i<newvert.length;i++){double a=scale*(newvert[i].y-min);double b=newvert[i].x-origin.x-radius;newvert[i].set(origin.x+radius+Math.cos(a)*b,min-Math.sin(a)*b,newvert[i].z);}else for(int i=0;i<newvert.length;i++){double a=scale*(newvert[i].y-min);double b=newvert[i].z-origin.z-radius;newvert[i].set(newvert[i].x,min-Math.sin(a)*b,origin.z+radius+Math.cos(a)*b);}}else{if(direction==X_AXIS)for(int i=0;i<newvert.length;i++){double a=scale*(newvert[i].z-min);double b=newvert[i].x-origin.x-radius;newvert[i].set(origin.x+radius+Math.cos(a)*b,newvert[i].y,min-Math.sin(a)*b);}else for(int i=0;i<newvert.length;i++){double a=scale*(newvert[i].z-min);double b=newvert[i].y-origin.y-radius;newvert[i].set(newvert[i].x,origin.y+radius+Math.cos(a)*b,min-Math.sin(a)*b);}}if(postTransform!=null)for(int i=0;i<newvert.length;i++)postTransform.transform(newvert[i]);newmesh.setVertexPositions(newvert);return newmesh;}"
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.object",
        "class": "SplineMesh",
        "method": "interpOneAxis(MeshVertex[][],float[],double[][][],boolean,double)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/ArtOfIllusion/src/artofillusion/object/SplineMesh.java#L447-L547",
        "source_code": "private static Object[]interpOneAxis(MeshVertex[][]v,float[]s,double[][][]param,boolean closed,double tol){boolean[]refine,newrefine;float[]news;int numParam=param[0][0].length;double[]paramTemp=new double[numParam],newparam[][];Vec3 temp;MeshVertex[][]newv;int i,j,k,count,p1,p3,p4;double tol2=tol*tol;if(closed)refine=new boolean[v[0].length];else refine=new boolean[v[0].length-1];for(i=0;i<refine.length;i++)refine[i]=true;count=refine.length;int iterations=0;do{newrefine=new boolean[refine.length+count];newv=new MeshVertex[v.length][v[0].length+count];news=new float[v[0].length+count];newparam=new double[v.length][v[0].length+count][numParam];for(i=0,k=0;i<refine.length;i++){for(j=0;j<v.length;j++){newv[j][k]=v[j][i];newparam[j][k]=param[j][i];}news[k]=Math.min(s[i]*2.0f,1.0f);k++;if(refine[i]){p1=i-1;if(p1<0){if(closed)p1=v[0].length-1;else p1=0;}p3=i+1;if(p3==v[0].length){if(closed)p3=0;else p3=v[0].length-1;}p4=i+2;if(p4>=v[0].length){if(closed)p4 %=v[0].length;else p4=v[0].length-1;}for(j=0;j<v.length;j++){newv[j][k]=calcInterpPoint(v[j],s,param[j],paramTemp,p1,i,p3,p4);for(int m=0;m<numParam;m++)newparam[j][k][m]=paramTemp[m];if(v[j][i].r.distance2(newv[j][k].r)>tol2 && v[j][p3].r.distance2(newv[j][k].r)>tol2){temp=v[j][i].r.plus(v[j][p3].r).times(0.5);if(temp.distance2(newv[j][k].r)>tol2)newrefine[k]=newrefine[(k-1+newrefine.length)% newrefine.length]=true;}}news[k]=1.0f;k++;}}if(!closed)for(j=0;j<v.length;j++){newv[j][k]=v[j][i];newparam[j][k]=param[j][i];}count=0;for(j=0;j<newrefine.length;j++)if(newrefine[j])count++;v=newv;s=news;param=newparam;refine=newrefine;}while(count>0 &&++iterations<MAX_SUBDIVISIONS);return new Object[]{v,s,param};}"
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.object",
        "class": "TriangleMesh",
        "method": "doSubdivide(TriangleMesh,Vertex[],Edge[],Face[],boolean[],Vertex[],Edge[],Face[],double[][][],double[][][],int[])",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/ArtOfIllusion/src/artofillusion/object/TriangleMesh.java#L2273-L2617",
        "source_code": "private static void doSubdivide(TriangleMesh mesh,Vertex[]vertex,Edge[]edge,Face[]face,boolean[]split,Vertex[]newvert,Edge[]newedge,Face[]newface,double[][][]oldParamValue,double[][][]newParamValue,int[]paramType){Edge tempEdge;Face tempFace;int i,j,k,n,v1,v2,v3,e1,e2,e3,newEdgeIndex[]=new int[edge.length];j=edge.length;k=vertex.length;for(i=0;i<edge.length;i++){tempEdge=edge[i];v1=tempEdge.v1;v2=tempEdge.v2;if(!split[i]){newedge[i]=mesh.new Edge(v1,v2,-1);newedge[i].smoothness=tempEdge.smoothness;if(vertex[v1].firstEdge==i)newvert[v1].firstEdge=i;if(vertex[v2].firstEdge==i)newvert[v2].firstEdge=i;newEdgeIndex[i]=i;continue;}newedge[i]=mesh.new Edge(v1,k,-1);newedge[j]=mesh.new Edge(v2,k,-1);newedge[i].smoothness=newedge[j].smoothness=tempEdge.smoothness;if(vertex[v1].firstEdge==i)newvert[v1].firstEdge=i;if(vertex[v2].firstEdge==i)newvert[v2].firstEdge=j;newvert[k].firstEdge=i;newEdgeIndex[i]=j++;k++;}int[]addedFace=new int[4];k=face.length;for(i=0;i<face.length;i++){tempFace=face[i];if(split[tempFace.e1]){if(split[tempFace.e2]){if(split[tempFace.e3]){n=3;v1=tempFace.v1;v2=tempFace.v2;v3=tempFace.v3;e1=tempFace.e1;e2=tempFace.e2;e3=tempFace.e3;}else{n=2;v1=tempFace.v1;v2=tempFace.v2;v3=tempFace.v3;e1=tempFace.e1;e2=tempFace.e2;e3=tempFace.e3;}}else{if(split[tempFace.e3]){n=2;v1=tempFace.v3;v2=tempFace.v1;v3=tempFace.v2;e1=tempFace.e3;e2=tempFace.e1;e3=tempFace.e2;}else{n=1;v1=tempFace.v1;v2=tempFace.v2;v3=tempFace.v3;e1=tempFace.e1;e2=tempFace.e2;e3=tempFace.e3;}}}else{if(split[tempFace.e2]){if(split[tempFace.e3]){n=2;v1=tempFace.v2;v2=tempFace.v3;v3=tempFace.v1;e1=tempFace.e2;e2=tempFace.e3;e3=tempFace.e1;}else{n=1;v1=tempFace.v2;v2=tempFace.v3;v3=tempFace.v1;e1=tempFace.e2;e2=tempFace.e3;e3=tempFace.e1;}}else{if(split[tempFace.e3]){n=1;v1=tempFace.v3;v2=tempFace.v1;v3=tempFace.v2;e1=tempFace.e3;e2=tempFace.e1;e3=tempFace.e2;}else{n=0;v1=tempFace.v1;v2=tempFace.v2;v3=tempFace.v3;e1=tempFace.e1;e2=tempFace.e2;e3=tempFace.e3;}}}switch(n){case 0: newface[i]=mesh.new Face(v1,v2,v3,e1,e2,e3);break;case 1: newedge[j]=mesh.new Edge(v3,newedge[e1].v2,-1);if(edge[e1].v1==v1){newface[i]=mesh.new Face(v1,newedge[e1].v2,v3,e1,j,e3);newface[k]=mesh.new Face(v3,newedge[e1].v2,v2,j,newEdgeIndex[e1],e2);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,v3,newEdgeIndex[e1],j,e3);newface[k]=mesh.new Face(v3,newedge[e1].v2,v2,j,e1,e2);}break;case 2: newedge[j]=mesh.new Edge(newedge[e1].v2,newedge[e2].v2,-1);newedge[j+1]=mesh.new Edge(v3,newedge[e1].v2,-1);if(edge[e1].v1==v1){if(edge[e2].v1==v2){newface[i]=mesh.new Face(v1,newedge[e1].v2,v3,e1,j+1,e3);newface[k]=mesh.new Face(v3,newedge[e1].v2,newedge[e2].v2,j+1,j,newEdgeIndex[e2]);newface[k+1]=mesh.new Face(newedge[e2].v2,newedge[e1].v2,v2,j,newEdgeIndex[e1],e2);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,v3,e1,j+1,e3);newface[k]=mesh.new Face(v3,newedge[e1].v2,newedge[e2].v2,j+1,j,e2);newface[k+1]=mesh.new Face(newedge[e2].v2,newedge[e1].v2,v2,j,newEdgeIndex[e1],newEdgeIndex[e2]);}}else{if(edge[e2].v1==v2){newface[i]=mesh.new Face(v1,newedge[e1].v2,v3,newEdgeIndex[e1],j+1,e3);newface[k]=mesh.new Face(v3,newedge[e1].v2,newedge[e2].v2,j+1,j,newEdgeIndex[e2]);newface[k+1]=mesh.new Face(newedge[e2].v2,newedge[e1].v2,v2,j,e1,e2);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,v3,newEdgeIndex[e1],j+1,e3);newface[k]=mesh.new Face(v3,newedge[e1].v2,newedge[e2].v2,j+1,j,e2);newface[k+1]=mesh.new Face(newedge[e2].v2,newedge[e1].v2,v2,j,e1,newEdgeIndex[e2]);}}break;case 3: newedge[j]=mesh.new Edge(newedge[e1].v2,newedge[e2].v2,-1);newedge[j+1]=mesh.new Edge(newedge[e2].v2,newedge[e3].v2,-1);newedge[j+2]=mesh.new Edge(newedge[e3].v2,newedge[e1].v2,-1);if(edge[e1].v1==v1){if(edge[e2].v1==v2){if(edge[e3].v1==v3){newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,e1,j+2,newEdgeIndex[e3]);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,e2,j,newEdgeIndex[e1]);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,e3,j+1,newEdgeIndex[e2]);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,e1,j+2,e3);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,e2,j,newEdgeIndex[e1]);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,newEdgeIndex[e3],j+1,newEdgeIndex[e2]);}}else{if(edge[e3].v1==v3){newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,e1,j+2,newEdgeIndex[e3]);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,newEdgeIndex[e2],j,newEdgeIndex[e1]);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,e3,j+1,e2);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,e1,j+2,e3);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,newEdgeIndex[e2],j,newEdgeIndex[e1]);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,newEdgeIndex[e3],j+1,e2);}}}else{if(edge[e2].v1==v2){if(edge[e3].v1==v3){newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,newEdgeIndex[e1],j+2,newEdgeIndex[e3]);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,e2,j,e1);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,e3,j+1,newEdgeIndex[e2]);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,newEdgeIndex[e1],j+2,e3);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,e2,j,e1);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,newEdgeIndex[e3],j+1,newEdgeIndex[e2]);}}else{if(edge[e3].v1==v3){newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,newEdgeIndex[e1],j+2,newEdgeIndex[e3]);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,newEdgeIndex[e2],j,e1);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,e3,j+1,e2);}else{newface[i]=mesh.new Face(v1,newedge[e1].v2,newedge[e3].v2,newEdgeIndex[e1],j+2,e3);newface[k]=mesh.new Face(v2,newedge[e2].v2,newedge[e1].v2,newEdgeIndex[e2],j,e1);newface[k+1]=mesh.new Face(v3,newedge[e3].v2,newedge[e2].v2,newEdgeIndex[e3],j+1,e2);}}}newface[k+2]=mesh.new Face(newedge[e1].v2,newedge[e2].v2,newedge[e3].v2,j,j+1,j+2);}int numAddedFaces=n+1;addedFace[0]=i;for(int m=0;m<n;m++)addedFace[m+1]=k+m;for(int p=0;p<paramType.length;p++){if(paramType[p]==PER_FACE)for(int m=0;m<numAddedFaces;m++)newParamValue[p][0][addedFace[m]]=oldParamValue[p][0][i];else if(paramType[p]==PER_FACE_VERTEX){int[]vertInd=new int[]{v1,v2,v3,-1,-1,-1};if(n>0)vertInd[3]=newedge[e1].v2;if(n>1)vertInd[4]=newedge[e2].v2;if(n>2)vertInd[5]=newedge[e3].v2;double[]vertVal;if(v1==tempFace.v1)vertVal=new double[]{oldParamValue[p][0][i],oldParamValue[p][1][i],oldParamValue[p][2][i],0.5*(oldParamValue[p][0][i]+oldParamValue[p][1][i]),0.5*(oldParamValue[p][1][i]+oldParamValue[p][2][i]),0.5*(oldParamValue[p][2][i]+oldParamValue[p][0][i])};else if(v1==tempFace.v2)vertVal=new double[]{oldParamValue[p][1][i],oldParamValue[p][2][i],oldParamValue[p][0][i],0.5*(oldParamValue[p][1][i]+oldParamValue[p][2][i]),0.5*(oldParamValue[p][2][i]+oldParamValue[p][0][i]),0.5*(oldParamValue[p][0][i]+oldParamValue[p][1][i])};else vertVal=new double[]{oldParamValue[p][2][i],oldParamValue[p][0][i],oldParamValue[p][1][i],0.5*(oldParamValue[p][2][i]+oldParamValue[p][0][i]),0.5*(oldParamValue[p][0][i]+oldParamValue[p][1][i]),0.5*(oldParamValue[p][1][i]+oldParamValue[p][2][i])};for(int m=0;m<numAddedFaces;m++){Face fc=newface[addedFace[m]];for(int q=0;q<6;q++){if(fc.v1==vertInd[q])newParamValue[p][0][addedFace[m]]=vertVal[q];else if(fc.v2==vertInd[q])newParamValue[p][1][addedFace[m]]=vertVal[q];else if(fc.v3==vertInd[q])newParamValue[p][2][addedFace[m]]=vertVal[q];}}}}j+=n;k+=n;}for(i=0;i<newface.length;i++){tempFace=newface[i];if(newedge[tempFace.e1].f1==-1)newedge[tempFace.e1].f1=i;else newedge[tempFace.e1].f2=i;if(newedge[tempFace.e2].f1==-1)newedge[tempFace.e2].f1=i;else newedge[tempFace.e2].f2=i;if(newedge[tempFace.e3].f1==-1)newedge[tempFace.e3].f1=i;else newedge[tempFace.e3].f2=i;}for(i=0;i<newvert.length;i++)newvert[i].edges=0;for(i=0;i<newedge.length;i++){newvert[newedge[i].v1].edges++;newvert[newedge[i].v2].edges++;}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raster",
        "class": "Raster",
        "method": "createFinalImage(Vec3,Vec3,Vec3,Vec3)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raster/Raster.java#L518-L681",
        "source_code": "private ComplexImage createFinalImage(final Vec3 center,final Vec3 orig,final Vec3 hvec,final Vec3 vvec){final Thread thisThread=Thread.currentThread();if(renderThread!=thisThread)return null;final int n=samplesPerPixel*samplesPerPixel;final float[][]hdrImage=(generateHDR ? new float[3][imageWidth*imageHeight]: null);ThreadManager threads=new ThreadManager(imageHeight,new ThreadManager.Task(){public void execute(int i1){CompositingContext context=(CompositingContext)threadCompositingContext.get();Vec3 dir=context.tempVec[1];RGBColor totalColor=context.totalColor;RGBColor totalTransparency=context.totalTransparency;RGBColor addColor=context.addColor;RGBColor multColor=context.multColor;RGBColor subpixelColor=context.subpixelColor;RGBColor subpixelMult=context.subpixelMult;ArrayList<ObjectMaterialInfo>materialStack=context.materialStack;TextureSpec surfSpec=context.surfSpec;int i2=i1*samplesPerPixel;for(int j1=0,j2=0;j1<imageWidth;j1++,j2+=samplesPerPixel){totalColor.setRGB(0.0f,0.0f,0.0f);totalTransparency.setRGB(0.0f,0.0f,0.0f);for(int k=0;k<samplesPerPixel;k++){int base=width*(i2+k)+j2;for(int m=0;m<samplesPerPixel;m++){subpixelColor.setRGB(0.0f,0.0f,0.0f);subpixelMult.setRGB(1.0f,1.0f,1.0f);Fragment f=fragment[base+m];float lastDepth=0;while(true){ObjectMaterialInfo fragmentMaterial=f.getMaterialMapping();ObjectMaterialInfo currentMaterial=null;if(materialStack.size()>0)currentMaterial=materialStack.get(materialStack.size()-1);adjustColorsForMaterial(currentMaterial,j2+m,i2+k,lastDepth,f.getDepth(),addColor,context.multColor,context);addColor.multiply(subpixelMult);subpixelColor.add(addColor);subpixelMult.multiply(multColor);if(fragmentMaterial!=null){if(f.isEntering())materialStack.add(fragmentMaterial);else materialStack.remove(fragmentMaterial);}lastDepth=f.getDepth();if(f==BACKGROUND_FRAGMENT){if(transparentBackground){addColor.setRGB(0.0f,0.0f,0.0f);}else if(envMode==Scene.ENVIRON_SOLID)addColor.copy(envColor);else{double h=j2+k-width/2.0,v=i2+m-height/2.0;dir.x=center.x+h*hvec.x+v*vvec.x;dir.y=center.y+h*hvec.y+v*vvec.y;dir.z=center.z+h*hvec.z+v*vvec.z;dir.subtract(orig);dir.normalize();envMapping.getTextureSpec(dir,surfSpec,1.0,smoothScale,time,envParamValue);if(envMode==Scene.ENVIRON_DIFFUSE)addColor.copy(surfSpec.diffuse);else addColor.copy(surfSpec.emissive);}}else f.getAdditiveColor(addColor);addColor.multiply(subpixelMult);subpixelColor.add(addColor);if(f.isOpaque()){if(f!=BACKGROUND_FRAGMENT || !transparentBackground)subpixelMult.setRGB(0.0f,0.0f,0.0f);break;}f.getMultiplicativeColor(multColor);subpixelMult.multiply(multColor);f=f.getNextFragment();}totalColor.add(subpixelColor);totalTransparency.add(subpixelMult);materialStack.clear();}}totalColor.scale(1.0f/n);totalTransparency.scale(1.0f/n);imagePixel[i1*imageWidth+j1]=calcARGB(totalColor,totalTransparency);if(generateHDR){hdrImage[0][i1*imageWidth+j1]=totalColor.getRed();hdrImage[1][i1*imageWidth+j1]=totalColor.getGreen();hdrImage[2][i1*imageWidth+j1]=totalColor.getBlue();}}if(renderThread!=thisThread)return;if(System.currentTimeMillis()-updateTime>5000)updateFinalImage();}public void cleanup(){((CompositingContext)threadCompositingContext.get()).cleanup();}});threads.run();threads.finish();imageSource.newPixels();ComplexImage image=new ComplexImage(img);if(generateHDR){image.setComponentValues(ComplexImage.RED,hdrImage[0]);image.setComponentValues(ComplexImage.GREEN,hdrImage[1]);image.setComponentValues(ComplexImage.BLUE,hdrImage[2]);}if(depthNeeded){float[]imageZbuffer=new float[imageWidth*imageHeight];for(int i1=0,i2=0;i1<imageHeight;i1++,i2+=samplesPerPixel)for(int j1=0,j2=0;j1<imageWidth;j1++,j2+=samplesPerPixel){float minDepth=Float.MAX_VALUE;for(int k=0;k<samplesPerPixel;k++){int base=width*(i2+k)+j2;for(int m=0;m<samplesPerPixel;m++){float z=fragment[base+m].getDepth();if(z<minDepth)minDepth=z;}}imageZbuffer[i1*imageWidth+j1]=minDepth;}image.setComponentValues(ComplexImage.DEPTH,imageZbuffer);}return image;}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raster",
        "class": "Raster",
        "method": "renderTriangleGouraud(Vec2,float,double,double,RGBColor,RGBColor,Vec2,float,double,double,RGBColor,RGBColor,Vec2,float,double,double,RGBColor,RGBColor,RenderingTriangle,double,double,boolean,ObjectMaterialInfo,RasterContext)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raster/Raster.java#L1272-L1916",
        "source_code": "private void renderTriangleGouraud(Vec2 pos1,float zf1,double uf1,double vf1,RGBColor diffuse1,RGBColor specular1,Vec2 pos2,float zf2,double uf2,double vf2,RGBColor diffuse2,RGBColor specular2,Vec2 pos3,float zf3,double uf3,double vf3,RGBColor diffuse3,RGBColor specular3,RenderingTriangle tri,double clip,double viewdot,boolean isBackface,ObjectMaterialInfo material,RasterContext context){double x1,x2,x3,y1,y2,y3;double dx1,dx2,dy1,dy2,mx1,mx2;double xstart,xend;float z1,z2,z3,dz1,dz2,mz1,mz2,zstart,zend,z,zl,dz;double u1,u2,u3,v1,v2,v3,du1,du2,dv1,dv2,mu1,mu2,mv1,mv2;double ustart,uend,vstart,vend,u,v,ul,vl,wl,du,dv;RGBColor dif1,dif2,dif3,spec1,spec2,spec3;float ddifred1,ddifred2,ddifgreen1,ddifgreen2,ddifblue1,ddifblue2;float mdifred1,mdifred2,mdifgreen1,mdifgreen2,mdifblue1,mdifblue2;float dspecred1,dspecred2,dspecgreen1,dspecgreen2,dspecblue1,dspecblue2;float mspecred1,mspecred2,mspecgreen1,mspecgreen2,mspecblue1,mspecblue2;float difredstart,difredend,difgreenstart,difgreenend,difbluestart,difblueend;float specredstart,specredend,specgreenstart,specgreenend,specbluestart,specblueend;float difred,difgreen,difblue,ddifred,ddifgreen,ddifblue;float specred,specgreen,specblue,dspecred,dspecgreen,dspecblue;float denom;int left,right,i,index,yend,y,lastAddColor=0,lastMultColor=0;boolean doSubsample=(subsample>1),repeat;TextureSpec surfSpec=context.surfSpec;if(pos1.y<=pos2.y && pos1.y<=pos3.y){x1=pos1.x;y1=pos1.y;z1=zf1;u1=uf1;v1=vf1;dif1=diffuse1;spec1=specular1;if(pos2.y<pos3.y){x2=pos2.x;y2=pos2.y;z2=zf2;u2=uf2;v2=vf2;dif2=diffuse2;spec2=specular2;x3=pos3.x;y3=pos3.y;z3=zf3;u3=uf3;v3=vf3;dif3=diffuse3;spec3=specular3;}else{x2=pos3.x;y2=pos3.y;z2=zf3;u2=uf3;v2=vf3;dif2=diffuse3;spec2=specular3;x3=pos2.x;y3=pos2.y;z3=zf2;u3=uf2;v3=vf2;dif3=diffuse2;spec3=specular2;}}else if(pos2.y<=pos1.y && pos2.y<=pos3.y){x1=pos2.x;y1=pos2.y;z1=zf2;u1=uf2;v1=vf2;dif1=diffuse2;spec1=specular2;if(pos1.y<pos3.y){x2=pos1.x;y2=pos1.y;z2=zf1;u2=uf1;v2=vf1;dif2=diffuse1;spec2=specular1;x3=pos3.x;y3=pos3.y;z3=zf3;u3=uf3;v3=vf3;dif3=diffuse3;spec3=specular3;}else{x2=pos3.x;y2=pos3.y;z2=zf3;u2=uf3;v2=vf3;dif2=diffuse3;spec2=specular3;x3=pos1.x;y3=pos1.y;z3=zf1;u3=uf1;v3=vf1;dif3=diffuse1;spec3=specular1;}}else{x1=pos3.x;y1=pos3.y;z1=zf3;u1=uf3;v1=vf3;dif1=diffuse3;spec1=specular3;if(pos1.y<pos2.y){x2=pos1.x;y2=pos1.y;z2=zf1;u2=uf1;v2=vf1;dif2=diffuse1;spec2=specular1;x3=pos2.x;y3=pos2.y;z3=zf2;u3=uf2;v3=vf2;dif3=diffuse2;spec3=specular2;}else{x2=pos2.x;y2=pos2.y;z2=zf2;u2=uf2;v2=vf2;dif2=diffuse2;spec2=specular2;x3=pos1.x;y3=pos1.y;z3=zf1;u3=uf1;v3=vf1;dif3=diffuse1;spec3=specular1;}}x1=FastMath.round(x1);y1=FastMath.round(y1);x2=FastMath.round(x2);y2=FastMath.round(y2);x3=FastMath.round(x3);y3=FastMath.round(y3);z1=1.0f/z1;u1*=z1;v1*=z1;z2=1.0f/z2;u2*=z2;v2*=z2;z3=1.0f/z3;u3*=z3;v3*=z3;dx1=x3-x1;dy1=y3-y1;dz1=z3-z1;if(dy1==0)return;du1=u3-u1;dv1=v3-v1;ddifred1=dif3.getRed()-dif1.getRed();ddifgreen1=dif3.getGreen()-dif1.getGreen();ddifblue1=dif3.getBlue()-dif1.getBlue();dspecred1=spec3.getRed()-spec1.getRed();dspecgreen1=spec3.getGreen()-spec1.getGreen();dspecblue1=spec3.getBlue()-spec1.getBlue();dx2=x2-x1;dy2=y2-y1;dz2=z2-z1;du2=u2-u1;dv2=v2-v1;ddifred2=dif2.getRed()-dif1.getRed();ddifgreen2=dif2.getGreen()-dif1.getGreen();ddifblue2=dif2.getBlue()-dif1.getBlue();dspecred2=spec2.getRed()-spec1.getRed();dspecgreen2=spec2.getGreen()-spec1.getGreen();dspecblue2=spec2.getBlue()-spec1.getBlue();denom=(float)(1.0/dy1);mx1=dx1*denom;mz1=dz1*denom;mu1=du1*denom;mv1=dv1*denom;mdifred1=ddifred1*denom;mdifgreen1=ddifgreen1*denom;mdifblue1=ddifblue1*denom;mspecred1=dspecred1*denom;mspecgreen1=dspecgreen1*denom;mspecblue1=dspecblue1*denom;xstart=xend=x1;zstart=zend=z1;ustart=uend=u1;vstart=vend=v1;difredstart=difredend=dif1.getRed();difgreenstart=difgreenend=dif1.getGreen();difbluestart=difblueend=dif1.getBlue();specredstart=specredend=spec1.getRed();specgreenstart=specgreenend=spec1.getGreen();specbluestart=specblueend=spec1.getBlue();y=FastMath.round(y1);if(dy2>0.0){denom=(float)(1.0/dy2);mx2=dx2*denom;mz2=dz2*denom;mu2=du2*denom;mv2=dv2*denom;mdifred2=ddifred2*denom;mdifgreen2=ddifgreen2*denom;mdifblue2=ddifblue2*denom;mspecred2=dspecred2*denom;mspecgreen2=dspecgreen2*denom;mspecblue2=dspecblue2*denom;if(y2<0){xstart+=mx1*dy2;xend+=mx2*dy2;zstart+=mz1*dy2;zend+=mz2*dy2;ustart+=mu1*dy2;uend+=mu2*dy2;vstart+=mv1*dy2;vend+=mv2*dy2;difredstart+=mdifred1*dy2;difredend+=mdifred2*dy2;difgreenstart+=mdifgreen1*dy2;difgreenend+=mdifgreen2*dy2;difbluestart+=mdifblue1*dy2;difblueend+=mdifblue2*dy2;specredstart+=mspecred1*dy2;specredend+=mspecred2*dy2;specgreenstart+=mspecgreen1*dy2;specgreenend+=mspecgreen2*dy2;specbluestart+=mspecblue1*dy2;specblueend+=mspecblue2*dy2;y=FastMath.round(y2);}else if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;ustart-=mu1*y;uend-=mu2*y;vstart-=mv1*y;vend-=mv2*y;difredstart-=mdifred1*y;difredend-=mdifred2*y;difgreenstart-=mdifgreen1*y;difgreenend-=mdifgreen2*y;difbluestart-=mdifblue1*y;difblueend-=mdifblue2*y;specredstart-=mspecred1*y;specredend-=mspecred2*y;specgreenstart-=mspecgreen1*y;specgreenend-=mspecgreen2*y;specbluestart-=mspecblue1*y;specblueend-=mspecblue2*y;y=0;}yend=FastMath.round(y2);if(yend>height)yend=height;index=y*width;while(y<yend){if(xstart<xend){left=FastMath.round(xstart);right=FastMath.round(xend);z=zstart;dz=zend-zstart;u=ustart;du=uend-ustart;v=vstart;dv=vend-vstart;difred=difredstart;ddifred=difredend-difredstart;difgreen=difgreenstart;ddifgreen=difgreenend-difgreenstart;difblue=difbluestart;ddifblue=difblueend-difbluestart;specred=specredstart;dspecred=specredend-specredstart;specgreen=specgreenstart;dspecgreen=specgreenend-specgreenstart;specblue=specbluestart;dspecblue=specblueend-specbluestart;}else{left=FastMath.round(xend);right=FastMath.round(xstart);z=zend;dz=zstart-zend;u=uend;du=ustart-uend;v=vend;dv=vstart-vend;difred=difredend;ddifred=difredstart-difredend;difgreen=difgreenend;ddifgreen=difgreenstart-difgreenend;difblue=difblueend;ddifblue=difbluestart-difblueend;specred=specredend;dspecred=specredstart-specredend;specgreen=specgreenend;dspecgreen=specgreenstart-specgreenend;specblue=specblueend;dspecblue=specbluestart-specblueend;}if(left!=right){if(xend==xstart)denom=1.0f;else if(xend>xstart)denom=(float)(1.0/(xend-xstart));else denom=(float)(1.0/(xstart-xend));dz*=denom;du*=denom;dv*=denom;ddifred*=denom;ddifgreen*=denom;ddifblue*=denom;dspecred*=denom;dspecgreen*=denom;dspecblue*=denom;if(left<0){z-=dz*left;u-=du*left;v-=dv*left;difred-=ddifred*left;difgreen-=ddifgreen*left;difblue-=ddifblue*left;specred-=dspecred*left;specgreen-=dspecgreen*left;specblue-=dspecblue*left;left=0;}if(right>width)right=width;repeat=false;for(i=left;i<right;i++){zl=1.0f/z;if(zl<fragment[index+i].getOpaqueDepth()&& zl>clip){if(!repeat ||(i % subsample==0)){ul=u*zl;vl=v*zl;wl=1.0-ul-vl;tri.getTextureSpec(surfSpec,viewdot,ul,vl,wl,smoothScale*z,time);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*difred+surfSpec.hilight.getRed()*specred+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*difgreen+surfSpec.hilight.getGreen()*specgreen+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*difblue+surfSpec.hilight.getBlue()*specblue+surfSpec.emissive.getBlue());lastAddColor=context.tempColor[0].getERGB();lastMultColor=surfSpec.transparent.getERGB();}context.fragment[i]=createFragment(lastAddColor,lastMultColor,zl,material,isBackface);repeat=doSubsample;}else{context.fragment[i]=null;repeat=false;}z+=dz;u+=du;v+=dv;difred+=ddifred;difgreen+=ddifgreen;difblue+=ddifblue;specred+=dspecred;specgreen+=dspecgreen;specblue+=dspecblue;}recordRow(y,left,right,context);}xstart+=mx1;zstart+=mz1;ustart+=mu1;vstart+=mv1;difredstart+=mdifred1;difgreenstart+=mdifgreen1;difbluestart+=mdifblue1;specredstart+=mspecred1;specgreenstart+=mspecgreen1;specbluestart+=mspecblue1;xend+=mx2;zend+=mz2;uend+=mu2;vend+=mv2;difredend+=mdifred2;difgreenend+=mdifgreen2;difblueend+=mdifblue2;specredend+=mspecred2;specgreenend+=mspecgreen2;specblueend+=mspecblue2;index+=width;y++;}}dx2=x3-x2;dy2=y3-y2;dz2=z3-z2;du2=u3-u2;dv2=v3-v2;ddifred2=dif3.getRed()-dif2.getRed();ddifgreen2=dif3.getGreen()-dif2.getGreen();ddifblue2=dif3.getBlue()-dif2.getBlue();dspecred2=spec3.getRed()-spec2.getRed();dspecgreen2=spec3.getGreen()-spec2.getGreen();dspecblue2=spec3.getBlue()-spec2.getBlue();if(dy2>0.0){denom=(float)(1.0/dy2);mx2=dx2*denom;mz2=dz2*denom;mu2=du2*denom;mv2=dv2*denom;mdifred2=ddifred2*denom;mdifgreen2=ddifgreen2*denom;mdifblue2=ddifblue2*denom;mspecred2=dspecred2*denom;mspecgreen2=dspecgreen2*denom;mspecblue2=dspecblue2*denom;xend=x2;zend=z2;uend=u2;vend=v2;difredend=dif2.getRed();difgreenend=dif2.getGreen();difblueend=dif2.getBlue();specredend=spec2.getRed();specgreenend=spec2.getGreen();specblueend=spec2.getBlue();if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;ustart-=mu1*y;uend-=mu2*y;vstart-=mv1*y;vend-=mv2*y;difredstart-=mdifred1*y;difredend-=mdifred2*y;difgreenstart-=mdifgreen1*y;difgreenend-=mdifgreen2*y;difbluestart-=mdifblue1*y;difblueend-=mdifblue2*y;specredstart-=mspecred1*y;specredend-=mspecred2*y;specgreenstart-=mspecgreen1*y;specgreenend-=mspecgreen2*y;specbluestart-=mspecblue1*y;specblueend-=mspecblue2*y;y=0;}yend=FastMath.round(y3<height ? y3 : height);index=y*width;while(y<yend){if(xstart<xend){left=FastMath.round(xstart);right=FastMath.round(xend);z=zstart;dz=zend-zstart;u=ustart;du=uend-ustart;v=vstart;dv=vend-vstart;difred=difredstart;ddifred=difredend-difredstart;difgreen=difgreenstart;ddifgreen=difgreenend-difgreenstart;difblue=difbluestart;ddifblue=difblueend-difbluestart;specred=specredstart;dspecred=specredend-specredstart;specgreen=specgreenstart;dspecgreen=specgreenend-specgreenstart;specblue=specbluestart;dspecblue=specblueend-specbluestart;}else{left=FastMath.round(xend);right=FastMath.round(xstart);z=zend;dz=zstart-zend;u=uend;du=ustart-uend;v=vend;dv=vstart-vend;difred=difredend;ddifred=difredstart-difredend;difgreen=difgreenend;ddifgreen=difgreenstart-difgreenend;difblue=difblueend;ddifblue=difbluestart-difblueend;specred=specredend;dspecred=specredstart-specredend;specgreen=specgreenend;dspecgreen=specgreenstart-specgreenend;specblue=specblueend;dspecblue=specbluestart-specblueend;}if(left!=right){if(xend==xstart)denom=1.0f;else if(xend>xstart)denom=(float)(1.0/(xend-xstart));else denom=(float)(1.0/(xstart-xend));dz*=denom;du*=denom;dv*=denom;ddifred*=denom;ddifgreen*=denom;ddifblue*=denom;dspecred*=denom;dspecgreen*=denom;dspecblue*=denom;if(left<0){z-=dz*left;u-=du*left;v-=dv*left;difred-=ddifred*left;difgreen-=ddifgreen*left;difblue-=ddifblue*left;specred-=dspecred*left;specgreen-=dspecgreen*left;specblue-=dspecblue*left;left=0;}if(right>width)right=width;repeat=false;for(i=left;i<right;i++){zl=1.0f/z;if(zl<fragment[index+i].getOpaqueDepth()&& zl>clip){if(!repeat ||(i % subsample==0)){ul=u*zl;vl=v*zl;wl=1.0-ul-vl;tri.getTextureSpec(surfSpec,viewdot,ul,vl,wl,smoothScale*z,time);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*difred+surfSpec.hilight.getRed()*specred+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*difgreen+surfSpec.hilight.getGreen()*specgreen+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*difblue+surfSpec.hilight.getBlue()*specblue+surfSpec.emissive.getBlue());lastAddColor=context.tempColor[0].getERGB();lastMultColor=surfSpec.transparent.getERGB();}context.fragment[i]=createFragment(lastAddColor,lastMultColor,zl,material,isBackface);repeat=doSubsample;}else{context.fragment[i]=null;repeat=false;}z+=dz;u+=du;v+=dv;difred+=ddifred;difgreen+=ddifgreen;difblue+=ddifblue;specred+=dspecred;specgreen+=dspecgreen;specblue+=dspecblue;}recordRow(y,left,right,context);}xstart+=mx1;zstart+=mz1;ustart+=mu1;vstart+=mv1;difredstart+=mdifred1;difgreenstart+=mdifgreen1;difbluestart+=mdifblue1;specredstart+=mspecred1;specgreenstart+=mspecgreen1;specbluestart+=mspecblue1;xend+=mx2;zend+=mz2;uend+=mu2;vend+=mv2;difredend+=mdifred2;difgreenend+=mdifgreen2;difblueend+=mdifblue2;specredend+=mspecred2;specgreenend+=mspecgreen2;specblueend+=mspecblue2;index+=width;y++;}}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raster",
        "class": "Raster",
        "method": "renderTriangleHybrid(Vec2,float,Vec3,Vec3,double,double,RGBColor,Vec2,float,Vec3,Vec3,double,double,RGBColor,Vec2,float,Vec3,Vec3,double,double,RGBColor,RenderingTriangle,Vec3,Vec3,double,double,boolean,ObjectMaterialInfo,RasterContext)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raster/Raster.java#L2005-L2676",
        "source_code": "private void renderTriangleHybrid(Vec2 pos1,float zf1,Vec3 vert1,Vec3 normf1,double uf1,double vf1,RGBColor diffuse1,Vec2 pos2,float zf2,Vec3 vert2,Vec3 normf2,double uf2,double vf2,RGBColor diffuse2,Vec2 pos3,float zf3,Vec3 vert3,Vec3 normf3,double uf3,double vf3,RGBColor diffuse3,RenderingTriangle tri,Vec3 viewdir,Vec3 faceNorm,double clip,double viewdot,boolean isBackface,ObjectMaterialInfo material,RasterContext context){double x1,x2,x3,y1,y2,y3;double dx1,dx2,dy1,dy2,mx1,mx2;double xstart,xend;float z1,z2,z3,dz1,dz2,mz1,mz2,zstart,zend,z,zl,dz;double u1,u2,u3,v1,v2,v3,du1,du2,dv1,dv2,mu1,mu2,mv1,mv2;double ustart,uend,vstart,vend,u,v,ul,vl,wl,du,dv;RGBColor dif1,dif2,dif3,specular=context.tempColor[1],highlight=context.tempColor[2];Vec3 norm1,norm2,norm3;float ddifred1,ddifred2,ddifgreen1,ddifgreen2,ddifblue1,ddifblue2;float mdifred1,mdifred2,mdifgreen1,mdifgreen2,mdifblue1,mdifblue2;double dnormx1,dnormx2,dnormy1,dnormy2,dnormz1,dnormz2;double mnormx1,mnormx2,mnormy1,mnormy2,mnormz1,mnormz2;float difredstart,difredend,difgreenstart,difgreenend,difbluestart,difblueend;double normxstart,normxend,normystart,normyend,normzstart,normzend;float difred,difgreen,difblue,ddifred,ddifgreen,ddifblue;double normx,normy,normz,dnormx,dnormy,dnormz;float denom;int left,right,i,index,yend,y,lastAddColor=0,lastMultColor=0;boolean doSubsample=(subsample>1),repeat;TextureSpec surfSpec=context.surfSpec;if(pos1.y<=pos2.y && pos1.y<=pos3.y){x1=pos1.x;y1=pos1.y;z1=zf1;u1=uf1;v1=vf1;dif1=diffuse1;norm1=normf1;if(pos2.y<pos3.y){x2=pos2.x;y2=pos2.y;z2=zf2;u2=uf2;v2=vf2;dif2=diffuse2;norm2=normf2;x3=pos3.x;y3=pos3.y;z3=zf3;u3=uf3;v3=vf3;dif3=diffuse3;norm3=normf3;}else{x2=pos3.x;y2=pos3.y;z2=zf3;u2=uf3;v2=vf3;dif2=diffuse3;norm2=normf3;x3=pos2.x;y3=pos2.y;z3=zf2;u3=uf2;v3=vf2;dif3=diffuse2;norm3=normf2;}}else if(pos2.y<=pos1.y && pos2.y<=pos3.y){x1=pos2.x;y1=pos2.y;z1=zf2;u1=uf2;v1=vf2;dif1=diffuse2;norm1=normf2;if(pos1.y<pos3.y){x2=pos1.x;y2=pos1.y;z2=zf1;u2=uf1;v2=vf1;dif2=diffuse1;norm2=normf1;x3=pos3.x;y3=pos3.y;z3=zf3;u3=uf3;v3=vf3;dif3=diffuse3;norm3=normf3;}else{x2=pos3.x;y2=pos3.y;z2=zf3;u2=uf3;v2=vf3;dif2=diffuse3;norm2=normf3;x3=pos1.x;y3=pos1.y;z3=zf1;u3=uf1;v3=vf1;dif3=diffuse1;norm3=normf1;}}else{x1=pos3.x;y1=pos3.y;z1=zf3;u1=uf3;v1=vf3;dif1=diffuse3;norm1=normf3;if(pos1.y<pos2.y){x2=pos1.x;y2=pos1.y;z2=zf1;u2=uf1;v2=vf1;dif2=diffuse1;norm2=normf1;x3=pos2.x;y3=pos2.y;z3=zf2;u3=uf2;v3=vf2;dif3=diffuse2;norm3=normf2;}else{x2=pos2.x;y2=pos2.y;z2=zf2;u2=uf2;v2=vf2;dif2=diffuse2;norm2=normf2;x3=pos1.x;y3=pos1.y;z3=zf1;u3=uf1;v3=vf1;dif3=diffuse1;norm3=normf1;}}x1=FastMath.round(x1);y1=FastMath.round(y1);x2=FastMath.round(x2);y2=FastMath.round(y2);x3=FastMath.round(x3);y3=FastMath.round(y3);z1=1.0f/z1;u1*=z1;v1*=z1;z2=1.0f/z2;u2*=z2;v2*=z2;z3=1.0f/z3;u3*=z3;v3*=z3;dx1=x3-x1;dy1=y3-y1;dz1=z3-z1;if(dy1==0)return;du1=u3-u1;dv1=v3-v1;ddifred1=dif3.getRed()-dif1.getRed();ddifgreen1=dif3.getGreen()-dif1.getGreen();ddifblue1=dif3.getBlue()-dif1.getBlue();dnormx1=norm3.x-norm1.x;dnormy1=norm3.y-norm1.y;dnormz1=norm3.z-norm1.z;dx2=x2-x1;dy2=y2-y1;dz2=z2-z1;du2=u2-u1;dv2=v2-v1;ddifred2=dif2.getRed()-dif1.getRed();ddifgreen2=dif2.getGreen()-dif1.getGreen();ddifblue2=dif2.getBlue()-dif1.getBlue();dnormx2=norm2.x-norm1.x;dnormy2=norm2.y-norm1.y;dnormz2=norm2.z-norm1.z;denom=(float)(1.0/dy1);mx1=dx1*denom;mz1=dz1*denom;mu1=du1*denom;mv1=dv1*denom;mdifred1=ddifred1*denom;mdifgreen1=ddifgreen1*denom;mdifblue1=ddifblue1*denom;mnormx1=dnormx1*denom;mnormy1=dnormy1*denom;mnormz1=dnormz1*denom;xstart=xend=x1;zstart=zend=z1;ustart=uend=u1;vstart=vend=v1;difredstart=difredend=dif1.getRed();difgreenstart=difgreenend=dif1.getGreen();difbluestart=difblueend=dif1.getBlue();normxstart=normxend=norm1.x;normystart=normyend=norm1.y;normzstart=normzend=norm1.z;y=FastMath.round(y1);if(dy2>0.0){denom=(float)(1.0/dy2);mx2=dx2*denom;mz2=dz2*denom;mu2=du2*denom;mv2=dv2*denom;mdifred2=ddifred2*denom;mdifgreen2=ddifgreen2*denom;mdifblue2=ddifblue2*denom;mnormx2=dnormx2*denom;mnormy2=dnormy2*denom;mnormz2=dnormz2*denom;if(y2<0){xstart+=mx1*dy2;xend+=mx2*dy2;zstart+=mz1*dy2;zend+=mz2*dy2;ustart+=mu1*dy2;uend+=mu2*dy2;vstart+=mv1*dy2;vend+=mv2*dy2;difredstart+=mdifred1*dy2;difredend+=mdifred2*dy2;difgreenstart+=mdifgreen1*dy2;difgreenend+=mdifgreen2*dy2;difbluestart+=mdifblue1*dy2;difblueend+=mdifblue2*dy2;normxstart+=mnormx1*dy2;normxend+=mnormx2*dy2;normystart+=mnormy1*dy2;normyend+=mnormy2*dy2;normzstart+=mnormz1*dy2;normzend+=mnormz2*dy2;y=FastMath.round(y2);}else if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;ustart-=mu1*y;uend-=mu2*y;vstart-=mv1*y;vend-=mv2*y;difredstart-=mdifred1*y;difredend-=mdifred2*y;difgreenstart-=mdifgreen1*y;difgreenend-=mdifgreen2*y;difbluestart-=mdifblue1*y;difblueend-=mdifblue2*y;normxstart-=mnormx1*y;normxend-=mnormx2*y;normystart-=mnormy1*y;normyend-=mnormy2*y;normzstart-=mnormz1*y;normzend-=mnormz2*y;y=0;}yend=FastMath.round(y2);if(yend>height)yend=height;index=y*width;while(y<yend){if(xstart<xend){left=FastMath.round(xstart);right=FastMath.round(xend);z=zstart;dz=zend-zstart;u=ustart;du=uend-ustart;v=vstart;dv=vend-vstart;difred=difredstart;ddifred=difredend-difredstart;difgreen=difgreenstart;ddifgreen=difgreenend-difgreenstart;difblue=difbluestart;ddifblue=difblueend-difbluestart;normx=normxstart;dnormx=normxend-normxstart;normy=normystart;dnormy=normyend-normystart;normz=normzstart;dnormz=normzend-normzstart;}else{left=FastMath.round(xend);right=FastMath.round(xstart);z=zend;dz=zstart-zend;u=uend;du=ustart-uend;v=vend;dv=vstart-vend;difred=difredend;ddifred=difredstart-difredend;difgreen=difgreenend;ddifgreen=difgreenstart-difgreenend;difblue=difblueend;ddifblue=difbluestart-difblueend;normx=normxend;dnormx=normxstart-normxend;normy=normyend;dnormy=normystart-normyend;normz=normzend;dnormz=normzstart-normzend;}if(left!=right){if(xend==xstart)denom=1.0f;else if(xend>xstart)denom=(float)(1.0/(xend-xstart));else denom=(float)(1.0/(xstart-xend));dz*=denom;du*=denom;dv*=denom;ddifred*=denom;ddifgreen*=denom;ddifblue*=denom;dnormx*=denom;dnormy*=denom;dnormz*=denom;if(left<0){z-=dz*left;u-=du*left;v-=dv*left;difred-=ddifred*left;difgreen-=ddifgreen*left;difblue-=ddifblue*left;normx-=dnormx*left;normy-=dnormy*left;normz-=dnormz*left;left=0;}if(right>width)right=width;repeat=false;for(i=left;i<right;i++){zl=1.0f/z;if(zl<fragment[index+i].getOpaqueDepth()&& zl>clip){if(!repeat ||(i % subsample==0)){ul=u*zl;vl=v*zl;wl=1.0-ul-vl;tri.getTextureSpec(surfSpec,viewdot,ul,vl,wl,smoothScale*z,time);if(surfSpec.hilight.getRed()==0.0f && surfSpec.hilight.getGreen()==0.0f && surfSpec.hilight.getBlue()==0.0f && surfSpec.specular.getRed()==0.0f && surfSpec.specular.getGreen()==0.0f && surfSpec.specular.getBlue()==0.0f)context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*difred+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*difgreen+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*difblue+surfSpec.emissive.getBlue());else{if(positionNeeded)context.tempVec[2].set(ul*vert1.x+vl*vert2.x+wl*vert3.x,ul*vert1.y+vl*vert2.y+wl*vert3.y,ul*vert1.z+vl*vert2.z+wl*vert3.z);context.tempVec[3].set(normx,normy,normz);context.tempVec[3].normalize();calcLight(context.tempVec[2],context.tempVec[3],viewdir,faceNorm,surfSpec.roughness,null,specular,highlight,context);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*difred+surfSpec.hilight.getRed()*highlight.getRed()+surfSpec.specular.getRed()*specular.getRed()+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*difgreen+surfSpec.hilight.getGreen()*highlight.getGreen()+surfSpec.specular.getGreen()*specular.getGreen()+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*difblue+surfSpec.hilight.getBlue()*highlight.getBlue()+surfSpec.specular.getBlue()*specular.getBlue()+surfSpec.emissive.getBlue());}lastAddColor=context.tempColor[0].getERGB();lastMultColor=surfSpec.transparent.getERGB();}context.fragment[i]=createFragment(lastAddColor,lastMultColor,zl,material,isBackface);repeat=doSubsample;}else{context.fragment[i]=null;repeat=false;}z+=dz;u+=du;v+=dv;difred+=ddifred;difgreen+=ddifgreen;difblue+=ddifblue;normx+=dnormx;normy+=dnormy;normz+=dnormz;}recordRow(y,left,right,context);}xstart+=mx1;zstart+=mz1;ustart+=mu1;vstart+=mv1;difredstart+=mdifred1;difgreenstart+=mdifgreen1;difbluestart+=mdifblue1;normxstart+=mnormx1;normystart+=mnormy1;normzstart+=mnormz1;xend+=mx2;zend+=mz2;uend+=mu2;vend+=mv2;difredend+=mdifred2;difgreenend+=mdifgreen2;difblueend+=mdifblue2;normxend+=mnormx2;normyend+=mnormy2;normzend+=mnormz2;index+=width;y++;}}dx2=x3-x2;dy2=y3-y2;dz2=z3-z2;du2=u3-u2;dv2=v3-v2;ddifred2=dif3.getRed()-dif2.getRed();ddifgreen2=dif3.getGreen()-dif2.getGreen();ddifblue2=dif3.getBlue()-dif2.getBlue();dnormx2=norm3.x-norm2.x;dnormy2=norm3.y-norm2.y;dnormz2=norm3.z-norm2.z;if(dy2>0.0){denom=(float)(1.0/dy2);mx2=dx2*denom;mz2=dz2*denom;mu2=du2*denom;mv2=dv2*denom;mdifred2=ddifred2*denom;mdifgreen2=ddifgreen2*denom;mdifblue2=ddifblue2*denom;mnormx2=dnormx2*denom;mnormy2=dnormy2*denom;mnormz2=dnormz2*denom;xend=x2;zend=z2;uend=u2;vend=v2;difredend=dif2.getRed();difgreenend=dif2.getGreen();difblueend=dif2.getBlue();normxend=norm2.x;normyend=norm2.y;normzend=norm2.z;if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;ustart-=mu1*y;uend-=mu2*y;vstart-=mv1*y;vend-=mv2*y;difredstart-=mdifred1*y;difredend-=mdifred2*y;difgreenstart-=mdifgreen1*y;difgreenend-=mdifgreen2*y;difbluestart-=mdifblue1*y;difblueend-=mdifblue2*y;normxstart-=mnormx1*y;normxend-=mnormx2*y;normystart-=mnormy1*y;normyend-=mnormy2*y;normzstart-=mnormz1*y;normzend-=mnormz2*y;y=0;}yend=FastMath.round(y3<height ? y3 : height);index=y*width;while(y<yend){if(xstart<xend){left=FastMath.round(xstart);right=FastMath.round(xend);z=zstart;dz=zend-zstart;u=ustart;du=uend-ustart;v=vstart;dv=vend-vstart;difred=difredstart;ddifred=difredend-difredstart;difgreen=difgreenstart;ddifgreen=difgreenend-difgreenstart;difblue=difbluestart;ddifblue=difblueend-difbluestart;normx=normxstart;dnormx=normxend-normxstart;normy=normystart;dnormy=normyend-normystart;normz=normzstart;dnormz=normzend-normzstart;}else{left=FastMath.round(xend);right=FastMath.round(xstart);z=zend;dz=zstart-zend;u=uend;du=ustart-uend;v=vend;dv=vstart-vend;difred=difredend;ddifred=difredstart-difredend;difgreen=difgreenend;ddifgreen=difgreenstart-difgreenend;difblue=difblueend;ddifblue=difbluestart-difblueend;normx=normxend;dnormx=normxstart-normxend;normy=normyend;dnormy=normystart-normyend;normz=normzend;dnormz=normzstart-normzend;}if(left!=right){if(xend==xstart)denom=1.0f;else if(xend>xstart)denom=(float)(1.0/(xend-xstart));else denom=(float)(1.0/(xstart-xend));dz*=denom;du*=denom;dv*=denom;ddifred*=denom;ddifgreen*=denom;ddifblue*=denom;dnormx*=denom;dnormy*=denom;dnormz*=denom;if(left<0){z-=dz*left;u-=du*left;v-=dv*left;difred-=ddifred*left;difgreen-=ddifgreen*left;difblue-=ddifblue*left;normx-=dnormx*left;normy-=dnormy*left;normz-=dnormz*left;left=0;}if(right>width)right=width;repeat=false;for(i=left;i<right;i++){zl=1.0f/z;if(zl<fragment[index+i].getOpaqueDepth()&& zl>clip){if(!repeat ||(i % subsample==0)){ul=u*zl;vl=v*zl;wl=1.0-ul-vl;tri.getTextureSpec(surfSpec,viewdot,ul,vl,wl,smoothScale*z,time);if(surfSpec.hilight.getRed()==0.0f && surfSpec.hilight.getGreen()==0.0f && surfSpec.hilight.getBlue()==0.0f && surfSpec.specular.getRed()==0.0f && surfSpec.specular.getGreen()==0.0f && surfSpec.specular.getBlue()==0.0f)context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*difred+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*difgreen+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*difblue+surfSpec.emissive.getBlue());else{if(positionNeeded)context.tempVec[2].set(ul*vert1.x+vl*vert2.x+wl*vert3.x,ul*vert1.y+vl*vert2.y+wl*vert3.y,ul*vert1.z+vl*vert2.z+wl*vert3.z);context.tempVec[3].set(normx,normy,normz);context.tempVec[3].normalize();calcLight(context.tempVec[2],context.tempVec[3],viewdir,faceNorm,surfSpec.roughness,null,specular,highlight,context);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*difred+surfSpec.hilight.getRed()*highlight.getRed()+surfSpec.specular.getRed()*specular.getRed()+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*difgreen+surfSpec.hilight.getGreen()*highlight.getGreen()+surfSpec.specular.getGreen()*specular.getGreen()+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*difblue+surfSpec.hilight.getBlue()*highlight.getBlue()+surfSpec.specular.getBlue()*specular.getBlue()+surfSpec.emissive.getBlue());}lastAddColor=context.tempColor[0].getERGB();lastMultColor=surfSpec.transparent.getERGB();}context.fragment[i]=createFragment(lastAddColor,lastMultColor,zl,material,isBackface);repeat=doSubsample;}else{context.fragment[i]=null;repeat=false;}z+=dz;u+=du;v+=dv;difred+=ddifred;difgreen+=ddifgreen;difblue+=ddifblue;normx+=dnormx;normy+=dnormy;normz+=dnormz;}recordRow(y,left,right,context);}xstart+=mx1;zstart+=mz1;ustart+=mu1;vstart+=mv1;difredstart+=mdifred1;difgreenstart+=mdifgreen1;difbluestart+=mdifblue1;normxstart+=mnormx1;normystart+=mnormy1;normzstart+=mnormz1;xend+=mx2;zend+=mz2;uend+=mu2;vend+=mv2;difredend+=mdifred2;difgreenend+=mdifgreen2;difblueend+=mdifblue2;normxend+=mnormx2;normyend+=mnormy2;normzend+=mnormz2;index+=width;y++;}}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raster",
        "class": "Raster",
        "method": "renderTrianglePhong(Vec2,float,Vec3,Vec3,double,double,Vec2,float,Vec3,Vec3,double,double,Vec2,float,Vec3,Vec3,double,double,RenderingTriangle,Vec3,Vec3,double,boolean,boolean,ObjectMaterialInfo,RasterContext)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raster/Raster.java#L2745-L3319",
        "source_code": "private void renderTrianglePhong(Vec2 pos1,float zf1,Vec3 vert1,Vec3 normf1,double uf1,double vf1,Vec2 pos2,float zf2,Vec3 vert2,Vec3 normf2,double uf2,double vf2,Vec2 pos3,float zf3,Vec3 vert3,Vec3 normf3,double uf3,double vf3,RenderingTriangle tri,Vec3 viewdir,Vec3 faceNorm,double clip,boolean bumpMap,boolean isBackface,ObjectMaterialInfo material,RasterContext context){double x1,x2,x3,y1,y2,y3;double dx1,dx2,dy1,dy2,mx1,mx2;double xstart,xend;float z1,z2,z3,dz1,dz2,mz1,mz2,zstart,zend,z,zl,dz;double u1,u2,u3,v1,v2,v3,du1,du2,dv1,dv2,mu1,mu2,mv1,mv2;double ustart,uend,vstart,vend,u,v,ul,vl,wl,du,dv;RGBColor diffuse=context.tempColor[1],specular=context.tempColor[2],highlight=context.tempColor[3];Vec3 norm1,norm2,norm3,normal=context.tempVec[3];double dnormx1,dnormx2,dnormy1,dnormy2,dnormz1,dnormz2;double mnormx1,mnormx2,mnormy1,mnormy2,mnormz1,mnormz2;double normxstart,normxend,normystart,normyend,normzstart,normzend;double normx,normy,normz,dnormx,dnormy,dnormz;float denom;int left,right,i,index,yend,y,lastAddColor=0,lastMultColor=0;boolean doSubsample=(subsample>1),repeat;TextureSpec surfSpec=context.surfSpec;if(pos1.y<=pos2.y && pos1.y<=pos3.y){x1=pos1.x;y1=pos1.y;z1=zf1;u1=uf1;v1=vf1;norm1=normf1;if(pos2.y<pos3.y){x2=pos2.x;y2=pos2.y;z2=zf2;u2=uf2;v2=vf2;norm2=normf2;x3=pos3.x;y3=pos3.y;z3=zf3;u3=uf3;v3=vf3;norm3=normf3;}else{x2=pos3.x;y2=pos3.y;z2=zf3;u2=uf3;v2=vf3;norm2=normf3;x3=pos2.x;y3=pos2.y;z3=zf2;u3=uf2;v3=vf2;norm3=normf2;}}else if(pos2.y<=pos1.y && pos2.y<=pos3.y){x1=pos2.x;y1=pos2.y;z1=zf2;u1=uf2;v1=vf2;norm1=normf2;if(pos1.y<pos3.y){x2=pos1.x;y2=pos1.y;z2=zf1;u2=uf1;v2=vf1;norm2=normf1;x3=pos3.x;y3=pos3.y;z3=zf3;u3=uf3;v3=vf3;norm3=normf3;}else{x2=pos3.x;y2=pos3.y;z2=zf3;u2=uf3;v2=vf3;norm2=normf3;x3=pos1.x;y3=pos1.y;z3=zf1;u3=uf1;v3=vf1;norm3=normf1;}}else{x1=pos3.x;y1=pos3.y;z1=zf3;u1=uf3;v1=vf3;norm1=normf3;if(pos1.y<pos2.y){x2=pos1.x;y2=pos1.y;z2=zf1;u2=uf1;v2=vf1;norm2=normf1;x3=pos2.x;y3=pos2.y;z3=zf2;u3=uf2;v3=vf2;norm3=normf2;}else{x2=pos2.x;y2=pos2.y;z2=zf2;u2=uf2;v2=vf2;norm2=normf2;x3=pos1.x;y3=pos1.y;z3=zf1;u3=uf1;v3=vf1;norm3=normf1;}}x1=FastMath.round(x1);y1=FastMath.round(y1);x2=FastMath.round(x2);y2=FastMath.round(y2);x3=FastMath.round(x3);y3=FastMath.round(y3);z1=1.0f/z1;u1*=z1;v1*=z1;z2=1.0f/z2;u2*=z2;v2*=z2;z3=1.0f/z3;u3*=z3;v3*=z3;dx1=x3-x1;dy1=y3-y1;dz1=z3-z1;if(dy1==0)return;du1=u3-u1;dv1=v3-v1;dnormx1=norm3.x-norm1.x;dnormy1=norm3.y-norm1.y;dnormz1=norm3.z-norm1.z;dx2=x2-x1;dy2=y2-y1;dz2=z2-z1;du2=u2-u1;dv2=v2-v1;dnormx2=norm2.x-norm1.x;dnormy2=norm2.y-norm1.y;dnormz2=norm2.z-norm1.z;denom=(float)(1.0/dy1);mx1=dx1*denom;mz1=dz1*denom;mu1=du1*denom;mv1=dv1*denom;mnormx1=dnormx1*denom;mnormy1=dnormy1*denom;mnormz1=dnormz1*denom;xstart=xend=x1;zstart=zend=z1;ustart=uend=u1;vstart=vend=v1;normxstart=normxend=norm1.x;normystart=normyend=norm1.y;normzstart=normzend=norm1.z;y=FastMath.round(y1);if(dy2>0.0){denom=(float)(1.0/dy2);mx2=dx2*denom;mz2=dz2*denom;mu2=du2*denom;mv2=dv2*denom;mnormx2=dnormx2*denom;mnormy2=dnormy2*denom;mnormz2=dnormz2*denom;if(y2<0){xstart+=mx1*dy2;xend+=mx2*dy2;zstart+=mz1*dy2;zend+=mz2*dy2;ustart+=mu1*dy2;uend+=mu2*dy2;vstart+=mv1*dy2;vend+=mv2*dy2;normxstart+=mnormx1*dy2;normxend+=mnormx2*dy2;normystart+=mnormy1*dy2;normyend+=mnormy2*dy2;normzstart+=mnormz1*dy2;normzend+=mnormz2*dy2;y=FastMath.round(y2);}else if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;ustart-=mu1*y;uend-=mu2*y;vstart-=mv1*y;vend-=mv2*y;normxstart-=mnormx1*y;normxend-=mnormx2*y;normystart-=mnormy1*y;normyend-=mnormy2*y;normzstart-=mnormz1*y;normzend-=mnormz2*y;y=0;}yend=FastMath.round(y2);if(yend>height)yend=height;index=y*width;while(y<yend){if(xstart<xend){left=FastMath.round(xstart);right=FastMath.round(xend);z=zstart;dz=zend-zstart;u=ustart;du=uend-ustart;v=vstart;dv=vend-vstart;normx=normxstart;dnormx=normxend-normxstart;normy=normystart;dnormy=normyend-normystart;normz=normzstart;dnormz=normzend-normzstart;}else{left=FastMath.round(xend);right=FastMath.round(xstart);z=zend;dz=zstart-zend;u=uend;du=ustart-uend;v=vend;dv=vstart-vend;normx=normxend;dnormx=normxstart-normxend;normy=normyend;dnormy=normystart-normyend;normz=normzend;dnormz=normzstart-normzend;}if(left!=right){if(xend==xstart)denom=1.0f;else if(xend>xstart)denom=(float)(1.0/(xend-xstart));else denom=(float)(1.0/(xstart-xend));dz*=denom;du*=denom;dv*=denom;dnormx*=denom;dnormy*=denom;dnormz*=denom;if(left<0){z-=dz*left;u-=du*left;v-=dv*left;normx-=dnormx*left;normy-=dnormy*left;normz-=dnormz*left;left=0;}if(right>width)right=width;repeat=false;for(i=left;i<right;i++){zl=1.0f/z;if(zl<fragment[index+i].getOpaqueDepth()&& zl>clip){if(!repeat ||(i % subsample==0)){ul=u*zl;vl=v*zl;wl=1.0-ul-vl;if(positionNeeded)context.tempVec[2].set(ul*vert1.x+vl*vert2.x+wl*vert3.x,ul*vert1.y+vl*vert2.y+wl*vert3.y,ul*vert1.z+vl*vert2.z+wl*vert3.z);normal.set(normx,normy,normz);normal.normalize();tri.getTextureSpec(surfSpec,viewdir.dot(normal),ul,vl,wl,smoothScale*z,time);if(bumpMap){normal.scale(surfSpec.bumpGrad.dot(normal)+1.0);normal.subtract(surfSpec.bumpGrad);normal.normalize();}if(surfSpec.hilight.getRed()==0.0f && surfSpec.hilight.getGreen()==0.0f && surfSpec.hilight.getBlue()==0.0f && surfSpec.specular.getRed()==0.0f && surfSpec.specular.getGreen()==0.0f && surfSpec.specular.getBlue()==0.0f){calcLight(context.tempVec[2],normal,viewdir,faceNorm,surfSpec.roughness,diffuse,null,null,context);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*diffuse.getRed()+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*diffuse.getGreen()+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*diffuse.getBlue()+surfSpec.emissive.getBlue());}else{calcLight(context.tempVec[2],normal,viewdir,faceNorm,surfSpec.roughness,diffuse,specular,highlight,context);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*diffuse.getRed()+surfSpec.hilight.getRed()*highlight.getRed()+surfSpec.specular.getRed()*specular.getRed()+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*diffuse.getGreen()+surfSpec.hilight.getGreen()*highlight.getGreen()+surfSpec.specular.getGreen()*specular.getGreen()+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*diffuse.getBlue()+surfSpec.hilight.getBlue()*highlight.getBlue()+surfSpec.specular.getBlue()*specular.getBlue()+surfSpec.emissive.getBlue());}lastAddColor=context.tempColor[0].getERGB();lastMultColor=surfSpec.transparent.getERGB();}context.fragment[i]=createFragment(lastAddColor,lastMultColor,zl,material,isBackface);repeat=doSubsample;}else{context.fragment[i]=null;repeat=false;}z+=dz;u+=du;v+=dv;normx+=dnormx;normy+=dnormy;normz+=dnormz;}recordRow(y,left,right,context);}xstart+=mx1;zstart+=mz1;ustart+=mu1;vstart+=mv1;normxstart+=mnormx1;normystart+=mnormy1;normzstart+=mnormz1;xend+=mx2;zend+=mz2;uend+=mu2;vend+=mv2;normxend+=mnormx2;normyend+=mnormy2;normzend+=mnormz2;index+=width;y++;}}dx2=x3-x2;dy2=y3-y2;dz2=z3-z2;du2=u3-u2;dv2=v3-v2;dnormx2=norm3.x-norm2.x;dnormy2=norm3.y-norm2.y;dnormz2=norm3.z-norm2.z;if(dy2>0.0){denom=(float)(1.0/dy2);mx2=dx2*denom;mz2=dz2*denom;mu2=du2*denom;mv2=dv2*denom;mnormx2=dnormx2*denom;mnormy2=dnormy2*denom;mnormz2=dnormz2*denom;xend=x2;zend=z2;uend=u2;vend=v2;normxend=norm2.x;normyend=norm2.y;normzend=norm2.z;if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;ustart-=mu1*y;uend-=mu2*y;vstart-=mv1*y;vend-=mv2*y;normxstart-=mnormx1*y;normxend-=mnormx2*y;normystart-=mnormy1*y;normyend-=mnormy2*y;normzstart-=mnormz1*y;normzend-=mnormz2*y;y=0;}yend=FastMath.round(y3<height ? y3 : height);index=y*width;while(y<yend){if(xstart<xend){left=FastMath.round(xstart);right=FastMath.round(xend);z=zstart;dz=zend-zstart;u=ustart;du=uend-ustart;v=vstart;dv=vend-vstart;normx=normxstart;dnormx=normxend-normxstart;normy=normystart;dnormy=normyend-normystart;normz=normzstart;dnormz=normzend-normzstart;}else{left=FastMath.round(xend);right=FastMath.round(xstart);z=zend;dz=zstart-zend;u=uend;du=ustart-uend;v=vend;dv=vstart-vend;normx=normxend;dnormx=normxstart-normxend;normy=normyend;dnormy=normystart-normyend;normz=normzend;dnormz=normzstart-normzend;}if(left!=right){if(xend==xstart)denom=1.0f;else if(xend>xstart)denom=(float)(1.0/(xend-xstart));else denom=(float)(1.0/(xstart-xend));dz*=denom;du*=denom;dv*=denom;dnormx*=denom;dnormy*=denom;dnormz*=denom;if(left<0){z-=dz*left;u-=du*left;v-=dv*left;normx-=dnormx*left;normy-=dnormy*left;normz-=dnormz*left;left=0;}if(right>width)right=width;repeat=false;for(i=left;i<right;i++){zl=1.0f/z;if(zl<fragment[index+i].getOpaqueDepth()&& zl>clip){if(!repeat ||(i % subsample==0)){ul=u*zl;vl=v*zl;wl=1.0-ul-vl;if(positionNeeded)context.tempVec[2].set(ul*vert1.x+vl*vert2.x+wl*vert3.x,ul*vert1.y+vl*vert2.y+wl*vert3.y,ul*vert1.z+vl*vert2.z+wl*vert3.z);normal.set(normx,normy,normz);normal.normalize();tri.getTextureSpec(surfSpec,viewdir.dot(normal),ul,vl,wl,smoothScale*z,time);if(bumpMap){normal.scale(surfSpec.bumpGrad.dot(normal)+1.0);normal.subtract(surfSpec.bumpGrad);normal.normalize();}if(surfSpec.hilight.getRed()==0.0f && surfSpec.hilight.getGreen()==0.0f && surfSpec.hilight.getBlue()==0.0f && surfSpec.specular.getRed()==0.0f && surfSpec.specular.getGreen()==0.0f && surfSpec.specular.getBlue()==0.0f){calcLight(context.tempVec[2],normal,viewdir,faceNorm,surfSpec.roughness,diffuse,null,null,context);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*diffuse.getRed()+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*diffuse.getGreen()+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*diffuse.getBlue()+surfSpec.emissive.getBlue());}else{calcLight(context.tempVec[2],normal,viewdir,faceNorm,surfSpec.roughness,diffuse,specular,highlight,context);context.tempColor[0].setRGB(surfSpec.diffuse.getRed()*diffuse.getRed()+surfSpec.hilight.getRed()*highlight.getRed()+surfSpec.specular.getRed()*specular.getRed()+surfSpec.emissive.getRed(),surfSpec.diffuse.getGreen()*diffuse.getGreen()+surfSpec.hilight.getGreen()*highlight.getGreen()+surfSpec.specular.getGreen()*specular.getGreen()+surfSpec.emissive.getGreen(),surfSpec.diffuse.getBlue()*diffuse.getBlue()+surfSpec.hilight.getBlue()*highlight.getBlue()+surfSpec.specular.getBlue()*specular.getBlue()+surfSpec.emissive.getBlue());}lastAddColor=context.tempColor[0].getERGB();lastMultColor=surfSpec.transparent.getERGB();}context.fragment[i]=createFragment(lastAddColor,lastMultColor,zl,material,isBackface);repeat=doSubsample;}else{context.fragment[i]=null;repeat=false;}z+=dz;u+=du;v+=dv;normx+=dnormx;normy+=dnormy;normz+=dnormz;}recordRow(y,left,right,context);}xstart+=mx1;zstart+=mz1;ustart+=mu1;vstart+=mv1;normxstart+=mnormx1;normystart+=mnormy1;normzstart+=mnormz1;xend+=mx2;zend+=mz2;uend+=mu2;vend+=mv2;normxend+=mnormx2;normyend+=mnormy2;normzend+=mnormz2;index+=width;y++;}}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raytracer",
        "class": "PhotonMap",
        "method": "propagateRay(Ray,OctreeNode,RTObject,double,MaterialMapping,MaterialMapping,Mat4,Mat4,RGBColor,int,double,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raytracer/PhotonMap.java#L506-L639",
        "source_code": "void propagateRay(Ray r,OctreeNode node,RTObject first,double dist,MaterialMapping material,MaterialMapping prevMaterial,Mat4 currentMatTrans,Mat4 prevMatTrans,RGBColor color,int treeDepth,double totalDist,boolean caustic,boolean scattered){MaterialSpec matSpec=r.rt.matSpec;Vec3 v=r.rt.ray[treeDepth+1].origin,origin=r.origin,direction=r.direction;double x=0.0,newx,dx,distToScreen=rt.theCamera.getDistToScreen(),step;double origx,origy,origz,dirx,diry,dirz;v.set(origin);currentMatTrans.transform(v);origx=v.x;origy=v.y;origz=v.z;v.set(direction);currentMatTrans.transformDirection(v);dirx=v.x;diry=v.y;dirz=v.z;step=rt.stepSize*material.getStepSize();do{dx=step*(1.5*r.rt.random.nextDouble());if(this.rt.adaptive && totalDist>distToScreen)dx*=totalDist/distToScreen;newx=x+dx;if(newx>dist){dx=dist-x;x=dist;}else x=newx;totalDist+=dx;v.set(origx+dirx*x,origy+diry*x,origz+dirz*x);material.getMaterialSpec(v,matSpec,dx,this.rt.time);RGBColor trans=matSpec.transparency;RGBColor scat=matSpec.scattering;float rt,gt,bt;if(trans.getRed()==1.0f)rt=1.0f;else rt=(float)Math.pow(trans.getRed(),dx);if(trans.getGreen()==1.0f)gt=1.0f;else gt=(float)Math.pow(trans.getGreen(),dx);if(trans.getBlue()==1.0f)bt=1.0f;else bt=(float)Math.pow(trans.getBlue(),dx);float averageTrans=(rt+gt+bt)/3.0f;if(random.nextFloat()<averageTrans){color.multiply(rt/averageTrans,gt/averageTrans,bt/averageTrans);continue;}float scatProb=(scat.getRed()+scat.getGreen()+scat.getBlue())/3.0f;if(scatProb>0.98f)scatProb=0.98f;if(random.nextFloat()<scatProb && treeDepth<this.rt.maxRayDepth-1){if(treeDepth<this.rt.maxRayDepth-1){RGBColor rayIntensity=r.rt.rayIntensity[treeDepth+1];rayIntensity.copy(color);rayIntensity.multiply(matSpec.scattering);rayIntensity.scale(1.0f/scatProb);if(rayIntensity.getMaxComponent()>this.rt.minRayIntensity){v.set(origin.x+direction.x*x,origin.y+direction.y*x,origin.z+direction.z*x);while(node!=null && !node.contains(v)){OctreeNode nextNode=node.findNextNode(r);node=nextNode;}if(node==null)break;double g=matSpec.eccentricity;Vec3 newdir=r.rt.ray[treeDepth+1].getDirection();if(g>0.01 || g<-0.01){double theta=Math.acos((1.0+g*g-Math.pow((1-g*g)/(1-g+2*g*random.nextDouble()),2.0))/Math.abs(2*g));double phi=2*Math.PI*random.nextDouble();newdir.set(Math.sin(theta)*Math.cos(phi),Math.sin(theta)*Math.sin(phi),Math.cos(theta));Mat4 m=Mat4.objectTransform(new Vec3(),direction,Math.abs(direction.y)>0.9 ? Vec3.vx(): Vec3.vy());m.transformDirection(newdir);}else{newdir.set(0.0,0.0,0.0);randomizePoint(newdir,1.0);newdir.normalize();}tracePhoton(r.rt.ray[treeDepth+1],rayIntensity,treeDepth+1,node,first,material,prevMaterial,currentMatTrans,prevMatTrans,totalDist,true,caustic);}}color.setRGB(0.0,0.0,0.0);break;}color.scale(1.0/(1.0-scatProb));if((includeDirect || scattered)&& color.getMaxComponent()>this.rt.minRayIntensity)addPhoton(v,direction,color);color.setRGB(0.0,0.0,0.0);break;}while(x<dist);}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raytracer",
        "class": "Raytracer",
        "method": "propagateRay(Ray,OctreeNode,double,MaterialMapping,MaterialMapping,Mat4,Mat4,RGBColor,RGBColor,int,double)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raytracer/Raytracer.java#L2243-L2393",
        "source_code": "protected void propagateRay(Ray r,OctreeNode node,double dist,MaterialMapping material,MaterialMapping prevMaterial,Mat4 currentMatTrans,Mat4 prevMatTrans,RGBColor emitted,RGBColor filter,int treeDepth,double totalDist){boolean scattering=material.isScattering();MaterialSpec matSpec=r.rt.matSpec;float re,ge,be,rs,gs,bs;float rf=filter.getRed(),gf=filter.getGreen(),bf=filter.getBlue();if(material instanceof UniformMaterialMapping && !scattering){material.getMaterialSpec(r.origin,matSpec,0.0,time);RGBColor trans=matSpec.transparency,blend=matSpec.color;float d=(float)dist;if(trans.getRed()==1.0f)rs=1.0f;else rs=(float)Math.pow(trans.getRed(),d);if(trans.getGreen()==1.0f)gs=1.0f;else gs=(float)Math.pow(trans.getGreen(),d);if(trans.getBlue()==1.0f)bs=1.0f;else bs=(float)Math.pow(trans.getBlue(),d);re=blend.getRed()*rf*(1.0f-rs);ge=blend.getGreen()*gf*(1.0f-gs);be=blend.getBlue()*bf*(1.0f-bs);rf*=rs;gf*=gs;bf*=bs;}else{Vec3 v=r.rt.ray[treeDepth+1].origin,origin=r.origin,direction=r.direction;double x=0.0,newx,dx,distToScreen=theCamera.getDistToScreen(),step;double origx,origy,origz,dirx,diry,dirz;v.set(origin);currentMatTrans.transform(v);origx=v.x;origy=v.y;origz=v.z;v.set(direction);currentMatTrans.transformDirection(v);dirx=v.x;diry=v.y;dirz=v.z;re=ge=be=0.0f;step=stepSize*material.getStepSize();do{dx=step*(1.5*r.rt.random.nextDouble());if(adaptive && totalDist>distToScreen)dx*=totalDist/distToScreen;newx=x+dx;if(newx>dist){dx=dist-x;x=dist;}else x=newx;totalDist+=dx;v.set(origx+dirx*x,origy+diry*x,origz+dirz*x);material.getMaterialSpec(v,matSpec,dx,time);RGBColor trans=matSpec.transparency,blend=matSpec.color;if(trans.getRed()==1.0f)rs=1.0f;else rs=(float)Math.pow(trans.getRed(),dx);if(trans.getGreen()==1.0f)gs=1.0f;else gs=(float)Math.pow(trans.getGreen(),dx);if(trans.getBlue()==1.0f)bs=1.0f;else bs=(float)Math.pow(trans.getBlue(),dx);re+=blend.getRed()*rf*(1.0f-rs);ge+=blend.getGreen()*gf*(1.0f-gs);be+=blend.getBlue()*bf*(1.0f-bs);if(scattering){RGBColor rayIntensity=r.rt.rayIntensity[treeDepth+1];rayIntensity.setRGB(rf,gf,bf);rayIntensity.multiply(matSpec.scattering);if(rayIntensity.getRed()>minRayIntensity || rayIntensity.getGreen()>minRayIntensity || rayIntensity.getBlue()>minRayIntensity){if(scatterMode==SCATTER_SINGLE || scatterMode==SCATTER_BOTH){v.set(origin.x+direction.x*x,origin.y+direction.y*x,origin.z+direction.z*x);while(node!=null && !node.contains(v))node=node.findNextNode(r);if(node==null)break;getScatteredLight(r.rt,treeDepth+1,node,matSpec.eccentricity,totalDist,material,prevMaterial,currentMatTrans,prevMatTrans);RGBColor color=r.rt.color[treeDepth+1];re+=color.getRed()*(1.0f-rs);ge+=color.getGreen()*(1.0f-gs);be+=color.getBlue()*(1.0f-bs);}if(r.rt.volumeMap!=null){RGBColor color=r.rt.color[treeDepth+1];r.rt.volumeMap.getVolumeLight(v,matSpec,r.getDirection(),color);color.multiply(rayIntensity);re+=color.getRed()*(1.0f-rs);ge+=color.getGreen()*(1.0f-gs);be+=color.getBlue()*(1.0f-bs);}}}rf*=rs;gf*=gs;bf*=bs;if(rf<minRayIntensity && gf<minRayIntensity && bf<minRayIntensity){rf=gf=bf=0.0f;break;}}while(x<dist);}emitted.setRGB(re,ge,be);filter.setRGB(rf,gf,bf);}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.raytracer",
        "class": "Raytracer",
        "method": "traceLightRay(Ray,Light,int,OctreeNode,OctreeNode,double,double,MaterialMapping,MaterialMapping,Mat4,Mat4)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Renderers/src/artofillusion/raytracer/Raytracer.java#L2117-L2222",
        "source_code": "protected boolean traceLightRay(Ray r,Light lt,int treeDepth,OctreeNode node,OctreeNode endNode,double distToLight,double totalDist,MaterialMapping currentMaterial,MaterialMapping prevMaterial,Mat4 currentMatTrans,Mat4 prevMatTrans){RGBColor lightColor=r.rt.color[treeDepth],transColor=r.rt.surfSpec[treeDepth].transparent;Vec3 intersectionPoint=r.rt.pos[maxRayDepth],trueNorm=r.rt.trueNormal[maxRayDepth];MaterialIntersection[]matChange=r.rt.matChange;int i,j,matCount=0;do{RTObject[]obj=node.getObjects();for(i=obj.length-1;i>=0;i--){SurfaceIntersection intersection=r.findIntersection(obj[i]);if(intersection!=SurfaceIntersection.NO_INTERSECTION)for(j=0;;j++){intersection.intersectionPoint(j,intersectionPoint);if(node.contains(intersectionPoint)){double dist=intersection.intersectionDist(j);if(dist<distToLight){intersection.trueNormal(trueNorm);double angle=-trueNorm.dot(r.getDirection());intersection.intersectionTransparency(j,transColor,angle,(totalDist+dist)*smoothScale,time);lightColor.multiply(transColor);if(lightColor.getRed()<minRayIntensity && lightColor.getGreen()<minRayIntensity && lightColor.getBlue()<minRayIntensity)return false;MaterialMapping mat=obj[i].getMaterialMapping();if(mat!=null && mat.castsShadows()){if(matCount==matChange.length){r.rt.increaseMaterialChangeLength();matChange=r.rt.matChange;}matChange[matCount].mat=mat;matChange[matCount].toLocal=obj[i].toLocal();matChange[matCount].dist=dist;matChange[matCount].node=node;matChange[matCount].entered=(angle>0.0)^(j % 2==1);matCount++;}}}if(j>=intersection.numIntersections()-1)break;}}if(node==endNode)break;node=node.findNextNode(r);}while(node!=null);if(currentMaterial==null && matCount==0)return true;sortMaterialList(matChange,matCount);if(matCount==matChange.length){r.rt.increaseMaterialChangeLength();matChange=r.rt.matChange;}matChange[matCount++].dist=distToLight;double dist=0.0;for(i=0;;i++){if(currentMaterial!=null && currentMaterial.castsShadows()){propagateLightRay(r,node,dist,matChange[i].dist,currentMaterial,lightColor,currentMatTrans,totalDist);if(lightColor.getRed()<minRayIntensity && lightColor.getGreen()<minRayIntensity && lightColor.getBlue()<minRayIntensity)return false;}if(i==matCount-1)break;double n1=(currentMaterial==null ? 1.0 : currentMaterial.indexOfRefraction());if(matChange[i].entered){if(matChange[i].mat!=currentMaterial){prevMaterial=currentMaterial;prevMatTrans=currentMatTrans;currentMaterial=matChange[i].mat;currentMatTrans=matChange[i].toLocal;}}else if(matChange[i].mat==currentMaterial){currentMaterial=prevMaterial;currentMatTrans=prevMatTrans;prevMaterial=null;}else if(matChange[i].mat==prevMaterial)prevMaterial=null;if(caustics){double n2=(currentMaterial==null ? 1.0 : currentMaterial.indexOfRefraction());if(n1!=n2)return false;}node=matChange[i].node;dist=matChange[i].dist;}return true;}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.translators",
        "class": "OBJExporter",
        "method": "writeScene(Scene,PrintWriter,boolean,double,boolean,boolean,TextureImageExporter,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/Translators/src/artofillusion/translators/OBJExporter.java#L111-L333",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.view",
        "class": "SoftwareCanvasDrawer",
        "method": "renderFlatTriangle(Vec2,double,Vec2,double,Vec2,double,int,int,double,int,RGBColor)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/ArtOfIllusion/src/artofillusion/view/SoftwareCanvasDrawer.java#L897-L1204",
        "source_code": "private void renderFlatTriangle(Vec2 pos1,double zf1,Vec2 pos2,double zf2,Vec2 pos3,double zf3,int width,int height,double clip,int mode,RGBColor color){int x1,y1,z1,x2,y2,z2,x3,y3,z3;int dx1,dx2,dy1,dy2,dz1,dz2,mx1,mx2,mz1,mz2;int xstart,xend,yend,zstart,zend,y,z,dz,left,right,i,index;int clipDist=(int)(clip*65535.0),r,g,b,red,green,blue,col;if(mode==MODE_COPY){col=color.getARGB();red=green=blue=0;}else{col=0;red=(int)(color.getRed()*255.0f);green=(int)(color.getGreen()*255.0f);blue=(int)(color.getBlue()*255.0f);}if(pos1.y<=pos2.y && pos1.y<=pos3.y){x1=((int)pos1.x)<<16;y1=((int)pos1.y);z1=(int)(zf1*65535.0);if(pos2.y<pos3.y){x2=((int)pos2.x)<<16;y2=((int)pos2.y);z2=(int)(zf2*65535.0);x3=((int)pos3.x)<<16;y3=((int)pos3.y);z3=(int)(zf3*65535.0);}else{x2=((int)pos3.x)<<16;y2=((int)pos3.y);z2=(int)(zf3*65535.0);x3=((int)pos2.x)<<16;y3=((int)pos2.y);z3=(int)(zf2*65535.0);}}else if(pos2.y<=pos1.y && pos2.y<=pos3.y){x1=((int)pos2.x)<<16;y1=((int)pos2.y);z1=(int)(zf2*65535.0);if(pos1.y<pos3.y){x2=((int)pos1.x)<<16;y2=((int)pos1.y);z2=(int)(zf1*65535.0);x3=((int)pos3.x)<<16;y3=((int)pos3.y);z3=(int)(zf3*65535.0);}else{x2=((int)pos3.x)<<16;y2=((int)pos3.y);z2=(int)(zf3*65535.0);x3=((int)pos1.x)<<16;y3=((int)pos1.y);z3=(int)(zf1*65535.0);}}else{x1=((int)pos3.x)<<16;y1=((int)pos3.y);z1=(int)(zf3*65535.0);if(pos1.y<pos2.y){x2=((int)pos1.x)<<16;y2=((int)pos1.y);z2=(int)(zf1*65535.0);x3=((int)pos2.x)<<16;y3=((int)pos2.y);z3=(int)(zf2*65535.0);}else{x2=((int)pos2.x)<<16;y2=((int)pos2.y);z2=(int)(zf2*65535.0);x3=((int)pos1.x)<<16;y3=((int)pos1.y);z3=(int)(zf1*65535.0);}}dx1=x3-x1;dy1=y3-y1;dz1=z3-z1;if(dy1==0)return;dx2=x2-x1;dy2=y2-y1;dz2=z2-z1;mx1=dx1/dy1;mz1=dz1/dy1;xstart=xend=x1;zstart=zend=z1;y=y1;if(dy2!=0){mx2=dx2/dy2;mz2=dz2/dy2;if(y2<0){xstart+=mx1*dy2;xend+=mx2*dy2;zstart+=mz1*dy2;zend+=mz2*dy2;y=y2;}else if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;y=0;}yend=(y2<height ? y2 : height);index=y*width;while(y<yend){if(xstart<xend){left=xstart>>16;right=xend>>16;z=zstart;dz=zend-zstart;}else{left=xend>>16;right=xstart>>16;z=zend;dz=zstart-zend;}if(left!=right){dz/=(right-left);if(left<0){z-=left*dz;left=0;}if(right>width)right=width;if(mode==MODE_COPY){for(i=left;i<right;i++){if(z<zbuffer[index+i]&& z>clipDist){pixel[index+i]=col;zbuffer[index+i]=z;}z+=dz;}}else if(mode==MODE_ADD){for(i=left;i<right;i++){if(z>clipDist){r=((pixel[index+i]& 0xFF0000)>>16)+red;g=((pixel[index+i]& 0xFF00)>>8)+green;b=(pixel[index+i]& 0xFF)+blue;if(r>255)r=255;if(g>255)g=255;if(b>255)b=255;pixel[index+i]=0xFF000000+(r<<16)+(g<<8)+b;}z+=dz;}}else{for(i=left;i<right;i++){if(z>clipDist){r=((pixel[index+i]& 0xFF0000)>>16)-red;g=((pixel[index+i]& 0xFF00)>>8)-green;b=(pixel[index+i]& 0xFF)-blue;if(r<0)r=0;if(g<0)g=0;if(b<0)b=0;pixel[index+i]=0xFF000000+(r<<16)+(g<<8)+b;}z+=dz;}}}xstart+=mx1;zstart+=mz1;xend+=mx2;zend+=mz2;index+=width;y++;}}dx2=x3-x2;dy2=y3-y2;dz2=z3-z2;if(dy2!=0){mx2=dx2/dy2;mz2=dz2/dy2;xend=x2;zend=z2;if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;y=0;}yend=(y3<height ? y3 : height);index=y*width;while(y<yend){if(xstart<xend){left=xstart>>16;right=xend>>16;z=zstart;dz=zend-zstart;}else{left=xend>>16;right=xstart>>16;z=zend;dz=zstart-zend;}if(left!=right){dz/=(right-left);if(left<0){z-=left*dz;left=0;}if(right>width)right=width;if(mode==MODE_COPY){for(i=left;i<right;i++){if(z<zbuffer[index+i]&& z>clipDist){pixel[index+i]=col;zbuffer[index+i]=z;}z+=dz;}}else if(mode==MODE_ADD){for(i=left;i<right;i++){if(z>clipDist){r=((pixel[index+i]& 0xFF0000)>>16)+red;g=((pixel[index+i]& 0xFF00)>>8)+green;b=(pixel[index+i]& 0xFF)+blue;if(r>255)r=255;if(g>255)g=255;if(b>255)b=255;pixel[index+i]=0xFF000000+(r<<16)+(g<<8)+b;}z+=dz;}}else{for(i=left;i<right;i++){if(z>clipDist){r=((pixel[index+i]& 0xFF0000)>>16)-red;g=((pixel[index+i]& 0xFF00)>>8)-green;b=(pixel[index+i]& 0xFF)-blue;if(r<0)r=0;if(g<0)g=0;if(b<0)b=0;pixel[index+i]=0xFF000000+(r<<16)+(g<<8)+b;}z+=dz;}}}xstart+=mx1;zstart+=mz1;xend+=mx2;zend+=mz2;index+=width;y++;}}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "aoi-2.8.1",
        "package": "artofillusion.view",
        "class": "SoftwareCanvasDrawer",
        "method": "renderSmoothTriangle(Vec2,double,Vec2,double,Vec2,double,int,int,double,RGBColor,RGBColor,RGBColor)",
        "github_url": "https://github.com/JavaQualitasCorpus/aoi-2.8.1/blob/e94677de18a2e9398e2abbbea40ba401c16bf827/ArtOfIllusion/src/artofillusion/view/SoftwareCanvasDrawer.java#L1208-L1573",
        "source_code": "private void renderSmoothTriangle(Vec2 pos1,double zf1,Vec2 pos2,double zf2,Vec2 pos3,double zf3,int width,int height,double clip,RGBColor color1,RGBColor color2,RGBColor color3){int x1,y1,z1,x2,y2,z2,x3,y3,z3;int dx1,dx2,dy1,dy2,dz1,dz2,mx1,mx2,mz1,mz2;int xstart,xend,yend,zstart,zend,y,z,dz,left,right,i,index;int red1,green1,blue1,red2,green2,blue2,red3,green3,blue3;int dred1,dred2,dgreen1,dgreen2,dblue1,dblue2,mred1,mred2,mgreen1,mgreen2,mblue1,mblue2;int redstart,redend,greenstart,greenend,bluestart,blueend,red,green,blue,dred,dgreen,dblue;int clipDist=(int)(clip*65535.0);if(pos1.y<=pos2.y && pos1.y<=pos3.y){x1=((int)pos1.x)<<16;y1=((int)pos1.y);z1=(int)(zf1*65535.0);red1=(int)(color1.getRed()*65535.0f);green1=(int)(color1.getGreen()*65535.0f);blue1=(int)(color1.getBlue()*65535.0f);if(pos2.y<pos3.y){x2=((int)pos2.x)<<16;y2=((int)pos2.y);z2=(int)(zf2*65535.0);red2=(int)(color2.getRed()*65535.0f);green2=(int)(color2.getGreen()*65535.0f);blue2=(int)(color2.getBlue()*65535.0f);x3=((int)pos3.x)<<16;y3=((int)pos3.y);z3=(int)(zf3*65535.0);red3=(int)(color3.getRed()*65535.0f);green3=(int)(color3.getGreen()*65535.0f);blue3=(int)(color3.getBlue()*65535.0f);}else{x2=((int)pos3.x)<<16;y2=((int)pos3.y);z2=(int)(zf3*65535.0);red2=(int)(color3.getRed()*65535.0f);green2=(int)(color3.getGreen()*65535.0f);blue2=(int)(color3.getBlue()*65535.0f);x3=((int)pos2.x)<<16;y3=((int)pos2.y);z3=(int)(zf2*65535.0);red3=(int)(color2.getRed()*65535.0f);green3=(int)(color2.getGreen()*65535.0f);blue3=(int)(color2.getBlue()*65535.0f);}}else if(pos2.y<=pos1.y && pos2.y<=pos3.y){x1=((int)pos2.x)<<16;y1=((int)pos2.y);z1=(int)(zf2*65535.0);red1=(int)(color2.getRed()*65535.0f);green1=(int)(color2.getGreen()*65535.0f);blue1=(int)(color2.getBlue()*65535.0f);if(pos1.y<pos3.y){x2=((int)pos1.x)<<16;y2=((int)pos1.y);z2=(int)(zf1*65535.0);red2=(int)(color1.getRed()*65535.0f);green2=(int)(color1.getGreen()*65535.0f);blue2=(int)(color1.getBlue()*65535.0f);x3=((int)pos3.x)<<16;y3=((int)pos3.y);z3=(int)(zf3*65535.0);red3=(int)(color3.getRed()*65535.0f);green3=(int)(color3.getGreen()*65535.0f);blue3=(int)(color3.getBlue()*65535.0f);}else{x2=((int)pos3.x)<<16;y2=((int)pos3.y);z2=(int)(zf3*65535.0);red2=(int)(color3.getRed()*65535.0f);green2=(int)(color3.getGreen()*65535.0f);blue2=(int)(color3.getBlue()*65535.0f);x3=((int)pos1.x)<<16;y3=((int)pos1.y);z3=(int)(zf1*65535.0);red3=(int)(color1.getRed()*65535.0f);green3=(int)(color1.getGreen()*65535.0f);blue3=(int)(color1.getBlue()*65535.0f);}}else{x1=((int)pos3.x)<<16;y1=((int)pos3.y);z1=(int)(zf3*65535.0);red1=(int)(color3.getRed()*65535.0f);green1=(int)(color3.getGreen()*65535.0f);blue1=(int)(color3.getBlue()*65535.0f);if(pos1.y<pos2.y){x2=((int)pos1.x)<<16;y2=((int)pos1.y);z2=(int)(zf1*65535.0);red2=(int)(color1.getRed()*65535.0f);green2=(int)(color1.getGreen()*65535.0f);blue2=(int)(color1.getBlue()*65535.0f);x3=((int)pos2.x)<<16;y3=((int)pos2.y);z3=(int)(zf2*65535.0);red3=(int)(color2.getRed()*65535.0f);green3=(int)(color2.getGreen()*65535.0f);blue3=(int)(color2.getBlue()*65535.0f);}else{x2=((int)pos2.x)<<16;y2=((int)pos2.y);z2=(int)(zf2*65535.0);red2=(int)(color2.getRed()*65535.0f);green2=(int)(color2.getGreen()*65535.0f);blue2=(int)(color2.getBlue()*65535.0f);x3=((int)pos1.x)<<16;y3=((int)pos1.y);z3=(int)(zf1*65535.0);red3=(int)(color1.getRed()*65535.0f);green3=(int)(color1.getGreen()*65535.0f);blue3=(int)(color1.getBlue()*65535.0f);}}dx1=x3-x1;dy1=y3-y1;dz1=z3-z1;if(dy1==0)return;dred1=red3-red1;dgreen1=green3-green1;dblue1=blue3-blue1;dx2=x2-x1;dy2=y2-y1;dz2=z2-z1;dred2=red2-red1;dgreen2=green2-green1;dblue2=blue2-blue1;mx1=dx1/dy1;mz1=dz1/dy1;mred1=dred1/dy1;mgreen1=dgreen1/dy1;mblue1=dblue1/dy1;xstart=xend=x1;zstart=zend=z1;redstart=redend=red1;greenstart=greenend=green1;bluestart=blueend=blue1;y=y1;if(dy2!=0){mx2=dx2/dy2;mz2=dz2/dy2;mred2=dred2/dy2;mgreen2=dgreen2/dy2;mblue2=dblue2/dy2;if(y2<0){xstart+=mx1*dy2;xend+=mx2*dy2;zstart+=mz1*dy2;zend+=mz2*dy2;redstart+=mred1*dy2;redend+=mred2*dy2;greenstart+=mgreen1*dy2;greenend+=mgreen2*dy2;bluestart+=mblue1*dy2;blueend+=mblue2*dy2;y=y2;}else if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;redstart-=mred1*y;redend-=mred2*y;greenstart-=mgreen1*y;greenend-=mgreen2*y;bluestart-=mblue1*y;blueend-=mblue2*y;y=0;}yend=(y2<height ? y2 : height);index=y*width;while(y<yend){if(xstart<xend){left=xstart>>16;right=xend>>16;z=zstart;dz=zend-zstart;red=redstart;dred=redend-redstart;green=greenstart;dgreen=greenend-greenstart;blue=bluestart;dblue=blueend-bluestart;}else{left=xend>>16;right=xstart>>16;z=zend;dz=zstart-zend;red=redend;dred=redstart-redend;green=greenend;dgreen=greenstart-greenend;blue=blueend;dblue=bluestart-blueend;}if(left!=right){dz/=(right-left);dred/=(right-left);dgreen/=(right-left);dblue/=(right-left);if(left<0){z-=left*dz;red-=left*dred;green-=left*dgreen;blue-=left*dblue;left=0;}if(right>width)right=width;for(i=left;i<right;i++){if(z<zbuffer[index+i]&& z>clipDist){pixel[index+i]=0xFF000000+((red & 0xFF00)<<8)+(green & 0xFF00)+(blue>>8);zbuffer[index+i]=z;}z+=dz;red+=dred;green+=dgreen;blue+=dblue;}}xstart+=mx1;zstart+=mz1;redstart+=mred1;greenstart+=mgreen1;bluestart+=mblue1;xend+=mx2;zend+=mz2;redend+=mred2;greenend+=mgreen2;blueend+=mblue2;index+=width;y++;}}dx2=x3-x2;dy2=y3-y2;dz2=z3-z2;dred2=red3-red2;dgreen2=green3-green2;dblue2=blue3-blue2;if(dy2!=0){mx2=dx2/dy2;mz2=dz2/dy2;mred2=dred2/dy2;mgreen2=dgreen2/dy2;mblue2=dblue2/dy2;xend=x2;zend=z2;redend=red2;greenend=green2;blueend=blue2;if(y<0){xstart-=mx1*y;xend-=mx2*y;zstart-=mz1*y;zend-=mz2*y;redstart-=mred1*y;redend-=mred2*y;greenstart-=mgreen1*y;greenend-=mgreen2*y;bluestart-=mblue1*y;blueend-=mblue2*y;y=0;}yend=(y3<height ? y3 : height);index=y*width;while(y<yend){if(xstart<xend){left=xstart>>16;right=xend>>16;z=zstart;dz=zend-zstart;red=redstart;dred=redend-redstart;green=greenstart;dgreen=greenend-greenstart;blue=bluestart;dblue=blueend-bluestart;}else{left=xend>>16;right=xstart>>16;z=zend;dz=zstart-zend;red=redend;dred=redstart-redend;green=greenend;dgreen=greenstart-greenend;blue=blueend;dblue=bluestart-blueend;}if(left!=right){dz/=(right-left);dred/=(right-left);dgreen/=(right-left);dblue/=(right-left);if(left<0){z-=left*dz;red-=left*dred;green-=left*dgreen;blue-=left*dblue;left=0;}if(right>width)right=width;for(i=left;i<right;i++){if(z<zbuffer[index+i]&& z>clipDist){pixel[index+i]=0xFF000000+((red & 0xFF00)<<8)+(green & 0xFF00)+(blue>>8);zbuffer[index+i]=z;}z+=dz;red+=dred;green+=dgreen;blue+=dblue;}}xstart+=mx1;zstart+=mz1;redstart+=mred1;greenstart+=mgreen1;bluestart+=mblue1;xend+=mx2;zend+=mz2;redend+=mred2;greenend+=mgreen2;blueend+=mblue2;index+=width;y++;}}}"
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "argouml-0.34",
        "package": "org.argouml.model.euml",
        "class": "ModelEventPumpEUMLImpl",
        "method": "fireEvent(Object,Object,Object,int,String,EReference)",
        "github_url": "https://github.com/JavaQualitasCorpus/argouml-0.34/blob/c7a02f0ac9b60e3fcc38ee2de783944d19e806a4/argouml/src/argouml-core-model-euml/src/org/argouml/model/euml/ModelEventPumpEUMLImpl.java#L352-L498",
        "source_code": "void fireEvent(Object notifier,Object oldValue,Object newValue,int eventType,String featureName,EReference oppositeRef){LOG.debug('event-Property: '+featureName+' Type : '+eventType+' Old: '+oldValue+' New: '+newValue+' From: '+notifier);class EventAndListeners{public EventAndListeners(PropertyChangeEvent e,List<EventListener>l){event=e;listeners=l;}private PropertyChangeEvent event;private List<EventListener>listeners;}List<EventAndListeners>events=new ArrayList<EventAndListeners>();if(eventType==Notification.SET){String propName=mapPropertyName(featureName);events.add(new EventAndListeners(new AttributeChangeEvent(notifier,propName,oldValue,newValue,null),getListeners(notifier,propName)));}else if(eventType==Notification.ADD || eventType==Notification.REMOVE){String propName=mapPropertyName(featureName);if(eventType==Notification.ADD){events.add(new EventAndListeners(new AddAssociationEvent(notifier,propName,null,newValue,newValue,null),getListeners(notifier,propName)));events.add(new EventAndListeners(new AttributeChangeEvent(notifier,propName,null,newValue,null),getListeners(notifier,propName)));}else{if(isDeleteEventRequired(oldValue)){events.add(new EventAndListeners(new DeleteInstanceEvent(oldValue,'remove',null,null,null),getListeners(oldValue)));}else{LOG.info('Not sending delete event-assume remove');}events.add(new EventAndListeners(new RemoveAssociationEvent(notifier,propName,oldValue,null,oldValue,null),getListeners(notifier,propName)));events.add(new EventAndListeners(new AttributeChangeEvent(notifier,propName,oldValue,null,null),getListeners(notifier,propName)));}if(oppositeRef!=null){propName=mapPropertyName(oppositeRef.getName());if(eventType==Notification.ADD){events.add(new EventAndListeners(new AddAssociationEvent(newValue,propName,null,notifier,notifier,null),getListeners(newValue,propName)));events.add(new EventAndListeners(new AttributeChangeEvent(newValue,propName,null,notifier,null),getListeners(newValue,propName)));}else{events.add(new EventAndListeners(new AddAssociationEvent(oldValue,propName,notifier,null,notifier,null),getListeners(oldValue,propName)));}}}for(EventAndListeners e : events){if(e.listeners!=null){for(EventListener l : e.listeners){if(l instanceof AssociationChangeListener){if(e.event instanceof AddAssociationEvent){((AssociationChangeListener)l).elementAdded((AddAssociationEvent)e.event);}else if(e.event instanceof RemoveAssociationEvent){((AssociationChangeListener)l).elementRemoved((RemoveAssociationEvent)e.event);}}else if(l instanceof PropertyChangeListener){((PropertyChangeListener)l).propertyChange(e.event);}}}}}"
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "argouml-0.34",
        "package": "org.argouml.profile.internal.ocl.uml14",
        "class": "CollectionsModelInterpreter",
        "method": "invokeFeature(Map,Object,String,String,Object[])",
        "github_url": "https://github.com/JavaQualitasCorpus/argouml-0.34/blob/c7a02f0ac9b60e3fcc38ee2de783944d19e806a4/argouml/src/argouml-app/src/org/argouml/profile/internal/ocl/uml14/CollectionsModelInterpreter.java#L63-L450",
        "source_code": "@SuppressWarnings('unchecked')public Object invokeFeature(Map<String,Object>vt,Object subject,String feature,String type,Object[]parameters){if(subject==null){return null;}if(!(subject instanceof Collection)){if(type.equals('->')){Set ns=new HashSet();ns.add(subject);subject=ns;}}if(subject instanceof Collection){if(type.equals('->')){if(feature.toString().trim().equals('select')){List<String>vars=(List<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=cloneCollection((Collection)subject);List remove=new ArrayList();String varName=vars.get(0);Object oldVal=vt.get(varName);for(Object object : col){vt.put(varName,object);Object res=eval.evaluate(vt,exp);if(res instanceof Boolean &&(Boolean)res){}else{remove.add(object);}}col.removeAll(remove);vt.put(varName,oldVal);return col;}else if(feature.toString().trim().equals('reject')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=cloneCollection((Collection)subject);List remove=new ArrayList();String varName=vars.get(0);Object oldVal=vt.get(varName);for(Object object : col){vt.put(varName,object);Object res=eval.evaluate(vt,exp);if(res instanceof Boolean &&(Boolean)res){remove.add(object);}}col.removeAll(remove);vt.put(varName,oldVal);return col;}else if(feature.toString().trim().equals('forAll')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];return doForAll(vt,(Collection)subject,vars,exp,eval);}else if(feature.toString().trim().equals('collect')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=(Collection)subject;Bag res=new HashBag();String varName=vars.get(0);Object oldVal=vt.get(varName);for(Object object : col){vt.put(varName,object);Object val=eval.evaluate(vt,exp);res.add(val);}vt.put(varName,oldVal);return res;}else if(feature.toString().trim().equals('exists')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=(Collection)subject;String varName=vars.get(0);Object oldVal=vt.get(varName);for(Object object : col){vt.put(varName,object);Object val=eval.evaluate(vt,exp);if(val instanceof Boolean &&(Boolean)val){return true;}}vt.put(varName,oldVal);return false;}else if(feature.toString().trim().equals('isUnique')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=(Collection)subject;Bag<Object>res=new HashBag<Object>();String varName=vars.get(0);Object oldVal=vt.get(varName);for(Object object : col){vt.put(varName,object);Object val=eval.evaluate(vt,exp);res.add(val);if(res.count(val)>1){return false;}}vt.put(varName,oldVal);return true;}else if(feature.toString().trim().equals('one')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=(Collection)subject;String varName=vars.get(0);Object oldVal=vt.get(varName);boolean found=false;for(Object object : col){vt.put(varName,object);Object val=eval.evaluate(vt,exp);if(val instanceof Boolean &&(Boolean)val){if(!found){found=true;}else{return false;}}}vt.put(varName,oldVal);return found;}else if(feature.toString().trim().equals('any')){List<String>vars=(ArrayList<String>)parameters[0];Object exp=parameters[1];LambdaEvaluator eval=(LambdaEvaluator)parameters[2];Collection col=(Collection)subject;String varName=vars.get(0);Object oldVal=vt.get(varName);for(Object object : col){vt.put(varName,object);Object val=eval.evaluate(vt,exp);if(val instanceof Boolean &&(Boolean)val){return object;}}vt.put(varName,oldVal);return null;}}}if(subject instanceof Collection){if(type.equals('->')){if(feature.equals('size')){return((Collection)subject).size();}if(feature.equals('includes')){return((Collection)subject).contains(parameters[0]);}if(feature.equals('excludes')){return !((Collection)subject).contains(parameters[0]);}if(feature.equals('count')){return(new HashBag<Object>((Collection)subject)).count(parameters[0]);}if(feature.equals('includesAll')){Collection col=(Collection)parameters[0];for(Object object : col){if(!((Collection)subject).contains(object)){return false;}}return true;}if(feature.equals('excludesAll')){Collection col=(Collection)parameters[0];for(Object object : col){if(((Collection)subject).contains(object)){return false;}}return true;}if(feature.equals('isEmpty')){return((Collection)subject).isEmpty();}if(feature.equals('notEmpty')){return !((Collection)subject).isEmpty();}if(feature.equals('asSequence')){return new ArrayList<Object>((Collection)subject);}if(feature.equals('asBag')){return new HashBag<Object>((Collection)subject);}if(feature.equals('asSet')){return new HashSet<Object>((Collection)subject);}if(feature.equals('sum')){Integer sum=0;Collection col=(Collection)subject;for(Object object : col){sum+=(Integer)object;}return sum;}if(feature.equals('union')){Collection copy=cloneCollection((Collection)subject);copy.addAll((Collection)parameters[0]);return copy;}if(feature.equals('append')){Collection copy=cloneCollection((Collection)subject);copy.add(parameters[0]);return copy;}if(feature.equals('prepend')){Collection copy=cloneCollection((Collection)subject);if(copy instanceof List){((List)copy).add(0,parameters[0]);}else{copy.add(parameters[0]);}return copy;}}}if(subject instanceof List){if(type.equals('->')){if(feature.equals('at')){return((List)subject).get((Integer)parameters[0]);}if(feature.equals('first')){return((List)subject).get(0);}if(feature.equals('last')){return((List)subject).get(((List)subject).size());}}}if(subject instanceof Set){if(type.equals('->')){if(feature.equals('intersection')){Set c1=(Set)subject;Set c2=(Set)parameters[0];Set r=new HashSet<Object>();for(Object o : c1){if(c2.contains(o)){r.add(o);}}for(Object o : c2){if(c1.contains(o)){r.add(o);}}return r;}if(feature.equals('including')){Set copy=(Set)cloneCollection((Set)subject);copy.add(parameters[0]);return copy;}if(feature.equals('excluding')){Set copy=(Set)cloneCollection((Set)subject);copy.remove(parameters[0]);return copy;}if(feature.equals('symmetricDifference')){Set c1=(Set)subject;Set c2=(Set)parameters[0];Set r=new HashSet<Object>();for(Object o : c1){if(!c2.contains(o)){r.add(o);}}for(Object o : c2){if(!c1.contains(o)){r.add(o);}}return r;}}}if(subject instanceof Bag){if(type.equals('->')){if(feature.equals('count')){return((Bag)subject).count(parameters[0]);}}}return null;}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "axion-1.0-M2",
        "package": "org.axiondb.engine",
        "class": "BaseArrayIndex",
        "method": "supportsOperator(ComparisonOperator)",
        "github_url": "https://github.com/JavaQualitasCorpus/axion-1.0-M2/blob/5453d44a2f052bd55bd6f7bc06bf4af2e24958a2/src/org/axiondb/engine/BaseArrayIndex.java#L93-L111",
        "source_code": "public boolean supportsOperator(ComparisonOperator op){if(ComparisonOperator.EQUAL.equals(op)){if(isUnique()){return true;}else{return getIndexedColumn().getDataType().supportsSuccessor();}}else if(ComparisonOperator.GREATER_THAN.equals(op)){return getIndexedColumn().getDataType().supportsSuccessor();}else if(ComparisonOperator.GREATER_THAN_OR_EQUAL.equals(op)){return true;}else if(ComparisonOperator.LESS_THAN.equals(op)){return true;}else if(ComparisonOperator.LESS_THAN_OR_EQUAL.equals(op)){return getIndexedColumn().getDataType().supportsSuccessor();}else{return false;}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "axion-1.0-M2",
        "package": "org.axiondb.engine.commands",
        "class": "SelectCommand",
        "method": "processFromTree(FromNode,Database)",
        "github_url": "https://github.com/JavaQualitasCorpus/axion-1.0-M2/blob/5453d44a2f052bd55bd6f7bc06bf4af2e24958a2/src/org/axiondb/engine/commands/SelectCommand.java#L393-L556",
        "source_code": "private RowIterator processFromTree(FromNode from,Database db)throws AxionException{TableIdentifier temp=null;RowIterator leftiter=null;RowIterator rightiter=null;RowIterator literaliter=null;RowIterator row=null;int iterCount=0;int lcolpos=-1;int rcolcount=-1;ColumnIdentifier rcol=null;ColumnIdentifier lcol=null;if(from!=null){WhereNode condition=from.getCondition();if(from.getTableCount()>1 &&(from.getType()==FromNode.TYPE_INNER || from.getType()==FromNode.TYPE_LEFT)){if(from.getRight()instanceof TableIdentifier && condition!=null && condition instanceof LeafWhereNode){TableIdentifier tid=(TableIdentifier)from.getRight();lcol=(ColumnIdentifier)((LeafWhereNode)condition).getLeft();rcol=(ColumnIdentifier)((LeafWhereNode)condition).getRight();if(lcol.equals(rcol)==false){if(tid.equals(lcol.getTableIdentifier())){ColumnIdentifier tempcid=lcol;lcol=rcol;rcol=tempcid;}}Table table=db.getTable(tid);if(table.getIndexForColumn(table.getColumn(rcol.getName()))==null){lcol=null;rcol=null;}}}if(condition!=null){_applyWhereNodesAfterJoin=true;}}if(from!=null && from.getLeft()!=null){Object leftChild=from.getLeft();if(leftChild instanceof FromNode){leftiter=processFromTree((FromNode)leftChild,db);if(lcol!=null){lcolpos=((Integer)_colIdToFieldMap.get(lcol)).intValue();}}else if(leftChild instanceof TableIdentifier){temp=(TableIdentifier)from.getLeft();Table left=db.getTable(temp);if(left==null){throw new AxionException('Table '+temp+' not found.');}if(lcol!=null){lcolpos=left.getColumnIndex(lcol.getName());}leftiter=processTable(temp,db,lcol,0);}else{throw new AxionException('From clause is badly formed');}iterCount++;}if(from!=null && from.getRight()!=null){Object rightChild=from.getRight();if(rightChild instanceof FromNode){rightiter=processFromTree((FromNode)rightChild,db);}else if(rightChild instanceof TableIdentifier){temp=(TableIdentifier)from.getRight();Table right=db.getTable(temp);if(right==null){throw new AxionException('Table '+temp+' not found.');}rightiter=processTable(temp,db,rcol,1);rcolcount=right.getColumnCount();}else{throw new AxionException('From clause is badly formed');}iterCount++;}if(null!=_literals){Row litrow=new SimpleRow(_literals.size());Iterator iter=_literals.iterator();for(int i=0;iter.hasNext();i++){Literal literal=(Literal)iter.next();_colIdToFieldMap.put(literal,new Integer(_indexOffset+i));}_indexOffset+=_literals.size();literaliter=new SingleRowIterator(litrow);iterCount++;_literals=null;}if(iterCount>1){if(literaliter==null && rightiter instanceof ChangingIndexedRowIterator && from.getType()!=FromNode.TYPE_RIGHT){IndexJoinedRowIterator joinedrow=new IndexJoinedRowIterator(lcolpos,rcolcount);joinedrow.addRowIterator(leftiter);joinedrow.addRowIterator(rightiter);joinedrow.setJoinType(from.getType());joinedrow.setJoinCondition(new RowDecorator(_colIdToFieldMap),from.getCondition());row=joinedrow;}else{SimpleJoinedRowIterator joinedrow=new SimpleJoinedRowIterator();if(from.getType()==FromNode.TYPE_RIGHT){joinedrow.addRowIterator(rightiter);joinedrow.addRowIterator(leftiter);}else{if(leftiter!=null){joinedrow.addRowIterator(leftiter);}if(rightiter!=null){joinedrow.addRowIterator(rightiter);}}if(literaliter!=null){joinedrow.addRowIterator(literaliter);}joinedrow.setJoinType(from.getType());if(rightiter!=null && leftiter!=null && from.getCondition()!=null){joinedrow.setJoinCondition(new RowDecorator(_colIdToFieldMap),from.getCondition());}row=joinedrow;}}else{if(leftiter!=null){row=leftiter;}if(literaliter!=null){row=literaliter;}}return(row);}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "axion-1.0-M2",
        "package": "org.axiondb.parser",
        "class": "AxionSqlParser",
        "method": "SqlTableList(FromNode)",
        "github_url": "https://github.com/JavaQualitasCorpus/axion-1.0-M2/blob/5453d44a2f052bd55bd6f7bc06bf4af2e24958a2/src/org/axiondb/parser/AxionSqlParser.java#L1658-L1683",
        "source_code": "final public FromNode SqlTableList(FromNode node)throws ParseException{FromNode temp=null;TableIdentifier curTable=null;label_15: while(true){jj_consume_token(COMMA);if(temp!=null){temp.setLeft(node);node=temp;temp=null;}node.setCondition(null);node.setType(FromNode.TYPE_INNER);curTable=SqlTableRef();node.setRight(curTable);temp=new FromNode();if(jj_2_8(2)){;}else{break label_15;}}{if(true)return node;}throw new Error('Missing return statement in function');}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "castor-1.3.1",
        "package": "org.castor.cpa.persistence.sql.driver",
        "class": "InterbaseQueryExpression",
        "method": "appendJoin(JDBCQueryExpression.Join)",
        "github_url": "https://github.com/JavaQualitasCorpus/castor-1.3.3/blob/998e4784805f81e1a6fb907c59eb5c01d29673d1/cpa/src/main/java/org/castor/cpa/persistence/sql/driver/InterbaseQueryExpression.java#L94-L121",
        "source_code": "void appendJoin(final Join join){if(join._outer){_sql.append(JDBCSyntax.LEFT_JOIN);}else{_sql.append(JDBCSyntax.INNER_JOIN);}String tableAlias=join._rightTable;String tableName=_tables.get(tableAlias);if(tableAlias.equals(tableName)){_sql.append(_factory.quoteName(tableName));}else{_sql.append(_factory.quoteName(tableName)+' '+_factory.quoteName(tableAlias));}_sql.append(JDBCSyntax.ON);for(int j=0;j<join._leftColumns.length;++j){if(j>0){_sql.append(JDBCSyntax.AND);}_sql.append(_factory.quoteName(join._leftTable+JDBCSyntax.TABLE_COLUMN_SEPARATOR+join._leftColumns[j])).append(OP_EQUALS);_sql.append(_factory.quoteName(join._rightTable+JDBCSyntax.TABLE_COLUMN_SEPARATOR+join._rightColumns[j]));}}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "castor-1.3.1",
        "package": "org.castor.persist",
        "class": "AbstractTransactionContext",
        "method": "load(Identity,ProposedEntity,AccessMode,QueryResults)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "castor-1.3.1",
        "package": "org.castor.xmlctf.bestpractise.genpackage.descriptors",
        "class": "PartialTerminationDescriptor",
        "method": "PartialTerminationDescriptor()",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "castor-1.3.1",
        "package": "org.exolab.castor.xml",
        "class": "Marshaller",
        "method": "marshal(Object,XMLFieldDescriptor,ContentHandler,Marshaller.MarshalState)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "colt-1.2.0",
        "package": "cern.colt.bitvector",
        "class": "BitVector",
        "method": "forEachIndexFromToInState(int,int,boolean,IntProcedure)",
        "github_url": "https://github.com/JavaQualitasCorpus/colt-1.2.0/blob/26a5953e0d4b120135996b218e440af2c45a06b8/src/cern/colt/bitvector/BitVector.java#L292-L420",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "colt-1.2.0",
        "package": "cern.colt.matrix.linalg",
        "class": "EigenvalueDecomposition",
        "method": "hqr2()",
        "github_url": "https://github.com/JavaQualitasCorpus/colt-1.2.0/blob/26a5953e0d4b120135996b218e440af2c45a06b8/src/cern/colt/matrix/linalg/EigenvalueDecomposition.java#L175-L612",
        "source_code": "private void hqr2(){int nn=this.n;int n=nn-1;int low=0;int high=nn-1;double eps=Math.pow(2.0,-52.0);double exshift=0.0;double p=0,q=0,r=0,s=0,z=0,t,w,x,y;double norm=0.0;for(int i=0;i<nn;i++){if(i<low | i>high){d[i]=H[i][i];e[i]=0.0;}for(int j=Math.max(i-1,0);j<nn;j++){norm=norm+Math.abs(H[i][j]);}}int iter=0;while(n>=low){int l=n;while(l>low){s=Math.abs(H[l-1][l-1])+Math.abs(H[l][l]);if(s==0.0){s=norm;}if(Math.abs(H[l][l-1])<eps*s){break;}l--;}if(l==n){H[n][n]=H[n][n]+exshift;d[n]=H[n][n];e[n]=0.0;n--;iter=0;}else if(l==n-1){w=H[n][n-1]*H[n-1][n];p=(H[n-1][n-1]-H[n][n])/2.0;q=p*p+w;z=Math.sqrt(Math.abs(q));H[n][n]=H[n][n]+exshift;H[n-1][n-1]=H[n-1][n-1]+exshift;x=H[n][n];if(q>=0){if(p>=0){z=p+z;}else{z=p-z;}d[n-1]=x+z;d[n]=d[n-1];if(z!=0.0){d[n]=x-w/z;}e[n-1]=0.0;e[n]=0.0;x=H[n][n-1];s=Math.abs(x)+Math.abs(z);p=x/s;q=z/s;r=Math.sqrt(p*p+q*q);p=p/r;q=q/r;for(int j=n-1;j<nn;j++){z=H[n-1][j];H[n-1][j]=q*z+p*H[n][j];H[n][j]=q*H[n][j]-p*z;}for(int i=0;i<=n;i++){z=H[i][n-1];H[i][n-1]=q*z+p*H[i][n];H[i][n]=q*H[i][n]-p*z;}for(int i=low;i<=high;i++){z=V[i][n-1];V[i][n-1]=q*z+p*V[i][n];V[i][n]=q*V[i][n]-p*z;}}else{d[n-1]=x+p;d[n]=x+p;e[n-1]=z;e[n]=-z;}n=n-2;iter=0;}else{x=H[n][n];y=0.0;w=0.0;if(l<n){y=H[n-1][n-1];w=H[n][n-1]*H[n-1][n];}if(iter==10){exshift+=x;for(int i=low;i<=n;i++){H[i][i]-=x;}s=Math.abs(H[n][n-1])+Math.abs(H[n-1][n-2]);x=y=0.75*s;w=-0.4375*s*s;}if(iter==30){s=(y-x)/2.0;s=s*s+w;if(s>0){s=Math.sqrt(s);if(y<x){s=-s;}s=x-w/((y-x)/2.0+s);for(int i=low;i<=n;i++){H[i][i]-=s;}exshift+=s;x=y=w=0.964;}}iter=iter+1;int m=n-2;while(m>=l){z=H[m][m];r=x-z;s=y-z;p=(r*s-w)/H[m+1][m]+H[m][m+1];q=H[m+1][m+1]-z-r-s;r=H[m+2][m+1];s=Math.abs(p)+Math.abs(q)+Math.abs(r);p=p/s;q=q/s;r=r/s;if(m==l){break;}if(Math.abs(H[m][m-1])*(Math.abs(q)+Math.abs(r))<eps*(Math.abs(p)*(Math.abs(H[m-1][m-1])+Math.abs(z)+Math.abs(H[m+1][m+1])))){break;}m--;}for(int i=m+2;i<=n;i++){H[i][i-2]=0.0;if(i>m+2){H[i][i-3]=0.0;}}for(int k=m;k<=n-1;k++){boolean notlast=(k!=n-1);if(k!=m){p=H[k][k-1];q=H[k+1][k-1];r=(notlast ? H[k+2][k-1]: 0.0);x=Math.abs(p)+Math.abs(q)+Math.abs(r);if(x!=0.0){p=p/x;q=q/x;r=r/x;}}if(x==0.0){break;}s=Math.sqrt(p*p+q*q+r*r);if(p<0){s=-s;}if(s!=0){if(k!=m){H[k][k-1]=-s*x;}else if(l!=m){H[k][k-1]=-H[k][k-1];}p=p+s;x=p/s;y=q/s;z=r/s;q=q/p;r=r/p;for(int j=k;j<nn;j++){p=H[k][j]+q*H[k+1][j];if(notlast){p=p+r*H[k+2][j];H[k+2][j]=H[k+2][j]-p*z;}H[k][j]=H[k][j]-p*x;H[k+1][j]=H[k+1][j]-p*y;}for(int i=0;i<=Math.min(n,k+3);i++){p=x*H[i][k]+y*H[i][k+1];if(notlast){p=p+z*H[i][k+2];H[i][k+2]=H[i][k+2]-p*r;}H[i][k]=H[i][k]-p;H[i][k+1]=H[i][k+1]-p*q;}for(int i=low;i<=high;i++){p=x*V[i][k]+y*V[i][k+1];if(notlast){p=p+z*V[i][k+2];V[i][k+2]=V[i][k+2]-p*r;}V[i][k]=V[i][k]-p;V[i][k+1]=V[i][k+1]-p*q;}}}}}if(norm==0.0){return;}for(n=nn-1;n>=0;n--){p=d[n];q=e[n];if(q==0){int l=n;H[n][n]=1.0;for(int i=n-1;i>=0;i--){w=H[i][i]-p;r=0.0;for(int j=l;j<=n;j++){r=r+H[i][j]*H[j][n];}if(e[i]<0.0){z=w;s=r;}else{l=i;if(e[i]==0.0){if(w!=0.0){H[i][n]=-r/w;}else{H[i][n]=-r/(eps*norm);}}else{x=H[i][i+1];y=H[i+1][i];q=(d[i]-p)*(d[i]-p)+e[i]*e[i];t=(x*s-z*r)/q;H[i][n]=t;if(Math.abs(x)>Math.abs(z)){H[i+1][n]=(-r-w*t)/x;}else{H[i+1][n]=(-s-y*t)/z;}}t=Math.abs(H[i][n]);if((eps*t)*t>1){for(int j=i;j<=n;j++){H[j][n]=H[j][n]/t;}}}}}else if(q<0){int l=n-1;if(Math.abs(H[n][n-1])>Math.abs(H[n-1][n])){H[n-1][n-1]=q/H[n][n-1];H[n-1][n]=-(H[n][n]-p)/H[n][n-1];}else{cdiv(0.0,-H[n-1][n],H[n-1][n-1]-p,q);H[n-1][n-1]=cdivr;H[n-1][n]=cdivi;}H[n][n-1]=0.0;H[n][n]=1.0;for(int i=n-2;i>=0;i--){double ra,sa,vr,vi;ra=0.0;sa=0.0;for(int j=l;j<=n;j++){ra=ra+H[i][j]*H[j][n-1];sa=sa+H[i][j]*H[j][n];}w=H[i][i]-p;if(e[i]<0.0){z=w;r=ra;s=sa;}else{l=i;if(e[i]==0){cdiv(-ra,-sa,w,q);H[i][n-1]=cdivr;H[i][n]=cdivi;}else{x=H[i][i+1];y=H[i+1][i];vr=(d[i]-p)*(d[i]-p)+e[i]*e[i]-q*q;vi=(d[i]-p)*2.0*q;if(vr==0.0 & vi==0.0){vr=eps*norm*(Math.abs(w)+Math.abs(q)+Math.abs(x)+Math.abs(y)+Math.abs(z));}cdiv(x*r-z*ra+q*sa,x*s-z*sa-q*ra,vr,vi);H[i][n-1]=cdivr;H[i][n]=cdivi;if(Math.abs(x)>(Math.abs(z)+Math.abs(q))){H[i+1][n-1]=(-ra-w*H[i][n-1]+q*H[i][n])/x;H[i+1][n]=(-sa-w*H[i][n]-q*H[i][n-1])/x;}else{cdiv(-r-y*H[i][n-1],-s-y*H[i][n],z,q);H[i+1][n-1]=cdivr;H[i+1][n]=cdivi;}}t=Math.max(Math.abs(H[i][n-1]),Math.abs(H[i][n]));if((eps*t)*t>1){for(int j=i;j<=n;j++){H[j][n-1]=H[j][n-1]/t;H[j][n]=H[j][n]/t;}}}}}}for(int i=0;i<nn;i++){if(i<low | i>high){for(int j=i;j<nn;j++){V[i][j]=H[i][j];}}}for(int j=nn-1;j>=low;j--){for(int i=low;i<=high;i++){z=0.0;for(int k=low;k<=Math.min(j,high);k++){z=z+V[i][k]*H[k][j];}V[i][j]=z;}}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "columba-1.0",
        "package": "org.columba.mail",
        "class": "EudoraMailImportFilter",
        "method": "convertAndSaveMessage(String,String,IWorkerStatusController,IMailbox)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "columba-1.0",
        "package": "org.columba.mail.folder.imap",
        "class": "IMAPFolder",
        "method": "synchronizeHeaderlist()",
        "github_url": "https://github.com/JavaQualitasCorpus/columba-1.0/blob/ad9e5f3119a76c05c8179301bd0a8d77e04ec2b6/src/mail/core/org/columba/mail/folder/imap/IMAPFolder.java#L256-L526",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "columba-1.0",
        "package": "org.columba.mail.smtp",
        "class": "SMTPServer",
        "method": "ensureAuthenticated()",
        "github_url": "https://github.com/JavaQualitasCorpus/columba-1.0/blob/ad9e5f3119a76c05c8179301bd0a8d77e04ec2b6/src/mail/core/org/columba/mail/smtp/SMTPServer.java#L115-L286",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "displaytag-1.2",
        "package": "org.displaytag.util",
        "class": "HtmlTagUtil",
        "method": "abbreviateHtmlString(String,int,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/displaytag-1.2/blob/f8e13583d6347fb4cce6396e90cced7d4ac86366/displaytag/src/main/java/org/displaytag/util/HtmlTagUtil.java#L100-L268",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "drawswf-1.2.9",
        "package": "com.anotherbigidea.flash.sound",
        "class": "MP3Helper",
        "method": "getSoundDefinition(InputStream)",
        "github_url": "https://github.com/JavaQualitasCorpus/drawswf-1.2.9/blob/f91b88aba4d509846e74c8629b25fc07ac4f4d7a/com/anotherbigidea/flash/sound/MP3Helper.java#L46-L84",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "drjava-stable-20100913-r5387",
        "package": "edu.rice.cs.drjava.model.repl",
        "class": "InteractionsDJDocument",
        "method": "setColoring(int,Graphics)",
        "github_url": "https://github.com/JavaQualitasCorpus/drjava-stable-20100913-r5387/blob/098194d34300561c4b14ecb3d206ba4f30d1c98f/src/src/edu/rice/cs/drjava/model/repl/InteractionsDJDocument.java#L237-L293",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "drjava-stable-20100913-r5387",
        "package": "edu.rice.cs.drjava.ui",
        "class": "AutoCompletePopup",
        "method": "show(Component,String,String,int,SizedIterable,SizedIterable,int,Runnable,SizedIterable)",
        "github_url": "https://github.com/JavaQualitasCorpus/drjava-stable-20100913-r5387/blob/098194d34300561c4b14ecb3d206ba4f30d1c98f/src/src/edu/rice/cs/drjava/ui/AutoCompletePopup.java#L163-L299",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "emma-2.0.5312",
        "package": "com.vladium.emma.data",
        "class": "DataFactory",
        "method": "mergeload(File)",
        "github_url": "https://github.com/JavaQualitasCorpus/emma-2.0.5312/blob/5e9c39116d69db591a22ce38d3108161b254bae2/core/java12/com/vladium/emma/data/DataFactory.java#L390-L496",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "emma-2.0.5312",
        "package": "com.vladium.emma.instr",
        "class": "InstrVisitor.clinitHeader",
        "method": "clinitHeader(InstrVisitor,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/emma-2.0.5312/blob/5e9c39116d69db591a22ce38d3108161b254bae2/core/java12/com/vladium/emma/instr/InstrVisitor.java#L1804-L1854",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "emma-2.0.5312",
        "package": "com.vladium.emma.report",
        "class": "AbstractReportGenerator",
        "method": "initialize(IMetaData,ICoverageData,SourcePathCache,IProperties)",
        "github_url": "https://github.com/JavaQualitasCorpus/emma-2.0.5312/blob/5e9c39116d69db591a22ce38d3108161b254bae2/core/java12/com/vladium/emma/report/AbstractReportGenerator.java#L55-L213",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "emma-2.0.5312",
        "package": "com.vladium.emma.report.html",
        "class": "ReportGenerator",
        "method": "embedSrcFile(SrcFileItem,HTMLDocument,IntObjectMap,SourcePathCache)",
        "github_url": "https://github.com/JavaQualitasCorpus/emma-2.0.5312/blob/5e9c39116d69db591a22ce38d3108161b254bae2/core/java12/com/vladium/emma/report/html/ReportGenerator.java#L1115-L1283",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "emma-2.0.5312",
        "package": "com.vladium.util.args",
        "class": "OptsParser",
        "method": "parse(String[])",
        "github_url": "https://github.com/JavaQualitasCorpus/emma-2.0.5312/blob/5e9c39116d69db591a22ce38d3108161b254bae2/core/java12/com/vladium/util/args/OptsParser.java#L118-L401",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "exoportal-v1.0.2",
        "package": "org.exoplatform.faces.core.renderer.html",
        "class": "StringInputRenderer",
        "method": "encodeBegin(FacesContext,UIComponent)",
        "github_url": "https://github.com/JavaQualitasCorpus/exoportal-v1.0.2/blob/7d48e67de0200e2ca1dd60ebef9c408361bb5309/jsf-components/src/java/org/exoplatform/faces/core/renderer/html/StringInputRenderer.java#L30-L67",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "exoportal-v1.0.2",
        "package": "org.exoplatform.services.organization.ldap",
        "class": "UserHandler",
        "method": "findUsers(Query)",
        "github_url": "https://github.com/JavaQualitasCorpus/exoportal-v1.0.2/blob/7d48e67de0200e2ca1dd60ebef9c408361bb5309/services/organization/impl/src/java/org/exoplatform/services/organization/ldap/UserHandler.java#L245-L352",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "exoportal-v1.0.2",
        "package": "org.exoplatform.services.portletcontainer.impl",
        "class": "PortletApplicationHandler",
        "method": "process(ServletContext,HttpServletRequest,HttpServletResponse,Input,Output,PortletWindowInternal,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/exoportal-v1.0.2/blob/7d48e67de0200e2ca1dd60ebef9c408361bb5309/services/portlet-container/impl/src/java/org/exoplatform/services/portletcontainer/impl/PortletApplicationHandler.java#L79-L282",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "findbugs-1.3.9",
        "package": "edu.umd.cs.findbugs.ba.npe",
        "class": "IsNullValueAnalysis",
        "method": "meetInto(IsNullValueFrame,Edge,IsNullValueFrame,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/findbugs-1.3.9/blob/a7a410ffa2f22ff37bc9783a949a716b5e020f80/src/java/edu/umd/cs/findbugs/ba/npe/IsNullValueAnalysis.java#L369-L560",
        "source_code": "public void meetInto(IsNullValueFrame fact,Edge edge,IsNullValueFrame result,boolean propagatePhiNodeInformation)throws DataflowAnalysisException{if(fact.isValid()){IsNullValueFrame tmpFact=null;if(!NO_SPLIT_DOWNGRADE_NSP){if(!edge.isExceptionEdge()&& cfg.getNumNonExceptionSucessors(edge.getSource())>1){tmpFact=modifyFrame(fact,tmpFact);tmpFact.downgradeOnControlSplit();}}if(!NO_SWITCH_DEFAULT_AS_EXCEPTION){if(edge.getType()==SWITCH_DEFAULT_EDGE){tmpFact=modifyFrame(fact,tmpFact);tmpFact.toExceptionValues();}}final BasicBlock destBlock=edge.getTarget();if(destBlock.isExceptionHandler()){tmpFact=modifyFrame(fact,tmpFact);tmpFact.clearStack();if(true){CodeExceptionGen handler=destBlock.getExceptionGen();ObjectType catchType=handler.getCatchType();if(catchType!=null){String catchClass=catchType.getClassName();if(catchClass.equals('java.lang.CloneNotSupportedException')|| catchClass.equals('java.lang.InterruptedException')){for(int i=0;i<tmpFact.getNumSlots();++i){IsNullValue value=tmpFact.getValue(i);if(value.isDefinitelyNull()|| value.isNullOnSomePath())tmpFact.setValue(i,IsNullValue.nullOnComplexPathValue());}}}}tmpFact.toExceptionValues();tmpFact.pushValue(IsNullValue.nonNullValue());}else{final int edgeType=edge.getType();final BasicBlock sourceBlock=edge.getSource();final BasicBlock targetBlock=edge.getTarget();final ValueNumberFrame targetVnaFrame=vnaDataflow.getStartFact(destBlock);final ValueNumberFrame sourceVnaFrame=vnaDataflow.getResultFact(sourceBlock);assert targetVnaFrame!=null;if(edgeType==IFCMP_EDGE || edgeType==FALL_THROUGH_EDGE){IsNullValueFrame resultFact=getResultFact(sourceBlock);IsNullConditionDecision decision=resultFact.getDecision();if(decision!=null){if(!decision.isEdgeFeasible(edgeType)){tmpFact=createFact();tmpFact.setTop();}else{ValueNumber valueTested=decision.getValue();if(valueTested!=null){if(DEBUG){}final Location atIf=new Location(sourceBlock.getLastInstruction(),sourceBlock);final ValueNumberFrame prevVnaFrame=vnaDataflow.getFactAtLocation(atIf);IsNullValue decisionValue=decision.getDecision(edgeType);if(decisionValue!=null){if(DEBUG){}tmpFact=replaceValues(fact,tmpFact,valueTested,prevVnaFrame,targetVnaFrame,decisionValue);if(decisionValue.isDefinitelyNull()){addLocationWhereValueBecomesNull(new LocationWhereValueBecomesNull(atIf,valueTested));ValueNumber knownNonnull=getKnownNonnullDueToPointerDisequality(valueTested,atIf.getHandle().getPosition());if(knownNonnull!=null)tmpFact=replaceValues(fact,tmpFact,knownNonnull,prevVnaFrame,targetVnaFrame,IsNullValue.checkedNonNullValue());}}}}}}if(sourceBlock.isNullCheck()&& edgeType==FALL_THROUGH_EDGE){ValueNumberFrame vnaFrame=vnaDataflow.getStartFact(destBlock);if(vnaFrame==null)throw new IllegalStateException('no vna frame at block entry?');Instruction firstInDest=edge.getTarget().getFirstInstruction().getInstruction();IsNullValue instance=fact.getInstance(firstInDest,methodGen.getConstantPool());if(instance.isDefinitelyNull()){tmpFact=createFact();tmpFact.setTop();}else if(!instance.isDefinitelyNotNull()){InstructionHandle kaBoomLocation=targetBlock.getFirstInstruction();ValueNumber replaceMe=vnaFrame.getInstance(firstInDest,methodGen.getConstantPool());IsNullValue noKaboomNonNullValue=IsNullValue.noKaboomNonNullValue(new Location(kaBoomLocation,targetBlock));if(DEBUG){}tmpFact=replaceValues(fact,tmpFact,replaceMe,vnaFrame,targetVnaFrame,noKaboomNonNullValue);}}if(propagatePhiNodeInformation && targetVnaFrame.phiNodeForLoads){if(DEBUG)System.out.println('Is phi node for loads');for(ValueNumber v : fact.getKnownValues()){AvailableLoad loadForV=sourceVnaFrame.getLoad(v);if(DEBUG){}if(loadForV!=null){ValueNumber[]matchingValueNumbers=targetVnaFrame.getAvailableLoad(loadForV);if(matchingValueNumbers!=null)for(ValueNumber v2 : matchingValueNumbers){tmpFact=modifyFrame(fact,tmpFact);tmpFact.useNewValueNumberForLoad(v,v2);if(DEBUG)System.out.println('For '+loadForV+' switch from '+v+' to '+v2);}}}}}if(tmpFact!=null)fact=tmpFact;}if(DEBUG){}mergeInto(fact,result);if(DEBUG){}}"
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "findbugs-1.3.9",
        "package": "edu.umd.cs.findbugs.classfile.engine",
        "class": "ClassParserUsingASM",
        "method": "parse(ClassNameAndSuperclassInfo.Builder)",
        "github_url": "https://github.com/JavaQualitasCorpus/findbugs-1.3.9/blob/a7a410ffa2f22ff37bc9783a949a716b5e020f80/src/java/edu/umd/cs/findbugs/classfile/engine/ClassParser.java#L83-L141",
        "source_code": "/*(non-Javadoc)*@see edu.umd.cs.findbugs.classfile.engine.ClassParserInterface#parse(edu.umd.cs.findbugs.classfile.analysis.ClassNameAndSuperclassInfo.Builder)*/public void parse(ClassNameAndSuperclassInfo.Builder builder)throws InvalidClassFileFormatException{try{int magic=in.readInt();if(magic!=0xcafebabe)throw new InvalidClassFileFormatException('Classfile header isn't 0xCAFEBABE',expectedClassDescriptor,codeBaseEntry);int major_version=in.readUnsignedShort();int minor_version=in.readUnsignedShort();int constant_pool_count=in.readUnsignedShort();constantPool=new Constant[constant_pool_count];for(int i=1;i<constantPool.length;i++){constantPool[i]=readConstant();if(constantPool[i].tag==IClassConstants.CONSTANT_Double || constantPool[i].tag==IClassConstants.CONSTANT_Long){++i;}}int access_flags=in.readUnsignedShort();int this_class=in.readUnsignedShort();ClassDescriptor thisClassDescriptor=getClassDescriptor(this_class);int super_class=in.readUnsignedShort();ClassDescriptor superClassDescriptor=getClassDescriptor(super_class);int interfaces_count=in.readUnsignedShort();if(interfaces_count<0){throw new InvalidClassFileFormatException(expectedClassDescriptor,codeBaseEntry);}ClassDescriptor[]interfaceDescriptorList;if(interfaces_count==0)interfaceDescriptorList=ClassDescriptor.EMPTY_ARRAY;else{interfaceDescriptorList=new ClassDescriptor[interfaces_count];for(int i=0;i<interfaceDescriptorList.length;i++)interfaceDescriptorList[i]=getClassDescriptor(in.readUnsignedShort());}Collection<ClassDescriptor>referencedClassDescriptorList=extractReferencedClasses();builder.setClassDescriptor(thisClassDescriptor);builder.setSuperclassDescriptor(superClassDescriptor);builder.setInterfaceDescriptorList(interfaceDescriptorList);builder.setCodeBaseEntry(codeBaseEntry);builder.setAccessFlags(access_flags);builder.setReferencedClassDescriptors(referencedClassDescriptorList);builder.setClassfileVersion(major_version,minor_version);}catch(IOException e){throw new InvalidClassFileFormatException(expectedClassDescriptor,codeBaseEntry,e);}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "findbugs-1.3.9",
        "package": "edu.umd.cs.findbugs.detect",
        "class": "FindOpenStream",
        "method": "analyzeMethod(ClassContext,Method,StreamResourceTracker,ResourceCollection)",
        "github_url": "https://github.com/JavaQualitasCorpus/findbugs-1.3.9/blob/a7a410ffa2f22ff37bc9783a949a716b5e020f80/src/java/edu/umd/cs/findbugs/detect/FindOpenStream.java#L346-L463",
        "source_code": "@Override public void analyzeMethod(ClassContext classContext,Method method,StreamResourceTracker resourceTracker,ResourceCollection<Stream>resourceCollection)throws CFGBuilderException,DataflowAnalysisException{potentialOpenStreamList.clear();JavaClass javaClass=classContext.getJavaClass();MethodGen methodGen=classContext.getMethodGen(method);if(methodGen==null)return;CFG cfg=classContext.getCFG(method);try{Type[]parameterTypeList=Type.getArgumentTypes(methodGen.getSignature());Location firstLocation=new Location(cfg.getEntry().getFirstInstruction(),cfg.getEntry());int local=methodGen.isStatic()? 0 : 1;for(Type type : parameterTypeList){if(type instanceof ObjectType){ObjectType objectType=(ObjectType)type;for(ObjectType streamBase : streamBaseList){if(Hierarchy.isSubtype(objectType,streamBase)){Stream paramStream=new Stream(firstLocation,objectType.getClassName(),streamBase.getClassName());paramStream.setIsOpenOnCreation(true);paramStream.setOpenLocation(firstLocation);paramStream.setInstanceParam(local);resourceCollection.addPreexistingResource(paramStream);break;}}}switch(type.getType()){case Constants.T_LONG: case Constants.T_DOUBLE: local+=2;break;default: local+=1;break;}}}catch(ClassNotFoundException e){bugReporter.reportMissingClass(e);}resourceTracker.setResourceCollection(resourceCollection);super.analyzeMethod(classContext,method,resourceTracker,resourceCollection);resourceTracker.markTransitiveUninterestingStreamEscapes();for(Iterator<Stream>i=resourceCollection.resourceIterator();i.hasNext();){Stream stream=i.next();StreamEquivalenceClass equivalenceClass=resourceTracker.getStreamEquivalenceClass(stream);if(stream.isClosed())equivalenceClass.setClosed();}for(PotentialOpenStream pos : potentialOpenStreamList){Stream stream=pos.stream;if(stream.isClosed())continue;if(stream.isUninteresting())continue;Location openLocation=stream.getOpenLocation();if(openLocation==null)continue;if(IGNORE_WRAPPED_UNINTERESTING_STREAMS && resourceTracker.isUninterestingStreamEscape(stream))continue;String sourceFile=javaClass.getSourceFileName();String leakClass=stream.getStreamBase();if(isMainMethod(method)&&(leakClass.contains('InputStream')|| leakClass.contains('Reader')))return;bugAccumulator.accumulateBug(new BugInstance(this,pos.bugType,pos.priority).addClassAndMethod(methodGen,sourceFile).addTypeOfNamedClass(leakClass).describe(TypeAnnotation.CLOSEIT_ROLE),SourceLineAnnotation.fromVisitedInstruction(classContext,methodGen,sourceFile,stream.getLocation().getHandle()));}}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "fitjava-1.1",
        "package": "fat",
        "class": "ReferenceFixture",
        "method": "Result()",
        "github_url": "https://github.com/JavaQualitasCorpus/fitjava-1.1/blob/71874911dfa595caacb0cb1249627996126d573c/spec/fat/ReferenceFixture.java#L12-L40",
        "source_code": "public String Result(){String inputFileName='../../spec/'+Location;String outputFileName='output/spec/'+Location;try{FileRunner runner=new FileRunner();runner.args(new String[]{inputFileName,outputFileName});runner.process();runner.output.close();Counts counts=runner.fixture.counts;if((counts.exceptions==0)&&(counts.wrong==0)){return 'pass';}else{return 'fail: '+counts.right+' right,'+counts.wrong+' wrong,'+counts.exceptions+' exceptions';}}catch(IOException e){File inputFile=new File(inputFileName);String fileDescription;try{fileDescription=inputFile.getCanonicalPath();}catch(IOException e2){fileDescription=inputFile.getAbsolutePath();}return 'file not found: '+fileDescription;}}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "fitlibraryforfitnesse-20100806",
        "package": "fitlibraryGeneric.list",
        "class": "ListParser2",
        "method": "parseTable(Table,TestResults)",
        "github_url": "https://github.com/JavaQualitasCorpus/fitlibraryforfitnesse-20110301/blob/ceb5abcce236ae380cc0745a7920f82cfba69a19/fitnesse/lib/src/fitlibrarySrc/fitlibraryGeneric/list/ListParser2.java#L38-L64",
        "source_code": "@Override protected List<Object>parseTable(Table table,TestResults testResults){switch(componentTyped.typeCases()){case CLASS_TYPE: if(componentTyped.isEffectivelyPrimitive()|| componentTyped.isEnum()){ArraySetUpTraverse setUpTraverse=new ArraySetUpTraverse(componentTyped.asClass(),componentTyped.parser(evaluator));setUpTraverse.setRuntimeContext(evaluator.getRuntimeContext());setUpTraverse.interpretAfterFirstRow(table,testResults);Object array=setUpTraverse.getResults();List<Object>result=new ArrayList<Object>();for(int i=0;i<Array.getLength(array);i++)result.add(Array.get(array,i));return result;}if(componentTyped.isArray())return parseNested(table,testResults);if(CollectionSetUpTraverse.hasObjectFactoryMethodFor(table,evaluator))return super.parseTable(table,testResults);ListSetUpTraverse2 setUp=new ListSetUpTraverse2(componentTyped.asClass());setUp.interpretWithinScope(table,evaluator.getRuntimeContext(),testResults);return setUp.getResults();case PARAMETERIZED_TYPE: return parseNested(table,testResults);default: throw new FitLibraryException('Type not sufficiently bound: '+componentTyped);}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "freecol-0.10.3",
        "package": "net.sf.freecol.client.gui",
        "class": "TilePopup",
        "method": "TilePopup(Tile,FreeColClient,Canvas,GUI)",
        "github_url": "https://github.com/JavaQualitasCorpus/freecol-0.10.3/blob/a7759ed9f841b80db59581b4a25c0501be091a51/src/net/sf/freecol/client/gui/TilePopup.java#L91-L388",
        "source_code": "public TilePopup(final Tile tile,final FreeColClient freeColClient,final Canvas canvas,final GUI gui){super(Messages.message(StringTemplate.template('tile').addAmount('%x%',tile.getX()).addAmount('%y%',tile.getY())));this.canvas=canvas;this.freeColClient=freeColClient;this.gui=gui;final Player player=freeColClient.getMyPlayer();final Unit activeUnit=gui.getActiveUnit();if(activeUnit!=null){Tile unitTile=activeUnit.getTile();JMenuItem gotoMenuItem=null;if(activeUnit.isOffensiveUnit()&& unitTile.isAdjacent(tile)&& activeUnit.getMoveType(tile).isAttack()){CombatOdds combatOdds=activeUnit.getGame().getCombatModel().calculateCombatOdds(activeUnit,tile.getDefendingUnit(activeUnit));String victoryPercent;if(tile.getSettlement()!=null || combatOdds.win==CombatOdds.UNKNOWN_ODDS){victoryPercent='??';}else{victoryPercent=Integer.toString((int)(combatOdds.win*100));}gotoMenuItem=new JMenuItem(Messages.message(StringTemplate.template('attackTileOdds').addName('%chance%',victoryPercent)));}else if(activeUnit.getSimpleMoveType(unitTile,tile).isLegal()){gotoMenuItem=new JMenuItem(Messages.message('gotoThisTile'));}if(gotoMenuItem!=null){gotoMenuItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){if(freeColClient.getGame().getCurrentPlayer()!=player){return;}Tile currTile=activeUnit.getTile();if(currTile==tile){return;}freeColClient.getInGameController().setDestination(activeUnit,tile);freeColClient.getInGameController().moveToDestination(activeUnit);if(activeUnit.getTile()==currTile){gui.updateGotoPathForActiveUnit();}}});add(gotoMenuItem);hasAnItem=true;}if(unitTile==tile && activeUnit.isNaval()&& activeUnit.canMoveToEurope()){JMenuItem europeMenuItem=new JMenuItem(Messages.message(StringTemplate.template('gotoEurope')));europeMenuItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){if(freeColClient.getGame().getCurrentPlayer()!=player){return;}freeColClient.getInGameController().moveToEurope(activeUnit);}});add(europeMenuItem);hasAnItem=true;}if(hasAnItem)addSeparator();}Settlement settlement=tile.getSettlement();if(settlement!=null){if(settlement.getOwner()==player){addColony(((Colony)settlement));}else if(settlement instanceof IndianSettlement){addIndianSettlement((IndianSettlement)settlement);}if(hasItem()){addSeparator();}}addTile(tile);addSeparator();int lineCount=0;int maxUnits=UNIT_LINES_IN_FIRST_MENU;Container currentMenu=this;boolean moreUnits=false;List<Unit>units=tile.getUnitList();Collections.sort(units,ReportPanel.unitTypeComparator);for(final Unit currentUnit : units){if(lineCount>maxUnits){JMenu more=new JMenu(Messages.message('more'));more.setFont(more.getFont().deriveFont(Font.ITALIC));more.setOpaque(false);currentMenu.add(more);currentMenu=more;moreUnits=true;lineCount=0;maxUnits=UNIT_LINES_IN_OTHER_MENUS;}lineCount+=addUnit(currentMenu,currentUnit,!currentUnit.isUnderRepair(),false);}if(tile.getUnitCount()>1){if(moreUnits){addSeparator();}JMenuItem activateAllItem=new JMenuItem(Messages.message('activateAllUnits'));activateAllItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){Unit lastUnit=null;for(Unit unit : tile.getUnitList()){freeColClient.getInGameController().clearOrders(unit);lastUnit=unit;}gui.setActiveUnit(lastUnit);}});add(activateAllItem);}if(FreeCol.isInDebugMode()&& freeColClient.getFreeColServer()!=null){final Game serverGame=freeColClient.getFreeColServer().getGame();final Player serverPlayer=(Player)serverGame.getFreeColGameObject(player.getId());boolean notEmpty=false;addSeparator();JMenu takeOwnership=new JMenu('Take ownership');takeOwnership.setOpaque(false);JMenu transportLists=new JMenu('Transport lists');transportLists.setOpaque(false);for(final Unit currentUnit : tile.getUnitList()){JMenuItem toMenuItem=new JMenuItem(currentUnit.toString());toMenuItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){final Unit serverUnit=(Unit)serverGame.getFreeColGameObject(currentUnit.getId());serverUnit.setOwner(serverPlayer);for(Unit serverChildUnit : currentUnit.getUnitList()){serverChildUnit.setOwner(serverPlayer);}freeColClient.getConnectController().reconnect();}});takeOwnership.add(toMenuItem);notEmpty=true;if(currentUnit.isCarrier()){final AIUnit au=freeColClient.getFreeColServer().getAIMain().getAIUnit(currentUnit);if(au.getMission()!=null && au.getMission()instanceof TransportMission){JMenuItem menuItem=new JMenuItem(currentUnit.toString());menuItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){canvas.showInformationMessage(au.getMission().toString());}});transportLists.add(menuItem);}}}if(transportLists.getItemCount()>0){add(transportLists);}if(tile.getColony()!=null){if(!notEmpty){takeOwnership.addSeparator();}JMenuItem toMenuItem=new JMenuItem(tile.getSettlement().toString());toMenuItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){final Tile serverTile=(Tile)serverGame.getFreeColGameObject(tile.getId());serverTile.getSettlement().changeOwner(serverPlayer);freeColClient.getConnectController().reconnect();}});takeOwnership.add(toMenuItem);notEmpty=true;JMenuItem displayColonyPlan=new JMenuItem('Display Colony Plan');displayColonyPlan.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){final Tile serverTile=(Tile)serverGame.getFreeColGameObject(tile.getId());final AIColony ac=freeColClient.getFreeColServer().getAIMain().getAIColony(serverTile.getColony());StringBuilder info=new StringBuilder(ac.getColonyPlan().toString());info.append(' TILE IMPROVEMENTS: ');Iterator<TileImprovementPlan>tipIt=ac.getTileImprovementPlanIterator();while(tipIt.hasNext()){info.append(tipIt.next().toString());info.append(' ');}info.append(' WISHES: ');Iterator<Wish>wishIterator=ac.getWishIterator();while(wishIterator.hasNext()){info.append(wishIterator.next().toString());info.append(' ');}info.append(' EXPORT GOODS: ');Iterator<AIGoods>goodsIterator=ac.getAIGoodsIterator();while(goodsIterator.hasNext()){info.append(goodsIterator.next().toString());info.append(' ');}canvas.showInformationMessage(info.toString());}});add(displayColonyPlan);}if(tile.getIndianSettlement()!=null){JMenuItem displayGoods=new JMenuItem('Examine Settlement');final IndianSettlement is=tile.getIndianSettlement();displayGoods.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){final IndianSettlement sis=(IndianSettlement)serverGame.getFreeColGameObject(is.getId());canvas.showInformationMessage(debugSummarizeSettlement(serverGame,sis));}});add(displayGoods);}if(notEmpty){add(takeOwnership);hasAnItem=true;}if(tile.hasLostCityRumour()){JMenuItem rumourItem=new JMenuItem('Set Lost City Rumour type');rumourItem.setOpaque(false);rumourItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){debugSetRumourType(serverGame,tile);}});add(rumourItem);}JMenuItem addu=new JMenuItem('Add unit');addu.setOpaque(false);addu.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){debugAddNewUnitToTile(serverGame,tile);}});add(addu);JMenuItem dumpItem=new JMenuItem('Dump tile');dumpItem.setOpaque(false);dumpItem.addActionListener(new ActionListener(){public void actionPerformed(ActionEvent event){System.err.println(' Client side:');tile.dumpObject();System.err.println(' Server side:');serverGame.getFreeColGameObject(tile.getId()).dumpObject();System.err.println(' ');}});add(dumpItem);}Component lastComponent=getComponent(getComponentCount()-1);if(lastComponent instanceof JSeparator){remove(lastComponent);}}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "freecol-0.10.3",
        "package": "net.sf.freecol.common.model",
        "class": "SimpleCombatModel",
        "method": "resolveAttack(Unit,Unit,boolean,float,List)",
        "github_url": "https://github.com/JavaQualitasCorpus/freecol-0.10.3/blob/a7759ed9f841b80db59581b4a25c0501be091a51/src/net/sf/freecol/common/model/SimpleCombatModel.java#L513-L671",
        "source_code": "private void resolveAttack(Unit winner,Unit loser,boolean great,float r,List<CombatResult>crs){Player loserPlayer=loser.getOwner();Tile tile=loser.getTile();Player winnerPlayer=winner.getOwner();boolean attackerWon=crs.get(0)==CombatResult.WIN;if(loser.isNaval()){if(winner.isNaval()&& winner.canCaptureGoods()&& !loser.getGoodsList().isEmpty()){crs.add(CombatResult.LOOT_SHIP);}if(great || loser.getRepairLocation(null)==null || isBeached(loser)){crs.add(CombatResult.SINK_SHIP_ATTACK);}else{crs.add(CombatResult.DAMAGE_SHIP_ATTACK);}}else{Settlement settlement=tile.getSettlement();EquipmentType autoEquip=null;EquipmentType equip=null;boolean loserWasUnarmed=!loser.isDefensiveUnit();if(settlement instanceof Colony){autoEquip=loser.getBestCombatEquipmentType(loser.getAutomaticEquipment());if(autoEquip!=null){crs.add(CombatResult.AUTOEQUIP_UNIT);loserWasUnarmed=false;}}if(settlement instanceof Colony && loserWasUnarmed){Colony colony=(Colony)settlement;CombatResult colonyResult=(winnerPlayer.isEuropean())? CombatResult.CAPTURE_COLONY :(!great && colony.canBePillaged(winner))? CombatResult.PILLAGE_COLONY :(colony.getUnitCount()>1 || loser.getLocation()==tile)? CombatResult.SLAUGHTER_UNIT : CombatResult.DESTROY_COLONY;if(colonyResult==CombatResult.CAPTURE_COLONY || colonyResult==CombatResult.DESTROY_COLONY){CombatResult shipResult=null;List<Colony>exclude=new ArrayList<Colony>();exclude.add(colony);shipResult=(colony.getShipList().isEmpty())? null :(colony.getShipList().get(0).getRepairLocation(exclude)==null)? CombatResult.SINK_COLONY_SHIPS : CombatResult.DAMAGE_COLONY_SHIPS;if(shipResult!=null)crs.add(shipResult);}crs.add(colonyResult);}else if(settlement instanceof IndianSettlement){IndianSettlement is=(IndianSettlement)settlement;int lose=1;if(attackerWon){if(r<winner.getConvertProbability()){if(is.getUnitCount()+tile.getUnitCount()>1 && is.getMissionary(winnerPlayer)!=null && winner.getTile()!=null && winner.getTile().isLand()){crs.add(CombatResult.CAPTURE_CONVERT);lose++;}}else if(r>=1.0f-winner.getBurnProbability()){for(IndianSettlement s : loserPlayer.getIndianSettlements()){if(s.getMissionary(winnerPlayer)!=null){crs.add(CombatResult.BURN_MISSIONS);break;}}}}crs.add(CombatResult.SLAUGHTER_UNIT);if(settlement.getUnitCount()+tile.getUnitCount()<=lose){crs.add(CombatResult.DESTROY_SETTLEMENT);}}else if(loser.hasAbility('model.ability.disposeOnCombatLoss')){crs.add(CombatResult.SLAUGHTER_UNIT);}else if((equip=loser.getBestCombatEquipmentType(loser.getEquipment()))!=null){crs.add((loser.losingEquipmentKillsUnit(equip))? CombatResult.SLAUGHTER_UNIT :(winner.canCaptureEquipment(equip,loser)!=null)? CombatResult.CAPTURE_EQUIP : CombatResult.LOSE_EQUIP);}else if(settlement instanceof Colony && autoEquip!=null){crs.add((loser.losingEquipmentKillsUnit(autoEquip))? CombatResult.SLAUGHTER_UNIT :(winner.canCaptureEquipment(autoEquip,loser)!=null)? CombatResult.CAPTURE_AUTOEQUIP : CombatResult.LOSE_AUTOEQUIP);}else if(loser.getTypeChange(ChangeType.DEMOTION,loserPlayer)!=null){crs.add(CombatResult.DEMOTE_UNIT);}else if(loser.hasAbility(Ability.CAN_BE_CAPTURED)&& winner.hasAbility(Ability.CAPTURE_UNITS)&& !combatIsAmphibious(winner,loser)){crs.add(CombatResult.CAPTURE_UNIT);}else{crs.add(CombatResult.SLAUGHTER_UNIT);}}UnitTypeChange promotion=winner.getType().getUnitTypeChange(ChangeType.PROMOTION,winnerPlayer);if(promotion!=null &&(winner.hasAbility('model.ability.automaticPromotion')||(great &&(100*(r-Math.floor(r))<=promotion.getProbability(ChangeType.PROMOTION))))){crs.add(CombatResult.PROMOTE_UNIT);}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "freecs-1.3.20100406",
        "package": "freecs.auth.sqlConnectionPool",
        "class": "PoolElement",
        "method": "logoutUser(User)",
        "github_url": "https://github.com/JavaQualitasCorpus/freecs-1.3.20100406/blob/5dbddcb702830f9d2476cb52b4706661cfcca87f/src/freecs/auth/sqlConnectionPool/PoolElement.java#L557-L692",
        "source_code": "public void logoutUser(User u)throws Exception{try{if(dbp.readOnly || dbp.updCols==null || dbp.updCols.length<1)return;PreparedStatement ps=getUpdate();for(int i=0;i<dbp.updCols.length;i++){String cname=dbp.updNames[i];if('chattime'.equalsIgnoreCase(cname)){ps.setLong(i+1,u.getChattime());}else if('userrights'.equalsIgnoreCase(cname)){ps.setInt(i+1,u.getPermissionMap());}else if('fadecolor'.equalsIgnoreCase(cname)){ps.setString(i+1,u.getFadeColCode());}else if('bgcolor'.equalsIgnoreCase(cname)){ps.setString(i+1,u.getBgColCode());}else if('color'.equalsIgnoreCase(cname)){ps.setString(i+1,u.getColCode());}else if('friends'.equalsIgnoreCase(cname)){StringBuffer sb=new StringBuffer();for(Enumeration<?>e=u.friends();e.hasMoreElements();){String s=(String)e.nextElement();sb.append(s);if(e.hasMoreElements())sb.append(',');}ps.setString(i+1,sb.toString());}else if('ignorelist'.equalsIgnoreCase(cname)){StringBuffer sb=new StringBuffer();for(Enumeration<String>e=u.ignoreList();e.hasMoreElements();){String s=(String)e.nextElement();sb.append(s);if(e.hasMoreElements())sb.append(',');}ps.setString(i+1,sb.toString());}else if('notifyfriends'.equalsIgnoreCase(cname)){int idx=dbp.nameV.indexOf('notifyfriends');switch(dbp.types[idx]){case Types.BIGINT: case Types.BIT: case Types.DECIMAL: case Types.INTEGER: case Types.SMALLINT: ps.setInt(i+1,u.notifyFriends());break;case Types.BOOLEAN: ps.setBoolean(i+1,u.notifyFriends()==User.FN_ALL ? true : false);break;default: ps.setString(i+1,u.notifyFriends()==User.FN_ALL ? 'true' : 'false');}}else if('extratitle'.equalsIgnoreCase(cname)){ps.setString(i+1,u.getCustomTitle());}else if('cookie'.equalsIgnoreCase(cname)){ps.setString(i+1,'not_logged_in');}else if('blocked'.equalsIgnoreCase(cname)){int idx=dbp.nameV.indexOf('blocked');switch(dbp.types[idx]){case Types.BIGINT: case Types.BIT: case Types.DECIMAL: case Types.INTEGER: case Types.SMALLINT: ps.setInt(i+1,u.blocked ? 1 : 0);break;case Types.BOOLEAN: ps.setBoolean(i+1,u.blocked);break;default: ps.setString(i+1,u.blocked ? '1' : '0');}}else if('activated'.equalsIgnoreCase(cname)){int idx=dbp.nameV.indexOf('activated');switch(dbp.types[idx]){case Types.BIGINT: case Types.BIT: case Types.DECIMAL: case Types.INTEGER: case Types.SMALLINT: ps.setInt(i+1,u.activated ? 1 : 0);break;case Types.BOOLEAN: ps.setBoolean(i+1,u.activated);break;default: ps.setString(i+1,u.activated ? '1' : '0');}}else{Server.log(this,'save custom Property '+cname,Server.MSG_AUTH,Server.LVL_VERBOSE);int idx=dbp.nameV.indexOf(cname);switch(dbp.types[idx]){case Types.BIGINT: case Types.BIT: case Types.DECIMAL: case Types.INTEGER: case Types.SMALLINT: case Types.BOOLEAN: default: ps.setObject(i+1,u.getProperty(cname));}}}if(dbp.idField!=null){if(u.getID()==null){Server.log(u,'Unable to store logout-data for '+u.getName()+' because of missing id-value',Server.MSG_AUTH,Server.LVL_MAJOR);return;}ps.setString(dbp.updCols.length+1,u.getID());}else{ps.setString(dbp.updCols.length+1,u.getName().toLowerCase());}int rows=ps.executeUpdate();sCnt++;if(rows==1){con.commit();}else if(rows<1){Server.log(Thread.currentThread(),this.toString()+'LOGOUT unable to update userdata! No record for: '+dbp.idField!=null ? dbp.idField+'='+u.getID(): 'username='+u.getName().toLowerCase(),Server.MSG_AUTH,Server.LVL_MAJOR);return;}else if(rows>1){Server.log(Thread.currentThread(),this.toString()+'LOGOUT unable to update userdata! More than one value would be updated:('+dbp.idField!=null ? dbp.idField+'='+u.getID(): 'username='+u.getName().toLowerCase()+')',Server.MSG_AUTH,Server.LVL_MAJOR);try{con.rollback();Server.log(Thread.currentThread(),this.toString()+'LOGOUT rollback successfully',Server.MSG_AUTH,Server.LVL_VERBOSE);}catch(SQLException se){Server.log(Thread.currentThread(),this.toString()+'LOGOUT rollback failed!!!',Server.MSG_AUTH,Server.LVL_MAJOR);}}checkWarnings(ps,'logoutUser');}catch(Exception e){isValid=false;release();throw e;}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "freecs-1.3.20100406",
        "package": "freecs.auth.sqlConnectionPool",
        "class": "PoolElement",
        "method": "readColumns(User,ResultSet)",
        "github_url": "https://github.com/JavaQualitasCorpus/freecs-1.3.20100406/blob/5dbddcb702830f9d2476cb52b4706661cfcca87f/src/freecs/auth/sqlConnectionPool/PoolElement.java#L398-L505",
        "source_code": "private void readColumns(User u,ResultSet rs)throws SQLException{for(int i=0;i<dbp.columns.length;i++){String cname=dbp.names[i];int idx=i+1;if('userright'.equals(cname)){String val=rs.getString(idx);if(val==null || val.length()==0 || 'null'.equalsIgnoreCase(val)){u.setPermission(IUserStates.ROLE_USER);}else if('true'.equalsIgnoreCase(val)|| 'yes'.equalsIgnoreCase(val)|| 'vip'.equalsIgnoreCase(val)){u.setPermission(IUserStates.ROLE_VIP);}else if('admin'.equalsIgnoreCase(val)){u.setPermission(IUserStates.ROLE_GOD);}else if('moderator'.equalsIgnoreCase(val)){u.setPermission(IUserStates.ROLE_VIP | IUserStates.IS_MODERATOR);}else if('guest'.equalsIgnoreCase(val)){u.setPermission(IUserStates.IS_GUEST);}else if('asshole'.equalsIgnoreCase(val)){u.setPermission(IUserStates.ROLE_ASSHOLE);}else{try{u.setPermission(Integer.parseInt(val));}catch(NumberFormatException nfe){Server.log(Thread.currentThread(),this.toString()+'LOGIN userrights-column contains unknown value,corrected to ROLE_USER(must be null/true,yes,vip or VIP/admin/moderator/guest/user/assohle)',Server.MSG_AUTH,Server.LVL_MAJOR);u.setPermission(IUserStates.ROLE_USER);}}}else if('id'.equals(cname)){u.setID(rs.getString(idx));}else if('color'.equals(cname)){u.setColCode(rs.getString(idx));}else if('fadecolor'.equals(cname)){Server.srv.USE_FADECOLOR=true;if(rs.getString(idx)!=null){u.setFadeColCode(rs.getString(idx));}}else if('bgcolor'.equals(cname)){Server.srv.USE_BGCOLOR=true;if(rs.getString(idx)!=null){u.setBgColCode(rs.getString(idx));}}else if('chattime'.equals(cname)){u.setProperty('chattime',new Long(rs.getLong(idx)));}else if('lastlogin'.equals(cname)){switch(dbp.types[i]){case Types.BIGINT: case Types.INTEGER: case Types.NUMERIC: case Types.SMALLINT: u.setProperty('lastlogin',new Timestamp(rs.getLong(idx)));break;case Types.DATE: case Types.TIMESTAMP: Timestamp ts=rs.getTimestamp(idx);u.setProperty('lastlogin',ts);break;default: String s=rs.getString(idx);if(rs.wasNull()){u.setProperty('lastlogin',new Timestamp(System.currentTimeMillis()));break;}try{long l=Long.parseLong(s);u.setProperty('lastlogin',new Timestamp(l));}catch(NumberFormatException nfe){try{u.setProperty('lastlogin',Timestamp.valueOf(s));}catch(IllegalArgumentException iae){Server.log(this,'LOGIN Unable to retrieve lastlogin-value! '+s,Server.MSG_AUTH,Server.LVL_MAJOR);}}}}else if('friends'.equals(cname)){List<?>users=pool.authenticator.parseUserList(rs.getString(idx));for(Iterator<?>it=users.iterator();it.hasNext();){u.addFriend((String)it.next());}}else if('ignorelist'.equals(cname)){List<?>ignores=pool.authenticator.parseUserList(rs.getString(idx));for(Iterator<?>it=ignores.iterator();it.hasNext();){u.ignoreUser((String)it.next());}}else if('notifyfriends'.equals(cname)){switch(dbp.types[i]){case Types.BIGINT: case Types.INTEGER: case Types.NUMERIC: case Types.SMALLINT: u.setFriendsNotification(rs.getShort(idx));break;default: u.setFriendsNotification(pool.authenticator.parseBoolean(rs.getString(idx))? Server.srv.FN_DEFAULT_MODE_TRUE : Server.srv.FN_DEFAULT_MODE_FALSE);}}else if('customtitle'.equals(cname)){u.setCustomTitle(rs.getString(idx));}else if('blocked'.equals(cname)){u.blocked=pool.authenticator.parseBoolean(rs.getString(idx));}else if('activated'.equals(cname)){u.activated=pool.authenticator.parseBoolean(rs.getString(idx));}else{String strg=getEncodedString(rs,idx);u.setProperty(cname,strg);}}}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "freecs-1.3.20100406",
        "package": "freecs.commands",
        "class": "CmdKickToRoom",
        "method": "execute(MessageState,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/freecs-1.3.20100406/blob/5dbddcb702830f9d2476cb52b4706661cfcca87f/src/freecs/commands/CmdKickToRoom.java#L63-L182",
        "source_code": "public boolean execute(MessageState msgState,String param){if(isPunished(msgState))return false;String grpname=null;boolean mayKick=msgState.sender.hasRight(IUserStates.MAY_KICK);if(!mayKick){msgState.msgTemplate='error.noRight.noVipAdmin';msgState.sender.sendMessage(msgState.mp);return false;}int pos1=param.indexOf(' ');int pos2=param.indexOf(':');boolean multiUser=(pos1!=-1 &&(pos2>pos1+1 || pos2==-1));if(multiUser && !msgState.sender.hasRight(IUserStates.ROLE_VIP)){msgState.msgTemplate='error.mass.noRight.noVipAdmin';msgState.sender.sendMessage(msgState.mp);return false;}if(pos2>-1){String[]parts=param.split(':');param=parts[0];msgState.targetGroup=GroupManager.mgr.getGroup(parts[1]);grpname=parts[1];}else{msgState.msgTemplate='error.kc.noroom';msgState.sender.sendMessage(msgState.mp);return false;}Vector<User>found=getMultibleUsers(msgState,param);boolean created=false;GroupUserList gul=new GroupUserList();msgState.useRenderCache=false;for(Iterator<User>i=found.iterator();i.hasNext();){User cu=(User)i.next();msgState.sourceGroup=cu.getGroup();if(cu.hasRight(IUserStates.ROLE_GOD)){msgState.usercontext=cu;msgState.msgTemplate='error.noRight.isAdmin';msgState.sender.sendMessage(msgState.mp);i.remove();msgState.param=grpname;msgState.msgTemplate='message.kc.godinfo';cu.sendMessage(msgState.mp);continue;}else if(cu.hasRight(IUserStates.ROLE_VIP)&& !msgState.sender.hasRight(IUserStates.ROLE_GOD)){msgState.usercontext=cu;msgState.msgTemplate='error.noRight.isVip';msgState.sender.sendMessage(msgState.mp);i.remove();continue;}else if(cu.hasRight(IUserStates.PROTECTED_FROM_KICK)&& !msgState.sender.hasRight(IUserStates.ROLE_GOD)){msgState.msgTemplate='error.k.protected';msgState.usercontext=cu;msgState.sender.sendMessage(msgState.mp);i.remove();continue;}else if(!msgState.sender.hasRight(IUserStates.ROLE_GOD)&& !isVip(msgState.sender,cu.getGroup(),msgState)){msgState.targetGroup=cu.getGroup();if(msgState.usrList.length>1)msgState.msgTemplate='error.membership.notMember.many';else msgState.msgTemplate='error.membership.notMember';msgState.usercontext=cu;msgState.sender.sendMessage(msgState.mp);i.remove();continue;}if(msgState.targetGroup==null){msgState.targetGroup=GroupManager.mgr.openGroup(grpname,'punished users here',cu,msgState.sender);if(msgState.targetGroup==null){msgState.param='';msgState.usercontext=cu;msgState.msgTemplate='error.k.noGroupRight';msgState.sender.sendMessage(msgState.mp);return false;}created=true;}else if(!msgState.targetGroup.usrMayJoin(msgState.sender)){msgState.param='';msgState.usercontext=cu;msgState.msgTemplate='error.k.noGroupRight';msgState.sender.sendMessage(msgState.mp);return false;}msgState.usercontext=cu;gul.addUser(cu);msgState.targetGroup.addUser(cu,msgState.sender);msgState.targetGroup.removeFromSusers(cu);msgState.msgTemplate='message.kc.personal';cu.sendMessage(msgState.mp);}if(found.size()==0)return false;if(found.size()==1){msgState.msgTemplate='message.kc.destination.singular';msgState.targetGroup.exclusiveSendMessage(msgState.mp,found);if(!msgState.sender.getGroup().equals(msgState.sourceGroup)){msgState.msgTemplate='message.kc.confirm.singular';msgState.sender.sendMessage(msgState.mp);}if(msgState.sourceGroup!=null){msgState.msgTemplate='message.kc.singular';msgState.sourceGroup.sendMessage(msgState.mp);}return true;}msgState.usrList=found.toArray();gul.sendMessage(msgState,'message.kc',false);msgState.msgTemplate='message.kc.destination.plural';msgState.targetGroup.exclusiveSendMessage(msgState.mp,found);msgState.msgTemplate='message.kc.confirm.plural';msgState.sender.sendMessage(msgState.mp);return true;}"
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "freecs-1.3.20100406",
        "package": "freecs.util",
        "class": "HtmlEncoder",
        "method": "encode(String,StringBuffer,boolean,Set)",
        "github_url": "https://github.com/JavaQualitasCorpus/freecs-1.3.20100406/blob/5dbddcb702830f9d2476cb52b4706661cfcca87f/src/freecs/util/HtmlEncoder.java#L420-L836",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.common",
        "class": "OptionalDontShowMeAgainDialog",
        "method": "OptionalDontShowMeAgainDialog(Component, TextTranslator, int, String, JFrame, String, DontShowPropertyHandler)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/common/OptionalDontShowMeAgainDialog.java#L100-L109",
        "source_code": "public OptionalDontShowMeAgainDialog(JFrame pFrame,Component pComponent,String pMessageId,String pTitleId,TextTranslator pTextTranslator,DontShowPropertyHandler pDontShowPropertyHandler,int pMessageType){mComponent=pComponent;mParent=pFrame;mMessageId=pMessageId;mTitleId=pTitleId;mTextTranslator=pTextTranslator;mDontShowPropertyHandler=pDontShowPropertyHandler;mMessageType=pMessageType;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.controller",
        "class": "MapModuleManager.MapModuleChangeObserverCompound",
        "method": "afterMapModuleChange(MapModule, Mode, MapModule, Mode)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/controller/MapModuleManager.java#L98-L103",
        "source_code": "public void afterMapModuleChange(MapModule oldMapModule,Mode oldMode,MapModule newMapModule,Mode newMode){for(Iterator iter=new Vector(listeners).iterator();iter.hasNext();){MapModuleChangeObserver observer=(MapModuleChangeObserver)iter.next();observer.afterMapModuleChange(oldMapModule,oldMode,newMapModule,newMode);}}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.controller.filter",
        "class": "FilterComposerDialog.SelectedAttributeChangeListener",
        "method": "itemStateChanged(ItemEvent)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/controller/filter/FilterComposerDialog.java#L375-L429",
        "source_code": "public void itemStateChanged(ItemEvent e){if(e.getStateChange()==ItemEvent.SELECTED){if(attributes.getSelectedIndex()==NODE_POSITION){simpleCondition.setModel(simpleNodeConditionComboBoxModel);simpleCondition.setEnabled(true);values.setEditable(true);values.setEnabled(true);nodes.setExtensionList(null);values.setModel(nodes);caseInsensitive.setEnabled(true);return;}if(attributes.getSelectedIndex()==ICON_POSITION){simpleCondition.setModel(simpleIconConditionComboBoxModel);simpleCondition.setSelectedIndex(0);simpleCondition.setEnabled(false);values.setEditable(false);values.setEnabled(true);values.setModel(icons);if(icons.getSize()>=1){values.setSelectedIndex(0);}caseInsensitive.setEnabled(false);return;}if(attributes.getSelectedIndex()>NODE_POSITION){final String attributeName=attributes.getSelectedItem().toString();nodes.setExtensionList(registeredAttributes.getElement(attributeName).getValues());values.setModel(nodes);if(values.getSelectedItem()!=null){if(nodes.getSize()>=1){values.setSelectedIndex(0);}else{values.setSelectedItem(null);}}if(simpleCondition.getModel()!=simpleAttributeConditionComboBoxModel){simpleCondition.setModel(simpleAttributeConditionComboBoxModel);simpleCondition.setSelectedIndex(0);}if(simpleCondition.getSelectedIndex()==0){caseInsensitive.setEnabled(false);values.setEnabled(false);}values.setEditable(true);simpleCondition.setEnabled(true);return;}}}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.extensions",
        "class": "ImportWizard",
        "method": "addClassesFromDir(Vector, File, File, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/extensions/ImportWizard.java#L158-L217",
        "source_code": "public void addClassesFromDir(Vector classList,File rootDir,File currentDir,int recursionLevel){if(recursionLevel>=6){return;}String[]files=currentDir.list();if(files!=null){for(int i=0;i<files.length;i++){String current=files[i];logger.info('looking at: '+current);if(isInteresting(current)){String rootPath=rootDir.getPath();String currentPath=currentDir.getPath();if(!currentPath.startsWith(rootPath)){logger.severe('currentPath doesn't start with rootPath! '+'rootPath: '+rootPath+' '+'currentPath: '+currentPath+' ');}else{current=current.substring(0,current.length()-lookFor.length());String packageName=currentPath.substring(rootPath.length());String fileName;if(packageName.length()>0){fileName=packageName.substring(1)+File.separator+current;}else{fileName=current;}classList.addElement(fileName);logger.info('Found: '+fileName);}}else{File currentFile=new File(currentDir,current);if(currentFile.isDirectory()){addClassesFromDir(classList,rootDir,currentFile,recursionLevel+1);}}}}}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.main",
        "class": "FreeMind",
        "method": "setScreenBounds()",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/main/FreeMind.java#L773-L955",
        "source_code": "private void setScreenBounds(){menuBar=new MenuBar(controller);setJMenuBar(menuBar);mScrollPane=new MapView.ScrollPane();if(Resources.getInstance().getBoolProperty('no_scrollbar')){mScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);mScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);}else{mScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);mScrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);}status=new JLabel('!');status.setPreferredSize(status.getPreferredSize());status.setText('');mContentComponent=mScrollPane;boolean shouldUseTabbedPane=Resources.getInstance().getBoolProperty(RESOURCES_USE_TABBED_PANE);if(shouldUseTabbedPane){InputMap map;map=(InputMap)UIManager.get('TabbedPane.ancestorInputMap');KeyStroke keyStrokeCtrlUp=KeyStroke.getKeyStroke(KeyEvent.VK_UP,InputEvent.CTRL_DOWN_MASK);map.remove(keyStrokeCtrlUp);mTabbedPane=new JTabbedPane();mTabbedPane.setFocusable(false);mTabbedPaneMapModules=new Vector();mTabbedPane.addChangeListener(new ChangeListener(){public synchronized void stateChanged(ChangeEvent pE){tabSelectionChanged();}});controller.getMapModuleManager().addListener(new MapModuleChangeObserver(){public void afterMapModuleChange(MapModule pOldMapModule,Mode pOldMode,MapModule pNewMapModule,Mode pNewMode){int selectedIndex=mTabbedPane.getSelectedIndex();if(pNewMapModule==null){return;}for(int i=0;i<mTabbedPaneMapModules.size();++i){if(mTabbedPaneMapModules.get(i)==pNewMapModule){if(selectedIndex!=i){mTabbedPane.setSelectedIndex(i);}return;}}mTabbedPaneMapModules.add(pNewMapModule);mTabbedPane.addTab(pNewMapModule.toString(),new JPanel());mTabbedPane.setSelectedIndex(mTabbedPane.getTabCount()-1);}public void beforeMapModuleChange(MapModule pOldMapModule,Mode pOldMode,MapModule pNewMapModule,Mode pNewMode){}public boolean isMapModuleChangeAllowed(MapModule pOldMapModule,Mode pOldMode,MapModule pNewMapModule,Mode pNewMode){return true;}public void numberOfOpenMapInformation(int pNumber){}public void afterMapClose(MapModule pOldMapModule,Mode pOldMode){for(int i=0;i<mTabbedPaneMapModules.size();++i){if(mTabbedPaneMapModules.get(i)==pOldMapModule){logger.fine('Remove tab:'+i+' with title:'+mTabbedPane.getTitleAt(i));mTabbedPaneSelectionUpdate=false;mTabbedPane.removeTabAt(i);mTabbedPaneMapModules.remove(i);mTabbedPaneSelectionUpdate=true;tabSelectionChanged();return;}}}});controller.registerMapTitleChangeListener(new MapModuleManager.MapTitleChangeListener(){public void setMapTitle(String pNewMapTitle,MapModule pMapModule,MindMap pModel){for(int i=0;i<mTabbedPaneMapModules.size();++i){if(mTabbedPaneMapModules.get(i)==pMapModule){mTabbedPane.setTitleAt(i,pNewMapTitle+((pModel.isSaved())? '' : '*'));}}}});getContentPane().add(mTabbedPane,BorderLayout.CENTER);}else{getContentPane().add(mContentComponent,BorderLayout.CENTER);}getContentPane().add(status,BorderLayout.SOUTH);setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);addWindowListener(new WindowAdapter(){public void windowClosing(WindowEvent e){controller.quit.actionPerformed(new ActionEvent(this,0,'quit'));}});if(Tools.safeEquals(getProperty('toolbarVisible'),'false')){controller.setToolbarVisible(false);}if(Tools.safeEquals(getProperty('leftToolbarVisible'),'false')){controller.setLeftToolbarVisible(false);}setFocusTraversalKeysEnabled(false);pack();int win_width=getIntProperty('appwindow_width',0);int win_height=getIntProperty('appwindow_height',0);int win_x=getIntProperty('appwindow_x',0);int win_y=getIntProperty('appwindow_y',0);win_width=(win_width>0)? win_width : 640;win_height=(win_height>0)? win_height : 440;final Toolkit defaultToolkit=Toolkit.getDefaultToolkit();final Insets screenInsets=defaultToolkit.getScreenInsets(getGraphicsConfiguration());Dimension screenSize=defaultToolkit.getScreenSize();final int screenWidth=screenSize.width-screenInsets.left-screenInsets.right;win_width=Math.min(win_width,screenWidth);final int screenHeight=screenSize.height-screenInsets.top-screenInsets.bottom;win_height=Math.min(win_height,screenHeight);win_x=Math.max(screenInsets.left,win_x);win_x=Math.min(screenWidth+screenInsets.left-win_width,win_x);win_y=Math.max(screenInsets.top,win_y);win_y=Math.min(screenWidth+screenInsets.top-win_height,win_y);setBounds(win_x,win_y,win_width,win_height);int win_state=Integer.parseInt(FreeMind.props.getProperty('appwindow_state','0'));win_state=((win_state & ICONIFIED)!=0)? NORMAL : win_state;setExtendedState(win_state);}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.main",
        "class": "HtmlTools",
        "method": "removeInvalidXmlCharacters(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/main/HtmlTools.java#L548-L610",
        "source_code": "public static String removeInvalidXmlCharacters(String text){StringBuffer result=new StringBuffer(text.length());StringBuffer entity=new StringBuffer();boolean readingEntity=false;char myChar;char entityChar;for(int i=0;i<text.length();++i){myChar=text.charAt(i);if(readingEntity){if(myChar==';'){if(entity.charAt(0)=='#'){try{if(entity.charAt(1)=='x'){entityChar=(char)Integer.parseInt(entity.substring(2),16);}else{entityChar=(char)Integer.parseInt(entity.substring(1),10);}if(isXMLValidCharacter(entityChar))result.append('&').append(entity).append(';');}catch(NumberFormatException e){result.append('&').append(entity).append(';');}}else{result.append('&').append(entity).append(';');}entity.setLength(0);readingEntity=false;}else{entity.append(myChar);}}else{if(myChar=='&'){readingEntity=true;}else{if(isXMLValidCharacter(myChar))result.append(myChar);}}}if(entity.length()>0){result.append('&').append(entity).append(';');}return result.toString();}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.main",
        "class": "HtmlTools",
        "method": "unescapeHTMLUnicodeEntity(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/main/HtmlTools.java#L321-L378",
        "source_code": "public static String unescapeHTMLUnicodeEntity(String text){StringBuffer result=new StringBuffer(text.length());StringBuffer entity=new StringBuffer();boolean readingEntity=false;char myChar;char entityChar;for(int i=0;i<text.length();++i){myChar=text.charAt(i);if(readingEntity){if(myChar==';'){if(entity.charAt(0)=='#'){try{if(entity.charAt(1)=='x'){entityChar=(char)Integer.parseInt(entity.substring(2),16);}else{entityChar=(char)Integer.parseInt(entity.substring(1),10);}if(isXMLValidCharacter(entityChar))result.append(entityChar);}catch(NumberFormatException e){result.append('&').append(entity).append(';');}}else{result.append('&').append(entity).append(';');}entity.setLength(0);readingEntity=false;}else{if(isXMLValidCharacter(myChar))entity.append(myChar);}}else{if(myChar=='&'){readingEntity=true;}else{if(isXMLValidCharacter(myChar))result.append(myChar);}}}if(entity.length()>0){result.append('&').append(entity).append(';');}return result.toString();}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.main",
        "class": "XMLElement",
        "method": "scanElement(XMLElement)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/main/XMLElement.java#L2621-L2793",
        "source_code": "protected void scanElement(XMLElement elt)throws IOException{boolean isCollectionMode=false;StringBuffer buf=new StringBuffer();this.scanIdentifier(buf);String name=buf.toString();elt.setName(name);if(XML_NODE_XHTML_CONTENT_TAG.equals(name)){/*special case of html content tag: collect chars until</...>occurs.*/isCollectionMode=true;}char ch=this.scanWhitespace();while((ch!='>')&&(ch!='/')){buf.setLength(0);this.unreadChar(ch);this.scanIdentifier(buf);String key=buf.toString();ch=this.scanWhitespace();if(ch!='='){throw this.expectedInput('=');}this.unreadChar(this.scanWhitespace());buf.setLength(0);this.scanString(buf);elt.setAttribute(key,buf);ch=this.scanWhitespace();}if(ch=='/'){ch=this.readChar();if(ch!='>'){throw this.expectedInput('>');}elt.completeElement();return;}if(isCollectionMode){StringBuffer waitingBuf=new StringBuffer();int lastOpeningBreak=-1;for(;;){ch=this.readChar();waitingBuf.append(ch);if(ch=='<'){lastOpeningBreak=waitingBuf.length()-1;}if(ch=='>' && lastOpeningBreak>=0){String content=waitingBuf.toString();if(sContentEndTagPattern==null){sContentEndTagPattern=Pattern.compile(XML_NODE_XHTML_CONTENT_END_TAG_REGEXP);}String substring=content.substring(lastOpeningBreak);Matcher matcher=sContentEndTagPattern.matcher(substring);if(matcher.matches()){content=content.substring(0,lastOpeningBreak);elt.setContent(content.trim());elt.completeElement();return;}}}}buf.setLength(0);ch=this.scanWhitespace(buf);if(ch!='<'){this.unreadChar(ch);this.scanPCData(buf);}else{for(;;){ch=this.readChar();if(ch=='!'){if(this.checkCDATA(buf)){this.scanPCData(buf);break;}else{ch=this.scanWhitespace(buf);if(ch!='<'){this.unreadChar(ch);this.scanPCData(buf);break;}}}else{buf.setLength(0);break;}}}if(buf.length()==0){while(ch!='/'){if(ch=='!'){ch=this.readChar();if(ch!='-'){throw this.expectedInput('Comment or Element');}ch=this.readChar();if(ch!='-'){throw this.expectedInput('Comment or Element');}this.skipComment();}else{this.unreadChar(ch);XMLElement child=this.createAnotherElement();this.scanElement(child);elt.addChild(child);}ch=this.scanWhitespace();if(ch!='<'){throw this.expectedInput('<');}ch=this.readChar();}this.unreadChar(ch);}else{if(this.ignoreWhitespace){elt.setContent(buf.toString().trim());}else{elt.setContent(buf.toString());}}ch=this.readChar();if(ch!='/'){throw this.expectedInput('/');}this.unreadChar(this.scanWhitespace());if(!this.checkLiteral(name)){throw this.expectedInput(name);}if(this.scanWhitespace()!='>'){throw this.expectedInput('>');}elt.completeElement();}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes",
        "class": "StylePattern",
        "method": "loadPattern(XMLElement,List)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/StylePattern.java#L317-L404",
        "source_code": "protected void loadPattern(XMLElement pattern,List justConstructedPatterns){if(pattern.getStringAttribute('name')!=null){setName(pattern.getStringAttribute('name'));}if(Tools.safeEquals(pattern.getStringAttribute('recursive'),'true')){setRecursive(true);}for(Iterator i=pattern.getChildren().iterator();i.hasNext();){XMLElement child=(XMLElement)i.next();if(child.getName().equals('node')){if(child.getStringAttribute('color')!=null && child.getStringAttribute('color').length()==7){setNodeColor(Tools.xmlToColor(child.getStringAttribute('color')));}if(child.getStringAttribute('background_color')!=null && child.getStringAttribute('background_color').length()==7){setNodeBackgroundColor(Tools.xmlToColor(child.getStringAttribute('background_color')));}if(child.getStringAttribute('style')!=null){setNodeStyle(child.getStringAttribute('style'));}if(child.getStringAttribute('icon')!=null){setNodeIcon(child.getStringAttribute('icon').equals('none')? null : MindIcon.factory(child.getStringAttribute('icon')));}setText(child.getStringAttribute('text'));for(Iterator j=child.getChildren().iterator();j.hasNext();){XMLElement nodeChild=(XMLElement)j.next();if(nodeChild.getName().equals('font')){if(nodeChild.getStringAttribute('name')!=null){setNodeFontFamily(nodeChild.getStringAttribute('name'));}if(Tools.safeEquals(nodeChild.getStringAttribute('bold'),'true')){setNodeFontBold(Boolean.TRUE);}if(Tools.safeEquals(nodeChild.getStringAttribute('italic'),'true')){setNodeFontItalic(Boolean.TRUE);}if(nodeChild.getStringAttribute('size')!=null){setNodeFontSize(Integer.valueOf(nodeChild.getStringAttribute('size')));}}}}if(child.getName().equals('edge')){if(child.getStringAttribute('style')!=null){setEdgeStyle(child.getStringAttribute('style'));}if(child.getStringAttribute('color')!=null){setEdgeColor(Tools.xmlToColor(child.getStringAttribute('color')));}if(child.getStringAttribute('width')!=null){if(child.getStringAttribute('width').equals('thin')){setEdgeWidth(new Integer(freemind.modes.EdgeAdapter.WIDTH_THIN));}else{setEdgeWidth(new Integer(Integer.parseInt(child.getStringAttribute('width'))));}}}if(child.getName().equals('child')){if(child.getStringAttribute('pattern')!=null){String searchName=child.getStringAttribute('pattern');boolean anythingFound=false;for(ListIterator e=justConstructedPatterns.listIterator();e.hasNext();){StylePattern patternFound=(StylePattern)e.next();if(patternFound.getName().equals(searchName)){setChildrenStylePattern(patternFound);anythingFound=true;break;}}if(getName().equals(searchName)){setChildrenStylePattern(this);anythingFound=true;}if(anythingFound==false)System.err.println('Cannot find the children '+searchName+' to the pattern '+getName());}}}}"
    },
    {
        "code_smells": [],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode",
        "class": "MindMapController",
        "method": "setImageByFileChooser()",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/MindMapController.java#L1502-L1548",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode.actions",
        "class": "ImportExplorerFavoritesAction",
        "method": "importExplorerFavorites(File, MindMapNode, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/actions/ImportExplorerFavoritesAction.java#L62-L114",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode.actions",
        "class": "NewChildAction",
        "method": "addNew(MindMapNode,int,KeyEvent)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/actions/NewChildAction.java#L92-L140",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode.actions",
        "class": "PasteAction",
        "method": "pasteStringWithoutRedisplay(Transferable, MindMapNode, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/actions/PasteAction.java#L524-L641",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode.attributeactors",
        "class": "ImportAttributesDialog.MyRenderer",
        "method": "getTreeCellRendererComponent(JTree, boolean, Object, boolean, int, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/attributeactors/ImportAttributesDialog.java#L116-L144",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode.listeners",
        "class": "MindMapNodeDropListener",
        "method": "drop(DropTargetDropEvent)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/listeners/MindMapNodeDropListener.java#L76-L236",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.modes.mindmapmode.listeners",
        "class": "MindMapNodeMotionListener",
        "method": "mouseDragged(MouseEvent e)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/modes/mindmapmode/listeners/MindMapNodeMotionListener.java#L65-L106",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.view.mindmapview",
        "class": "CloudView",
        "method": "paintClouds(double, double, double, double, double, Graphics2D, Graphics2D)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/view/mindmapview/CloudView.java#L137-L155",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.view.mindmapview",
        "class": "NodeView",
        "method": "treeNodesRemoved(TreeModelEvent)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/view/mindmapview/NodeView.java#L1203-L1255",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.view.mindmapview",
        "class": "NodeView",
        "method": "updateText()",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/view/mindmapview/NodeView.java#L758-L834",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.view.mindmapview",
        "class": "PathBBox",
        "method": "accumCubic(double[], double, double, double, double, double, double, double, double, double)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/view/mindmapview/PathBBox.java#L171-L181",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "freemind-0.9.0",
        "package": "freemind.view.mindmapview",
        "class": "PathBBox",
        "method": "accumQuad(double[], double, double, double, double, double, double, double)",
        "github_url": "https://github.com/JavaQualitasCorpus/freemind-0.9.0/blob/6f3a9a1e637b8d174e74881b33d93dcb78b1ff80/freemind/view/mindmapview/PathBBox.java#L135-L144",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod",
            "SwitchStatement"
        ],
        "project": "galleon-2.3.0",
        "package": "org.lnicholls.galleon.apps.email",
        "class": "org.lnicholls.galleon.apps.email.Email$3",
        "method": "run()",
        "github_url": "https://github.com/JavaQualitasCorpus/galleon-2.3.0/blob/7442da5a17c776f024475e3739d6429e0d2721b1/src/org/lnicholls/galleon/apps/email/Email.java#L1017-L1251",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "galleon-2.3.0",
        "package": "org.lnicholls.galleon.apps.internetSlideshows",
        "class": "InternetSlideshows",
        "method": "getPhotoDescriptions(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/galleon-2.3.0/blob/7442da5a17c776f024475e3739d6429e0d2721b1/src/org/lnicholls/galleon/apps/internetSlideshows/InternetSlideshows.java#L1415-L1591",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "galleon-2.3.0",
        "package": "org.lnicholls.galleon.apps.traffic",
        "class": "Traffic",
        "method": "getTrafficResults(String,String,String,String,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/galleon-2.3.0/blob/7442da5a17c776f024475e3739d6429e0d2721b1/src/org/lnicholls/galleon/apps/traffic/Traffic.java#L1166-L1358",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "galleon-2.3.0",
        "package": "org.lnicholls.galleon.database",
        "class": "PersistentValueManager",
        "method": "savePersistentValue(String,String,Date,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/galleon-2.3.0/blob/7442da5a17c776f024475e3739d6429e0d2721b1/src/org/lnicholls/galleon/database/PersistentValueManager.java#L446-L565",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "galleon-2.3.0",
        "package": "org.lnicholls.galleon.server",
        "class": "TiVoListener",
        "method": "resolveService(JmDNS,String,String,ServiceInfo)",
        "github_url": "https://github.com/JavaQualitasCorpus/galleon-2.3.0/blob/7442da5a17c776f024475e3739d6429e0d2721b1/src/org/lnicholls/galleon/server/TiVoListener.java#L189-L365",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "galleon-2.3.0",
        "package": "org.lnicholls.galleon.widget",
        "class": "DefaultApplication",
        "method": "init(IContext)",
        "github_url": "https://github.com/JavaQualitasCorpus/galleon-2.3.0/blob/7442da5a17c776f024475e3739d6429e0d2721b1/src/org/lnicholls/galleon/widget/DefaultApplication.java#L175-L251",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "ganttproject-2.0.9",
        "package": "net.sourceforge.ganttproject",
        "class": "GanttOptions.GanttXMLOptionsParser",
        "method": "startElement(String,String,String,Attributes)",
        "github_url": "https://github.com/JavaQualitasCorpus/ganttproject-2.1.1/blob/3079f1444b67fd16930123700e873c92e4451c87/ganttproject/src/net/sourceforge/ganttproject/GanttOptions.java#L705-L1037",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "ganttproject-2.0.9",
        "package": "net.sourceforge.ganttproject.gui.options",
        "class": "CSVSettingsPanel",
        "method": "applyChanges(boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/ganttproject-2.1.1/blob/3079f1444b67fd16930123700e873c92e4451c87/ganttproject/src/net/sourceforge/ganttproject/gui/options/CSVSettingsPanel.java#L261-L310",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "ganttproject-2.0.9",
        "package": "net.sourceforge.ganttproject.task",
        "class": "TaskProperties",
        "method": "getProperty(Task,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/ganttproject-2.1.1/blob/3079f1444b67fd16930123700e873c92e4451c87/ganttproject/src/net/sourceforge/ganttproject/task/TaskProperties.java#L41-L141",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "ganttproject-2.0.9",
        "package": "org.ganttproject.impex.msproject",
        "class": "GanttMPXJOpen",
        "method": "processTask(TaskManager,MPXCalendar,Task,DefaultMutableTreeNode)",
        "github_url": "https://github.com/JavaQualitasCorpus/ganttproject-2.1.1/blob/3079f1444b67fd16930123700e873c92e4451c87/org.ganttproject.impex.msproject/src/org/ganttproject/impex/msproject/GanttMPXJOpen.java#L199-L309",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "heritrix-1.14.4",
        "package": "org.archive.crawler.admin.ui",
        "class": "JobConfigureUtils",
        "method": "handleJobAction(CrawlJobHandler,HttpServletRequest,HttpServletResponse,String,String,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/heritrix-1.14.4/blob/5b33666600f0f836eb4bd0866aed06474eb70b71/src/java/org/archive/crawler/admin/ui/JobConfigureUtils.java#L295-L427",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "heritrix-1.14.4",
        "package": "org.archive.extractor",
        "class": "RegexpHTMLLinkExtractor",
        "method": "processGeneralTag(CharSequence,CharSequence)",
        "github_url": "https://github.com/JavaQualitasCorpus/heritrix-1.14.4/blob/5b33666600f0f836eb4bd0866aed06474eb70b71/src/java/org/archive/extractor/RegexpHTMLLinkExtractor.java#L181-L305",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb",
        "class": "ParserDML",
        "method": "resolveUpdateExpressions(Table,RangeVariable[],int[],Expression[],RangeVariable[])",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb",
        "class": "ParserDQL",
        "method": "readExpression(HsqlArrayList,short[],int,int,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/ParserDQL.java#L6433-L6577",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb",
        "class": "Routine",
        "method": "getMethod(String,Routine,boolean[],boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/Routine.java#L1062-L1220",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb",
        "class": "SchemaObjectSet",
        "method": "addAllSQL(OrderedHashSet,OrderedHashSet,HsqlArrayList,Iterator,OrderedHashSet)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/SchemaObjectSet.java#L463-L650",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb",
        "class": "StatementDML",
        "method": "performReferentialActions(Session,Table,RowSetNavigatorDataChange,Row,Object[],int[],HashSet)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/StatementDML.java#L1574-L1757",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb.cmdline",
        "class": "SqlFile",
        "method": "displayResultSet(Statement,ResultSet,int[],String)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb.index",
        "class": "IndexAVL",
        "method": "findNode(Session,PersistentStore,Object[],int[],int,int,int,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/index/IndexAVL.java#L1497-L1669",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb.result",
        "class": "Result",
        "method": "newResult(Session,DataInput,RowInputBinary,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/result/Result.java#L331-L586",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "hsqldb-2.0.0",
        "package": "org.hsqldb.store",
        "class": "BaseHashMap",
        "method": "addOrRemoveMultiVal(long,long,Object,Object,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/hsqldb/blob/dd97a19c2afe5f9811dbf748983685475ffb1a16/src/org/hsqldb/map/BaseHashMap.java#L482-L680",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.html.simpleparser",
        "class": "FactoryProperties",
        "method": "getFont(ChainedProperties)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/html/simpleparser/FactoryProperties.java#L160-L192",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf",
        "class": "AcroFields",
        "method": "setFieldProperty(String,String,Object,int[])",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/AcroFields.java#L920-L1089",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf",
        "class": "BidiOrder",
        "method": "resolveWeakTypes(int,int,byte,byte,byte)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/BidiOrder.java#L601-L716",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf",
        "class": "PdfContentByte",
        "method": "addImage(Image,float,float,float,float,float,float,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/PdfContentByte.java#L1143-L1271",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf",
        "class": "PdfDocument",
        "method": "writeLineToContent(PdfLine,PdfContentByte,PdfContentByte,Object[],float)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/PdfDocument.java#L1238-L1595",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf",
        "class": "PdfPRow",
        "method": "writeCells(int,int,float,float,PdfContentByte[])",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/PdfPRow.java#L270-L503",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf",
        "class": "SimpleBookmark",
        "method": "createOutlineAction(PdfDictionary,HashMap,PdfWriter,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/SimpleBookmark.java#L394-L496",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf.codec",
        "class": "TIFFFaxDecoder",
        "method": "decode2D(byte[],byte[],int,int,long)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/codec/TIFFFaxDecoder.java#L764-L915",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf.codec",
        "class": "TIFFFaxDecoder",
        "method": "decodeT6(byte[],byte[],int,int,long)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/codec/TIFFFaxDecoder.java#L917-L1133",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf.fonts.cmaps",
        "class": "CMapParser",
        "method": "parse(InputStream)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/fonts/cmaps/CMapParser.java#L69-L179",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "itext-5.0.3",
        "package": "com.itextpdf.text.pdf.qrcode",
        "class": "Encoder",
        "method": "encode(String,ErrorCorrectionLevel,Map,QRCode)",
        "github_url": "https://github.com/JavaQualitasCorpus/itext-5.0.3/blob/2b2f1d6c4a7c347a4da87f36bcc86923edd0a11c/core/com/itextpdf/text/pdf/qrcode/Encoder.java#L72-L128",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.common",
        "class": "CSVFileFormatTokenizer",
        "method": "initialise(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/common/CSVFileFormatTokenizer.java#L83-L132",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "ScheduleGenerator",
        "method": "generateSchedule(Calendar, Calendar, Frequency, StubType, Period)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/ScheduleGenerator.java#L249-L266",
        "source_code": ""
    },
    {
        "duplicated": true,
        "code_smells": [
            "LongParametersList",
            "SwitchStatement"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "ScheduleGenerator",
        "method": "generateSchedule(Calendar, Calendar, int, int, StubType, Period, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/ScheduleGenerator.java#L350-L539",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "ScheduleGenerator",
        "method": "generateSchedule(Calendar, String, Frequency, StubType, Period)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/ScheduleGenerator.java#L84-L103",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "ScheduleGenerator",
        "method": "generateSchedule(Calendar, Tenor, Frequency, StubType, Period, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/ScheduleGenerator.java#L187-L207",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "ScheduleGenerator",
        "method": "generateSchedule(Calendar, Tenor, Frequency, StubType, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/ScheduleGenerator.java#L145-L165",
        "source_code": ""
    },
    {
        "duplicated": true,
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "ScheduleGenerator",
        "method": "generateSchedule(Calendar,Calendar,int,int,StubType,Period,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/ScheduleGenerator.java#L249-L266",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "TypedScheduleGenerator",
        "method": "createPeriod(Calendar, Calendar, Calendar, Calendar, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/TypedScheduleGenerator.java#L170-L189",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "TypedScheduleGenerator",
        "method": "generateSchedule(Calendar, Calendar, int, int, StubType)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/TypedScheduleGenerator.java#L83-L99",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date",
        "class": "TypedScheduleGenerator",
        "method": "generateScheduleInternal(Calendar, Calendar, int, int, StubType)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/TypedScheduleGenerator.java#L101-L168",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date.daycount.defaultimpl",
        "class": "ISDAActualActual",
        "method": "calculateDaycountFraction(Calendar, Calendar, Calendar, Calendar)",
        "github_url": "https://github.com/JavaQualitasCorpus/jFin_DateMath-R1.0.1/blob/94f09e70c1f0f39e0c84b7f8468673da31bbf368/src/main/java/org/jfin/date/daycount/defaultimpl/ISDAActualActual.java#L85-L97",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jFin_DateMath-R1.0.1",
        "package": "org.jfin.date.holiday.financialcalendarimpl",
        "class": "InfoFileEntry(String",
        "method": " String, String, Iso4217Currency, String, Iso3166Country, String, String)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jag-6.1",
        "package": "com.finalist.jag.uml",
        "class": "UML2JagGenerator",
        "method": "createEntityEJBs(SimpleModel)",
        "github_url": "https://github.com/JavaQualitasCorpus/jag-6.1/blob/41648c7fed2819e2127be797ced0c943196e7de9/src/com/finalist/jag/uml/UML2JagGenerator.java#L176-L324",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jag-6.1",
        "package": "com.finalist.jag.uml",
        "class": "UML2JagGenerator",
        "method": "createSessionEJBs(SimpleModel)",
        "github_url": "https://github.com/JavaQualitasCorpus/jag-6.1/blob/41648c7fed2819e2127be797ced0c943196e7de9/src/com/finalist/jag/uml/UML2JagGenerator.java#L358-L460",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jag-6.1",
        "package": "com.finalist.jaggenerator",
        "class": "SkeletValidator",
        "method": "validateSkelet()",
        "github_url": "https://github.com/JavaQualitasCorpus/jag-6.1/blob/41648c7fed2819e2127be797ced0c943196e7de9/src/com/finalist/jaggenerator/SkeletValidator.java#L35-L413",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.classes",
        "class": "Attribute_Code",
        "method": "Attribute_Code(int, int, int, int, Opcode[], int, ExceptionTableItem[], int, Attribute[])",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/master/src/com/jasml/classes/Attribute_Code.java#L28-L39",
        "source_code": "public Attribute_Code(int attrLength,int max_stack,int max_locals,int code_length,Opcode[]codes,int exception_table_length,ExceptionTableItem[]exception_Table,int attributes_count,Attribute[]attributes){super(Constants.ATTRIBUTE_Code,attrLength);this.max_locals=max_locals;this.max_stack=max_stack;this.code_length=code_length;this.codes=codes;this.exception_table_length=exception_table_length;this.exception_table=exception_Table;this.attributes_count=attributes_count;this.attributes=attributes;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.classes",
        "class": "Attribute_Code.ExceptionTableItem",
        "method": "ExceptionTableItem(int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/master/src/com/jasml/classes/Attribute_Code.java#L50-L55",
        "source_code": "public ExceptionTableItem(int start_pc,int end_pc,int handler_pc,int catch_type){this.start_pc=start_pc;this.end_pc=end_pc;this.handler_pc=handler_pc;this.catch_type=catch_type;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.classes",
        "class": "Attribute_InnerClasses.InnerClass",
        "method": "InnerClass(int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/classes/Attribute_InnerClasses.java#L26-L31",
        "source_code": "public InnerClass(int inner_class_info_index,int outer_class_info_index,int inner_name_index,int inner_class_access_flags){this.inner_class_info_index=inner_class_info_index;this.outer_class_info_index=outer_class_info_index;this.inner_name_index=inner_name_index;this.inner_class_access_flags=inner_class_access_flags;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.classes",
        "class": "Method",
        "method": "Method(int, int, int, int, Attribute[])",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/classes/Method.java#L18-L24",
        "source_code": "public Method(int access_flags,int name_index,int descriptor_index,int attributes_count,Attribute[]attributes){this.access_flags=access_flags;this.name_index=name_index;this.descriptor_index=descriptor_index;this.attributes_count=attributes_count;this.attributes=attributes;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "ConstantPoolGenerator",
        "method": "addFieldref(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/ConstantPoolGenerator.java#L74-L87",
        "source_code": "public int addFieldref(String name,String className,String type){int class_index,name_and_type_index,index;class_index=addClass(className);name_and_type_index=addFieldNameAndType(name,type);index=lookupMIFref('F_'+class_index+'_'+name_and_type_index);if(index==-1){ensureCapacity();items[count]=new Constant_Fieldref(class_index,name_and_type_index);mifRef.put('F_'+class_index+'_'+name_and_type_index,new Integer(count));index=count;count++;}return index;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "ConstantPoolGenerator",
        "method": "addInterfaceMethodref(String, String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/ConstantPoolGenerator.java#L111-L124",
        "source_code": "public int addInterfaceMethodref(String name,String interfaceName,String retType,String paras){int class_index,name_and_type_index,index;class_index=addClass(interfaceName);name_and_type_index=addMethodNameAndType(name,retType,paras);index=lookupMIFref('I_'+class_index+'_'+name_and_type_index);if(index==-1){ensureCapacity();items[count]=new Constant_InterfaceMethodref(class_index,name_and_type_index);mifRef.put('I_'+class_index+'_'+name_and_type_index,new Integer(count));index=count;count++;}return index;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "ConstantPoolGenerator",
        "method": "addMethodNameAndType(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/ConstantPoolGenerator.java#L184-L202",
        "source_code": "private int addMethodNameAndType(String name,String retType,String paras){int name_index,type_index,index;String type;retType=Util.toInnerType(retType);paras=Util.toInnerParameterTypes(paras);type='('+paras+')'+retType;index=lookupNameAndType(name+type);if(index==-1){name_index=addUtf8(name);type_index=addUtf8(type);ensureCapacity();items[count]=new Constant_NameAndType(name_index,type_index);nameTypes.put(name+type,new Integer(count));index=count;count++;}return index;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "ConstantPoolGenerator",
        "method": "addMethodref(String, String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/ConstantPoolGenerator.java#L137-L150",
        "source_code": "public int addMethodref(String name,String className,String retType,String paras){int class_index,name_and_type_index,index;class_index=addClass(className);name_and_type_index=addMethodNameAndType(name,retType,paras);index=lookupMIFref('M_'+class_index+'_'+name_and_type_index);if(index==-1){ensureCapacity();items[count]=new Constant_Methodref(class_index,name_and_type_index);mifRef.put('M_'+class_index+'_'+name_and_type_index,new Integer(count));index=count;count++;}return index;}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "GrammerException",
        "method": "GrammerException(int, int, int, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/GrammerException.java#L9-L11",
        "source_code": "public GrammerException(int offset,int line,int column,String msg){super(offset,line,column,msg);}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "JavaClassDumpper",
        "method": "dumpAttribute(Attribute)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/JavaClassDumpper.java#L157-L252",
        "source_code": "private void dumpAttribute(Attribute attribute)throws IOException{out.writeShort(attribute.attribute_name_index);out.writeInt(attribute.attribute_length);switch(attribute.attribute_tag){case Constants.ATTRIBUTE_SourceFile: out.writeShort(((Attribute_SourceFile)attribute).sourcefile_index);break;case Constants.ATTRIBUTE_ConstantValue: out.writeShort(((Attribute_ConstantValue)attribute).constant_value_index);break;case Constants.ATTRIBUTE_Code: Attribute_Code code=(Attribute_Code)attribute;byte[][]operands;out.writeShort(code.max_stack);out.writeShort(code.max_locals);out.writeInt(code.code_length);Attribute_Code.Opcode op;for(int i=0;i<code.codes.length;i++){op=code.codes[i];out.writeByte(op.opcode);operands=op.operands;if(operands!=null && operands.length!=0){for(int j=0;j<operands.length;j++){if(operands[j]!=null){out.write(operands[j]);}}}}out.writeShort(code.exception_table_length);Attribute_Code.ExceptionTableItem exc;for(int i=0;i<code.exception_table_length;i++){exc=code.exception_table[i];out.writeShort(exc.start_pc);out.writeShort(exc.end_pc);out.writeShort(exc.handler_pc);out.writeShort(exc.catch_type);}out.writeShort(code.attributes_count);for(int i=0;i<code.attributes_count;i++){dumpAttribute(code.attributes[i]);}break;case Constants.ATTRIBUTE_Exceptions: Attribute_Exceptions excep=(Attribute_Exceptions)attribute;out.writeShort(excep.number_of_exceptions);for(int i=0;i<excep.number_of_exceptions;i++){out.writeShort(excep.exception_index_table[i]);}break;case Constants.ATTRIBUTE_InnerClasses: Attribute_InnerClasses innerClasses=(Attribute_InnerClasses)attribute;Attribute_InnerClasses.InnerClass cla;out.writeShort(innerClasses.number_of_classes);for(int i=0;i<innerClasses.number_of_classes;i++){cla=innerClasses.innerClasses[i];out.writeShort(cla.inner_class_info_index);out.writeShort(cla.outer_class_info_index);out.writeShort(cla.inner_name_index);out.writeShort(cla.inner_class_access_flags);}break;case Constants.ATTRIBUTE_Deprecated: case Constants.ATTRIBUTE_Synthetic: break;case Constants.ATTRIBUTE_LineNumberTable: break;case Constants.ATTRIBUTE_LocalVariableTable: Attribute_LocalVariableTable lvt=(Attribute_LocalVariableTable)attribute;Attribute_LocalVariableTable.LocalVariable lv;out.writeShort(lvt.local_variable_table_length);for(int i=0;i<lvt.local_variable_table_length;i++){lv=lvt.local_variable_table[i];out.writeShort(lv.start_pc);out.writeShort(lv.length);out.writeShort(lv.name_index);out.writeShort(lv.descriptor_index);out.writeShort(lv.index);}break;}}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "Scanner",
        "method": "exception(int, int, int, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/Scanner.java#L582-L584",
        "source_code": "private static void exception(int offset,int line,int column,String msg)throws ParsingException{throw new ParsingException(offset,line,column,msg);}"
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "Scanner",
        "method": "partialScanner(char[], int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/Scanner.java#L48-L58",
        "source_code": "public static Scanner partialScanner(char[]content,int offset,int length,int columnNumber,int lineNumber)throws ParsingException{Scanner ret=new Scanner();ret.buf=content;ret.offset=offset;ret.contentLength=offset+length;ret.columnNumber=columnNumber;ret.columnNumberStart=columnNumber;ret.lineNumber=lineNumber;ret.lineNumberStart=lineNumber;return ret;}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "SourceCodeParser",
        "method": "parseMethod()",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/SourceCodeParser.java#L236-L268",
        "source_code": "private Method parseMethod()throws ParsingException,GrammerException{if(scanner.tokenType()==Attribute || scanner.tokenType()==Bracket_Right || scanner.tokenType()==EOF){return null;}Method method=new Method(0,0,0,0,new Attribute[0]);LabeledInstructions li;ArrayList attributes=new ArrayList(4),codeAttributes;parseMethodSignature(method,attributes);if(Util.hasMethodBody((short)method.access_flags)==true){codeAttributes=new ArrayList(4);li=parseMethodInstructions(method);Attribute_Code code=new Attribute_Code();code.attribute_name_index=cpl.addUtf8('Code');code.codes=li.codes;parseMethodAttributes(method,attributes,li,code,codeAttributes);code.code_length=li.codeLength;code.attributes=(Attribute[])codeAttributes.toArray(new Attribute[codeAttributes.size()]);code.attributes_count=code.attributes.length;code.attribute_length=2+/*max_stack*/2+/*max_locals*/4+/*code_length*/code.code_length+/*code*/2+/*exception_table_length*/code.exception_table_length*8+2;for(int i=0;i<code.attributes_count;i++){code.attribute_length+=code.attributes[i].attribute_length+6;}attributes.add(code);}else{parseMethodAttributes(method,attributes,null,null,null);}scanner.nextToken();method.attributes=(Attribute[])attributes.toArray(new Attribute[attributes.size()]);method.attributes_count=method.attributes.length;return method;}"
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "SourceCodeParser",
        "method": "parseMethodAttributes(Method, ArrayList, SourceCodeParser.LabeledInstructions, Attribute_Code, ArrayList)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/SourceCodeParser.java#L277-L324",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod",
            "SwitchStatement"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.compiler",
        "class": "SourceCodeParser",
        "method": "parseMethodInstructions(Method)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/compiler/SourceCodeParser.java#L330-L852",
        "source_code": "private LabeledInstructions parseMethodInstructions(Method method)throws ParsingException,GrammerException{Hashtable labelMap=new Hashtable();ArrayList toUpdate=new ArrayList();ArrayList codes=new ArrayList(),info;Attribute_Code.Opcode op=null;OpcodeInfo opinfo;String temp,retType,type,label=null;StringBuffer paras=new StringBuffer();int t=0,i=0,j=0,high,low,npairs,counter,tokenType,offset=0,codeLength=0;byte[][]operands=null;boolean isWide=false,record=false;while(scanner.tokenType()!=EOF && scanner.tokenType()!=Attribute && scanner.tokenType()!=Bracket_Right){switch(scanner.tokenType()){case JavaName: record=true;label=scanner.token();if(scanner.nextToken()!=Colon){exception(scanner,'expecting.':'.after.label.name');}if(scanner.nextToken()!=Instruction){exception(scanner,'expecting.instruction.after.label');}case Instruction:{opinfo=OpcodeHelper.getOpcodeInfo(scanner.token());switch(opinfo.opcode){case Constants.TABLESWITCH: scanner.nextToken();info=new ArrayList();if(scanner.token().equals('default')==false){exception(scanner,''default'.expected.here');}if(scanner.nextToken()!=Equal){exception(scanner,''='.expected.here.');}scanner.nextToken();info.add(scanner.token());if(scanner.nextToken()!=Comma){exception(scanner,'','.expected.here.');}scanner.nextToken();if(scanner.token().equals('low')==false){exception(scanner,''low'.expected.here.');}if(scanner.nextToken()!=Equal){exception(scanner,''='.expected.here.');}if(scanner.nextToken()!=Number_Integer){exception(scanner,'number.expected.here.');}low=parseInteger(scanner.token());if(scanner.nextToken()!=Comma){exception(scanner,'','.expected.here.');}scanner.nextToken();if(scanner.token().equals('high')==false){exception(scanner,''high'.expected.here.');}if(scanner.nextToken()!=Equal){exception(scanner,''='.expected.here.');}if(scanner.nextToken()!=Number_Integer){exception(scanner,'number.expected.here.');}high=parseInteger(scanner.token());if(scanner.nextToken()!=Comma){exception(scanner,'','.expected.here.');}scanner.nextToken();if(scanner.token().equals('jump_table')==false){exception(scanner,''jump_table'.expected.here.');}if(scanner.nextToken()!=Colon){exception(scanner,'':'.expected.here.');}scanner.nextToken();counter=0;while(scanner.tokenType()!=EOF){if(scanner.tokenType()!=JavaName){exception(scanner,'label.name.expected.here');}info.add(scanner.token());if(scanner.nextToken()!=Comma){break;}scanner.nextToken();}operands=new byte[high-low+5][];operands[0]=new byte[3-offset % 4];for(i=0;i<operands[0].length;i++){operands[0][i]=(byte)0;}operands[2]=Util.getBytes(low,4);operands[3]=Util.getBytes(high,4);op=new OpcodeWrapper(offset,opinfo.opcode,operands,info);toUpdate.add(op);codeLength=1+operands[0].length+operands.length*4-4;info=null;break;case Constants.LOOKUPSWITCH: scanner.nextToken();info=new ArrayList();if(scanner.token().equals('default')==false){exception(scanner,''default'.expected.here');}if(scanner.nextToken()!=Equal){exception(scanner,''='.expected.here.');}scanner.nextToken();info.add(scanner.token());if(scanner.nextToken()!=Comma){exception(scanner,'','.expected.here.');}scanner.nextToken();if(scanner.token().equals('npairs')==false){exception(scanner,''npairs'.expected.here.');}if(scanner.nextToken()!=Equal){exception(scanner,''='.expected.here.');}if(scanner.nextToken()!=Number_Integer){exception(scanner,'number.expected.here.');}npairs=parseInteger(scanner.token());if(scanner.nextToken()!=Comma){exception(scanner,'','.expected.here.');}scanner.nextToken();if(scanner.token().equals('jump_table')==false){exception(scanner,''jump_table'.expected.here.');}if(scanner.nextToken()!=Colon){exception(scanner,'':'.expected.here.');}scanner.nextToken();operands=new byte[npairs*2+3][];operands[0]=new byte[3-offset % 4];for(i=0;i<operands[0].length;i++){operands[0][i]=(byte)0;}operands[2]=Util.getBytes(npairs,4);counter=3;while(scanner.tokenType()!=EOF){if(scanner.tokenType()!=Number_Integer){exception(scanner,'number.expected.here');}operands[counter]=Util.getBytes(parseInteger(scanner.token()),4);counter=counter+2;if(scanner.nextToken()!=Pointer){exception(scanner,'->.expected.here');}scanner.nextToken();info.add(scanner.token());if(scanner.nextToken()!=Comma){break;}scanner.nextToken();}op=new OpcodeWrapper(offset,opinfo.opcode,operands,info);codeLength=1+operands[0].length+operands.length*4-4;toUpdate.add(op);info=null;break;case Constants.GETFIELD: case Constants.GETSTATIC: case Constants.PUTFIELD: case Constants.PUTSTATIC: scanner.nextToken();operands=new byte[1][];type=scanner.token();scanner.nextToken();temp=scanner.token();i=temp.lastIndexOf('.');i=cpl.addFieldref(temp.substring(i+1),temp.substring(0,i),type);operands[0]=Util.getBytes(i,2);codeLength=3;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.INVOKESPECIAL: case Constants.INVOKESTATIC: case Constants.INVOKEVIRTUAL: operands=new byte[1][];scanner.nextToken();retType=scanner.token();scanner.nextToken();temp=scanner.token();i=temp.lastIndexOf('.');if((scanner.nextToken()==SBracket_Left)==false){exception(scanner,''('.expected.here');}if(scanner.nextToken()!=SBracket_Right){while(scanner.tokenType()!=SBracket_Right && scanner.tokenType()!=EOF){paras.append(scanner.token());if(scanner.nextToken()==Comma){paras.append(',');scanner.nextToken();}}if(scanner.tokenType()!=SBracket_Right){exception(scanner,'')'.expected.here');}}else{paras.append('');}operands[0]=Util.getBytes(cpl.addMethodref(temp.substring(i+1),temp.substring(0,i),retType,paras.toString()),2);paras.delete(0,paras.length());codeLength=3;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.INVOKEINTERFACE: scanner.nextToken();operands=new byte[3][];retType=scanner.token();scanner.nextToken();temp=scanner.token();i=temp.lastIndexOf('.');if(scanner.nextToken()==SBracket_Left==false){exception(scanner,''('.expected.here');}if(scanner.nextToken()!=SBracket_Right){while(scanner.tokenType()!=SBracket_Right && scanner.tokenType()!=EOF){paras.append(scanner.token());if(scanner.nextToken()==Comma){paras.append(',');scanner.nextToken();}}if(scanner.tokenType()!=SBracket_Right){exception(scanner,'')'.expected.here');}}else{paras.append('');}if(scanner.nextToken()!=Number_Integer){exception(scanner,'number.expected.here');}t=parseInteger(scanner.token());operands[0]=Util.getBytes(cpl.addInterfaceMethodref(temp.substring(i+1),temp.substring(0,i),retType,paras.toString()),2);operands[1]=Util.getBytes(t,1);operands[2]=Util.getBytes(0,1);codeLength=5;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();paras.delete(0,paras.length());break;/***Operands are references to classes in constant pool*/case Constants.NEW: case Constants.CHECKCAST: case Constants.INSTANCEOF: scanner.nextToken();operands=new byte[1][];operands[0]=Util.getBytes(cpl.addClass(scanner.token()),2);codeLength=3;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.LDC:/***like 4:ldc 1411111 or 4:ldc 1411111f or 4:ldc 'abcde'*or a special case ldc Infinity,this is to load a Infinity double value*/scanner.nextToken();operands=new byte[1][];temp=scanner.token();tokenType=scanner.tokenType();if(tokenType==String){i=cpl.addString(Util.parseViewableString(temp.substring(1,temp.length()-1)));}else if(tokenType==Number_Float || tokenType==Number_Float_Positive_Infinity || tokenType==Number_Float_Negativ_Infinity || tokenType==Number_Float_NaN){i=cpl.addFloat(parseFloat(temp));}else if(tokenType==Number_Integer){i=cpl.addInteger(parseInteger(temp));}else{exception(scanner,'expecting.integer.or.string.or.float.here');}if(i<255){operands[0]=Util.getBytes(i,1);codeLength=2;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);}else{operands[0]=Util.getBytes(i,2);op=new Attribute_Code.Opcode(offset,Constants.LDC_W,operands);codeLength=3;}scanner.nextToken();break;case Constants.LDC_W: scanner.nextToken();operands=new byte[1][];temp=scanner.token();tokenType=scanner.tokenType();if(tokenType==String){i=cpl.addString(Util.parseViewableString(temp.substring(1,temp.length()-1)));}else if(tokenType==Number_Float || tokenType==Number_Float_NaN || tokenType==Number_Float_Negativ_Infinity || tokenType==Number_Float_Positive_Infinity){i=cpl.addFloat(parseFloat(temp));}else if(tokenType==Number_Integer){i=cpl.addInteger(parseInteger(temp));}else{exception(scanner,'expecting.integer.or.string.or.float.here');}operands[0]=Util.getBytes(i,2);codeLength=3;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.LDC2_W: scanner.nextToken();operands=new byte[1][];temp=scanner.token();tokenType=scanner.tokenType();if(tokenType==Number_Long){i=cpl.addLong(parseLong(temp));}else if(tokenType==Number_Double || tokenType==Number_Double_NaN || tokenType==Number_Double_Negativ_Infinity || tokenType==Number_Double_Positive_Infinity){i=cpl.addDouble(parseDouble(temp));}else{exception(scanner,'expecting.long.or.double.here');}operands[0]=Util.getBytes(i,2);codeLength=3;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.NEWARRAY: scanner.nextToken();operands=new byte[1][1];operands[0][0]=Util.getPrimitiveTypeCode(scanner.token());codeLength=2;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.ANEWARRAY: scanner.nextToken();operands=new byte[1][];operands[0]=Util.getBytes(cpl.addClass(scanner.token()),2);codeLength=3;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.MULTIANEWARRAY: scanner.nextToken();operands=new byte[2][];type=scanner.token();if(scanner.nextToken()!=Number_Integer){exception(scanner,'dimesion.number.expected.here');}i=parseInteger(scanner.token());operands[1]=Util.getBytes(i,1);operands[0]=Util.getBytes(cpl.addClass(type),2);codeLength=4;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.WIDE: isWide=true;codeLength=1;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.IINC: operands=new byte[2][];scanner.nextToken();if(scanner.tokenType()==Number_Integer){i=parseInteger(scanner.token());}else{if(scanner.nextToken()!=SBracket_Left){exception(scanner,''('.expected.here');}if(scanner.nextToken()!=Number_Integer){exception(scanner,'local.variable.index.expected.here');}i=parseInteger(scanner.token());if(scanner.nextToken()!=SBracket_Right){exception(scanner,'')'.expected.here');}}scanner.nextToken();if(scanner.tokenType()!=Number_Integer){exception(scanner,'increment.amount.expected.here');}j=parseInteger(scanner.token());if(isWide==true){operands[0]=Util.getBytes(i,2);operands[1]=Util.getBytes(j,2);codeLength=5;}else{operands[0]=Util.getBytes(i,1);operands[1]=Util.getBytes(j,1);codeLength=3;}op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.ALOAD: case Constants.ASTORE: case Constants.DLOAD: case Constants.DSTORE: case Constants.FLOAD: case Constants.FSTORE: case Constants.ILOAD: case Constants.ISTORE: case Constants.LLOAD: case Constants.LSTORE: case Constants.RET: operands=new byte[1][];scanner.nextToken();if(scanner.tokenType()==Number_Integer){i=parseInteger(scanner.token());}else{if(scanner.nextToken()!=SBracket_Left){exception(scanner,''('.expected.here');}if(scanner.nextToken()!=Number_Integer){exception(scanner,'local.variable.index.expected.here');}i=parseInteger(scanner.token());if(scanner.nextToken()!=SBracket_Right){exception(scanner,'')'.expected.here');}}if(isWide==true){operands[0]=Util.getBytes(i,2);codeLength=2;isWide=false;}else{operands[0]=Util.getBytes(i,1);codeLength=2;}op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);scanner.nextToken();break;case Constants.GOTO: case Constants.IFEQ: case Constants.IFGE: case Constants.IFGT: case Constants.IFLE: case Constants.IFLT: case Constants.JSR: case Constants.IFNE: case Constants.IFNONNULL: case Constants.IFNULL: case Constants.IF_ACMPEQ: case Constants.IF_ACMPNE: case Constants.IF_ICMPEQ: case Constants.IF_ICMPGE: case Constants.IF_ICMPGT: case Constants.IF_ICMPLE: case Constants.IF_ICMPLT: case Constants.IF_ICMPNE: case Constants.GOTO_W: case Constants.JSR_W: scanner.nextToken();operands=new byte[1][];codeLength=3;op=new OpcodeWrapper(offset,opinfo.opcode,operands,scanner.token());toUpdate.add(op);scanner.nextToken();break;case Constants.BIPUSH: default: operands=new byte[opinfo.operandsCount][];for(i=0;i<opinfo.operandsCount;i++){if(scanner.nextToken()!=Number_Integer){exception(scanner,'number.expected.here');}operands[i]=Util.getBytes(parseInteger(scanner.token()),opinfo.operandsLength[i]);codeLength=codeLength+opinfo.operandsLength[i];}scanner.nextToken();codeLength++;op=new Attribute_Code.Opcode(offset,opinfo.opcode,operands);}break;}case Attribute: break;default: exception(scanner,'label.name.or.instructions.expected.here');}offset=offset+codeLength;codes.add(op);if(record){labelMap.put(label,op);label=null;}record=false;operands=null;codeLength=0;}updateLabelLinks(labelMap,toUpdate);return new LabeledInstructions((Attribute_Code.Opcode[])codes.toArray(new Attribute_Code.Opcode[codes.size()]),labelMap,offset);}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.decompiler",
        "class": "JavaClassParser",
        "method": "parseOpcodes(byte[])",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/decompiler/JavaClassParser.java#L419-L543",
        "source_code": "private Attribute_Code.Opcode[]parseOpcodes(byte[]bytes){ArrayList ret=new ArrayList(bytes.length);Attribute_Code.Opcode op;OpcodeInfo opInfo;int offset;byte[][]operands=null;boolean wide=false;for(int i=0;i<bytes.length;i++){offset=i;opInfo=OpcodeHelper.OPCODES[0xFF & bytes[i]];if(opInfo.operandsLength==null){operands=null;}else{if(opInfo.opcode==Constants.TABLESWITCH){int padnum=i % 4;padnum=3-padnum;i=i+padnum+1;byte[]defaultb=new byte[4];for(int t=0;t<4;t++){defaultb[t]=bytes[i+t];}i=i+4;byte[]lowb=new byte[4];for(int t=0;t<4;t++){lowb[t]=bytes[i+t];}i=i+4;byte[]highb=new byte[4];for(int t=0;t<4;t++){highb[t]=bytes[i+t];}i=i+4;int high=Util.getNum(highb);int low=Util.getNum(lowb);int total=high-low+1+3+1;if(total<0){total=1;}operands=new byte[total][4];operands[0]=new byte[padnum];for(int ti=0;ti<padnum;ti++){operands[0][ti]=(byte)0;}operands[1]=defaultb;operands[2]=lowb;operands[3]=highb;for(int t=4;t<total;t++){operands[t][0]=bytes[i++];operands[t][1]=bytes[i++];operands[t][2]=bytes[i++];operands[t][3]=bytes[i++];}i--;}else if(opInfo.opcode==Constants.LOOKUPSWITCH){int padnum=i % 4;padnum=3-padnum;i=i+padnum+1;byte[]defaultb=new byte[4];for(int t=0;t<4;t++){defaultb[t]=bytes[i+t];}i=i+4;byte[]npairb=new byte[4];for(int t=0;t<4;t++){npairb[t]=bytes[i+t];}i=i+4;int npair=Util.getNum(npairb);int total=npair*2+3;operands=new byte[total][4];operands[0]=new byte[padnum];for(int ti=0;ti<padnum;ti++){operands[0][ti]=(byte)0;}operands[1]=defaultb;operands[2]=npairb;for(int t=3;t<total;t++){operands[t][0]=bytes[i++];operands[t][1]=bytes[i++];operands[t][2]=bytes[i++];operands[t][3]=bytes[i++];}i--;}else if(opInfo.opcode==Constants.WIDE){wide=true;}else if(wide==true){operands=new byte[opInfo.operandsLength.length][];for(int j=0;j<opInfo.operandsLength.length;j++){operands[j]=new byte[opInfo.operandsLength[j]];for(int t=0;t<opInfo.operandsLength[j]+1;t++){operands[j][t]=bytes[++i];}}wide=false;}else{operands=new byte[opInfo.operandsLength.length][];for(int j=0;j<opInfo.operandsLength.length;j++){operands[j]=new byte[opInfo.operandsLength[j]];for(int t=0;t<opInfo.operandsLength[j];t++){operands[j][t]=bytes[++i];}}}}op=new Attribute_Code.Opcode(offset,opInfo.opcode,operands);ret.add(op);}return(Attribute_Code.Opcode[])ret.toArray(new Attribute_Code.Opcode[0]);}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.decompiler",
        "class": "SourceCodeBuilder",
        "method": "calculateReferences(Method)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/decompiler/SourceCodeBuilder.java#L740-L842",
        "source_code": "private HashSet calculateReferences(Method meth){HashSet set=new HashSet();Attribute att;Attribute_Code.Opcode[]ops=null;Attribute_Code.Opcode op;for(int i=0;i<meth.attributes_count;i++){if(meth.attributes[i].attribute_tag==Constants.ATTRIBUTE_Code){ops=((Attribute_Code)meth.attributes[i]).codes;break;}}if(ops==null){return set;}for(int i=0;i<meth.attributes_count;i++){att=meth.attributes[i];if(att.attribute_tag==Constants.ATTRIBUTE_Code){Attribute_Code code=(Attribute_Code)att;for(int j=0;j<ops.length;j++){op=ops[j];switch(op.opcode){case Constants.LOOKUPSWITCH: set.add(Integer.toString(Util.getSignedNum(op.operands[1])+op.offset));for(int t=4;t<op.operands.length;t++){set.add(Integer.toString(Util.getSignedNum(op.operands[t++])+op.offset));}break;case Constants.TABLESWITCH: set.add(Integer.toString(Util.getSignedNum(op.operands[1])+op.offset));for(int t=4;t<op.operands.length;t++){set.add(Integer.toString(Util.getSignedNum(op.operands[t])+op.offset));}break;case Constants.GOTO: case Constants.IFEQ: case Constants.IFGE: case Constants.IFGT: case Constants.IFLE: case Constants.IFLT: case Constants.JSR: case Constants.IFNE: case Constants.IFNONNULL: case Constants.IFNULL: case Constants.IF_ACMPEQ: case Constants.IF_ACMPNE: case Constants.IF_ICMPEQ: case Constants.IF_ICMPGE: case Constants.IF_ICMPGT: case Constants.IF_ICMPLE: case Constants.IF_ICMPLT: case Constants.IF_ICMPNE: case Constants.GOTO_W: case Constants.JSR_W: set.add(Integer.toString(Util.getSignedNum(op.operands[0])+op.offset));break;}}if(code.exception_table_length!=0){Attribute_Code.ExceptionTableItem[]exceptions=code.exception_table;Attribute_Code.ExceptionTableItem exc;for(int j=0;j<exceptions.length;j++){exc=exceptions[j];set.add(Integer.toString(exc.start_pc));set.add(Integer.toString(exc.end_pc));set.add(Integer.toString(exc.handler_pc));}}if(code.attributes_count!=0){for(int j=0;j<code.attributes_count;j++){if(code.attributes[j].attribute_tag==Constants.ATTRIBUTE_LineNumberTable && config.showLineNumber==true){Attribute_LineNumberTable lineNumberTable=(Attribute_LineNumberTable)code.attributes[j];Attribute_LineNumberTable.LineNumber[]lines=lineNumberTable.lineNumberTable;for(int x=0;x<lineNumberTable.line_number_table_length;x++){set.add(Integer.toString(lines[x].start_pc));}}else if(code.attributes[j].attribute_tag==Constants.ATTRIBUTE_LocalVariableTable){Attribute_LocalVariableTable lvt=(Attribute_LocalVariableTable)code.attributes[j];if(lvt.local_variable_table_length!=0){Attribute_LocalVariableTable.LocalVariable[]lvs=lvt.local_variable_table;Attribute_LocalVariableTable.LocalVariable lv;for(int x=0;x<lvs.length;x++){lv=lvs[x];set.add(Integer.toString(lv.start_pc));if(lv.length!=1){op=findPreviousInstruction(lv.start_pc+lv.length,ops);if(op!=null){set.add(Integer.toString(op.offset));}}}}}}}break;}}return set;}"
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.decompiler",
        "class": "SourceCodeBuilder",
        "method": "toString(Attribute_Code, HashSet)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/decompiler/SourceCodeBuilder.java#L176-L432",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasml-0.10",
        "package": "com.jasml.helper",
        "class": "OpcodeLoader",
        "method": "processOpcode(Node)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasml-0.10/blob/9be302a8b5f889d8e397efc3aecb49ab73828ecc/src/com/jasml/helper/OpcodeLoader.java#L32-L135",
        "source_code": "public void processOpcode(Node node){NodeList list=node.getChildNodes(),clist;int length=list.getLength();String nodeName;OpcodeInfo info;NamedNodeMap attributes;int t,counter;short[]operands;info=new OpcodeInfo();for(int i=0;i<length;i++){node=list.item(i);nodeName=node.getNodeName();if('name'.equals(nodeName)){info.opname=node.getChildNodes().item(0).getNodeValue();}else if('code'.equals(nodeName)){info.opcode=(byte)Integer.parseInt(node.getChildNodes().item(0).getNodeValue());}else if('consumeStack'.equals(nodeName)){info.consumeStack=(byte)Integer.parseInt(node.getChildNodes().item(0).getNodeValue());}else if('produceStack'.equals(nodeName)){info.produceStack=(byte)Integer.parseInt(node.getChildNodes().item(0).getNodeValue());}else if('operandsInfo'.equals(nodeName)){attributes=node.getAttributes();t=Integer.parseInt(attributes.item(0).getNodeValue());info.operandsCount=(short)t;clist=node.getChildNodes();operands=new short[t];counter=0;for(t=0;t<clist.getLength();t++){node=clist.item(t);if('length'.equals(node.getNodeName())){operands[counter++]=Short.parseShort(node.getFirstChild().getNodeValue());}}info.operandsLength=operands;}else if('operation'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.operation=node.getNodeValue();}}}else if('format'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.format=node.getNodeValue();}}}else if('forms'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.forms=node.getNodeValue();}}}else if('operandStack'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.operandStack=node.getNodeValue();}}}else if('description'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.description=node.getNodeValue();}}}else if('runtimeExceptions'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.runtimeExceptions=node.getNodeValue();}}}else if('linkingExceptions'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.linkingExceptions=node.getNodeValue();}}}else if('notes'.equals(nodeName)){clist=node.getChildNodes();for(t=0;t<clist.getLength();t++){node=clist.item(t);if(Node.CDATA_SECTION_NODE==node.getNodeType()){info.notes=node.getNodeValue();}}}}infos[info.opcode & 0xFF]=info;}"
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.crosstabs.design",
        "class": "JRDesignCrosstab",
        "method": "inheritCellSize(int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/crosstabs/design/JRDesignCrosstab.java#L1144-L1194",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.convert",
        "class": "CrosstabConverter",
        "method": "addCrosstabRows(ReportConverter, JRCrosstab, int, int, List)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/convert/CrosstabConverter.java#L333-L434",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JExcelApiExporter",
        "method": "getLoadedFont(JRFont,int,Locale)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JExcelApiExporter.java#L1214-L1298",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JExcelApiExporter",
        "method": "getSuitablePaperSize(JasperPrint)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JExcelApiExporter.java#L1752-L1818",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JExcelApiExporter.StyleInfo",
        "method": "StyleInfo(Pattern, Colour, int, int, int, WritableFont, BoxStyle)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JExcelApiExporter.java#L1480-L1500",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JExcelApiExporter.StyleInfo",
        "method": "StyleInfo(Pattern, Colour, int, int, int, WritableFont, JRExporterGridCell, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JExcelApiExporter.java#L1457-L1478",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRExporterGridCell",
        "method": "JRExporterGridCell(ElementWrapper, int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRExporterGridCell.java#L64-L80",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRGridLayout",
        "method": "JRGridLayout(ExporterNature, ElementWrapper[], int, int, int, int, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRGridLayout.java#L148-L186",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRGridLayout",
        "method": "JRGridLayout(ExporterNature, List, int, int, int, int, CutsInfo)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRGridLayout.java#L108-L146",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRHtmlExporter",
        "method": "exportReportToWriter()",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRHtmlExporter.java#L672-L761",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRHtmlExporter",
        "method": "getHyperlinkTarget(JRPrintHyperlink)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRHtmlExporter.java#L1415-L1473",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRPdfExporter",
        "method": "exportReport()",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRPdfExporter.java#L241-L410",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRRtfExporter",
        "method": "exportElements(Collection)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRRtfExporter.java#L1282-L1311",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRRtfExporter",
        "method": "exportRightPen(JRPen, JRPen, JRPen, int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRRtfExporter.java#L1413-L1437",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRXhtmlExporter",
        "method": "exportImage(JRPrintImage)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRXhtmlExporter.java#L1401-L1763",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRXlsExporter",
        "method": "createTextCell(JRPrintText, JRExporterGridCell, int, int, JRStyledText, StyleInfo, short)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRXlsExporter.java#L484-L656",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRXlsExporter",
        "method": "getLoadedCellStyle(short, short, short, short, short, HSSFFont, JRExporterGridCell)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRXlsExporter.java#L972-L984",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "JRXlsExporter.StyleInfo",
        "method": "StyleInfo(short, short, short, short, short, HSSFFont, BoxStyle)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/JRXlsExporter.java#L1735-L1755",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export",
        "class": "TextRenderer",
        "method": "initialize(Graphics2D, int, int, int, int, int, int, int, int, float, HorizontalAlignEnum, VerticalAlignEnum, float, float, int, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/TextRenderer.java#L183-L251",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export.draw",
        "class": "ElementDrawer",
        "method": "drawBottomPen(Graphics2D, JRPen, JRPen, JRPen, JRPrintElement, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/draw/ElementDrawer.java#L298-L386",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export.draw",
        "class": "ElementDrawer",
        "method": "drawLeftPen(Graphics2D, JRPen, JRPen, JRPen, JRPrintElement, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/draw/ElementDrawer.java#L208-L295",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export.draw",
        "class": "ElementDrawer",
        "method": "drawTopPen(Graphics2D, JRPen, JRPen, JRPen, JRPrintElement, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/draw/ElementDrawer.java#L118-L205",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export.ooxml",
        "class": "PptxRunHelper",
        "method": "exportProps(String, Map, Map, Locale)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/ooxml/PptxRunHelper.java#L132-L253",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export.xmlss",
        "class": "JRXmlssExporter",
        "method": "exportPage(JRPrintPage,CutsInfo,int,JRPrintElementIndex,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/xmlss/JRXmlssExporter.java#L487-L647",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.export.xmlss",
        "class": "JRXmlssExporter",
        "method": "exportReportToStream(Writer)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/export/xmlss/JRXmlssExporter.java#L355-L485",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.fill",
        "class": "DefaultChartTheme",
        "method": "calculateTickUnits(Axis, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/fill/DefaultChartTheme.java#L2029-L2110",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.fill",
        "class": "JRFillElementGroup",
        "method": "getStretchHeightDiff()",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/fill/JRFillElementGroup.java#L190-L251",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.fill",
        "class": "JRHorizontalFiller",
        "method": "fillGroupFooters(boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/fill/JRHorizontalFiller.java#L836-L954",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.fill",
        "class": "JRVerticalFiller",
        "method": "fillSummaryNoLastFooterSamePage()",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/fill/JRVerticalFiller.java#L1056-L1139",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.fill",
        "class": "JRVerticalFiller",
        "method": "fillSummaryWithLastFooterNoPageBands()",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/fill/JRVerticalFiller.java#L1390-L1712",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.fill",
        "class": "TextMeasurer",
        "method": "appendTruncateSuffix(AttributedCharacterIterator)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/fill/TextMeasurer.java#L488-L584",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.util",
        "class": "JRApiWriter",
        "method": "writeAxisFormat(String, JRFont, Color, JRFont, Color, String, Boolean, Color, String, String, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/util/JRApiWriter.java#L2064-L2121",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.util",
        "class": "JRBoxUtil",
        "method": "setToBox(Byte, Byte, Byte, Byte, Byte, Color, Color, Color, Color, Color, Integer, Integer, Integer, Integer, Integer, JRLineBox)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/util/JRBoxUtil.java#L134-L173",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.engine.util",
        "class": "JRStyledTextParser",
        "method": "parseStyle(JRStyledText,Node)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/engine/util/JRStyledTextParser.java#L384-L668",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.j2ee.servlets",
        "class": "XmlServlet",
        "method": "service(HttpServletRequest,HttpServletResponse)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/j2ee/servlets/XmlServlet.java#L57-L221",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jasperreports-3.7.3",
        "package": "net.sf.jasperreports.view",
        "class": "JRViewer",
        "method": "createHyperlinks(List,int,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jasperreports-3.7.4/blob/3da1023a1b2c2ac15148c10c20895a53ab076a12/src/net/sf/jasperreports/view/JRViewer.java#L1621-L1705",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "javacc-5.0",
        "package": "org.javacc.parser",
        "class": "Semanticize",
        "method": "start()",
        "github_url": "https://github.com/JavaQualitasCorpus/javacc-5.0/blob/c478b2e1f4b4ef3afdb0273eaac17d1eecfd36f4/src/org/javacc/parser/Semanticize.java#L55-L467",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jedit-4.3.2",
        "package": "org.gjt.sp.jedit",
        "class": "Buffer",
        "method": "save(View,String,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jedit-4.3.2/blob/9a64f6494276cc57f6dc85172c03e5982d81ef21/jEdit/org/gjt/sp/jedit/Buffer.java#L403-L608",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jedit-4.3.2",
        "package": "org.gjt.sp.jedit.gui",
        "class": "ExtendedGridLayout",
        "method": "buildGrid(Container,List,Set,Set)",
        "github_url": "https://github.com/JavaQualitasCorpus/jedit-4.3.2/blob/9a64f6494276cc57f6dc85172c03e5982d81ef21/jEdit/org/gjt/sp/jedit/gui/ExtendedGridLayout.java#L999-L1207",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jedit-4.3.2",
        "package": "org.gjt.sp.jedit.help",
        "class": "HelpIndex",
        "method": "indexEditorHelp()",
        "github_url": "https://github.com/JavaQualitasCorpus/jedit-4.3.2/blob/9a64f6494276cc57f6dc85172c03e5982d81ef21/jEdit/org/gjt/sp/jedit/help/HelpIndex.java#L81-L119",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jedit-4.3.2",
        "package": "org.gjt.sp.jedit.textarea",
        "class": "ChunkCache",
        "method": "updateChunksUpTo(int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jedit-4.3.2/blob/9a64f6494276cc57f6dc85172c03e5982d81ef21/jEdit/org/gjt/sp/jedit/textarea/ChunkCache.java#L607-L774",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jena-2.6.3",
        "package": "com.hp.hpl.jena.rdf.arp",
        "class": "JenaReader",
        "method": "processArpOptions(ARPOptions,String,Object,RDFErrorHandler)",
        "github_url": "https://github.com/JavaQualitasCorpus/jena-2.6.3/blob/4f8b307f58bab3bd1446ac9e8ccbdcbfea86daad/com/hp/hpl/jena/rdf/arp/JenaReader.java#L418-L544",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jena-2.6.3",
        "package": "com.hp.hpl.jena.reasoner.rulesys",
        "class": "FBRuleInfGraph",
        "method": "prepare()",
        "github_url": "https://github.com/JavaQualitasCorpus/jena-2.6.3/blob/4f8b307f58bab3bd1446ac9e8ccbdcbfea86daad/com/hp/hpl/jena/reasoner/rulesys/FBRuleInfGraph.java#L374-L483",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jena-2.6.3",
        "package": "jena",
        "class": "schemagen",
        "method": "determineLanguage()",
        "github_url": "https://github.com/JavaQualitasCorpus/jena-2.6.3/blob/4f8b307f58bab3bd1446ac9e8ccbdcbfea86daad/jena/schemagen.java#L215-L254",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jext-5.0",
        "package": "org.jext.project",
        "class": "DefaultProjectManager",
        "method": "jextEventFired(JextEvent)",
        "github_url": "https://github.com/JavaQualitasCorpus/jext-5.0/blob/9c3ac80b2b472b3045025712b801a2edd7d21b53/src/lib/org/jext/project/DefaultProjectManager.java#L150-L173",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart",
        "class": "ChartFactory",
        "method": "createStackedXYAreaChart(String, String, String, TableXYDataset, PlotOrientation, boolean, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/ChartFactory.java#L1648-L1705",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart",
        "class": "ChartFactory",
        "method": "createWindPlot(String, String, String, WindDataset, boolean, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/ChartFactory.java#L2193-L2232",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart",
        "class": "LegendItem",
        "method": "LegendItem(String, String, String, String, Shape, Paint, Stroke, Paint)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/LegendItem.java#L253-L280",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.annotations",
        "class": "XYImageAnnotation",
        "method": "draw(Graphics2D, XYPlot, Rectangle2D, ValueAxis, ValueAxis, int, PlotRenderingInfo)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/annotations/XYImageAnnotation.java#L178-L234",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.axis",
        "class": "LogarithmicAxis",
        "method": "refreshTicksHorizontal(Graphics2D, Rectangle2D, RectangleEdge)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/axis/LogarithmicAxis.java#L721-L868",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.axis",
        "class": "LogarithmicAxis",
        "method": "refreshTicksVertical(Graphics2D, Rectangle2D, RectangleEdge)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/axis/LogarithmicAxis.java#L870-L1058",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.axis",
        "class": "PeriodAxis",
        "method": "drawTickMarksHorizontal(Graphics2D, AxisState, Rectangle2D, RectangleEdge)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/axis/PeriodAxis.java#L712-L799",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.axis",
        "class": "PeriodAxisLabelInfo",
        "method": "PeriodAxisLabelInfo(Class, DateFormat, RectangleInsets, Font, Paint, boolean, Stroke, Paint)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/axis/PeriodAxisLabelInfo.java#L137-L188",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.block",
        "class": "BlockBorder",
        "method": "BlockBorder(double, double, double, double, Paint)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/block/BlockBorder.java#L107-L119",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "CategoryPlot",
        "method": "drawRangeCrosshair(Graphics2D, Rectangle2D, PlotOrientation, double, ValueAxis, Stroke, Paint)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/CategoryPlot.java#L4142-L4182",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "CategoryPlot",
        "method": "render(Graphics2D, Rectangle2D, int, PlotRenderingInfo, CategoryCrosshairState)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/CategoryPlot.java#L3787-L3861",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "PiePlot3D",
        "method": "drawSide(Graphics2D, Rectangle2D, Arc2D, Area, Area, Paint, Paint, Stroke, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/PiePlot3D.java#L595-L969",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "RingPlot",
        "method": "drawItem(Graphics2D, int, Rectangle2D, PiePlotState, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/RingPlot.java#L328-L458",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "SpiderWebPlot",
        "method": "drawRadarPoly(Graphics2D,Rectangle2D,Point2D,PlotRenderingInfo,int,int,double,double)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/SpiderWebPlot.java#L1260-L1383",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "XYPlot",
        "method": "draw(Graphics2D, Rectangle2D, Point2D, PlotState, PlotRenderingInfo)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/XYPlot.java#L3125-L3390",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "XYPlot",
        "method": "drawDomainCrosshair(Graphics2D, Rectangle2D, PlotOrientation, double, ValueAxis, Stroke, Paint)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/XYPlot.java#L4161-L4197",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "XYPlot",
        "method": "getDataRange(ValueAxis)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/XYPlot.java#L4398-L4503",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.plot",
        "class": "XYPlot",
        "method": "render(Graphics2D, Rectangle2D, int, PlotRenderingInfo, CrosshairState)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/plot/XYPlot.java#L3677-L3775",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.renderer.category",
        "class": "LayeredBarRenderer",
        "method": "drawVerticalItem(Graphics2D, CategoryItemRendererState, Rectangle2D, CategoryPlot, CategoryAxis, ValueAxis, CategoryDataset, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/renderer/category/LayeredBarRenderer.java#L337-L469",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList",
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.renderer.category",
        "class": "LineRenderer3D",
        "method": "drawItem(Graphics2D, CategoryItemRendererState, Rectangle2D, CategoryPlot, CategoryAxis, ValueAxis, CategoryDataset, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/renderer/category/LineRenderer3D.java#L495-L611",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.renderer.xy",
        "class": "AbstractXYItemRenderer",
        "method": "drawRangeMarker(Graphics2D, XYPlot, ValueAxis, Marker, Rectangle2D)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/renderer/xy/AbstractXYItemRenderer.java#L1202-L1363",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.renderer.xy",
        "class": "XYStepAreaRenderer",
        "method": "initialise(Graphics2D, Rectangle2D, XYPlot, XYDataset, PlotRenderingInfo)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/renderer/xy/XYStepAreaRenderer.java#L302-L329",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList",
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.chart.renderer.xy",
        "class": "XYStepRenderer",
        "method": "drawItem(Graphics2D, XYItemRendererState, Rectangle2D, PlotRenderingInfo, XYPlot, ValueAxis, ValueAxis, XYDataset, int, int, CrosshairState, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/chart/renderer/xy/XYStepRenderer.java#L177-L306",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.general",
        "class": "DatasetUtilities",
        "method": "findMaximumRangeValue(CategoryDataset)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/general/DatasetUtilities.java#L1681-L1735",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.general",
        "class": "DatasetUtilities",
        "method": "findMaximumRangeValue(XYDataset)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/general/DatasetUtilities.java#L1737-L1795",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.general",
        "class": "DatasetUtilities",
        "method": "findMinimumRangeValue(XYDataset)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/general/DatasetUtilities.java#L1619-L1679",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.jdbc",
        "class": "JDBCCategoryDataset",
        "method": "executeQuery(Connection,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/jdbc/JDBCCategoryDataset.java#L194-L316",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.jdbc",
        "class": "JDBCXYDataset",
        "method": "executeQuery(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/jdbc/JDBCCategoryDataset.java#L178-L192",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.statistics",
        "class": "DefaultStatisticalCategoryDataset",
        "method": "updateBounds()",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/statistics/DefaultStatisticalCategoryDataset.java#L531-L624",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.statistics",
        "class": "Statistics",
        "method": "calculateMean(Collection, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/statistics/Statistics.java#L125-L171",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.time",
        "class": "MovingAverage",
        "method": "createMovingAverage(TimeSeries, String, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/time/MovingAverage.java#L96-L178",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.time",
        "class": "MovingAverage",
        "method": "createMovingAverage(XYDataset, int, String, double, double)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/time/MovingAverage.java#L281-L360",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jfreechart-1.0.13",
        "package": "org.jfree.data.time",
        "class": "Week",
        "method": "parseWeek(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jfreechart-1.0.13/blob/6a295140f831208983e215ace6512dcb671166bb/source/org/jfree/data/time/Week.java#L521-L580",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jgraph-5.13.0.0",
        "package": "com.jgraph.example.panelexample",
        "class": "FlyweightUIComponent",
        "method": "installAttributes(Object,CellView,boolean,JGraph)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgraph-5.13.0.0/blob/bce4e5747e4d96a006c3d4f82207f10588c82c85/examples/com/jgraph/example/panelexample/FlyweightUIComponent.java#L141-L259",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jgraph-5.13.0.0",
        "package": "com.jgraph.layout.hierarchical",
        "class": "JGraphMedianHybridCrossingReduction",
        "method": "transpose(int,JGraphHierarchyModel)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgraph-5.13.0.0/blob/bce4e5747e4d96a006c3d4f82207f10588c82c85/src/com/jgraph/layout/hierarchical/JGraphMedianHybridCrossingReduction.java#L237-L383",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jgraphpad-5.10.0.2",
        "package": "org.jgraph.plugins.layouts",
        "class": "GEMLayoutSettings",
        "method": "setOptimizationConfiguration(Properties)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgraphpad-5.10.0.2/blob/a3b912a376d763243ec6627078d82ba7df46e432/src/org/jgraph/plugins/layouts/GEMLayoutSettings.java#L1776-L1778",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jgraphpad-5.10.0.2",
        "package": "org.microplatform.gui",
        "class": "org.microplatform.gui.MDIContainer$1",
        "method": "construct()",
        "github_url": "https://github.com/JavaQualitasCorpus/jgraphpad-5.10.0.2/blob/a3b912a376d763243ec6627078d82ba7df46e432/src/org/microplatform/gui/MDIContainer.java#L151-L179",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jgrapht-0.8.1",
        "package": "org.jgrapht.alg",
        "class": "KShortestPathsIterator",
        "method": "KShortestPathsIterator(Graph,Object,Object,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgrapht-0.8.1/blob/d09094df87ed281e5f7e496941f7fe0aa84b60cd/src/org/jgrapht/alg/KShortestPathsIterator.java#L107-L132",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jgrapht-0.8.1",
        "package": "org.jgrapht.graph",
        "class": "AbstractBaseGraph",
        "method": "AbstractBaseGraph(EdgeFactory,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgrapht-0.8.1/blob/d09094df87ed281e5f7e496941f7fe0aa84b60cd/src/org/jgrapht/graph/AbstractBaseGraph.java#L98-L126",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups",
        "class": "JChannelFactory",
        "method": "parse(Element,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/JChannelFactory.java#L558-L622",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups",
        "class": "Version",
        "method": "encode(int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/Version.java#L76-L79",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ConnectionTable",
        "method": "ConnectionTable(Receiver, InetAddress, InetAddress, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ConnectionTable.java#L63-L87",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ConnectionTable",
        "method": "ConnectionTable(Receiver, InetAddress, InetAddress, int, int, long, long)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ConnectionTable.java#L92-L123",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ConnectionTableNIO",
        "method": "ConnectionTableNIO(Receiver, InetAddress, InetAddress, int, int, long, long)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ConnectionTableNIO.java#L124-L147",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ConnectionTableNIO",
        "method": "ConnectionTableNIO(Receiver, InetAddress, InetAddress, int, int, long, long, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ConnectionTableNIO.java#L150-L165",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ReplCache",
        "method": "_put(K, V, short, long, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ReplCache.java#L501-L551",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ReplCache",
        "method": "get(K)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ReplCache.java#L398-L457",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "ReplicatedMap",
        "method": "_replace(Serializable, Serializable, Serializable)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/ReplicatedMap.java#L24-L24",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "RpcDispatcher",
        "method": "RpcDispatcher(Channel, MessageListener, MembershipListener, Object, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/RpcDispatcher.java#L55-L61",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "RpcDispatcher",
        "method": "callRemoteMethods(Vector<Address>, String, Object[], Class[], int, long, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/RpcDispatcher.java#L194-L198",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "RpcDispatcher",
        "method": "callRemoteMethods(Vector<Address>, String, Object[], Class[], int, long, boolean, RspFilter)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/RpcDispatcher.java#L200-L206",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "RpcDispatcher",
        "method": "callRemoteMethods(Vector<Address>, String, Object[], String[], int, long, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/RpcDispatcher.java#L220-L225",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "RpcDispatcher",
        "method": "callRemoteMethodsWithFuture(Vector<Address>, MethodCall, int, long, boolean, boolean, RspFilter)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/RpcDispatcher.java#L280-L286",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks",
        "class": "TCPConnectionMap",
        "method": "TCPConnectionMap(String, ThreadFactory, Receiver, InetAddress, InetAddress, int, int, long, long)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/TCPConnectionMap.java#L55-L79",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.blocks.mux",
        "class": "MuxMessageDispatcher",
        "method": "MuxMessageDispatcher(short, Channel, MessageListener, MembershipListener, RequestHandler)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/blocks/mux/MuxMessageDispatcher.java#L43-L51",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.demos",
        "class": "Draw",
        "method": "Draw(String, boolean, boolean, boolean, long, boolean, boolean, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/demos/Draw.java#L46-L63",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.demos",
        "class": "MemcachedServer",
        "method": "start(String, InetAddress, int, int, int, long, long, boolean, boolean, int, long, int, long)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/demos/MemcachedServer.java#L23-L69",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.demos",
        "class": "ReplCacheDemo",
        "method": "start(String, String, long, long, boolean, boolean, int, long, int, long)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/demos/ReplCacheDemo.java#L140-L279",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.protocols",
        "class": "COMPRESS",
        "method": "up(Event)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/protocols/COMPRESS.java#L123-L168",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.protocols",
        "class": "S3_PING.ListBucketResponse.ListBucketHandler",
        "method": "endElement(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/protocols/S3_PING.java#L1040-L1102",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.protocols",
        "class": "UNICAST2",
        "method": "handleDataReceived(Address, long, long, boolean, Message, Event)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/protocols/UNICAST2.java#L536-L648",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.protocols.pbcast",
        "class": "ClientGmsImpl",
        "method": "joinInternal(Address, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/protocols/pbcast/ClientGmsImpl.java#L45-L208",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.stack",
        "class": "Configurator",
        "method": "setDefaultValues(Vector<ProtocolConfiguration>, Vector<Protocol>, StackType)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/stack/Configurator.java#L588-L690",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.stack",
        "class": "ProtocolStack",
        "method": "destroy()",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/stack/ProtocolStack.java#L711-L743",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.stack",
        "class": "ProtocolStack",
        "method": "startStack(String, Address)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/stack/ProtocolStack.java#L747-L810",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.util",
        "class": "JUnitXMLReporter",
        "method": "print(PrintStream, String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/util/JUnitXMLReporter.java#L170-L178",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.util",
        "class": "Proxy",
        "method": "Proxy(InetAddress, int, InetAddress, int, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/util/Proxy.java#L87-L94",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.util",
        "class": "Proxy",
        "method": "Proxy(InetAddress, int, InetAddress, int, boolean, boolean, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/util/Proxy.java#L96-L100",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.util",
        "class": "ThreadManagerThreadPoolExecutor",
        "method": "ThreadManagerThreadPoolExecutor(int, int, long, TimeUnit, BlockingQueue<Runnable>, ThreadFactory, RejectedExecutionHandler)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/util/ThreadManagerThreadPoolExecutor.java#L29-L32",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.util",
        "class": "Util",
        "method": "objectToStream(Object, DataOutputStream)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/util/Util.java#L559-L633",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jgroups-2.10.0",
        "package": "org.jgroups.util",
        "class": "Util",
        "method": "replaceProperties(String, Properties)",
        "github_url": "https://github.com/JavaQualitasCorpus/jgroups-2.10.0/blob/fdb5ad24c4fc4a6ff78806015e0d41159510c820/src/org/jgroups/util/Util.java#L3495-L3633",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jhotdraw-7.5.1",
        "package": "org.jhotdraw.draw",
        "class": "DefaultDrawingViewTransferHandler",
        "method": "importData(JComponent,Transferable,HashSet,Point)",
        "github_url": "https://github.com/JavaQualitasCorpus/jhotdraw-7.5.1/blob/16a95edf64d873c104d5ea587f68a7b503dd2eb4/Source/jhotdraw7/src/main/java/org/jhotdraw/draw/DefaultDrawingViewTransferHandler.java#L74-L297",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jhotdraw-7.5.1",
        "package": "org.jhotdraw.samples.odg.io",
        "class": "ODGInputFormat",
        "method": "toPath(String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jhotdraw-7.5.1/blob/16a95edf64d873c104d5ea587f68a7b503dd2eb4/Source/jhotdraw7/src/main/java/org/jhotdraw/samples/odg/io/ODGInputFormat.java#L1431-L1878",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jhotdraw-7.5.1",
        "package": "org.jhotdraw.samples.odg.io",
        "class": "ODGStylesReader",
        "method": "readGraphicPropertiesElement(IXMLElement,HashMap)",
        "github_url": "https://github.com/JavaQualitasCorpus/jhotdraw-7.5.1/blob/16a95edf64d873c104d5ea587f68a7b503dd2eb4/Source/jhotdraw7/src/main/java/org/jhotdraw/samples/odg/io/ODGStylesReader.java#L309-L371",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney",
        "class": "EntryComparator",
        "method": "getInstance(String,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/EntryComparator.java#L44-L72",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.gui",
        "class": "AccountEntriesPanel.EntryCellRenderer",
        "method": "getListCellRendererComponent(JList,Object,int,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/gui/AccountEntriesPanel.java#L912-L928",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.gui",
        "class": "CategoryPanel.CategoryTreeCellRenderer",
        "method": "getTreeCellRendererComponent(JTree, Object, boolean, boolean, boolean, int, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/gui/CategoryPanel.java#L251-L278",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.gui",
        "class": "StatusComboBox.Renderer",
        "method": "getListCellRendererComponent(JList, Object, int, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/gui/StatusComboBox.java#L43-L60",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.gui",
        "class": "TransferDialog",
        "method": "showDialog(Account, Account, long, long)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/gui/TransferDialog.java#L68-L94",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.io",
        "class": "MT940",
        "method": "importTransaction(Session, BufferedReader)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/io/MT940.java#L116-L286",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.io",
        "class": "QIF",
        "method": "exportAccount(Session, Account, File)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/io/QIF.java#L349-L414",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.io",
        "class": "QIF",
        "method": "extractCategory(Session, Accounts, Account, Entry, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/io/QIF.java#L308-L347",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.io",
        "class": "QIF",
        "method": "extractSplittedCategory(Session, Accounts, Account, Entry, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/io/QIF.java#L241-L259",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "jmoney-0.4.4",
        "package": "net.sf.jmoney.io",
        "class": "QIF",
        "method": "removeSimilarTransfer(Account, Entry)",
        "github_url": "https://github.com/JavaQualitasCorpus/jmoney-0.4.4/blob/5a0bd44c86e365abab8a15947fcab74f3f90db63/source/net/sf/jmoney/io/QIF.java#L506-L549",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jparse-0.96",
        "package": "jparse",
        "class": "JavaParser",
        "method": "compilationUnit()",
        "github_url": "https://github.com/JavaQualitasCorpus/jparse-0.96/blob/0791e765a055ed00623032d467f0ec531b7ba8ee/jparse/JavaParser.java#L178-L296",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jparse-0.96",
        "package": "jparse",
        "class": "JavaParser",
        "method": "field()",
        "github_url": "https://github.com/JavaQualitasCorpus/jparse-0.96/blob/0791e765a055ed00623032d467f0ec531b7ba8ee/jparse/JavaParser.java#L1185-L1451",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jpf-1.0.2",
        "package": "org.java.plugin.registry.xml",
        "class": "PluginRegistryImpl",
        "method": "register(URL[])",
        "github_url": "https://github.com/JavaQualitasCorpus/jpf-1.5.1/blob/3da103d4bfb913f02b43a107a236a568c0a9bc1a/source/org/java/plugin/registry/xml/PluginRegistryImpl.java#L122-L316",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jpf-1.0.2",
        "package": "org.java.plugin.standard",
        "class": "ShadowDataController",
        "method": "shadowResource(URL,String,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jpf-1.5.1/blob/3da103d4bfb913f02b43a107a236a568c0a9bc1a/source/org/java/plugin/standard/ShadingPathResolver.java#L667-L813",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "jpf-1.0.2",
        "package": "org.java.plugin.tools.ant",
        "class": "BaseJpfTask",
        "method": "initRegistry(boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/jpf-1.5.1/blob/3da103d4bfb913f02b43a107a236a568c0a9bc1a/source-tools/org/java/plugin/tools/ant/BaseJpfTask.java#L144-L223",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jsXe-04_beta",
        "package": "net.sourceforge.jsxe.dom",
        "class": "DOMSerializer",
        "method": "rSerializeNode(Writer,Node,String,String,int,int,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/jsXe-04_beta/blob/bca62a53f305fc1e2fab149f8773aa12a3407f9f/src/net/sourceforge/jsxe/dom/DOMSerializer.java#L346-L752",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "jspwiki-2.8.4",
        "package": "com.ecyrd.jspwiki.plugin",
        "class": "PageViewPlugin.PageViewManager",
        "method": "execute(WikiContext,Map)",
        "github_url": "https://github.com/JavaQualitasCorpus/jspwiki-2.8.4/blob/20fda747a7c5ade4b7a5d905afb68e0474214b88/src/com/ecyrd/jspwiki/plugin/PageViewPlugin.java#L290-L508",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "jung-2.0.1",
        "package": "edu.uci.ics.jung.io.graphml.parser",
        "class": "GraphElementParser",
        "method": "parse(XMLEventReader,StartElement)",
        "github_url": "https://github.com/JavaQualitasCorpus/jung-2.0.1/blob/a3e1be8b2979cd93575f18114fea602c84fa274e/jung-io-2.0.1-sources/edu/uci/ics/jung/io/graphml/parser/GraphElementParser.java#L46-L188",
        "source_code": ""
    },
    {
        "error": 404,
        "code_smells": [
            "LongMethod"
        ],
        "project": "log4j-1.2.16",
        "package": "org.apache.log4j.spi",
        "class": "LocationInfo",
        "method": "LocationInfo(Throwable,String)",
        "github_url": "",
        "source_code": ""
    },
    {
        "version": "lesser",
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "lucene-3.5.0",
        "package": "org.apache.lucene.index",
        "class": "FreqProxTermsWriter",
        "method": "appendPostings(String,SegmentWriteState,FreqProxTermsWriterPerField[],FormatPostingsFieldsConsumer)",
        "github_url": "",
        "source_code": ""
    },
    {
        "version": "lesser",
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "lucene-3.5.0",
        "package": "org.apache.lucene.search.highlight",
        "class": "Highlighter",
        "method": "getBestTextFragments(TokenStream,String,boolean,int)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "megamek-0.35.18",
        "package": "megamek.common",
        "class": "Mech",
        "method": "getBattleForceStandardWeaponsDamage(int,int,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/megamek-0.35.18/blob/d7aece1bc6741df8b7bc4bd9af91bc9a2fa260ee/src/megamek/common/Mech.java#L6339-L6719",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "megamek-0.35.18",
        "package": "megamek.common.actions",
        "class": "AbstractAttackAction",
        "method": "nightModifiers(IGame,Targetable,AmmoType,Entity,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/megamek-0.35.18/blob/d7aece1bc6741df8b7bc4bd9af91bc9a2fa260ee/src/megamek/common/actions/AbstractAttackAction.java#L86-L215",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "megamek-0.35.18",
        "package": "megamek.common.weapons",
        "class": "MissileWeaponHandler",
        "method": "calcHits(Vector)",
        "github_url": "https://github.com/JavaQualitasCorpus/megamek-0.35.18/blob/d7aece1bc6741df8b7bc4bd9af91bc9a2fa260ee/src/megamek/common/weapons/MissileWeaponHandler.java#L67-L277",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "megamek-0.35.18",
        "package": "megamek.common.weapons",
        "class": "WeaponHandler",
        "method": "handleEntityDamage(Entity,Vector,Building,int,int,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/megamek-0.35.18/blob/d7aece1bc6741df8b7bc4bd9af91bc9a2fa260ee/src/megamek/common/weapons/WeaponHandler.java#L518-L630",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "mvnforum-1.2.2-ga",
        "package": "com.mvnforum.auth",
        "class": "OnlineUserFactoryImpl",
        "method": "getAuthenticatedUser(GenericRequest,GenericResponse,String,String,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/mvnforum-1.2.2-ga/blob/bdad26a892f15fb9a90d7d1af651d28f6bd28b88/mvnforum/src/com/mvnforum/auth/OnlineUserFactoryImpl.java#L82-L196",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "mvnforum-1.2.2-ga",
        "package": "com.mvnforum.user",
        "class": "AttachmentWebHandler",
        "method": "processSearchAttachments(GenericRequest,GenericResponse)",
        "github_url": "https://github.com/JavaQualitasCorpus/mvnforum-1.2.2-ga/blob/bdad26a892f15fb9a90d7d1af651d28f6bd28b88/mvnforum/src/com/mvnforum/user/AttachmentWebHandler.java#L839-L940",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "mvnforum-1.2.2-ga",
        "package": "com.mvnforum.user",
        "class": "MessageFolderWebHandler",
        "method": "prepareDelete(GenericRequest)",
        "github_url": "https://github.com/JavaQualitasCorpus/mvnforum-1.2.2-ga/blob/bdad26a892f15fb9a90d7d1af651d28f6bd28b88/mvnforum/src/com/mvnforum/user/MessageFolderWebHandler.java#L155-L197",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "mvnforum-1.2.2-ga",
        "package": "com.mvnforum.user",
        "class": "MessageFolderWebHandler",
        "method": "prepareList(GenericRequest)",
        "github_url": "https://github.com/JavaQualitasCorpus/mvnforum-1.2.2-ga/blob/bdad26a892f15fb9a90d7d1af651d28f6bd28b88/mvnforum/src/com/mvnforum/user/MessageFolderWebHandler.java#L118-L153",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "mvnforum-1.2.2-ga",
        "package": "com.mvnforum.user",
        "class": "PmAttachmentWebHandler",
        "method": "processAdd(GenericRequest,GenericResponse)",
        "github_url": "https://github.com/JavaQualitasCorpus/mvnforum-1.2.2-ga/blob/bdad26a892f15fb9a90d7d1af651d28f6bd28b88/mvnforum/src/com/mvnforum/user/PmAttachmentWebHandler.java#L125-L395",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "mvnforum-1.2.2-ga",
        "package": "com.mvnforum.user",
        "class": "WatchWebHandler",
        "method": "sendMail_forMember(int,String,Timestamp)",
        "github_url": "https://github.com/JavaQualitasCorpus/mvnforum-1.2.2-ga/blob/bdad26a892f15fb9a90d7d1af651d28f6bd28b88/mvnforum/src/com/mvnforum/user/WatchWebHandler.java#L147-L281",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "nekohtml-1.9.14",
        "package": "org.cyberneko.html",
        "class": "HTMLConfiguration",
        "method": "setInputSource(XMLInputSource)",
        "github_url": "https://github.com/JavaQualitasCorpus/nekohtml-1.9.14/blob/5f25cf8cfc3c704a8a49ee68fb73fbce3e19ffa3/src/org/cyberneko/html/HTMLConfiguration.java#L461-L479",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "nekohtml-1.9.14",
        "package": "org.cyberneko.html",
        "class": "HTMLScanner.ContentScanner",
        "method": "scan(boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/nekohtml-1.9.14/blob/5f25cf8cfc3c704a8a49ee68fb73fbce3e19ffa3/src/org/cyberneko/html/HTMLScanner.java#L1940-L2082",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "nekohtml-1.9.14",
        "package": "org.cyberneko.html",
        "class": "HTMLTagBalancer",
        "method": "startElement(QName,XMLAttributes,Augmentations)",
        "github_url": "https://github.com/JavaQualitasCorpus/nekohtml-1.9.14/blob/5f25cf8cfc3c704a8a49ee68fb73fbce3e19ffa3/src/org/cyberneko/html/HTMLTagBalancer.java#L545-L751",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "nekohtml-1.9.14",
        "package": "org.cyberneko.html",
        "class": "ObjectFactory",
        "method": "createObject(String,String,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/nekohtml-1.9.14/blob/5f25cf8cfc3c704a8a49ee68fb73fbce3e19ffa3/src/org/cyberneko/html/ObjectFactory.java#L99-L231",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "openjms-0.7.7-beta-1",
        "package": "org.exolab.jms.net.uri",
        "class": "URIHelper",
        "method": "convertHostToAddress(URI)",
        "github_url": "https://github.com/JavaQualitasCorpus/openjms-0.7.7-beta-1/blob/12a2cc7a6e96750e756e3c527dbc9fd14bdf9047/modules/net/src/main/java/org/exolab/jms/net/uri/URIHelper.java#L222-L250",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "openjms-0.7.7-beta-1",
        "package": "org.exolab.jms.plugins.proxygen",
        "class": "ProxyGenerator",
        "method": "generateMethod(Method,SourceWriter)",
        "github_url": "https://github.com/JavaQualitasCorpus/openjms-0.7.7-beta-1/blob/12a2cc7a6e96750e756e3c527dbc9fd14bdf9047/modules/proxygen-plugin/src/main/java/org/exolab/jms/plugins/proxygen/ProxyGenerator.java#L285-L444",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "oscache-2.4.1",
        "package": "com.opensymphony.oscache.base.algorithm",
        "class": "AbstractConcurrentReadCache",
        "method": "put(Object,Object,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/oscache-2.3/blob/1c35c798a4668f26b7735dcf1a7d92130e3d7b5d/src/java/com/opensymphony/oscache/base/algorithm/AbstractConcurrentReadCache.java#L1530-L1662",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "oscache-2.4.1",
        "package": "com.opensymphony.oscache.base.algorithm",
        "class": "AbstractConcurrentReadCache",
        "method": "remove(Object,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/oscache-2.3/blob/1c35c798a4668f26b7735dcf1a7d92130e3d7b5d/src/java/com/opensymphony/oscache/base/algorithm/AbstractConcurrentReadCache.java#L1363-L1408",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.ddf",
        "class": "EscherDump",
        "method": "dumpOld(long, InputStream, PrintStream)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/ddf/EscherDump.java#L63-L424",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.eventmodel",
        "class": "EventRecordFactory",
        "method": "processRecords(InputStream)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/eventmodel/EventRecordFactory.java#L77-L120",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.eventusermodel.examples",
        "class": "XLS2CSVmra",
        "method": "processRecord(Record)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/examples/src/org/apache/poi/hssf/eventusermodel/examples/XLS2CSVmra.java#L131-L310",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.extractor",
        "class": "ExcelExtractor",
        "method": "getText()",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/extractor/ExcelExtractor.java#L272-L390",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record",
        "class": "DVRecord",
        "method": "DVRecord(int, int, int, boolean, boolean, boolean, boolean, String, String, boolean, String, String, Ptg[], Ptg[], CellRangeAddressList)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/DVRecord.java#L79-L103",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record",
        "class": "HyperlinkRecord",
        "method": "HyperlinkRecord(RecordInputStream)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/HyperlinkRecord.java#L431-L530",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record",
        "class": "RecordFactoryInputStream.StreamEncryptionInfo",
        "method": "StreamEncryptionInfo(RecordInputStream, List<Record>)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/RecordFactoryInputStream.java#L51-L88",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record.formula",
        "class": "FormulaShifter",
        "method": "FormulaShifter(int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/formula/FormulaShifter.java#L34-L45",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record.formula.functions",
        "class": "FinanceFunction",
        "method": "evaluate(int, int, ValueEval, ValueEval, ValueEval, ValueEval, ValueEval)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/formula/functions/FinanceFunction.java#L46-L61",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record.formula.functions",
        "class": "Replace",
        "method": "evaluate(int, int, ValueEval, ValueEval, ValueEval, ValueEval)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/formula/functions/FinanceFunction.java#L42-L45",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record.formula.functions",
        "class": "Substitute",
        "method": "replaceOneOccurrence(String, String, String, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/formula/functions/Substitute.java#L84-L107",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.record.formula.functions",
        "class": "TextFunction.SearchFind",
        "method": "evaluate(int, int, ValueEval, ValueEval)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/record/formula/functions/TextFunction.java#L216-L224",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "EscherGraphics",
        "method": "drawImage(Image, int, int, int, int, Color, ImageObserver)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/EscherGraphics.java#L186-L189",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "EscherGraphics",
        "method": "drawImage(Image, int, int, int, int, int, int, int, int, Color, ImageObserver)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/EscherGraphics.java#L164-L174",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "EscherGraphics",
        "method": "drawImage(Image, int, int, int, int, int, int, int, int, ImageObserver)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/EscherGraphics.java#L176-L184",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "EscherGraphics",
        "method": "drawRect(int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/EscherGraphics.java#L258-L262",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "HSSFCell",
        "method": "findCellComment(Sheet, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/HSSFCell.java#L1059-L1104",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "HSSFClientAnchor",
        "method": "setAnchor(short, int, int, int, short, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/HSSFClientAnchor.java#L166-L198",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "HSSFSheet",
        "method": "autoSizeColumn(int, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/HSSFSheet.java#L1665-L1823",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "HSSFSheet",
        "method": "shiftRows(int, int, int, boolean, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/HSSFSheet.java#L1169-L1288",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.hssf.usermodel",
        "class": "StaticFontMetrics",
        "method": "getFontDetails(Font)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/hssf/usermodel/StaticFontMetrics.java#L45-L125",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.ss.formula",
        "class": "EvaluationCache",
        "method": "notifyUpdateCell(int, int, EvaluationCell)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/ss/formula/EvaluationCache.java#L52-L117",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.ss.formula",
        "class": "FormulaParser",
        "method": "parseRangeable()",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/ss/formula/FormulaParser.java#L387-L512",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.ss.formula",
        "class": "IEvaluationListener",
        "method": "onReadPlainValue(int, int, int, ICacheEntry)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/ss/formula/IEvaluationListener.java#L40-L40",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.ss.formula",
        "class": "WorkbookEvaluator",
        "method": "evaluateFormula(OperationEvaluationContext, Ptg[])",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/ss/formula/WorkbookEvaluator.java#L333-L460",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.ss.util",
        "class": "CellRangeAddress",
        "method": "CellRangeAddress(int, int, int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/ss/util/CellRangeAddress.java#L37-L39",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "BinaryTree",
        "method": "doRedBlackDeleteFixup(Node, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/util/BinaryTree.java#L970-L1065",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "BinaryTree",
        "method": "doRedBlackInsert(Node, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/util/BinaryTree.java#L805-L880",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "NullLogger",
        "method": "log(int, Object, Object, Object)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/util/NullLogger.java#L73-L86",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "NullLogger",
        "method": "log(int, Object, Object, Object, Object, Object, Object, Object, Object)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/util/NullLogger.java#L160-L179",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "NullLogger",
        "method": "log(int, Object, Object, Object, Object, Object, Object, Object, Object, Throwable)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/util/NullLogger.java#L305-L326",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "NullLogger",
        "method": "log(int, Object, Object, Object, Object, Object, Object, Throwable)",
        "github_url": "https://github.com/JavaQualitasCorpus/poi-3.6/blob/af483dcbac39c54113883c04ca08c8e9deae4c76/src/java/org/apache/poi/util/NullLogger.java#L263-L281",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "poi-3.6",
        "package": "org.apache.poi.util",
        "class": "POILogger",
        "method": "log(int, Object, Object, Object, Object, Object, Object, Object, Throwable)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "pooka-3.0-080505",
        "package": "net.suberic.pooka.cache",
        "class": "CachingFolderInfo",
        "method": "loadFolder(boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/pooka-3.0-080505/blob/871be6d1c1fa76d16020bdc4300ba06a8eb8264d/net/suberic/pooka/cache/CachingFolderInfo.java#L67-L197",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "pooka-3.0-080505",
        "package": "net.suberic.pooka.gui.search",
        "class": "SearchEntryPanel",
        "method": "setEnabled(boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/pooka-3.0-080505/blob/871be6d1c1fa76d16020bdc4300ba06a8eb8264d/net/suberic/pooka/gui/search/SearchEntryPanel.java#L321-L333",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "pooka-3.0-080505",
        "package": "net.suberic.pooka.thread",
        "class": "LoadMessageThread",
        "method": "loadWaitingMessages()",
        "github_url": "https://github.com/JavaQualitasCorpus/pooka-3.0-080505/blob/871be6d1c1fa76d16020bdc4300ba06a8eb8264d/net/suberic/pooka/thread/LoadMessageThread.java#L81-L251",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "proguard-4.5.1",
        "package": "proguard.optimize.info",
        "class": "ReadWriteFieldMarker",
        "method": "visitConstantInstruction(Clazz,Method,CodeAttribute,int,ConstantInstruction)",
        "github_url": "https://github.com/JavaQualitasCorpus/proguard-4.9/blob/020fc2989bb63e2db912afc05cbcfbb015e246f4/src/proguard/optimize/info/ReadWriteFieldMarker.java#L53-L84",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "proguard-4.5.1",
        "package": "proguard.retrace",
        "class": "ReTrace",
        "method": "execute()",
        "github_url": "https://github.com/JavaQualitasCorpus/proguard-4.9/blob/020fc2989bb63e2db912afc05cbcfbb015e246f4/src/proguard/retrace/ReTrace.java#L106-L349",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "quartz-1.8.3",
        "package": "org.quartz.impl.jdbcjobstore",
        "class": "JobStoreSupport",
        "method": "clusterRecover(Connection,List)",
        "github_url": "https://github.com/JavaQualitasCorpus/quartz-1.8.3/blob/476ea64344819dc962c7ae18b1d9ad76454cefd7/quartz/src/main/java/org/quartz/impl/jdbcjobstore/JobStoreSupport.java#L3355-L3517",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "quartz-1.8.3",
        "package": "org.quartz.xml",
        "class": "XMLSchedulingDataProcessor",
        "method": "process(InputSource)",
        "github_url": "https://github.com/JavaQualitasCorpus/quartz-1.8.3/blob/476ea64344819dc962c7ae18b1d9ad76454cefd7/quartz/src/main/java/org/quartz/xml/XMLSchedulingDataProcessor.java#L534-L777",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "quartz-1.8.3",
        "package": "org.quartz.xml",
        "class": "XMLSchedulingDataProcessor",
        "method": "scheduleJobs(Scheduler)",
        "github_url": "https://github.com/JavaQualitasCorpus/quartz-1.8.3/blob/476ea64344819dc962c7ae18b1d9ad76454cefd7/quartz/src/main/java/org/quartz/xml/XMLSchedulingDataProcessor.java#L955-L1139",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "quickserver-1.4.7",
        "package": "org.quickserver.security",
        "class": "SecureStoreManager",
        "method": "loadKeyManagers(QuickServerConfig)",
        "github_url": "https://github.com/JavaQualitasCorpus/quickserver-1.4.7/blob/fe5f7cfd554c9b8b8da6ddd83df5cd93403d3740/src/main/org/quickserver/security/SecureStoreManager.java#L45-L128",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "quilt-0.6-a-5",
        "package": "org.quilt.cl",
        "class": "GraphTransformer",
        "method": "makeGraph(ClassGen,MethodGen)",
        "github_url": "https://github.com/JavaQualitasCorpus/quilt-0.6-a-5/blob/4afc47b10b9b6ed331c9530dd73c8ffdb2ba3b1d/src/java/org/quilt/cl/GraphTransformer.java#L125-L311",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "quilt-0.6-a-5",
        "package": "org.quilt.cover.stmt",
        "class": "GraphAction.LampLighter",
        "method": "discoverEdge(Edge)",
        "github_url": "https://github.com/JavaQualitasCorpus/quilt-0.6-a-5/blob/4afc47b10b9b6ed331c9530dd73c8ffdb2ba3b1d/src/java/org/quilt/cover/stmt/GraphAction.java#L71-L183",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "roller-4.0.1",
        "package": "org.apache.roller.planet.util",
        "class": "MailUtil",
        "method": "sendMessage(Session,String,String[],String[],String[],String,String,String)",
        "github_url": "https://github.com/JavaQualitasCorpus/roller-5.0.1/blob/08e7be2b36b148a2e293948e3664177953b83124/planet-business/src/main/java/org/apache/roller/planet/util/MailUtil.java#L40-L141",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "roller-4.0.1",
        "package": "org.apache.roller.weblogger.ui.core.util.menu",
        "class": "MenuHelper",
        "method": "buildMenu(ParsedMenu,String,User,Weblog)",
        "github_url": "https://github.com/JavaQualitasCorpus/roller-5.0.1/blob/08e7be2b36b148a2e293948e3664177953b83124/weblogger-web/src/main/java/org/apache/roller/weblogger/ui/core/util/menu/MenuHelper.java#L97-L223",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "roller-4.0.1",
        "package": "org.apache.roller.weblogger.ui.struts2.core",
        "class": "Profile",
        "method": "save()",
        "github_url": "https://github.com/JavaQualitasCorpus/roller-5.0.1/blob/08e7be2b36b148a2e293948e3664177953b83124/weblogger-web/src/main/java/org/apache/roller/weblogger/ui/struts2/core/Profile.java#L84-L144",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "roller-4.0.1",
        "package": "org.apache.roller.weblogger.util",
        "class": "MailUtil",
        "method": "sendEmailNotification(WeblogEntryComment,RollerMessages,I18nMessages,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/roller-5.0.1/blob/08e7be2b36b148a2e293948e3664177953b83124/weblogger-business/src/main/java/org/apache/roller/weblogger/util/MailUtil.java#L255-L491",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "roller-4.0.1",
        "package": "org.apache.roller.weblogger.webservices.xmlrpc",
        "class": "MetaWeblogAPIHandler",
        "method": "newPost(String,String,String,Hashtable,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/roller-5.0.1/blob/08e7be2b36b148a2e293948e3664177953b83124/weblogger-web/src/main/java/org/apache/roller/weblogger/webservices/xmlrpc/MetaWeblogAPIHandler.java#L215-L309",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "squirrel_sql-3.1.2",
        "package": "net.sourceforge.squirrel_sql.plugins.graph",
        "class": "ConstraintData",
        "method": "replaceCopiedColsByReferences(ColumnInfo[],boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/squirrel_sql-3.1.2/blob/3689ad1542f8fc593bbe988f04dde69a3901a2ed/src/net/sourceforge/squirrel_sql/plugins/graph/ConstraintData.java#L170-L192",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "sunflow-0.07.2",
        "package": "org.sunflow.core.accel",
        "class": "KDTree",
        "method": "buildTree(float,float,float,float,float,float,KDTree.BuildTask,int,IntArray,int,IntArray,KDTree.BuildStats)",
        "github_url": "https://github.com/JavaQualitasCorpus/sunflow-0.07.2/blob/c235802ade19f2442f12bfecc0fbb9ad2291ae2c/src/org/sunflow/core/accel/KDTree.java#L428-L641",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "sunflow-0.07.2",
        "package": "org.sunflow.core.renderer",
        "class": "BucketRenderer",
        "method": "renderBucket(Display,int,int,int,IntersectionState)",
        "github_url": "https://github.com/JavaQualitasCorpus/sunflow-0.07.2/blob/c235802ade19f2442f12bfecc0fbb9ad2291ae2c/src/org/sunflow/core/renderer/BucketRenderer.java#L197-L298",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "sunflow-0.07.2",
        "package": "org.sunflow.core.shader",
        "class": "PhongShader",
        "method": "scatterPhoton(ShadingState,Color)",
        "github_url": "https://github.com/JavaQualitasCorpus/sunflow-0.07.2/blob/c235802ade19f2442f12bfecc0fbb9ad2291ae2c/src/org/sunflow/core/shader/PhongShader.java#L47-L84",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "sunflow-0.07.2",
        "package": "org.sunflow.image",
        "class": "Bitmap",
        "method": "Bitmap(String,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/sunflow-0.07.2/blob/c235802ade19f2442f12bfecc0fbb9ad2291ae2c/src/org/sunflow/image/Bitmap.java#L21-L261",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "tomcat-7.0.2",
        "package": "org.apache.naming.factory.webservices",
        "class": "ServiceRefFactory",
        "method": "getObjectInstance(Object,Name,Context,Hashtable)",
        "github_url": "https://github.com/JavaQualitasCorpus/tomcat-7.0.2/blob/e6ceac3af5698478a6b2b18bcef5d1930de3058b/java/org/apache/naming/factory/webservices/ServiceRefFactory.java#L83-L335",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "trove-2.1.0",
        "package": "gnu.trove",
        "class": "TLinkedList.IteratorImpl",
        "method": "IteratorImpl(int)",
        "github_url": "https://github.com/JavaQualitasCorpus/trove-2.1.0/blob/423dd317beadd8ad59247cc7db9c52d95b6384ec/src/gnu/trove/TLinkedList.java#L558-L579",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "trove-2.1.0",
        "package": "gnu.trove.benchmark",
        "class": "MemoryUsage",
        "method": "main(String[])",
        "github_url": "https://github.com/JavaQualitasCorpus/trove-2.1.0/blob/423dd317beadd8ad59247cc7db9c52d95b6384ec/src/gnu/trove/benchmark/MemoryUsage.java#L72-L102",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "trove-2.1.0",
        "package": "gnu.trove.generate",
        "class": "Generate",
        "method": "generate(String, String, String, File, File)",
        "github_url": "https://github.com/JavaQualitasCorpus/trove-2.1.0/blob/423dd317beadd8ad59247cc7db9c52d95b6384ec/src/gnu/trove/generate/Generate.java#L106-L129",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "trove-2.1.0",
        "package": "gnu.trove.generate",
        "class": "Generate",
        "method": "generateP2P(String, String, String, File, File)",
        "github_url": "https://github.com/JavaQualitasCorpus/trove-2.1.0/blob/423dd317beadd8ad59247cc7db9c52d95b6384ec/src/gnu/trove/generate/Generate.java#L131-L170",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "wct-1.5.2",
        "package": "org.webcurator.core.profiles",
        "class": "ProfileManager",
        "method": "createDefaultProfile(Agency)",
        "github_url": "https://github.com/JavaQualitasCorpus/wct-1.5.2/blob/938a616dc04d837f088dd5dc2cca9d729373223d/WCTCore/src-app/org/webcurator/core/profiles/ProfileManager.java#L44-L60",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "wct-1.5.2",
        "package": "org.webcurator.core.targets",
        "class": "TargetManagerImpl",
        "method": "createBatchTargetInstances(AbstractTarget,Schedule,TargetGroup,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/wct-1.5.2/blob/938a616dc04d837f088dd5dc2cca9d729373223d/WCTCore/src-app/org/webcurator/core/targets/TargetManagerImpl.java#L1184-L1314",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "wct-1.5.2",
        "package": "org.webcurator.core.targets",
        "class": "TargetManagerImpl",
        "method": "createTargetInstances(AbstractTarget,Schedule,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/wct-1.5.2/blob/938a616dc04d837f088dd5dc2cca9d729373223d/WCTCore/src-app/org/webcurator/core/targets/TargetManagerImpl.java#L1316-L1461",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "wct-1.5.2",
        "package": "org.webcurator.ui.intray.controller",
        "class": "InTrayController",
        "method": "processFormSubmission(HttpServletRequest,HttpServletResponse,Object,BindException)",
        "github_url": "https://github.com/JavaQualitasCorpus/wct-1.5.2/blob/938a616dc04d837f088dd5dc2cca9d729373223d/WCTCore/src-app/org/webcurator/ui/intray/controller/InTrayController.java#L52-L98",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "wct-1.5.2",
        "package": "org.webcurator.ui.target.controller",
        "class": "TargetSchedulesHandler",
        "method": "processOther(TabbedController,Tab,HttpServletRequest,HttpServletResponse,Object,BindException)",
        "github_url": "https://github.com/JavaQualitasCorpus/wct-1.5.2/blob/938a616dc04d837f088dd5dc2cca9d729373223d/WCTCore/src-app/org/webcurator/ui/target/controller/TargetSchedulesHandler.java#L132-L273",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "wct-1.5.2",
        "package": "org.webcurator.ui.tools.controller",
        "class": "TreeToolController",
        "method": "handle(HttpServletRequest,HttpServletResponse,Object,BindException)",
        "github_url": "https://github.com/JavaQualitasCorpus/wct-1.5.2/blob/938a616dc04d837f088dd5dc2cca9d729373223d/WCTCore/src-app/org/webcurator/ui/tools/controller/TreeToolController.java#L151-L513",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "webmail-0.7.10",
        "package": "(default package)",
        "class": "SendMessage",
        "method": "handleURL(String,HTTPSession,HTTPRequestHeader)",
        "github_url": "https://github.com/JavaQualitasCorpus/webmail-0.7.10/blob/ef64dd25d3ebe8e7473c70ff26e73ecf70a66dd2/src/net/wastl/webmail/plugins/SendMessage.java#L109-L447",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "weka-3.7.5",
        "package": "weka.classifiers.functions",
        "class": "SMO.BinarySMO",
        "method": "buildClassifier(Instances,int,int,boolean,int,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/weka-3-6-9/blob/ae8b089566cd95db73138636aae6252c95cce9bb/weka-src/src/main/java/weka/classifiers/functions/SMO.java#L427-L630",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "weka-3.7.5",
        "package": "weka.estimators",
        "class": "CheckEstimator",
        "method": "runBasicTest(CheckEstimator.AttrTypes,int,int,int,int,int,boolean,boolean,int,int,int,FastVector)",
        "github_url": "https://github.com/JavaQualitasCorpus/weka-3-6-9/blob/ae8b089566cd95db73138636aae6252c95cce9bb/weka-src/src/main/java/weka/estimators/CheckEstimator.java#L1551-L1672",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.extensions",
        "class": "XSLProcessorContext",
        "method": "outputToResultTree(Stylesheet, Object)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/extensions/XSLProcessorContext.java#L142-L307",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.processor",
        "class": "ProcessorGlobalParamDecl",
        "method": "endElement(StylesheetHandler, String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/processor/ProcessorGlobalParamDecl.java#L55-L76",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.processor",
        "class": "XSLTAttributeDef",
        "method": "XSLTAttributeDef(String, String, boolean, boolean, boolean, int, String, int, String, int, String, int, String, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/processor/XSLTAttributeDef.java#L167-L202",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.processor",
        "class": "XSLTElementDef",
        "method": "XSLTElementDef(XSLTSchema, String, String, String, XSLTElementDef[], XSLTAttributeDef[], XSLTElementProcessor, Class)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/processor/XSLTElementDef.java#L44-L70",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.processor",
        "class": "XSLTElementDef",
        "method": "XSLTElementDef(XSLTSchema, String, String, String, XSLTElementDef[], XSLTAttributeDef[], XSLTElementProcessor, Class, boolean, int, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/processor/XSLTElementDef.java#L185-L209",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.processor",
        "class": "XSLTElementDef",
        "method": "build(String, String, String, XSLTElementDef[], XSLTAttributeDef[], XSLTElementProcessor, Class)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/processor/XSLTElementDef.java#L252-L293",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.templates",
        "class": "ElemCallTemplate",
        "method": "execute(TransformerImpl)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/templates/ElemCallTemplate.java#L183-L275",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.templates",
        "class": "ElemTemplateElement",
        "method": "resolvePrefixTables()",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/templates/ElemTemplateElement.java#L1018-L1122",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.transformer",
        "class": "NodeSortKey",
        "method": "NodeSortKey(TransformerImpl, XPath, boolean, boolean, String, boolean, PrefixResolver)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/transformer/NodeSortKey.java#L60-L128",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.transformer",
        "class": "TransformerIdentityImpl",
        "method": "transform(Source, Result)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/transformer/TransformerIdentityImpl.java#L317-L525",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.transformer",
        "class": "TransformerImpl",
        "method": "createSerializationHandler(Result, OutputProperties)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/transformer/TransformerImpl.java#L1065-L2418",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.compiler.util",
        "class": "MatchGenerator",
        "method": "MatchGenerator(int, Type, Type[], String[], String, String, InstructionList, ConstantPoolGen)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/compiler/util/MatchGenerator.java#L45-L54",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.compiler.util",
        "class": "MethodGenerator",
        "method": "widenConditionalBranchTargetOffsets()",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/compiler/util/MethodGenerator.java#L1918-L2146",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.compiler.util",
        "class": "TestGenerator",
        "method": "TestGenerator(int, Type, Type[], String[], String, String, InstructionList, ConstantPoolGen)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/compiler/util/TestGenerator.java#L51-L64",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "AdaptiveResultTreeImpl",
        "method": "AdaptiveResultTreeImpl(XSLTCDTMManager, int, DTMWSFilter, int, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/AdaptiveResultTreeImpl.java#L101-L111",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "DOMWSFilter",
        "method": "getShouldStripSpace(int, DTM)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/DOMWSFilter.java#L67-L129",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "LoadDocument",
        "method": "document(String, String, AbstractTranslet, DOM, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/LoadDocument.java#L155-L235",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "NodeSortRecordFactory",
        "method": "NodeSortRecordFactory(DOM, String, Translet, String[], String[], String[], String[])",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/NodeSortRecordFactory.java#L64-L135",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "SAXImpl",
        "method": "SAXImpl(XSLTCDTMManager, Source, int, DTMWSFilter, XMLStringFactory, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/SAXImpl.java#L707-L717",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "SortSettings",
        "method": "SortSettings(AbstractTranslet, int[], int[], Locale[], Collator[], String[])",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/SortSettings.java#L67-L90",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.dom",
        "class": "XSLTCDTMManager",
        "method": "getDTM(Source,boolean,DTMWSFilter,boolean,boolean,boolean,int,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/dom/XSLTCDTMManager.java#L235-L415",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xalan.xsltc.trax",
        "class": "TransformerFactoryImpl.PIParamWrapper",
        "method": "PIParamWrapper(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xalan/xsltc/trax/TransformerFactoryImpl.java#L150-L154",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.dtm",
        "class": "ObjectFactory",
        "method": "createObject(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/dtm/ObjectFactory.java#L106-L151",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList",
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.dtm",
        "class": "ObjectFactory",
        "method": "lookUpFactoryClassName(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/dtm/ObjectFactory.java#L235-L376",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.dtm.ref",
        "class": "DTMDefaultBaseTraversers",
        "method": "DTMDefaultBaseTraversers(DTMManager, Source, int, DTMWSFilter, XMLStringFactory, boolean, int, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/dtm/ref/DTMDefaultBaseTraversers.java#L66-L92",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.dtm.ref",
        "class": "DTMManagerDefault",
        "method": "getDTM(Source, boolean, DTMWSFilter, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/dtm/ref/DTMManagerDefault.java#L210-L480",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.dtm.ref.sax2dtm",
        "class": "SAX2DTM2.TypedAncestorIterator",
        "method": "setStartNode(int)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/dtm/ref/sax2dtm/SAX2DTM2.java#L1406-L1541",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer",
        "class": "ElemContext",
        "method": "push(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/ElemContext.java#L186-L221",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer",
        "class": "EmptySerializer",
        "method": "unparsedEntityDecl(String, String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/EmptySerializer.java#L738-L748",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer",
        "class": "ToSAXHandler",
        "method": "startElement(String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/ToSAXHandler.java#L303-L323",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer",
        "class": "ToStream",
        "method": "accumDefaultEntity(Writer, char, int, char[], int, boolean, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/ToStream.java#L1041-L1093",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer",
        "class": "ToTextStream",
        "method": "addAttribute(String, String, String, String, String, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/ToTextStream.java#L515-L527",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer",
        "class": "WriterToUTF8Buffered",
        "method": "write(char[], int, int)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/WriterToUTF8Buffered.java#L167-L307",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer.dom3",
        "class": "DOM3TreeWalker",
        "method": "initProperties(Properties)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/dom3/DOM3TreeWalker.java#L2043-L2147",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer.dom3",
        "class": "DOM3TreeWalker",
        "method": "isWFXMLChar(String, Character)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/dom3/DOM3TreeWalker.java#L1151-L1210",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer.dom3",
        "class": "DOM3TreeWalker",
        "method": "traverse(Node)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/dom3/DOM3TreeWalker.java#L232-L303",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongParametersList"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.serializer.utils",
        "class": "URI",
        "method": "URI(String, String, String, int, String, String, String)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/serializer/utils/URI.java#L262-L333",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.utils",
        "class": "DOMHelper",
        "method": "getNamespaceOfNode(Node)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/utils/DOMHelper.java#L602-L810",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.utils",
        "class": "DOMHelper",
        "method": "isNodeAfter(Node, Node)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/utils/DOMHelper.java#L179-L323",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xml.utils",
        "class": "DOMHelper",
        "method": "isNodeAfterSibling(Node, Node, Node)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xml/utils/DOMHelper.java#L340-L459",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xpath.axes",
        "class": "DescendantIterator",
        "method": "DescendantIterator(Compiler,int,int)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xpath/axes/DescendantIterator.java#L44-L126",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xpath.axes",
        "class": "PredicatedNodeTest",
        "method": "executePredicates(int, XPathContext)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xpath/axes/PredicatedNodeTest.java#L311-L405",
        "source_code": ""
    },
    {
        "code_smells": [
            "SwitchStatement"
        ],
        "project": "xalan-2.7.1",
        "package": "org.apache.xpath.functions",
        "class": "ObjectFactory",
        "method": "findProviderClass(String, ClassLoader, boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xalan-2.7.1/blob/13cf15013547bd021da175c2289737cf57b31c4c/src/org/apache/xpath/functions/ObjectFactory.java#L473-L528",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "xerces-2.10.0",
        "package": "org.apache.xerces.impl",
        "class": "XMLEntityManager",
        "method": "setupCurrentEntity(String,XMLInputSource,boolean,boolean)",
        "github_url": "https://github.com/JavaQualitasCorpus/xerces-2.10.0/blob/a00a5986b24d3b762ba230e8d44a20fae6ecd58a/src/org/apache/xerces/impl/XMLEntityManager.java#L927-L1190",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "xerces-2.10.0",
        "package": "org.apache.xerces.impl",
        "class": "XMLVersionDetector",
        "method": "fixupCurrentEntity(XMLEntityManager,char[],int)",
        "github_url": "https://github.com/JavaQualitasCorpus/xerces-2.10.0/blob/a00a5986b24d3b762ba230e8d44a20fae6ecd58a/src/org/apache/xerces/impl/XMLVersionDetector.java#L213-L239",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "xerces-2.10.0",
        "package": "org.apache.xerces.impl",
        "class": "XMLVersionDetector",
        "method": "startDocumentParsing(XMLEntityHandler,short)",
        "github_url": "https://github.com/JavaQualitasCorpus/xerces-2.10.0/blob/a00a5986b24d3b762ba230e8d44a20fae6ecd58a/src/org/apache/xerces/impl/XMLVersionDetector.java#L108-L131",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy",
            "LongMethod"
        ],
        "project": "xmojo-5.0.0",
        "package": "com.adventnet.jmx",
        "class": "DefaultDynamicMBean",
        "method": "invoke(String,Object[],String[])",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "FeatureEnvy"
        ],
        "project": "xmojo-5.0.0",
        "package": "com.adventnet.jmx",
        "class": "DefaultDynamicMBean",
        "method": "setAttribute(Attribute)",
        "github_url": "",
        "source_code": ""
    },
    {
        "code_smells": [
            "LongMethod"
        ],
        "project": "xmojo-5.0.0",
        "package": "com.adventnet.jmx",
        "class": "MBeanServerImpl",
        "method": "createMBean(String,ObjectName,Object[],String[])",
        "github_url": "",
        "source_code": ""
    }
]