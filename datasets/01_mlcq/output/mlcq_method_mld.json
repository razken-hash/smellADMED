[
  {
    "code_smells": [],
    "source_code": "public void doAssert(){assert(true);}"
  },
  {
    "code_smells": [],
    "source_code": "private static GenerateAutonomousDataWarehouseWalletDetails createAdwWalletDetails(String password){return GenerateAutonomousDataWarehouseWalletDetails.builder().password(password).build();}"
  },
  {
    "code_smells": [],
    "source_code": "public int[]test5(){return new int[1];}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public static void m(){C c=new C();E1 e1=new E1();E2 e2=new E2();c.foo(e1,e2.getClass());}"
  },
  {
    "code_smells": [],
    "source_code": "private static void downloadFileFromURL(String urlString,File destination)throws Exception{URL website=new URL(urlString);ReadableByteChannel rbc;rbc=Channels.newChannel(website.openStream());FileOutputStream fos=new FileOutputStream(destination);fos.getChannel().transferFrom(rbc,0,Long.MAX_VALUE);fos.close();rbc.close();}"
  },
  {
    "code_smells": [],
    "source_code": "private static void doPaginateWithRecordPaginator(final IdentityClient identityClient,final String compartmentId){final ListUsersRequest request=ListUsersRequest.builder().compartmentId(compartmentId).build();final Iterable<User>recordIterator=identityClient.getPaginators().listUsersRecordIterator(request);for(User user : recordIterator){}}"
  },
  {
    "code_smells": [],
    "source_code": "public Image getImage(Object obj){return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);}"
  },
  {
    "code_smells": [],
    "source_code": "public static StringBuffer formatInput(StringBuffer appendTo,Replaceable input,Transliterator.Position pos){return formatInput(appendTo,(ReplaceableString)input,pos);}"
  },
  {
    "code_smells": [],
    "source_code": "public UnicodeSet(int...pairs){if((pairs.length & 1)!=0){throw new IllegalArgumentException(\"Must have even number of integers\");}list=new int[pairs.length+1];len=list.length;int last=-1;int i=0;while(i<pairs.length){int start=pairs[i];if(last>=start){throw new IllegalArgumentException(\"Must be monotonically increasing.\");}list[i++]=last=start;int end=pairs[i]+1;if(last>=end){throw new IllegalArgumentException(\"Must be monotonically increasing.\");}list[i++]=last=end;}list[i]=HIGH;}"
  },
  {
    "code_smells": [],
    "source_code": "@Deprecated protected void handleComputeFields(int julianDay){int year,month,dayOfMonth,dayOfYear;long daysSinceEpoch=julianDay-PERSIAN_EPOCH;year=1+(int)floorDivide(33*daysSinceEpoch+3,12053);long farvardin1=365L*(year-1L)+floorDivide(8L*year+21,33L);dayOfYear=(int)(daysSinceEpoch-farvardin1);if(dayOfYear<216){month=dayOfYear/31;}else{month=(dayOfYear-6)/30;}dayOfMonth=dayOfYear-MONTH_COUNT[month][2]+1;++dayOfYear;internalSet(ERA,0);internalSet(YEAR,year);internalSet(EXTENDED_YEAR,year);internalSet(MONTH,month);internalSet(DAY_OF_MONTH,dayOfMonth);internalSet(DAY_OF_YEAR,dayOfYear);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private static void writeFinalRule(Writer writer,boolean isDst,AnnualTimeZoneRule rule,int fromRawOffset,int fromDSTSavings,long startTime)throws IOException{DateTimeRule dtrule=toWallTimeRule(rule.getRule(),fromRawOffset,fromDSTSavings);int timeInDay=dtrule.getRuleMillisInDay();if(timeInDay<0){startTime=startTime+(0-timeInDay);}else if(timeInDay>=Grego.MILLIS_PER_DAY){startTime=startTime-(timeInDay-(Grego.MILLIS_PER_DAY-1));}int toOffset=rule.getRawOffset()+rule.getDSTSavings();switch(dtrule.getDateRuleType()){case DateTimeRule.DOM: writeZonePropsByDOM(writer,isDst,rule.getName(),fromRawOffset+fromDSTSavings,toOffset,dtrule.getRuleMonth(),dtrule.getRuleDayOfMonth(),startTime,MAX_TIME);break;case DateTimeRule.DOW: writeZonePropsByDOW(writer,isDst,rule.getName(),fromRawOffset+fromDSTSavings,toOffset,dtrule.getRuleMonth(),dtrule.getRuleWeekInMonth(),dtrule.getRuleDayOfWeek(),startTime,MAX_TIME);break;case DateTimeRule.DOW_GEQ_DOM: writeZonePropsByDOW_GEQ_DOM(writer,isDst,rule.getName(),fromRawOffset+fromDSTSavings,toOffset,dtrule.getRuleMonth(),dtrule.getRuleDayOfMonth(),dtrule.getRuleDayOfWeek(),startTime,MAX_TIME);break;case DateTimeRule.DOW_LEQ_DOM: writeZonePropsByDOW_LEQ_DOM(writer,isDst,rule.getName(),fromRawOffset+fromDSTSavings,toOffset,dtrule.getRuleMonth(),dtrule.getRuleDayOfMonth(),dtrule.getRuleDayOfWeek(),startTime,MAX_TIME);break;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "BundleArchiveRevision(String location,File revisionDir,File file)throws IOException{this.revisionDir=revisionDir;this.location=location;if(!this.revisionDir.exists()){this.revisionDir.mkdirs();}if(revisionDir.getAbsolutePath().startsWith(RuntimeVariables.androidApplication.getFilesDir().getAbsolutePath())){externalStorage=false;}else{externalStorage=true;}if(shouldCopyInstallFile(file)){if(isSameDriver(revisionDir,file)){this.revisionLocation=FILE_PROTOCOL;this.bundleFile=new File(revisionDir,BUNDLE_FILE_NAME);boolean result=file.renameTo(bundleFile);if(!result){ApkUtils.copyInputStreamToFile(new FileInputStream(file),bundleFile);}}else{this.revisionLocation=FILE_PROTOCOL;this.bundleFile=new File(revisionDir,BUNDLE_FILE_NAME);ApkUtils.copyInputStreamToFile(new FileInputStream(file),bundleFile);}installSoLib(bundleFile);}else{this.revisionLocation=REFERENCE_PROTOCOL+file.getAbsolutePath();this.bundleFile=file;installSoLib(file);}updateMetadata();}"
  },
  {
    "code_smells": [],
    "source_code": "private final int register_mime_types(F filter,String prefix){final Iterator<String>i=filter.typesIterator();if(i==null){return 0;}int num=0;while(i.hasNext()){String name=i.next();num++;String baseName=name;final int slashpos=name.indexOf('/');if(slashpos>0){baseName=name.substring(0,slashpos).intern();}else{name=name+\"/*\";}addFilter(mTypeToFilter,name,filter);if(slashpos>0){addFilter(mBaseTypeToFilter,baseName,filter);}else{addFilter(mWildTypeToFilter,baseName,filter);}}return num;}"
  },
  {
    "code_smells": [],
    "source_code": "public static String join(CharSequence delimiter,Iterable tokens){StringBuilder sb=new StringBuilder();boolean firstTime=true;for(Object token : tokens){if(firstTime){firstTime=false;}else{sb.append(delimiter);}sb.append(token);}return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot,getNettyMetrics_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 0: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.success=new MetricInfo();struct.success.read(iprot);struct.set_success_isSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}"
  },
  {
    "code_smells": [],
    "source_code": "public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}"
  },
  {
    "code_smells": [],
    "source_code": "private void updateWindowState(List<Tuple>expired,List<Tuple>newEvents){LOG.debug(\"Update window state,{}expired,{}new events\",expired.size(),newEvents.size());Map<TaskStream,WindowState>state=new HashMap<>();updateState(state,expired,false);updateState(state,newEvents,true);updateStreamState(state);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){if(obj==null){return false;}if(getClass()!=obj.getClass()){return false;}final AnnotationDescription other=(AnnotationDescription)obj;if(!Objects.equals(this.annotationType,other.annotationType)){return false;}if(!Objects.equals(this.values,other.values)){return false;}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getClassName(){return className;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"RouteMeta{\"+\"type=\"+type+\",rawType=\"+rawType+\",destination=\"+destination+\",path='\"+path+'\\''+\",group='\"+group+'\\''+\",priority=\"+priority+\",extra=\"+extra+\",paramsType=\"+paramsType+\",name='\"+name+'\\''+'}';}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getString(int parameterIndex)throws SQLException{try{return stmt.getString(parameterIndex);}catch(Throwable t){throw checkException(t);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public CallableStatement prepareCall(String sql)throws SQLException{checkState();PreparedStatementHolder stmtHolder=null;PreparedStatementKey key=new PreparedStatementKey(sql,getCatalog(),MethodType.Precall_1);boolean poolPreparedStatements=holder.isPoolPreparedStatements();if(poolPreparedStatements){stmtHolder=holder.getStatementPool().get(key);}if(stmtHolder==null){try{stmtHolder=new PreparedStatementHolder(key,conn.prepareCall(sql));holder.getDataSource().incrementPreparedStatementCount();}catch(SQLException ex){handleException(ex,sql);}}initStatement(stmtHolder);DruidPooledCallableStatement rtnVal=new DruidPooledCallableStatement(this,stmtHolder);holder.addTrace(rtnVal);return rtnVal;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean visit(MySqlShowDatabasePartitionStatusStatement x){return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean visit(OracleExitStatement x){return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public int incrementAndGetVariantIndex(){return++variantIndex;}"
  },
  {
    "code_smells": [],
    "source_code": "public void addValue(Object value){this.values.add(value);}"
  },
  {
    "code_smells": [],
    "source_code": "public void start(){checkInst();if(scheduler==null){scheduler=new ScheduledThreadPoolExecutor(schedulerThreadSize);}scheduler.scheduleAtFixedRate(new Runnable(){@Override public void run(){collectSql();}},timeBetweenSqlCollect,timeBetweenSqlCollect,timeUnit);scheduler.scheduleAtFixedRate(new Runnable(){@Override public void run(){collectSpringMethod();}},timeBetweenSpringCollect,timeBetweenSpringCollect,timeUnit);scheduler.scheduleAtFixedRate(new Runnable(){@Override public void run(){collectWebURI();}},timeBetweenWebUriCollect,timeBetweenWebUriCollect,timeUnit);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void rmpath(String path){LOG.debug(\"Removing path \"+path);boolean succ=(new File(path)).delete();if(!succ){throw new RuntimeException(\"Failed to delete \"+path);}}"
  },
  {
    "code_smells": [],
    "source_code": "public ImmediatelyThrowsEvent makeImmediatelyThrowsEvent(final int processId,final int invokeId,final Throwable throwable){if(null==immediatelyThrowsEvent){immediatelyThrowsEvent=new ImmediatelyThrowsEvent(ILLEGAL_PROCESS_ID,ILLEGAL_INVOKE_ID,null);}unsafe.putInt(immediatelyThrowsEvent,processIdFieldInInvokeEventOffset,processId);unsafe.putInt(immediatelyThrowsEvent,invokeIdFieldInInvokeEventOffset,invokeId);unsafe.putObject(immediatelyThrowsEvent,throwableFieldInThrowsEventOffset,throwable);return immediatelyThrowsEvent;}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getCauseMessage(Throwable t){if(null!=t.getCause()){return getCauseMessage(t.getCause());}return t.getMessage();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected List<ClassStructure>initialValue(){final List<ClassStructure>annotationTypeClassStructures=new ArrayList<ClassStructure>();accept(new ClassVisitor(ASM7){@Override public AnnotationVisitor visitAnnotation(String desc,boolean visible){if(visible){final ClassStructure annotationTypeClassStructure=newInstance(Type.getType(desc).getClassName());if(null!=annotationTypeClassStructure){annotationTypeClassStructures.add(annotationTypeClassStructure);}}return super.visitAnnotation(desc,visible);}});return annotationTypeClassStructures;}"
  },
  {
    "code_smells": [],
    "source_code": "public NamedThreadFactory(String name,boolean daemon){this.name=name;this.daemon=daemon;SecurityManager s=System.getSecurityManager();group=(s!=null)? s.getThreadGroup(): Thread.currentThread().getThreadGroup();}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder mergeFrom(com.google.protobuf.Message other){if(other instanceof Entry){return mergeFrom((Entry)other);}else{super.mergeFrom(other);return this;}}"
  },
  {
    "code_smells": [],
    "source_code": "public static Header parseFrom(byte[]data,com.google.protobuf.ExtensionRegistryLite extensionRegistry)throws com.google.protobuf.InvalidProtocolBufferException{return PARSER.parseFrom(data,extensionRegistry);}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override public com.alibaba.otter.canal.protocol.CanalPacket.Unsub buildPartial(){com.alibaba.otter.canal.protocol.CanalPacket.Unsub result=new com.alibaba.otter.canal.protocol.CanalPacket.Unsub(this);result.destination_=destination_;result.clientId_=clientId_;result.filter_=filter_;onBuilt();return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public void execute(@Param(\"dataMediaSourceId\")Long dataMediaSourceId,Context context)throws Exception{DataMediaSource dataMediaSource=dataMediaSourceService.findById(dataMediaSourceId);List<DataMedia>dataMedias=dataMediaService.listByDataMediaSourceId(dataMediaSource.getId());context.put(\"source\",dataMediaSource);context.put(\"dataMedias\",dataMedias);}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder clear(){super.clear();tableId_=0L;bitField0_=(bitField0_ & ~0x00000001);schemaName_=\"\";bitField0_=(bitField0_ & ~0x00000002);tableName_=\"\";bitField0_=(bitField0_ & ~0x00000004);eventType_=\"\";bitField0_=(bitField0_ & ~0x00000008);if(oldKeysBuilder_==null){oldKeys_=java.util.Collections.emptyList();bitField0_=(bitField0_ & ~0x00000010);}else{oldKeysBuilder_.clear();}if(keysBuilder_==null){keys_=java.util.Collections.emptyList();bitField0_=(bitField0_ & ~0x00000020);}else{keysBuilder_.clear();}if(columnsBuilder_==null){columns_=java.util.Collections.emptyList();bitField0_=(bitField0_ & ~0x00000040);}else{columnsBuilder_.clear();}executeTime_=0L;bitField0_=(bitField0_ & ~0x00000080);pairId_=0L;bitField0_=(bitField0_ & ~0x00000100);syncMode_=\"\";bitField0_=(bitField0_ & ~0x00000200);syncConsistency_=\"\";bitField0_=(bitField0_ & ~0x00000400);size_=0L;bitField0_=(bitField0_ & ~0x00000800);remedy_=false;bitField0_=(bitField0_ & ~0x00001000);sql_=\"\";bitField0_=(bitField0_ & ~0x00002000);ddlSchemaName_=\"\";bitField0_=(bitField0_ & ~0x00004000);hint_=\"\";bitField0_=(bitField0_ & ~0x00008000);withoutSchema_=false;bitField0_=(bitField0_ & ~0x00010000);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "private static void makeAllColumnsPrimaryKeysIfNoPrimaryKeysFound(Table table){if((table!=null)&&(table.getPrimaryKeyColumns()!=null)&&(table.getPrimaryKeyColumns().length==0)){Column[]allCoumns=table.getColumns();for(Column column : allCoumns){column.setPrimaryKey(true);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setDdlSchemaName(String ddlSchemaName){this.ddlSchemaName=ddlSchemaName;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void execute(Tuple tuple,Object state,TimeWindow window){LOG.info(\"executing on window:{}\",window);Map<String,Integer>counts=(Map<String,Integer>)state;List<Object>partialWordCounts=tuple.getValues();for(Object partialWordCount : partialWordCounts){Pair<String,Integer>pair=(Pair<String,Integer>)partialWordCount;counts.put(pair.getFirst(),pair.getSecond());}}"
  },
  {
    "code_smells": [],
    "source_code": "public static void main(String[]args)throws Exception{isLocal=false;conf=JStormHelper.getConfig(args);if(args.length!=0){spoutSingle=false;}test();}"
  },
  {
    "code_smells": [],
    "source_code": "public GenericRequestMapper<Input,Output>build(){return new BaseRequestMapper<>(handlerChains);}"
  },
  {
    "code_smells": [],
    "source_code": "public IdList(final List<String>member){this.member=member;}"
  },
  {
    "code_smells": [],
    "source_code": "private void convertToMavenProject(final IProject project)throws InterruptedException{Job job=new Job(\"Enable Maven nature.\"){@Override protected IStatus run(IProgressMonitor monitor){try{ResolverConfiguration configuration=new ResolverConfiguration();configuration.setResolveWorkspaceProjects(true);configuration.setSelectedProfiles(\"\");final boolean hasMavenNature=project.hasNature(IMavenConstants.NATURE_ID);IProjectConfigurationManager configurationManager=MavenPlugin.getProjectConfigurationManager();configurationManager.enableMavenNature(project,configuration,monitor);if(!hasMavenNature){configurationManager.updateProjectConfiguration(project,monitor);}}catch(CoreException ex){AwsToolkitCore.getDefault().reportException(ex.getMessage(),ex);}return Status.OK_STATUS;}};job.schedule();job.join();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override @SuppressWarnings(\"unchecked\")public int executeUpdate(final String inSql)throws SQLException{this.sql=inSql;if(this.sql==null){throw new SQLException(\"sql is null\");}trimSQL();if(this.sql.length()==0){throw new SQLException(\"empty sql\");}String lowcaseSql=this.sql.toLowerCase();Object req=null;if(lowcaseSql.startsWith(\"create domain\")|| lowcaseSql.startsWith(\"create table\")){int pos=this.sql.lastIndexOf(\" \");String domain=convertSQLIdentifierToCatalogFormat(this.sql.substring(pos+1).trim(),DELIMITED_IDENTIFIER_QUOTE);req=new CreateDomainRequest().withDomainName(domain);}else if(lowcaseSql.startsWith(\"delete domain\")|| lowcaseSql.startsWith(\"delete table\")|| lowcaseSql.startsWith(\"drop table\")){int pos=this.sql.lastIndexOf(\" \");String domain=convertSQLIdentifierToCatalogFormat(this.sql.substring(pos+1).trim(),DELIMITED_IDENTIFIER_QUOTE);List<String>pending=this.conn.getPendingColumns(domain);if(pending!=null){pending=new ArrayList<>(pending);for(String attr : pending){this.conn.removePendingColumn(domain,attr);}}req=new DeleteDomainRequest().withDomainName(domain);}else if(lowcaseSql.startsWith(\"delete from\")){req=prepareDeleteRowRequest();}else if(lowcaseSql.startsWith(\"alter table \")){req=prepareDropAttributeRequest();}else if(lowcaseSql.startsWith(\"insert \")){req=prepareInsertRequest();}else if(lowcaseSql.startsWith(\"update \")){req=prepareUpdateRequest();}else if(lowcaseSql.startsWith(\"create testdomain \")){req=new ArrayList<>();String domain=//$NON-NLS-1$ convertSQLIdentifierToCatalogFormat(this.sql.substring(this.sql.lastIndexOf(\" \")+1).trim(),DELIMITED_IDENTIFIER_QUOTE);((List<Object>)req).add(new CreateDomainRequest().withDomainName(domain));ReplaceableAttribute attr=new ReplaceableAttribute().withName(\"attr1\").withValue(\"val1\").withReplace(Boolean.TRUE);for(int i=0;i<570;i++){((List<Object>)req).add(new PutAttributesRequest().withDomainName(domain).withItemName(\"item\"+i).withAttributes(attr));}}if(req!=null){int result=executeSDBRequest(req);if(this.params!=null){for(Object obj : this.params){if(obj instanceof SimpleDBItemName){((SimpleDBItemName)obj).setPersisted(true);}}}return result;}throw new SQLException(\"unsupported update: \"+this.sql);}"
  },
  {
    "code_smells": [],
    "source_code": "private void refreshSecurityGroups(){new RefreshSecurityGroupsThread().start();}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder setPrim(com.android.aapt.Resources.Primitive value){copyOnWrite();instance.setPrim(value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public static com.android.aapt.Resources.Source parseFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry)throws java.io.IOException{return com.google.protobuf.GeneratedMessageLite.parseFrom(DEFAULT_INSTANCE,input,extensionRegistry);}"
  },
  {
    "code_smells": [],
    "source_code": "public SimException(String message,Throwable cause){super(message,cause);}"
  },
  {
    "code_smells": [],
    "source_code": "public static Rop opInvokeDirect(Prototype meth){return new Rop(RegOps.INVOKE_DIRECT,meth.getParameterFrameTypes(),StdTypeList.THROWABLE);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void doClick(final MenuSelectionManager msm){final Dimension size=menuItem.getSize();AquaUtils.blinkMenu(new AquaUtils.Selectable(){public void paintSelected(final boolean selected){menuItem.setArmed(selected);menuItem.paintImmediately(0,0,size.width,size.height);}});super.doClick(msm);}"
  },
  {
    "code_smells": [],
    "source_code": "public Integer getCompressType(){if(compressType==null){compressType=0;}return compressType;}"
  },
  {
    "code_smells": [],
    "source_code": "public JedisPool(final GenericObjectPoolConfig poolConfig,final String host,final int port){this(poolConfig,host,port,Protocol.DEFAULT_TIMEOUT,null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){return new HashCodeBuilder().appendSuper(super.hashCode()).append(_syncType).append(_nuageVspCmsId).append(_success).toHashCode();}"
  },
  {
    "code_smells": [],
    "source_code": "private void init()throws ConfigurationException{if(_mshostDao!=null)return;Properties dbProps=DbProperties.getDbProperties();_clusterServicePort=NumbersUtil.parseInt(dbProps.getProperty(\"cluster.servlet.port\"),DEFAULT_SERVICE_PORT);if(s_logger.isInfoEnabled())s_logger.info(\"Cluster servlet port : \"+_clusterServicePort);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setDomainId(Long domainId){this.domainId=domainId;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected NetworkVO getDefaultNetworkForAdvancedZone(DataCenter dc){if(dc.getNetworkType()!=NetworkType.Advanced){throw new CloudRuntimeException(\"Zone \"+dc+\" is not advanced.\");}if(dc.isSecurityGroupEnabled()){List<NetworkVO>networks=_networkDao.listByZoneSecurityGroup(dc.getId());if(CollectionUtils.isEmpty(networks)){throw new CloudRuntimeException(\"Can not found security enabled network in SG Zone \"+dc);}return networks.get(0);}else{TrafficType defaultTrafficType=TrafficType.Public;List<NetworkVO>defaultNetworks=_networkDao.listByZoneAndTrafficType(dc.getId(),defaultTrafficType);if(defaultNetworks.size()!=1){throw new CloudRuntimeException(\"Found \"+defaultNetworks.size()+\" networks of type \"+defaultTrafficType+\" when expect to find 1\");}return defaultNetworks.get(0);}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public boolean executeSyncCmsId(NuageVspDeviceVO nuageVspDevice,SyncType syncType){NuageVspDeviceVO matchingNuageVspDevice=findMatchingNuageVspDevice(nuageVspDevice);if(syncType==SyncType.REGISTER && matchingNuageVspDevice!=null){String cmsId=findNuageVspCmsIdForDeviceOrHost(matchingNuageVspDevice.getId(),matchingNuageVspDevice.getHostId());registerNewNuageVspDevice(nuageVspDevice.getHostId(),cmsId);return true;}String cmsId=findNuageVspCmsIdForDeviceOrHost(nuageVspDevice.getId(),nuageVspDevice.getHostId());SyncNuageVspCmsIdCommand syncCmd=new SyncNuageVspCmsIdCommand(syncType,cmsId);SyncNuageVspCmsIdAnswer answer=(SyncNuageVspCmsIdAnswer)_agentMgr.easySend(nuageVspDevice.getHostId(),syncCmd);if(answer!=null){if(answer.getSuccess()){if(syncType==SyncType.REGISTER || answer.getSyncType()==SyncType.REGISTER){registerNewNuageVspDevice(nuageVspDevice.getHostId(),answer.getNuageVspCmsId());}else if(syncType==SyncType.UNREGISTER){removeLegacyNuageVspDeviceCmsId(nuageVspDevice.getId());}}else if(syncType==SyncType.AUDIT || syncType==SyncType.AUDIT_ONLY){s_logger.fatal(\"Nuage VSP Device with ID \"+nuageVspDevice.getId()+\" is configured with an unknown CMS ID!\");}}return answer!=null && answer.getSuccess();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public List<? extends Host>discoverHosts(final AddHostCmd cmd)throws IllegalArgumentException,DiscoveryException,InvalidParameterValueException{Long dcId=cmd.getZoneId();final Long podId=cmd.getPodId();final Long clusterId=cmd.getClusterId();String clusterName=cmd.getClusterName();final String url=cmd.getUrl();final String username=cmd.getUsername();final String password=cmd.getPassword();final List<String>hostTags=cmd.getHostTags();dcId=_accountMgr.checkAccessAndSpecifyAuthority(CallContext.current().getCallingAccount(),dcId);if(clusterName==null && clusterId==null){clusterName=\"Standalone-\"+url;}if(clusterId!=null){final ClusterVO cluster=_clusterDao.findById(clusterId);if(cluster==null){final InvalidParameterValueException ex=new InvalidParameterValueException(\"can not find cluster for specified clusterId\");ex.addProxyObject(clusterId.toString(),\"clusterId\");throw ex;}else{if(cluster.getGuid()==null){final List<HostVO>hosts=listAllHostsInCluster(clusterId);if(!hosts.isEmpty()){final CloudRuntimeException ex=new CloudRuntimeException(\"Guid is not updated for cluster with specified cluster id;need to wait for hosts in this cluster to come up\");ex.addProxyObject(cluster.getUuid(),\"clusterId\");throw ex;}}}}return discoverHostsFull(dcId,podId,clusterId,clusterName,url,username,password,cmd.getHypervisor(),hostTags,cmd.getFullUrlParams(),false);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean start(){return true;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public String getVMPassword(final GetVMPasswordCmd cmd){final Account caller=getCaller();final UserVmVO vm=_userVmDao.findById(cmd.getId());if(vm==null){final InvalidParameterValueException ex=new InvalidParameterValueException(\"No VM with specified id found.\");ex.addProxyObject(cmd.getId().toString(),\"vmId\");throw ex;}_accountMgr.checkAccess(caller,null,true,vm);_userVmDao.loadDetails(vm);final String password=vm.getDetail(\"Encrypted.Password\");if(password==null || password.equals(\"\")){final InvalidParameterValueException ex=new InvalidParameterValueException(\"No password for VM with specified id found.\"+\"If VM is created from password enabled template and SSH keypair is assigned to VM then only password can be retrieved.\");ex.addProxyObject(vm.getUuid(),\"vmId\");throw ex;}return password;}"
  },
  {
    "code_smells": [],
    "source_code": "public UsageVMSnapshotVO(long id,long zoneId,long accountId,long domainId,long vmId,Long diskOfferingId,long size,Date created,Date processed){this.zoneId=zoneId;this.accountId=accountId;this.domainId=domainId;this.diskOfferingId=diskOfferingId;this.id=id;this.size=size;this.created=created;this.vmId=vmId;this.processed=processed;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private static List<NameValuePair>getUserDetails(String query){List<NameValuePair>details=new ArrayList<NameValuePair>();if(query!=null && !query.isEmpty()){StringTokenizer allParams=new StringTokenizer(query,\"&\");while(allParams.hasMoreTokens()){String param=allParams.nextToken();details.add(new BasicNameValuePair(param.substring(0,param.indexOf(\"=\")),param.substring(param.indexOf(\"=\")+1)));}}return details;}"
  },
  {
    "code_smells": [],
    "source_code": "@DB()protected void setField(final Object entity,final ResultSet rs,ResultSetMetaData meta,final int index)throws SQLException{Attribute attr=_allColumns.get(new Pair<String,String>(meta.getTableName(index),meta.getColumnName(index)));if(attr==null){Table tbl=entity.getClass().getSuperclass().getAnnotation(Table.class);if(tbl!=null){attr=_allColumns.get(new Pair<String,String>(tbl.name(),meta.getColumnLabel(index)));}}assert(attr!=null): \"How come I can't find \"+meta.getCatalogName(index)+\".\"+meta.getColumnName(index);setField(entity,attr.field,rs,index);}"
  },
  {
    "code_smells": [],
    "source_code": "public StateMachine(){_initialStateEntry=new StateEntry(null);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected static void initialize(){STRAM.setChildren(Sets.newHashSet(APPLICATION,TEMPLATE));APPLICATION.setChildren(Sets.newHashSet(GATEWAY,OPERATOR,STREAM));OPERATOR.setChildren(Sets.newHashSet(PORT));PORT.setChildren(Sets.newHashSet(UNIFIER));STRAM_ELEMENT_TO_CONF_ELEMENT.clear();for(ConfElement confElement : ConfElement.values()){STRAM_ELEMENT_TO_CONF_ELEMENT.put(confElement.getStramElement(),confElement);for(StramElement sElement : confElement.getAllRelatedElements()){STRAM_ELEMENT_TO_CONF_ELEMENT.put(sElement,confElement);}}for(ConfElement confElement : ConfElement.values()){if(confElement.getParent()==null){continue;}setAmbiguousAttributes(confElement);}CONTEXT_TO_CONF_ELEMENT.clear();for(ConfElement confElement : ConfElement.values()){CONTEXT_TO_CONF_ELEMENT.put(confElement.getContextClass(),confElement);}Set<Class<? extends Context>>confElementContextClasses=Sets.newHashSet();for(ConfElement confElement : ConfElement.values()){if(confElement.getContextClass()==null){continue;}confElementContextClasses.add(confElement.getContextClass());}if(!ContextUtils.CONTEXT_CLASSES.equals(confElementContextClasses)){throw new IllegalStateException(\"All the context classes \"+ContextUtils.CONTEXT_CLASSES+\" found in \"+Context.class+\" are not used by ConfElements \"+confElementContextClasses);}}"
  },
  {
    "code_smells": [],
    "source_code": "public BiologicalDataItemResourceType getType(){return fileType;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Transactional(propagation=Propagation.MANDATORY)public Map<Long,List<BiologicalDataItem>>loadBookmarkItemsByBookmarkIds(Collection<Long>bookmarkIds){if(bookmarkIds==null || bookmarkIds.isEmpty()){return Collections.emptyMap();}Long listId=daoHelper.createTempLongList(bookmarkIds);Map<Long,List<BiologicalDataItem>>itemsMap=new HashMap<>();getJdbcTemplate().query(loadBookmarksItemsQuery,rs->{BiologicalDataItem dataItem=BiologicalDataItemDao.BiologicalDataItemParameters.getRowMapper().mapRow(rs,0);long bookmarkId=rs.getLong(BookmarkItemParameters.BOOKMARK_ID.name());if(!itemsMap.containsKey(bookmarkId)){itemsMap.put(bookmarkId,new ArrayList<>());}itemsMap.get(bookmarkId).add(dataItem);},listId);daoHelper.clearTempList(listId);return itemsMap;}"
  },
  {
    "code_smells": [],
    "source_code": "public String myCacheKey(){if(getChromosome()==null || getChromosome().getId()==null || getStartIndex()==null || getEndIndex()==null || getId()==null){throw new IllegalArgumentException(MessageHelper.getMessage(\"error.hash\"));}StringBuilder sb=new StringBuilder();sb=sb.append(getId()).append(HASH_DELIMITER).append(getChromosome().getId()).append(HASH_DELIMITER).append(getStartIndex()).append(HASH_DELIMITER).append(getEndIndex());return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onViewCreated(View view,@Nullable Bundle savedInstanceState){super.onViewCreated(view,savedInstanceState);mSpinner=(Spinner)view.findViewById(R.id.spinner);mResult=(TextView)view.findViewById(R.id.result);mSeekBar=(SeekBar)view.findViewById(R.id.seekBar);mRatingBar=(RatingBar)view.findViewById(R.id.ratingBar);mSwitchBtn=(Switch)view.findViewById(R.id.switchBtn);mSeekBar.setOnSeekBarChangeListener(this);mRatingBar.setOnRatingBarChangeListener(this);mSpinner.setOnItemSelectedListener(this);mSwitchBtn.setOnCheckedChangeListener(this);ArrayAdapter<String>adapter=new ArrayAdapter<String>(getContext(),android.R.layout.simple_spinner_item,data);adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);mSpinner.setAdapter(adapter);mSpinner.setSelection(2);}"
  },
  {
    "code_smells": [],
    "source_code": "public void logAction(String actionName,LogLevels level){toLog(format(shortLogMessagesFormat ? \"%s for %s\" : \"Perform action '%s' with Element(%s)\",actionName,this.toString()),level);}"
  },
  {
    "code_smells": [],
    "source_code": "private ByteArrayInputStream getInputStream(final byte[]bytes){return new ByteArrayInputStream(bytes);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void getSuggestions(final String query){if(query==null || query.isEmpty()){return;}locatorParams(SUGGEST_PLACE);mLocator.addDoneLoadingListener(new Runnable(){@Override public void run(){if(mLocator.getLoadStatus().name()!=LoadStatus.LOADED.name()){}else if(!mLocator.getLocatorInfo().isSupportsSuggestions()){return;}final ListenableFuture<List<SuggestResult>>suggestionsFuture=mLocator.suggestAsync(query,suggestParams);suggestionsFuture.addDoneListener(new Runnable(){@Override public void run(){try{mSuggestionsList=suggestionsFuture.get();showSuggestedPlaceNames(mSuggestionsList);}catch(Exception e){Log.e(TAG,\"Error on getting suggestions \"+e.getMessage());}}});}});mLocator.loadAsync();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void onDestroy(){super.onDestroy();mMapView.dispose();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override protected void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setContentView(R.layout.activity_main);mPointSymbol=new SimpleMarkerSymbol(SimpleMarkerSymbol.Style.SQUARE,0xFFFF0000,20);mLineSymbol=new SimpleLineSymbol(SimpleLineSymbol.Style.SOLID,0xFFFF8800,4);mFillSymbol=new SimpleFillSymbol(SimpleFillSymbol.Style.CROSS,0x40FFA9A9,mLineSymbol);mMapView=findViewById(R.id.mapView);ArcGISMap map=new ArcGISMap(Basemap.Type.LIGHT_GRAY_CANVAS,34.056295,-117.195800,16);mMapView.setMap(map);mGraphicsOverlay=new GraphicsOverlay();mMapView.getGraphicsOverlays().add(mGraphicsOverlay);mSketchEditor=new SketchEditor();mMapView.setSketchEditor(mSketchEditor);mPointButton=findViewById(R.id.pointButton);mMultiPointButton=findViewById(R.id.pointsButton);mPolylineButton=findViewById(R.id.polylineButton);mPolygonButton=findViewById(R.id.polygonButton);mFreehandLineButton=findViewById(R.id.freehandLineButton);mFreehandPolygonButton=findViewById(R.id.freehandPolygonButton);mPointButton.setOnClickListener(view->createModePoint());mMultiPointButton.setOnClickListener(view->createModeMultipoint());mPolylineButton.setOnClickListener(view->createModePolyline());mPolygonButton.setOnClickListener(view->createModePolygon());mFreehandLineButton.setOnClickListener(view->createModeFreehandLine());mFreehandPolygonButton.setOnClickListener(view->createModeFreehandPolygon());}"
  },
  {
    "code_smells": [],
    "source_code": "private static boolean multiPointRelateEnvelope_(MultiPoint multipoint_a,Envelope envelope_b,double tolerance,int relation,ProgressTracker progress_tracker){switch(relation){case Relation.disjoint: return multiPointDisjointEnvelope_(multipoint_a,envelope_b,tolerance,progress_tracker);case Relation.within: return multiPointWithinEnvelope_(multipoint_a,envelope_b,tolerance,progress_tracker);case Relation.contains: return multiPointContainsEnvelope_(multipoint_a,envelope_b,tolerance,progress_tracker);case Relation.equals: return multiPointEqualsEnvelope_(multipoint_a,envelope_b,tolerance,progress_tracker);case Relation.touches: return multiPointTouchesEnvelope_(multipoint_a,envelope_b,tolerance,progress_tracker);case Relation.crosses: return multiPointCrossesEnvelope_(multipoint_a,envelope_b,tolerance,progress_tracker);default: break;}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public OGCLineString exteriorRing(){if(polygon.isEmpty())return new OGCLinearRing((Polygon)polygon.createInstance(),0,esriSR,true);return new OGCLinearRing(polygon,0,esriSR,true);}"
  },
  {
    "code_smells": [],
    "source_code": "public int findWkid(String unit){if(!wkidLookup.containsKey(unit)){throw new IllegalArgumentException();}return wkidLookup.get(unit);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getType(){return getString(\"@type\");}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){StringBuilder sb=new StringBuilder();for(Map.Entry<String,JsonAttribute>attr : this.entrySet()){if(sb.length()>0){sb.append(\",\");}sb.append(\"\\\"\").append(attr.getKey()).append(\"\\\":\").append(attr.getValue());}return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public DataReference getOriginDataReference(){return baseRef;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public void start(Stage stage){try{SplitPane splitPane=new SplitPane();splitPane.setOrientation(Orientation.VERTICAL);Scene fxScene=new Scene(splitPane);stage.setTitle(\"Feature Layer Rendering Mode Map Sample\");stage.setWidth(800);stage.setHeight(700);stage.setScene(fxScene);stage.show();ArcGISMap mapTop=new ArcGISMap();mapTop.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);mapTop.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);mapTop.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.STATIC);ArcGISMap mapBottom=new ArcGISMap();mapBottom.getLoadSettings().setPreferredPointFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);mapBottom.getLoadSettings().setPreferredPolylineFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);mapBottom.getLoadSettings().setPreferredPolygonFeatureRenderingMode(FeatureLayer.RenderingMode.DYNAMIC);mapViewTop=new MapView();mapViewTop.setMap(mapTop);splitPane.getItems().add(mapViewTop);mapViewBottom=new MapView();mapViewBottom.setMap(mapBottom);splitPane.getItems().add(mapViewBottom);ServiceFeatureTable pointServiceFeatureTable=new ServiceFeatureTable(\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/0\");ServiceFeatureTable polylineServiceFeatureTable=new ServiceFeatureTable(\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/8\");ServiceFeatureTable polygonServiceFeatureTable=new ServiceFeatureTable(\"http://sampleserver6.arcgisonline.com/arcgis/rest/services/Energy/Geology/FeatureServer/9\");FeatureLayer pointFeatureLayer=new FeatureLayer(pointServiceFeatureTable);FeatureLayer polylineFeatureLayer=new FeatureLayer(polylineServiceFeatureTable);FeatureLayer polygonFeatureLayer=new FeatureLayer(polygonServiceFeatureTable);mapTop.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer,polylineFeatureLayer,polygonFeatureLayer));mapBottom.getOperationalLayers().addAll(Arrays.asList(pointFeatureLayer.copy(),polylineFeatureLayer.copy(),polygonFeatureLayer.copy()));Viewpoint zoomOutPoint=new Viewpoint(new Point(-118.37,34.46,SpatialReferences.getWgs84()),650000,0);Viewpoint zoomInPoint=new Viewpoint(new Point(-118.45,34.395,SpatialReferences.getWgs84()),50000,90);mapViewTop.setViewpoint(zoomOutPoint);mapViewBottom.setViewpoint(zoomOutPoint);timeline=new Timeline();timeline.setCycleCount(Animation.INDEFINITE);timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(7),event->zoomTo(zoomInPoint)));timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(14),event->zoomTo(zoomOutPoint)));timeline.play();}catch(Exception e){e.printStackTrace();}}"
  },
  {
    "code_smells": [],
    "source_code": "public static void main(String[]args){Application.launch(args);}"
  },
  {
    "code_smells": [],
    "source_code": "private static GraphRequest createGrantedPermissionsRequest(AccessToken accessToken,GraphRequest.Callback callback){Bundle parameters=new Bundle();return new GraphRequest(accessToken,ME_PERMISSIONS_GRAPH_PATH,parameters,HttpMethod.GET,callback);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public APIRequestCreateMockup requestFields(List<String>fields,boolean value){for(String field : fields){this.requestField(field,value);}return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGetCustomAudiences(String nodeId,APIContext context){super(context,nodeId,\"/customaudiences\",\"GET\",Arrays.asList(PARAMS));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public APIRequestGetAdCreatives requestField(String field,boolean value){this.requestFieldInternal(field,value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public APIRequestUpdate setParam(String param,Object value){setParamInternal(param,value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public APIRequestGetAppInstalledGroups requestFields(List<String>fields,boolean value){for(String field : fields){this.requestField(field,value);}return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGet requestProductSetField(boolean value){this.requestField(\"product_set\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public Object getFieldMostRecentImportStatus(){return mMostRecentImportStatus;}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGetTestLeads requestFieldDataField(){return this.requestFieldDataField(true);}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGetReactions requestProfileTypeField(boolean value){this.requestField(\"profile_type\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGetBusinessActivities requestTargetBusinessObjectIdField(){return this.requestTargetBusinessObjectIdField(true);}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGetCallToActions requestAndroidDeeplinkField(){return this.requestAndroidDeeplinkField(true);}"
  },
  {
    "code_smells": [],
    "source_code": "public static PageInsightsAsyncExportRun fetchById(String id,APIContext context)throws APIException{return new APIRequestGet(id,context).requestAllFields().execute();}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGet requestSourceField(boolean value){this.requestField(\"source\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestDelete requestAllFields(boolean value){for(String field : FIELDS){this.requestField(field,value);}return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public ProductItemCommerceInsights(){}"
  },
  {
    "code_smells": [],
    "source_code": "public APIRequestGetAssignedAdAccounts requestAgeField(boolean value){this.requestField(\"age\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ImmutableMap<String,String>readClassMapping(Iterable<String>lines){ImmutableMap.Builder<String,String>classMappingBuilder=ImmutableMap.builder();for(String line : lines){if(line.charAt(0)==' '){continue;}Matcher matcher=CLASS_LINE_PATTERN.matcher(line);if(!matcher.matches()){throw new IllegalArgumentException(\"Invalid line in proguard mapping: \"+line);}classMappingBuilder.put(matcher.group(1),matcher.group(2));}return classMappingBuilder.build();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static void doRawReceiveFile(File path,int size,InputStream clientInput)throws IOException{File tempfile=File.createTempFile(AgentUtil.TEMP_PREFIX+path.getName()+\"-\",\".tmp\",path.getParentFile());FileOutputStream output=new FileOutputStream(tempfile);long receiveStartMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime());long totalSize=0;long totalReceiveTimeoutMs=RECEIVE_TIMEOUT_MS+TOTAL_RECEIVE_TIMEOUT_MS_PER_MB*(size/1024/1024);try{int bufferSize=128*1024;byte[]buf=new byte[bufferSize];while(true){long currentTimeMs=TimeUnit.NANOSECONDS.toMillis(System.nanoTime());if(currentTimeMs-receiveStartMs>totalReceiveTimeoutMs){throw new RuntimeException(\"Receive failed to complete before timeout.\");}int remaining=size-(int)totalSize;if(remaining==0){break;}int want=bufferSize;if(want>remaining){want=remaining;}int got=clientInput.read(buf,0,want);if(got==-1){break;}output.write(buf,0,got);totalSize+=got;}}finally{output.close();}if(totalSize!=size){throw new RuntimeException(\"Received only \"+totalSize+\" of \"+size+\" bytes.\");}boolean success=tempfile.renameTo(path);if(!success){throw new RuntimeException(\"Failed to rename temp file.\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public AndroidPackageableCollector addNativeLinkableAsset(NativeLinkable nativeLinkable){if(nativeLinkablesAssetsToExclude.contains(nativeLinkable)){return this;}APKModule module=apkModuleGraph.findModuleForTarget(nativeLinkable.getBuildTarget());collectionBuilder.putNativeLinkablesAssets(module,nativeLinkable);return this;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void transformKeyReferences(RefTransformer visitor){configs.forEach(c->c.transformKeyReferences(visitor));}"
  },
  {
    "code_smells": [],
    "source_code": "private HeaderMap(Bucket[]buckets,byte[]stringTable,int numEntries,int maxValueLength){Preconditions.checkArgument(buckets.length>0,\"The number of buckets must be greater than 0\");Preconditions.checkArgument((buckets.length &(buckets.length-1))==0,\"The number of buckets must be a power of 2\");this.buckets=buckets;this.stringBytes=stringTable;this.numEntries=numEntries;this.maxValueLength=maxValueLength;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public ExitCode runWithoutHelp(CommandRunnerParams params)throws Exception{ProjectFilesystem projectFilesystem=params.getCell().getFilesystem();try(ProjectBuildFileParser parser=new DefaultProjectBuildFileParserFactory(new DefaultTypeCoercerFactory(),params.getConsole(),new ParserPythonInterpreterProvider(params.getCell().getBuckConfig(),params.getExecutableFinder()),params.getKnownRuleTypesProvider(),params.getManifestServiceSupplier(),params.getFileHashCache()).createBuildFileParser(params.getBuckEventBus(),params.getCell(),params.getWatchman())){try(ByteArrayOutputStream byteOut=new ByteArrayOutputStream();PrintStream out=new PrintStream(new BufferedOutputStream(byteOut))){for(String pathToBuildFile : getArguments()){out.printf(\"# %s\\n\\n\",pathToBuildFile);Path path=Paths.get(pathToBuildFile);if(!path.isAbsolute()){Path root=projectFilesystem.getRootPath();path=root.resolve(path);}ImmutableMap<String,Map<String,Object>>rawRules=parser.getBuildFileManifest(path).getTargets();ImmutableSet<String>types=getTypes();Predicate<String>includeType=type->types.isEmpty()|| types.contains(type);printRulesToStdout(out,rawRules,includeType);}params.getBuckEventBus().post(new FlushConsoleEvent());out.close();params.getConsole().getStdOut().write(byteOut.toByteArray());}}return ExitCode.SUCCESS;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close()throws SecurityException{inner.close();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){return Objects.hash(id);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private static Collection<Path>collectBasePaths(Iterable<? extends BuildTarget>targets){return StreamSupport.stream(targets.spliterator(),false).map(BuildTarget::getBasePath).collect(ImmutableSet.toImmutableSet());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ArchiveMemberPath getRelativeArchiveMemberPath(SourcePath sourcePath){Preconditions.checkState(sourcePath instanceof ArchiveMemberSourcePath);ArchiveMemberSourcePath archiveMemberSourcePath=(ArchiveMemberSourcePath)sourcePath;Path archiveRelativePath=getRelativePath(archiveMemberSourcePath.getArchiveSourcePath());return ArchiveMemberPath.of(archiveRelativePath,archiveMemberSourcePath.getMemberPath());}"
  },
  {
    "code_smells": [],
    "source_code": "public CxxToolFlags getNonIncludePathFlags(SourcePathResolver resolver,Optional<PrecompiledHeaderData>pch,Preprocessor preprocessor){ExplicitCxxToolFlags.Builder builder=CxxToolFlags.explicitBuilder();ExplicitCxxToolFlags.addCxxToolFlags(builder,getOtherFlags());if(pch.isPresent()){builder.addAllRuleFlags(StringArg.from(preprocessor.prefixOrPCHArgs(pch.get().isPrecompiled(),resolver.getAbsolutePath(pch.get().getHeader()))));}return builder.build();}"
  },
  {
    "code_smells": [],
    "source_code": "public void write(org.apache.thrift.protocol.TProtocol oprot,AppendBuildSlaveEventsResponse struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void read(org.apache.thrift.protocol.TProtocol prot,Digest struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TTupleProtocol iprot=(org.apache.thrift.protocol.TTupleProtocol)prot;java.util.BitSet incoming=iprot.readBitSet(2);if(incoming.get(0)){struct.hash=iprot.readString();struct.setHashIsSet(true);}if(incoming.get(1)){struct.sizeBytes=iprot.readI64();struct.setSizeBytesIsSet(true);}}"
  },
  {
    "code_smells": [],
    "source_code": "public java.lang.Object getFieldValue(_Fields field){switch(field){case BUILD_SLAVE_STATUS: return getBuildSlaveStatus();}throw new java.lang.IllegalStateException();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot,FetchRuleKeyLogsRequest struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.LIST){{org.apache.thrift.protocol.TList _list184=iprot.readListBegin();struct.ruleKeys=new java.util.ArrayList<java.lang.String>(_list184.size);java.lang.String _elem185;for(int _i186=0;_i186<_list184.size;++_i186){_elem185=iprot.readString();struct.ruleKeys.add(_elem185);}iprot.readListEnd();}struct.setRuleKeysIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 2: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.repository=iprot.readString();struct.setRepositoryIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 3: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.scheduleType=iprot.readString();struct.setScheduleTypeIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4: if(schemeField.type==org.apache.thrift.protocol.TType.BOOL){struct.distributedBuildModeEnabled=iprot.readBool();struct.setDistributedBuildModeEnabledIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}"
  },
  {
    "code_smells": [],
    "source_code": "public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new java.lang.IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}"
  },
  {
    "code_smells": [],
    "source_code": "public ImmutableList<BuildLogEntry>getBuildLogs()throws IOException{ImmutableList.Builder<BuildLogEntry>logEntries=ImmutableList.builder();for(Path logFile : getAllBuckLogFiles()){BuildLogEntry entry=newBuildLogEntry(logFile);if(entry.getCommandArgs().isPresent()&& entry.getCommandArgs().get().size()>0 && !entry.getCommandArgs().get().get(0).matches(\"^(rage|doctor|server|launch)$\")){logEntries.add(newBuildLogEntry(logFile));}}return logEntries.build().stream().sorted(Comparator.comparing(BuildLogEntry::getLastModifiedTime).reversed()).collect(ImmutableList.toImmutableList());}"
  },
  {
    "code_smells": [],
    "source_code": "public static SourcePath createEmptyInitModule(BuildTarget buildTarget,ProjectFilesystem projectFilesystem,ActionGraphBuilder graphBuilder){BuildTarget emptyInitTarget=getEmptyInitTarget(buildTarget);Path emptyInitPath=BuildTargetPaths.getGenPath(projectFilesystem,buildTarget,\"%s/__init__.py\");WriteFile rule=graphBuilder.addToIndex(new WriteFile(emptyInitTarget,projectFilesystem,\"\",emptyInitPath,false));return rule.getSourcePathToOutput();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Optional<JavacOptionsProvider>createToolchain(ToolchainProvider toolchainProvider,ToolchainCreationContext context){JavaBuckConfig javaConfig=context.getBuckConfig().getView(JavaBuckConfig.class);JavacOptions defaultJavacOptions=javaConfig.getDefaultJavacOptions();return Optional.of(JavacOptionsProvider.of(defaultJavacOptions));}"
  },
  {
    "code_smells": [],
    "source_code": "private ReferenceCountedWriter createReferenceCountedWriter(Path logFilePath){try{Files.createDirectories(logFilePath.getParent());return new ReferenceCountedWriter(new OutputStreamWriter(new FileOutputStream(logFilePath.toString()),StandardCharsets.UTF_8));}catch(FileNotFoundException e){throw new RuntimeException(String.format(\"Could not create file[%s].\",logFilePath),e);}catch(IOException e){throw new RuntimeException(String.format(\"Exception wrapping file[%s].\",logFilePath),e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){int hashCode=1;hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(pythonTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(initTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(parseTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(processingTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(actionGraphTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(rulekeyTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(fetchTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(buildTimeMs);hashCode=hashCode*8191+org.apache.thrift.TBaseHelper.hashCode(installTimeMs);return hashCode;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){this.path=null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<T>Optional<T>createOptional(ValueTypeInfo<T>innerType)throws IOException{if(stream.readBoolean()){return Optional.of(innerType.createNotNull(this));}return Optional.empty();}"
  },
  {
    "code_smells": [],
    "source_code": "public static TProtocol newProtocolInstance(ThriftProtocol protocol,TTransport transport){return getProtocolFactory(protocol).getProtocol(transport);}"
  },
  {
    "code_smells": [],
    "source_code": "private void printRemove(ParsedRuleKeyFile file,Value value){diffPrinter.printRemove(String.format(\"%s: %s\",String.join(\"/\",pathComponents),valueAsReadableString(file,value)));}"
  },
  {
    "code_smells": [],
    "source_code": "public static void d(String tag,Throwable tr,String msg,Object...args){if(sHandler.isLoggable(DEBUG)){d(tag,formatString(msg,args),tr);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static void v(Class<?>cls,String msg,Object arg1,Object arg2,Object arg3){if(isLoggable(VERBOSE)){v(cls,formatString(msg,arg1,arg2,arg3));}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Nullable public Object dispatchOnEvent(EventHandler eventHandler,Object eventState){if(ComponentsConfiguration.enableOnErrorHandling && eventHandler.id==ERROR_EVENT_HANDLER_ID){((Component)this).getErrorHandler().dispatchEvent(((ErrorEvent)eventState));}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Nullable public EventHandler<InterceptTouchEvent>getInterceptTouchHandler(){return mInterceptTouchHandler;}"
  },
  {
    "code_smells": [],
    "source_code": "boolean isInFullImpressionRange(){final int allEdgesVisible=FLAG_LEFT_EDGE_VISIBLE | FLAG_TOP_EDGE_VISIBLE | FLAG_RIGHT_EDGE_VISIBLE | FLAG_BOTTOM_EDGE_VISIBLE;return(mFlags & allEdgesVisible)==allEdgesVisible;}"
  },
  {
    "code_smells": [],
    "source_code": "public LoginButton(Context context){super(context,null,0,0,AnalyticsEvents.EVENT_LOGIN_BUTTON_CREATE,AnalyticsEvents.EVENT_LOGIN_BUTTON_DID_TAP);}"
  },
  {
    "code_smells": [],
    "source_code": "private static void validateVideo(ShareVideo video,Validator validator){if(video==null){throw new FacebookException(\"Cannot share a null ShareVideo\");}Uri localUri=video.getLocalUrl();if(localUri==null){throw new FacebookException(\"ShareVideo does not have a LocalUrl specified\");}if(!Utility.isContentUri(localUri)&& !Utility.isFileUri(localUri)){throw new FacebookException(\"ShareVideo must reference a video that is on the device\");}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public SocketServer(NetworkConfig config,SSLConfig sslConfig,MetricRegistry registry,ArrayList<Port>portList){this.host=config.hostName;this.port=config.port;this.numProcessorThreads=config.numIoThreads;this.maxQueuedRequests=config.queuedMaxRequests;this.sendBufferSize=config.socketSendBufferBytes;this.recvBufferSize=config.socketReceiveBufferBytes;this.maxRequestSize=config.socketRequestMaxBytes;processors=new ArrayList<Processor>(numProcessorThreads);requestResponseChannel=new SocketRequestResponseChannel(numProcessorThreads,maxQueuedRequests);metrics=new ServerNetworkMetrics(requestResponseChannel,registry,processors);this.acceptors=new ArrayList<Acceptor>();this.ports=new HashMap<PortType,Port>();this.validatePorts(portList);this.initializeSSLFactory(sslConfig);}"
  },
  {
    "code_smells": [],
    "source_code": "public Transmission(String connectionId,SocketChannel socketChannel,SelectionKey key,Time time,NetworkMetrics metrics){this.connectionId=connectionId;this.socketChannel=socketChannel;this.key=key;this.time=time;this.metrics=metrics;}"
  },
  {
    "code_smells": [],
    "source_code": "private ServerErrorCode controlBlobStore(DataNodeId dataNodeId,PartitionId partitionId,short numReplicasCaughtUpPerPartition,boolean enable)throws IOException,TimeoutException{AdminRequest adminRequest=new AdminRequest(AdminRequestOrResponseType.BlobStoreControl,partitionId,correlationId.incrementAndGet(),CLIENT_ID);BlobStoreControlAdminRequest controlRequest=new BlobStoreControlAdminRequest(numReplicasCaughtUpPerPartition,enable,adminRequest);ByteBuffer responseBytes=sendRequestGetResponse(dataNodeId,controlRequest);AdminResponse adminResponse=AdminResponse.readFrom(new DataInputStream(new ByteBufferInputStream(responseBytes)));return adminResponse.getError();}"
  },
  {
    "code_smells": [],
    "source_code": "private static boolean shouldParseContainerAtom(int atom){return atom==Atom.TYPE_moov || atom==Atom.TYPE_trak || atom==Atom.TYPE_mdia || atom==Atom.TYPE_minf || atom==Atom.TYPE_stbl || atom==Atom.TYPE_edts || atom==Atom.TYPE_meta;}"
  },
  {
    "code_smells": [],
    "source_code": "public PrepareSource(String tag,MediaSource mediaSource,boolean resetPosition,boolean resetState){super(tag,\"PrepareSource\");this.mediaSource=mediaSource;this.resetPosition=resetPosition;this.resetState=resetState;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void prepare(MediaSource mediaSource,boolean resetPosition,boolean resetState){throw new UnsupportedOperationException();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private TtmlRegion parseRegionAttributes(XmlPullParser xmlParser,CellResolution cellResolution,TtsExtent ttsExtent){String regionId=XmlPullParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_ID);if(regionId==null){return null;}float position;float line;String regionOrigin=XmlPullParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_TTS_ORIGIN);if(regionOrigin!=null){Matcher originPercentageMatcher=PERCENTAGE_COORDINATES.matcher(regionOrigin);Matcher originPixelMatcher=PIXEL_COORDINATES.matcher(regionOrigin);if(originPercentageMatcher.matches()){try{position=Float.parseFloat(originPercentageMatcher.group(1))/100f;line=Float.parseFloat(originPercentageMatcher.group(2))/100f;}catch(NumberFormatException e){Log.w(TAG,\"Ignoring region with malformed origin: \"+regionOrigin);return null;}}else if(originPixelMatcher.matches()){if(ttsExtent==null){Log.w(TAG,\"Ignoring region with missing tts:extent: \"+regionOrigin);return null;}try{int width=Integer.parseInt(originPixelMatcher.group(1));int height=Integer.parseInt(originPixelMatcher.group(2));position=width/(float)ttsExtent.width;line=height/(float)ttsExtent.height;}catch(NumberFormatException e){Log.w(TAG,\"Ignoring region with malformed origin: \"+regionOrigin);return null;}}else{Log.w(TAG,\"Ignoring region with unsupported origin: \"+regionOrigin);return null;}}else{Log.w(TAG,\"Ignoring region without an origin\");return null;}float width;float height;String regionExtent=XmlPullParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_TTS_EXTENT);if(regionExtent!=null){Matcher extentPercentageMatcher=PERCENTAGE_COORDINATES.matcher(regionExtent);Matcher extentPixelMatcher=PIXEL_COORDINATES.matcher(regionExtent);if(extentPercentageMatcher.matches()){try{width=Float.parseFloat(extentPercentageMatcher.group(1))/100f;height=Float.parseFloat(extentPercentageMatcher.group(2))/100f;}catch(NumberFormatException e){Log.w(TAG,\"Ignoring region with malformed extent: \"+regionOrigin);return null;}}else if(extentPixelMatcher.matches()){if(ttsExtent==null){Log.w(TAG,\"Ignoring region with missing tts:extent: \"+regionOrigin);return null;}try{int extentWidth=Integer.parseInt(extentPixelMatcher.group(1));int extentHeight=Integer.parseInt(extentPixelMatcher.group(2));width=extentWidth/(float)ttsExtent.width;height=extentHeight/(float)ttsExtent.height;}catch(NumberFormatException e){Log.w(TAG,\"Ignoring region with malformed extent: \"+regionOrigin);return null;}}else{Log.w(TAG,\"Ignoring region with unsupported extent: \"+regionOrigin);return null;}}else{Log.w(TAG,\"Ignoring region without an extent\");return null;}@Cue.AnchorType int lineAnchor=Cue.ANCHOR_TYPE_START;String displayAlign=XmlPullParserUtil.getAttributeValue(xmlParser,TtmlNode.ATTR_TTS_DISPLAY_ALIGN);if(displayAlign!=null){switch(Util.toLowerInvariant(displayAlign)){case \"center\": lineAnchor=Cue.ANCHOR_TYPE_MIDDLE;line+=height/2;break;case \"after\": lineAnchor=Cue.ANCHOR_TYPE_END;line+=height;break;default: break;}}float regionTextHeight=1.0f/cellResolution.rows;return new TtmlRegion(regionId,position,line,Cue.LINE_TYPE_FRACTION,lineAnchor,width,Cue.TEXT_SIZE_TYPE_FRACTIONAL_IGNORE_PADDING,regionTextHeight);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void enable(){lastBufferEvaluationMs=C.TIME_UNSET;}"
  },
  {
    "code_smells": [],
    "source_code": "public String readNullTerminatedString(int length){if(length==0){return \"\";}int stringLength=length;int lastIndex=position+length-1;if(lastIndex<limit && data[lastIndex]==0){stringLength--;}String result=Util.fromUtf8Bytes(data,position,stringLength);position+=length;return result;}"
  },
  {
    "code_smells": [],
    "source_code": "String computeAndDisplayPin(String user,int position,boolean computeHotp){OtpType type=AccountDb.getType(user);String secret=getSecret(user);PinInfo currentPin;if(mUsers[position]!=null){currentPin=mUsers[position];}else{currentPin=new PinInfo();currentPin.mPin=sResources.getString(EMPTY_PIN);}currentPin.mUser=user;if(type==OtpType.TOTP){currentPin.mPin=computePin(secret,null);}else if(type==OtpType.HOTP){currentPin.mIsHotp=true;if(computeHotp){AccountDb.incrementCounter(user);Integer counter=AccountDb.getCounter(user);currentPin.mPin=computePin(secret,new Long(counter.longValue()));}}mUsers[position]=currentPin;return currentPin.mPin;}"
  },
  {
    "code_smells": [],
    "source_code": "public Input getInput(){return mInput;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(@NullableDecl Object obj){if(this==obj){return true;}if(obj instanceof EquivalentToPredicate){EquivalentToPredicate<?>that=(EquivalentToPredicate<?>)obj;return equivalence.equals(that.equivalence)&& Objects.equal(target,that.target);}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@CanIgnoreReturnValue @Override public E remove(int index){return delegate().remove(index);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(@Nullable Object object){if(object instanceof Multiset.Entry){Multiset.Entry<?>that=(Multiset.Entry<?>)object;return this.getCount()==that.getCount()&& Objects.equal(this.getElement(),that.getElement());}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void forEach(Consumer<? super E>action){synchronized(mutex){delegate().forEach(action);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public SortedMap<R,Map<C,V>>rowMap(){Function<Map<C,V>,Map<C,V>>wrapper=unmodifiableWrapper();return Collections.unmodifiableSortedMap(Maps.transformValues(delegate().rowMap(),wrapper));}"
  },
  {
    "code_smells": [],
    "source_code": "private void recomputeHeight(){this.height=1+Math.max(height(left),height(right));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void put(Range<K>range,V value){checkArgument(subRange.encloses(range),\"Cannot put range %s into a subRangeMap(%s)\",range,subRange);TreeRangeMap.this.put(range,value);}"
  },
  {
    "code_smells": [],
    "source_code": "public static<E>SortedSetTestSuiteBuilder<E>using(TestSortedSetGenerator<E>generator){SortedSetTestSuiteBuilder<E>builder=new SortedSetTestSuiteBuilder<E>();builder.usingGenerator(generator);return builder;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean contains(@Nullable Object edge){E connectingEdge=getConnectingEdge();return(connectingEdge!=null && connectingEdge.equals(edge));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public final boolean equals(@Nullable Object object){if(object instanceof HashCode){HashCode that=(HashCode)object;return bits()==that.bits()&& equalsSameBits(that);}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@VisibleForTesting static String getClassName(String filename){int classNameEnd=filename.length()-CLASS_FILE_NAME_EXTENSION.length();return filename.substring(0,classNameEnd).replace('/','.');}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<T>T callWithTimeout(Callable<T>callable,long timeoutDuration,TimeUnit timeoutUnit)throws ExecutionException{checkNotNull(callable);checkNotNull(timeoutUnit);try{return callable.call();}catch(RuntimeException e){throw new UncheckedExecutionException(e);}catch(Exception e){throw new ExecutionException(e);}catch(Error e){throw new ExecutionError(e);}catch(Throwable e){throw new ExecutionException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected String pendingToString(){ListenableFuture<? extends V>localInputFuture=delegateRef;ScheduledFuture<?>localTimer=timer;if(localInputFuture!=null){String message=\"inputFuture=[\"+localInputFuture+\"]\";if(localTimer!=null){final long delay=localTimer.getDelay(TimeUnit.MILLISECONDS);if(delay>0){message+=\",remaining delay=[\"+delay+\" ms]\";}}return message;}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public TypeKind getKind(){return TypeKind.DECLARED;}"
  },
  {
    "code_smells": [],
    "source_code": "public Iterable<VariableElement>getImplicitPostfixParams(TypeElement type){if(ElementUtil.isEnum(type)){return implicitEnumParams;}return Collections.emptyList();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ProjectConfig loadConfiguration(String configFilename)throws InvalidProject{return parse(projectConfigs.get(configFilename));}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public final Description matchClass(ClassTree classTree,VisitorState state){if(!HAS_CONSTRUCTORS_WITH_INJECT.matches(classTree,state)){return Description.NO_MATCH;}List<MethodTree>ctors=ASTHelpers.getConstructors(classTree);List<MethodTree>ctorsWithInject=ctors.stream().filter(c->hasInjectAnnotation().matches(c,state)).collect(toImmutableList());if(ctorsWithInject.size()!=1){return Description.NO_MATCH;}Set<Symbol>variablesAssigned=new HashSet<>();new TreeScanner<Void,Void>(){@Override public Void visitAssignment(AssignmentTree tree,Void unused){Symbol symbol=ASTHelpers.getSymbol(tree.getVariable());if(symbol!=null && symbol.getKind()==ElementKind.FIELD && !symbol.isStatic()){variablesAssigned.add(symbol);}return super.visitAssignment(tree,null);}}.scan((JCTree)getOnlyElement(ctorsWithInject),null);SuggestedFix.Builder fix=SuggestedFix.builder();VariableTree variableTreeFirstMatch=null;for(Tree member : classTree.getMembers()){if(!(member instanceof VariableTree)){continue;}VariableTree variableTree=(VariableTree)member;if(!INSTANCE_FIELD_WITH_INJECT.matches(variableTree,state)){continue;}if(!variablesAssigned.contains(ASTHelpers.getSymbol(variableTree))){continue;}variableTreeFirstMatch=variableTree;removeInjectAnnotationFromVariable(variableTree,state).ifPresent(fix::merge);}if(variableTreeFirstMatch==null){return Description.NO_MATCH;}if(fix.isEmpty()){return describeMatch(variableTreeFirstMatch);}return describeMatch(variableTreeFirstMatch,fix.build());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int getSourcePos(int i){return wrapped.getSourcePos(i)+offset;}"
  },
  {
    "code_smells": [],
    "source_code": "private DiffList computeDiffEntries(Repository repo,GitilesView view,RevWalk walk,RevCommit commit)throws IOException{DiffList result=new DiffList();result.revision=view.getRevision().matches(commit)? view.getRevision(): Revision.peeled(commit.name(),commit);AbstractTreeIterator oldTree;switch(commit.getParentCount()){case 0: result.oldRevision=Revision.NULL;oldTree=new EmptyTreeIterator();break;case 1: result.oldRevision=Revision.peeled(result.revision.getName()+\"^\",commit.getParent(0));oldTree=getTreeIterator(walk,commit.getParent(0));break;default: return result;}AbstractTreeIterator newTree=getTreeIterator(walk,commit);try(DiffFormatter diff=new DiffFormatter(NullOutputStream.INSTANCE)){diff.setRepository(repo);diff.setDetectRenames(true);result.entries=diff.scan(oldTree,newTree);return result;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void bindInterceptor(Matcher<? super Class<?>>classMatcher,Matcher<? super Method>methodMatcher,org.aopalliance.intercept.MethodInterceptor...interceptors){elements.add(new InterceptorBinding(getElementSource(),classMatcher,methodMatcher,interceptors));}"
  },
  {
    "code_smells": [],
    "source_code": "public SynchronizedStatement(SourcePosition sourcePosition,Expression expression,Block body){super(sourcePosition);this.expression=checkNotNull(expression);this.body=checkNotNull(body);}"
  },
  {
    "code_smells": [],
    "source_code": "ClosureType toNonNullable(){return isNullable()? new ClosureBangDecoratedType(this): this;}"
  },
  {
    "code_smells": [],
    "source_code": "public void test(){SubNumber sn=new SubNumber();assertTrue((this.equals(sn)));assertTrue((equals(sn)));assertTrue((!equals(new Object())));assertTrue((this.hashCode()==100));assertTrue((hashCode()==100));assertTrue((toString().equals(this.toString())));assertTrue((getClass()instanceof Class));assertTrue((getClass().equals(this.getClass())));}"
  },
  {
    "code_smells": [],
    "source_code": "@Nullable public final QualifiedName getQualifiedNameObject(){return isQualifiedName()? new QualifiedName.NodeQname(this): null;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override int recursionUnsafeHashCode(){return System.identityHashCode(this);}"
  },
  {
    "code_smells": [],
    "source_code": "private void checkBasicCall(CallBasicNode node,TemplateRegistry registry){TemplateMetadata callee=registry.getBasicTemplateOrElement(node.getCalleeName());if(callee==null){String extraErrorMessage=SoyErrors.getDidYouMeanMessage(registry.getBasicTemplateOrElementNames(),node.getCalleeName());errorReporter.report(node.getSourceLocation(),CALL_TO_UNDEFINED_TEMPLATE,node.getCalleeName(),extraErrorMessage);}else{SoyFileKind calleeKind=callee.getSoyFileKind();String callerFilePath=node.getSourceLocation().getFilePath();String calleeFilePath=callee.getSourceLocation().getFilePath();if(calleeKind==SoyFileKind.INDIRECT_DEP){errorReporter.report(node.getSourceLocation(),CALL_TO_INDIRECT_DEPENDENCY,calleeFilePath);}}}"
  },
  {
    "code_smells": [],
    "source_code": "EC2CredentialsUtils(ConnectionUtils connectionUtils){this.connectionUtils=connectionUtils;}"
  },
  {
    "code_smells": [],
    "source_code": "@Deprecated public AmazonS3EncryptionClient(AWSCredentials credentials,EncryptionMaterialsProvider encryptionMaterialsProvider){this(credentials,encryptionMaterialsProvider,configFactory.getConfig(),new CryptoConfiguration());}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean needsConnectionLeftOpen(){return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public HeadBucketResult withBucketRegion(String bucketRegion){setBucketRegion(bucketRegion);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public ImageProcess(String pid,String commandLine,Properties environment,ImageThread currentThread,Iterator threads,ImageModule executable,Iterator libraries,int pointerSize){_id=pid;_commandLine=commandLine;_environment=environment;setCurrentThread(currentThread);setThreads(threads);_executable=executable;while(libraries.hasNext()){_libraries.add(libraries.next());}_pointerSize=pointerSize;}"
  },
  {
    "code_smells": [],
    "source_code": "public JavaVMOption(String optionString,ImagePointer extraInfo){if(optionString==null){throw new IllegalArgumentException();}_optionString=optionString;_extraInfo=extraInfo;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getName(){String lowerResult=lower.getName();String upperResult=upper.getName();if(lowerResult!=null){if(upperResult!=null){return lowerResult+\" merged with \"+upperResult;}else{return lowerResult;}}else{if(upperResult!=null){return upperResult;}else{return null;}}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private void addUTF8Region(StructurePointer clazz,String slotName,String additionalInfo,AbstractPointer utf8String)throws CorruptDataException{long offset=utf8String.getAddress()-clazz.getAddress();long clazzSize=((J9ROMClassPointer)clazz).romSize().longValue();if((offset>0)&&(offset<clazzSize)){if(utf8String.notNull()){long UTF8Length=getUTF8Length(J9UTF8Pointer.cast(utf8String));if(utf8String.getAddress()<firstJ9_ROM_UTF8){firstJ9_ROM_UTF8=utf8String.getAddress();}if((utf8String.getAddress()+UTF8Length)>lastJ9_ROM_UTF8){lastJ9_ROM_UTF8=utf8String.getAddress()+UTF8Length;}classRegions.add(new J9ClassRegion(utf8String,SlotType.J9_ROM_UTF8,slotName,additionalInfo,UTF8Length,offset,true));}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void reportClass(CheckError error,J9ClassPointer clazz,String prefix){String prefixString=prefix==null ? \"\" : prefix;if(!shouldReport(error)){return;}out.println(String.format(\"<gc check(%d): %sClass %x>\",error._errorNumber,prefixString,clazz.getAddress()));}"
  },
  {
    "code_smells": [],
    "source_code": "public UDATA add(UDATA parameter){return new UDATA(this).add(parameter);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public String getLoggerLevel(String loggerName){String result=null;try{Object logger=getLoggerFromName(loggerName);if(logger!=null){Object level=logger_getLevel.invoke(logger);if(level!=null){result=(String)level_getName.invoke(level);}else{result=\"\";}}}catch(Exception e){throw handleError(e);}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "void setValue(String value)throws IllegalArgumentException{if(value.equalsIgnoreCase(\"true\")|| value.equalsIgnoreCase(\"yes\")){formatTimestamp=true;}else if(value.equalsIgnoreCase(\"false\")|| value.equalsIgnoreCase(\"no\")){formatTimestamp=false;}else{throw new IllegalArgumentException(\"The value \\\"\"+value+\"\\\" specified for format timestamp is not valid,must be true or false\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public CreateVirtualEnvAction(Project project,PythonDetails pythonDetails,EditablePythonAbiContainer editablePythonAbiContainer){this.project=project;this.pythonDetails=pythonDetails;this.editablePythonAbiContainer=editablePythonAbiContainer;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private boolean optimizeForGoal(ClusterModel clusterModel,Goal goal,GoalViolations goalViolations,Set<Integer>excludedBrokersForLeadership,Set<Integer>excludedBrokersForReplicaMove)throws KafkaCruiseControlException{if(clusterModel.topics().isEmpty()){LOG.info(\"Skipping goal violation detection because the cluster model does not have any topic.\");return false;}Map<TopicPartition,List<Integer>>initReplicaDistribution=clusterModel.getReplicaDistribution();Map<TopicPartition,Integer>initLeaderDistribution=clusterModel.getLeaderDistribution();try{goal.optimize(clusterModel,new HashSet<>(),new OptimizationOptions(excludedTopics(clusterModel),excludedBrokersForLeadership,excludedBrokersForReplicaMove));}catch(OptimizationFailureException ofe){goalViolations.addViolation(goal.name(),false);return true;}Set<ExecutionProposal>proposals=AnalyzerUtils.getDiff(initReplicaDistribution,initLeaderDistribution,clusterModel);LOG.trace(\"{}generated{}proposals\",goal.name(),proposals.size());if(!proposals.isEmpty()){goalViolations.addViolation(goal.name(),true);return true;}else{return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "public MultiException(Collection<? extends Throwable>causes){this(null,causes);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void main(String[]args)throws Exception{new DegradedExperienceExample().runExample();}"
  },
  {
    "code_smells": [],
    "source_code": "@Deprecated @Override public<T>void sendRestRequest(final Request<T>request,RequestContext requestContext,Callback<RestResponse>callback){if(_restClient==null){throw new UnsupportedOperationException(\"sendRestRequest is not supported by the ForwardingRestClient\");}_restClient.sendRestRequest(request,requestContext,callback);}"
  },
  {
    "code_smells": [],
    "source_code": "private<T>Task<Response<T>>createTask(final String name,final Request<T>request,final RequestContext requestContext,RequestConfig config){LOGGER.debug(\"createTask,name: '{}',config:{}\",name,config);if(_d2RequestTimeoutEnabled){return createTaskWithD2Timeout(name,request,requestContext,config);}else{return createTaskWithTimeout(name,request,requestContext,config);}}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings({\"unchecked\"})@Override public RB addReqParam(String key,Object value){return(RB)super.addReqParam(key,value);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Map<String,Object>getRequestContextLocalAttrs(){return Collections.unmodifiableMap(_context.getRawRequestContext().getLocalAttrs());}"
  },
  {
    "code_smells": [],
    "source_code": "List<ResourceDefinitionListener>getResourceDefinitionListeners(){return _resourceDefinitionListeners;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){if(this==obj){return true;}if(obj==null){return false;}if(getClass()!=obj.getClass()){return false;}final MethodIdentity other=(MethodIdentity)obj;return new EqualsBuilder().append(_methodQualifiedName,other._methodQualifiedName).append(_parameterTypeNames,other._parameterTypeNames).isEquals();}"
  },
  {
    "code_smells": [],
    "source_code": "public<TValue>void addIfNotEmpty(String parameterName,List<TValue>values){if(values!=null && !values.isEmpty()){put(parameterName,StringUtil.join(\",\",values));}}"
  },
  {
    "code_smells": [],
    "source_code": "public int getId(){return id;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setProfileAttributes(final VssJsonCollectionWrapper<List<ProfileAttributeBase<Object>>>attributesCollection,final String id){final UUID locationId=UUID.fromString(\"1392b6ac-d511-492e-af5b-2263e5545a5d\");final ApiResourceVersion apiVersion=new ApiResourceVersion(\"3.1-preview.2\");final Map<String,Object>routeValues=new HashMap<String,Object>();routeValues.put(\"id\",id);final VssRestRequest httpRequest=super.createRequest(HttpMethod.PATCH,locationId,routeValues,apiVersion,attributesCollection,VssMediaTypes.APPLICATION_JSON_TYPE,VssMediaTypes.APPLICATION_JSON_TYPE);super.sendRequest(httpRequest);}"
  },
  {
    "code_smells": [],
    "source_code": "private void addSqlite(){ClassVisitorFactory classVisitorFactory=new ClassVisitorFactory(){@Override public ClassVisitor create(ClassInstrumentationData classInstrumentationData,ClassWriter classWriter){HashSet<String>ctorSignatures=new HashSet<String>();ctorSignatures.add(\"(Lorg/sqlite/SQLiteConnection;Ljava/lang/String;)V\");final PreparedStatementMetaData metaData1=new PreparedStatementMetaData(ctorSignatures);metaData1.sqlStringInCtor=2;return new PreparedStatementClassVisitor(classInstrumentationData,classWriter,metaData1);}};String className=\"org/sqlite/core/CorePreparedStatement\";ClassInstrumentationData data=new ClassInstrumentationData(className,InstrumentedClassType.SQL,classVisitorFactory).setReportCaughtExceptions(false).setReportExecutionTime(true);data.addMethod(\"executeBatch\",\"()[I\",false,true,0,new MethodVisitorFactory(){@Override public MethodVisitor create(MethodInstrumentationDecision decision,int access,String desc,String owner,String methodName,MethodVisitor methodVisitor,ClassToMethodTransformationData additionalData){return new PreparedStatementMethodForExecuteBatchVisitor(access,desc,owner,methodName,methodVisitor,null);}});classesToInstrument.put(className,data);doAdd(null,\"org/sqlite/jdbc3/JDBC3PreparedStatement\");}"
  },
  {
    "code_smells": [],
    "source_code": "public ConcurrentMap<String,Double>getMeasurements(){if(this.measurements==null){this.measurements=new ConcurrentHashMap<String,Double>();}return this.measurements;}"
  },
  {
    "code_smells": [],
    "source_code": "public AddStorageAccountParameters withSuffix(String suffix){if(this.properties==null){this.properties=new Properties();}this.properties.suffix=suffix;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void runFunctions(final CommandHandler handler)throws Exception{handler.runCommandWithReturnCodeCheck(getStartFunctionHostCommand(),true,getDeploymentStagingDirectoryPath(),CommandUtils.getValidReturnCodes(),RUN_FUNCTIONS_FAILURE);}"
  },
  {
    "code_smells": [],
    "source_code": "private static IClassFile resolveClassFile(String uriString){if(uriString==null || uriString.isEmpty()){return null;}try{URI uri=new URI(uriString);if(uri!=null && JDT_SCHEME.equals(uri.getScheme())&& \"contents\".equals(uri.getAuthority())){String handleId=uri.getQuery();IJavaElement element=JavaCore.create(handleId);IClassFile cf=(IClassFile)element.getAncestor(IJavaElement.CLASS_FILE);return cf;}}catch(URISyntaxException e){}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean supportsSubqueriesInQuantifieds()throws SQLServerException{checkClosed();return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public int read(byte[]b)throws IOException{return readInternal(b,0,b.length);}"
  },
  {
    "code_smells": [],
    "source_code": "final int readIntBigEndian()throws SQLServerException{if(payloadOffset+4<=currentPacket.payloadLength){int value=Util.readIntBigEndian(currentPacket.payload,payloadOffset);payloadOffset+=4;return value;}return Util.readIntBigEndian(readWrappedBytes(4),0);}"
  },
  {
    "code_smells": [],
    "source_code": "public CLCHTTPProxyConfiguration(final String host,final int port,final String username,final String password){Check.notNull(host,\"host\");this.host=host;this.port=port;this.username=username;this.password=password;}"
  },
  {
    "code_smells": [],
    "source_code": "public NonFatalErrorHelper(final Workspace workspace){Check.notNull(workspace,\"workspace\");this.workspace=workspace;workspace.getClient().getEventEngine().addNonFatalErrorListener(listener);}"
  },
  {
    "code_smells": [],
    "source_code": "public void sourceControlChanged(final boolean tfvc){getSourceControlListener().onSourceControlChanged(tfvc);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private Action createAction(final ProjectInfo project,final TeamConfiguration team){Check.notNull(project,\"project\");Check.notNull(team,\"team\");final String projectGUID=project.getGUID();final String actionName=team.isDefaultTeam()? project.getName(): MessageFormat.format(Messages.getString(\"TeamExplorerControl.ProjectSlashTeamFormat\"),project.getName(),team.getTeamName());final Action action=new Action(actionName){@Override public void run(){final String beforeChangeProjectGUID=context.getCurrentProjectInfo().getGUID();if(!projectGUID.equals(beforeChangeProjectGUID)|| !team.equals(context.getCurrentTeam())){context.setCurrentProject(projectGUID);context.setCurrentTeam(team);TFSCommonUIClientPlugin.getDefault().projectOrTeamChanged();if(!projectGUID.equals(beforeChangeProjectGUID)){final boolean tfvc=context.getCurrentProjectInfo().getSourceControlCapabilityFlags().contains(SourceControlCapabilityFlags.TFS);TFSCommonUIClientPlugin.getDefault().sourceControlChanged(tfvc);}}}};if(projectGUID.equals(context.getCurrentProjectInfo().getGUID())&& team.equals(context.getCurrentTeam())){action.setChecked(true);}return action;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override protected void fillMenuBeforeShow(final IMenuManager manager){manager.add(openAction);manager.add(downloadToAction);manager.add(addAttachmentAction);manager.add(deleteAttachmentAction);manager.add(new Separator());final DownloadAttachmentOpenType preferredOpenType=DownloadAttachmentOpenType.getPreferredOpenType();if(DownloadAttachmentOpenType.BROWSER==preferredOpenType){manager.add(openLocallyAction);}else{manager.add(openInBrowserAction);}manager.add(copyUrlToClipboardAction);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setAlwaysSavePassword(final boolean alwaysSavePassword){this.alwaysSavePassword=alwaysSavePassword;}"
  },
  {
    "code_smells": [],
    "source_code": "public StringInputDialog(final Shell parentShell,final String label,final String initialValue,final String dialogTitle,final String purpose){super(parentShell);this.label=label;text=initialValue;this.dialogTitle=dialogTitle;setOptionDialogSettingsKey(StringInputDialog.class.getName()+\".\"+purpose);}"
  },
  {
    "code_smells": [],
    "source_code": "public CandidatesTable getTable(){return table;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isVisible(final IStructuredSelection selection){final ChangeItem[]changes=(ChangeItem[])SelectionUtils.selectionToArray(getSelection(),ChangeItem.class);for(final ChangeItem change : changes){if(change.getChangeType().contains(ChangeType.DELETE)){return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public LegacyActionKeyBindingSupport(final IWorkbench workbench,final Shell shell){this(workbench,shell,null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Image getColumnImage(final Object element,final int columnIndex){if(!(element instanceof BuildDefinitionReference)|| columnIndex>0){return null;}final BuildDefinitionReference definition=(BuildDefinitionReference)element;return imageHelper.getBuildDefinitionImage(definition);}"
  },
  {
    "code_smells": [],
    "source_code": "private static String[]getColumnProperties(){final String[]columnProperties=new String[COLUMN_DATA.length];for(int i=0;i<columnProperties.length;i++){columnProperties[i]=COLUMN_DATA[i].name;}return columnProperties;}"
  },
  {
    "code_smells": [],
    "source_code": "public ProjectCloseListener(final ProjectRepositoryManager projectManager){Check.notNull(projectManager,\"projectManager\");this.projectManager=projectManager;}"
  },
  {
    "code_smells": [],
    "source_code": "private void notifyConflict(){final Shell parentShell=ShellUtils.getWorkbenchShell();UIHelpers.runOnUIThread(true,new Runnable(){@Override public void run(){MessageDialog.openWarning(parentShell,Messages.getString(\"EclipseConnectionConflictHandler.ConnectionExistsDialogTitle\"),Messages.getString(\"EclipseConnectionConflictHandler.ConnectionExistsDialogText\"));}});}"
  },
  {
    "code_smells": [],
    "source_code": "public void setServiceHost(final IBuildServiceHost value){serviceHost=value;if(serviceHost!=null){getWebServiceObject().setServiceHostUri(serviceHost.getURI());}else{getWebServiceObject().setServiceHostUri(null);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public ServiceDefinition[]findServicesByToolID(final String toolId){try{ensureDiskCacheLoaded();accessLock.readLock().lock();final boolean returnAll=toolId==null || toolId.length()==0;final List<ServiceDefinition>requestedDefinitions=new ArrayList<ServiceDefinition>();for(final Map<GUID,ServiceDefinition>mapServiceInstances : mapServices.values()){for(final ServiceDefinition definition : mapServiceInstances.values()){if(returnAll || toolId.equalsIgnoreCase(definition.getToolID())){requestedDefinitions.add((ServiceDefinition)definition.clone());}}}if(requestedDefinitions.size()==0){return null;}return requestedDefinitions.toArray(new ServiceDefinition[requestedDefinitions.size()]);}finally{accessLock.readLock().unlock();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void test20(){final SparseTreeAdditionalData additionalData=new SparseTreeAdditionalData();final SparseTree<String>st=new SparseTree<String>('/',String.CASE_INSENSITIVE_ORDER);st.add(\"$\",\"Root\");st.add(\"$/A\",\"A\");st.add(\"$/A/Z\",\"AZ\");final List<String>results=new ArrayList<String>();st.EnumParents(\"$/A/B/C/D/E\",new NoChildrenBelowCallback(),EnumParentsOptions.NONE,additionalData,results);final List<String>expectedResults=new ArrayList<String>();expectedResults.add(\"$/A/B\");expectedResults.add(null);Assert.assertTrue(areStringListsEqual(expectedResults,results,String.CASE_INSENSITIVE_ORDER));}"
  },
  {
    "code_smells": [],
    "source_code": "public void addConstantSet(final int rootConstantID,final boolean oneLevel,final boolean twoPlusLevels,final boolean leaf,final boolean interior,final IConstantSet constantSet){metadata.addConstantSet(rootConstantID,oneLevel,twoPlusLevels,leaf,interior,constantSet);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object clone()throws CloneNotSupportedException{final HttpHost copy=(HttpHost)super.clone();copy.init(this);return copy;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public char[]getRawScheme(){return(_scheme==null)? null : HttpURL.DEFAULT_SCHEME;}"
  },
  {
    "code_smells": [],
    "source_code": "public UsernamePasswordCredentials(final String username,final String password){super();if(username==null){throw new IllegalArgumentException(\"Username may not be null\");}this.username=username;this.password=password;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private String formatQueryString(final String projectUri,final String[]args){final StringBuffer result=new StringBuffer();if(projectUri!=null){if(isCompatibleMode){result.append(\"puri=\");result.append(URLEncode.encode(projectUri.toString()));}else{final ArtifactID artifactID=new ArtifactID(projectUri);result.append(\"pguid=\");result.append(URLEncode.encode(artifactID.getToolSpecificID()));}}else if(!isCompatibleMode){result.append(\"pcguid=\");result.append(URLEncode.encode(collectionId.toString()));}for(int i=0;i<args.length-1;i+=2){final String name=args[i];final String value=args[i+1];if(name!=null){if(result.length()>0){result.append('&');}result.append(URLEncode.encode(name));}if(value!=null){if(name!=null){result.append('=');}else if(result.length()>0){result.append('&');}result.append(URLEncode.encode(value));}}return result.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public NegotiateState initialize()throws NegotiateException{throw new RuntimeException(MESSAGE);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getErrorMessage(final NTLMState state){Check.notNull(state,\"state\");Check.isTrue(state instanceof NativeNTLMState,\"state instanceof NativeNTLMState\");try{return NativeAuth.authGetErrorMessage(((NativeNTLMState)state).id);}catch(final Exception e){return MessageFormat.format(Messages.getString(\"NativeNTLM.CouldNotCallNativeNTLMFormat\"),e.getLocalizedMessage());}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setMsg(String msg){this.msg=msg;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getMediaType(){return mediaType;}"
  },
  {
    "code_smells": [],
    "source_code": "private Object getValue(Map context,Object value){Class lastClass=(Class)context.get(XWorkConverter.LAST_BEAN_CLASS_ACCESSED);String lastProperty=(String)context.get(XWorkConverter.LAST_BEAN_PROPERTY_ACCESSED);if(lastClass==null || lastProperty==null){return value;}Class elementClass=objectTypeDeterminer.getElementClass(lastClass,lastProperty,null);if(elementClass==null){return value;}return xworkConverter.convertValue(context,value,elementClass);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setRegion(String regionId){regionId=regionId.toLowerCase(Locale.ENGLISH);try{com.oracle.bmc.Region region=com.oracle.bmc.Region.fromRegionId(regionId);setRegion(region);}catch(IllegalArgumentException e){LOG.info(\"Unknown regionId '{}',falling back to default endpoint format\",regionId);String endpoint=com.oracle.bmc.Region.formatDefaultRegionEndpoint(SERVICE,regionId);setEndpoint(endpoint);}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public CreateBudgetDetails build(){CreateBudgetDetails __instance__=new CreateBudgetDetails(compartmentId,targetCompartmentId,displayName,description,amount,resetPeriod,freeformTags,definedTags);__instance__.__explicitlySet__.addAll(__explicitlySet__);return __instance__;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder nodePoolId(String nodePoolId){this.nodePoolId=nodePoolId;this.__explicitlySet__.add(\"nodePoolId\");return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder tcpOptions(TcpOptions tcpOptions){this.tcpOptions=tcpOptions;this.__explicitlySet__.add(\"tcpOptions\");return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder backendName(String backendName){this.backendName=backendName;this.__explicitlySet__.add(\"backendName\");return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder invocationCallback(com.oracle.bmc.util.internal.Consumer<javax.ws.rs.client.Invocation.Builder>invocationCallback){this.invocationCallback=invocationCallback;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public GetRouteTableRequest build(){GetRouteTableRequest request=buildWithoutInvocationCallback();request.setInvocationCallback(invocationCallback);return request;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder copy(ListVolumeGroupBackupsResponse o){opcNextPage(o.getOpcNextPage());opcRequestId(o.getOpcRequestId());items(o.getItems());return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@com.fasterxml.jackson.annotation.JsonValue public String getValue(){return value;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder cfBackupHandle(String cfBackupHandle){this.cfBackupHandle=cfBackupHandle;this.__explicitlySet__.add(\"cfBackupHandle\");return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public static CreateSteeringPolicyRequest interceptRequest(CreateSteeringPolicyRequest request){return request;}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean canRetryRequestIfRefreshableAuthTokenUsed(com.oracle.bmc.model.BmcException e){if(e.getStatusCode()==401 && this.authenticationDetailsProvider instanceof com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider){((com.oracle.bmc.auth.RefreshableOnNotAuthenticatedProvider)this.authenticationDetailsProvider).refresh();return true;}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder connection(Connection connection){this.connection=connection;this.__explicitlySet__.add(\"connection\");return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public CreatePreauthenticatedRequestResponse createPreauthenticatedRequest(CreatePreauthenticatedRequestRequest request){LOG.trace(\"Called createPreauthenticatedRequest\");request=CreatePreauthenticatedRequestConverter.interceptRequest(request);com.oracle.bmc.http.internal.WrappedInvocationBuilder ib=CreatePreauthenticatedRequestConverter.fromRequest(client,request);com.google.common.base.Function<javax.ws.rs.core.Response,CreatePreauthenticatedRequestResponse>transformer=CreatePreauthenticatedRequestConverter.fromResponse();int attempts=0;while(true){try{javax.ws.rs.core.Response response=client.post(ib,request.getCreatePreauthenticatedRequestDetails(),request);return transformer.apply(response);}catch(com.oracle.bmc.model.BmcException e){if(++attempts<MAX_IMMEDIATE_RETRIES_IF_USING_INSTANCE_PRINCIPALS && canRetryRequestIfRefreshableAuthTokenUsed(e)){continue;}else{throw e;}}}}"
  },
  {
    "code_smells": [],
    "source_code": "public UpdateSubscriptionRequest build(){UpdateSubscriptionRequest request=buildWithoutInvocationCallback();request.setInvocationCallback(invocationCallback);return request;}"
  },
  {
    "code_smells": [],
    "source_code": "public static UpdateWaasPolicyRequest interceptRequest(UpdateWaasPolicyRequest request){return request;}"
  },
  {
    "code_smells": [],
    "source_code": "@com.fasterxml.jackson.annotation.JsonValue public String getValue(){return value;}"
  },
  {
    "code_smells": [],
    "source_code": "public CreateCertificateRequest build(){CreateCertificateRequest request=buildWithoutInvocationCallback();request.setInvocationCallback(invocationCallback);return request;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void add(int arg0,Element arg1){elementsInSegment.add(arg0,arg1);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean visitObjectReference(final Pointer objRef,boolean compressed){return visitObjectReferenceInline(objRef,0,compressed);}"
  },
  {
    "code_smells": [],
    "source_code": "private static OptionClass getOptionClass(OptionDescriptor descriptor){if(descriptor.getOptionKey()instanceof RuntimeOptionKey){return OptionClass.VM;}return OptionClass.Compiler;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Uninterruptible(reason=\"May be called from uninterruptible code.\",mayBeInlined=true)public Pointer mapFile(PointerBase start,UnsignedWord nbytes,WordBase fileHandle,UnsignedWord offset,int access){int flags=MAP_PRIVATE();if(start.isNonNull()){flags |=MAP_FIXED();}int fd=(int)fileHandle.rawValue();Pointer result=mmap(start,nbytes,accessAsProt(access),flags,fd,offset.rawValue());return result.notEqual(MAP_FAILED())? result : WordFactory.nullPointer();}"
  },
  {
    "code_smells": [],
    "source_code": "public static<T extends PointerBase>T pinArrayAndGetAddress(Object array){PinnedObject pin=PinnedObject.create(array);pinnedObjectsListHead.set(new PinnedObjectListNode(pin,pinnedObjectsListHead.get()));return pin.addressOfArrayElement(0);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean isInConfiguration(IsInConfigurationAccess access){return access.findClassByName(\"org.codehaus.groovy.reflection.ClassInfo\")!=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isDeprecated(TypeMirror baseType){if(baseType instanceof DeclaredType){return isDeprecated((TypeElement)((DeclaredType)baseType).asElement());}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isReference(){if(isCachedLanguage()){return !ElementUtils.typeEquals(getLanguageType(),getParameter().getType());}else{return ElementUtils.typeEquals(getReferenceType(),getParameter().getType());}}"
  },
  {
    "code_smells": [],
    "source_code": "private static List<Parameter>parseParametersOptional(MethodSpec spec,List<? extends VariableElement>types){List<Parameter>parsedParams=new ArrayList<>();int typeStartIndex=0;List<ParameterSpec>specifications=spec.getOptional();outer: for(int specIndex=0;specIndex<specifications.size();specIndex++){ParameterSpec specification=specifications.get(specIndex);for(int typeIndex=typeStartIndex;typeIndex<types.size();typeIndex++){VariableElement variable=types.get(typeIndex);Parameter optionalParam=matchParameter(specification,variable,-1,-1);if(optionalParam!=null){parsedParams.add(optionalParam);typeStartIndex=typeIndex+1;continue outer;}}}if(typeStartIndex<types.size()){return null;}return parsedParams;}"
  },
  {
    "code_smells": [],
    "source_code": "public LLVMAMD64CmpbNode(LLVMAMD64UpdateCPAZSOFlagsNode flags){super(flags);}"
  },
  {
    "code_smells": [],
    "source_code": "LLVMNegateNode(LLVMAbstractCompareNode booleanExpression){this.booleanExpression=booleanExpression;}"
  },
  {
    "code_smells": [],
    "source_code": "@TruffleBoundary private LLVMManagedPointer getApplicationArguments(){String[]result;if(mainArguments==null){result=new String[]{\"\"};}else{result=new String[mainArguments.length+1];result[0]=\"\";for(int i=1;i<result.length;i++){result[i]=mainArguments[i-1].toString();}}return toTruffleObjects(result);}"
  },
  {
    "code_smells": [],
    "source_code": "private ExternalLibrary(String name,Path path,boolean isNative,boolean isInternal){this.name=name;this.path=path;this.isNative=isNative;this.isInternal=isInternal;}"
  },
  {
    "code_smells": [],
    "source_code": "private LLVMDebugObject dereference(){if(pointerType==null ||(!pointerType.isSafeToDereference()&& !value.isAlwaysSafeToDereference(offset))){return null;}final LLVMDebugValue targetValue=value.dereferencePointer(offset);if(targetValue==null){return null;}return instantiate(pointerType.getBaseType(),0L,targetValue,null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Fallback TruffleObject doOther(@SuppressWarnings(\"unused\")Object pointer){if(allowNonForeign){return null;}else{throw new LLVMPolyglotException(this,\"Pointer does not point to a polyglot value.\");}}"
  },
  {
    "code_smells": [],
    "source_code": "<T>T lookup(Class<T>serviceClass,boolean wrapExceptions){engine.checkState();if(cache.supportsService(serviceClass)){try{ensureCreated();}catch(Throwable t){if(wrapExceptions){throw PolyglotImpl.wrapGuestException(engine,t);}else{throw t;}}return INSTRUMENT.getInstrumentationHandlerService(engine.instrumentationHandler,this,serviceClass);}else{return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Specialization protected RIntVector match(RAbstractRawVector x,@SuppressWarnings(\"unused\")RAbstractComplexVector table,@SuppressWarnings(\"unused\")int nomatch){return RDataFactory.createIntVector(x.getLength(),true);}"
  },
  {
    "code_smells": [],
    "source_code": "AllNamesVisitor(boolean functions,int maxNames,boolean unique){this.functions=functions;this.maxNames=maxNames==-1 ? Integer.MAX_VALUE : maxNames;this.unique=unique ? new HashSet<>(): null;this.result=new ArrayList<>();}"
  },
  {
    "code_smells": [],
    "source_code": "protected Assign(boolean direct){this.direct=direct;}"
  },
  {
    "code_smells": [],
    "source_code": "@Specialization protected Object callNamedFunction(VirtualFrame frame,String symbol,RArgsValuesAndNames args,@SuppressWarnings(\"unused\")RMissing packageName,@Cached(\"createRegisteredNativeSymbol(CallNST)\")DLL.RegisteredNativeSymbol rns,@Cached(\"create()\")DLL.RFindSymbolNode findSymbolNode,@Cached(\"createBinaryProfile()\")ConditionProfile registeredProfile){return callNamedFunctionWithPackage(frame,symbol,args,null,rns,findSymbolNode,registeredProfile);}"
  },
  {
    "code_smells": [],
    "source_code": "public RBuiltinNode getBuiltin(){return builtin;}"
  },
  {
    "code_smells": [],
    "source_code": "Warning(String message,Object call){this.message=message;this.call=call;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ToolsRFFI getToolsRFFI(){return getRFFI().toolsRFFI;}"
  },
  {
    "code_smells": [],
    "source_code": "private Builder(){this.options=0;this.flavor=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public int rewindUpTo(VirtualFrame frame,int length){if(props.isForward()){final int offset=Math.min(getIndex(frame),length);setIndex(frame,getIndex(frame)-offset);return offset;}else{assert length==0;return 0;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean isOpen(){return true;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public QMUIAlphaImageButton addRightImageButton(int drawableResId,int viewId){return mTopBar.addRightImageButton(drawableResId,viewId);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void configWebView(QMUIWebViewContainer webViewContainer,QMUIWebView webView){}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"AMQChannel(\"+_connection+\",\"+_channelNumber+\")\";}"
  },
  {
    "code_smells": [],
    "source_code": "private void init(Class<?>interfaceClass,Object interfaceInstance){this.interfaceInstance=interfaceInstance;this.serviceDescription=new ServiceDescription(interfaceClass);}"
  },
  {
    "code_smells": [],
    "source_code": "private Atom getSTTSAtom(){Atom atom=new Atom(\"stts\",(byte)0,0);int numAudioFrames=mFrameSize.length-1;atom.setData(new byte[]{//entry count 0,//entry count 0,//entry count 0,0x02,//first frame contains no audio 0,//first frame contains no audio 0,//first frame contains no audio 0,0x01,0,0,0,0,(byte)((numAudioFrames>>24)& 0xFF),(byte)((numAudioFrames>>16)& 0xFF),(byte)((numAudioFrames>>8)& 0xFF),(byte)(numAudioFrames & 0xFF),//delay between frames=1024 samples(cf.timescale=Fs)0,//delay between frames=1024 samples(cf.timescale=Fs)0,//delay between frames=1024 samples(cf.timescale=Fs)0x04,0});return atom;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getSalesOrderId(){return this.salesOrderId;}"
  },
  {
    "code_smells": [],
    "source_code": "public ImageArguments crop(CropRegion value){if(value!=null){startArgument(\"crop\");_queryBuilder.append(value.toString());}return this;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private JPEGImageMetadataFormat(){super(JPEG.nativeImageMetadataFormatName,CHILD_POLICY_ALL);addElement(\"JPEGvariety\",JPEG.nativeImageMetadataFormatName,CHILD_POLICY_CHOICE);addElement(\"markerSequence\",JPEG.nativeImageMetadataFormatName,CHILD_POLICY_SEQUENCE);addElement(\"app0JFIF\",\"JPEGvariety\",CHILD_POLICY_SOME);addStreamElements(\"markerSequence\");addElement(\"app14Adobe\",\"markerSequence\",CHILD_POLICY_EMPTY);addElement(\"sof\",\"markerSequence\",1,4);addElement(\"sos\",\"markerSequence\",1,4);addElement(\"JFXX\",\"app0JFIF\",1,Integer.MAX_VALUE);addElement(\"app0JFXX\",\"JFXX\",CHILD_POLICY_CHOICE);addElement(\"app2ICC\",\"app0JFIF\",CHILD_POLICY_EMPTY);addAttribute(\"app0JFIF\",\"majorVersion\",DATATYPE_INTEGER,false,\"1\",\"0\",\"255\",true,true);addAttribute(\"app0JFIF\",\"minorVersion\",DATATYPE_INTEGER,false,\"2\",\"0\",\"255\",true,true);List<String>resUnits=new ArrayList<>();resUnits.add(\"0\");resUnits.add(\"1\");resUnits.add(\"2\");addAttribute(\"app0JFIF\",\"resUnits\",DATATYPE_INTEGER,false,\"0\",resUnits);addAttribute(\"app0JFIF\",\"Xdensity\",DATATYPE_INTEGER,false,\"1\",\"1\",\"65535\",true,true);addAttribute(\"app0JFIF\",\"Ydensity\",DATATYPE_INTEGER,false,\"1\",\"1\",\"65535\",true,true);addAttribute(\"app0JFIF\",\"thumbWidth\",DATATYPE_INTEGER,false,\"0\",\"0\",\"255\",true,true);addAttribute(\"app0JFIF\",\"thumbHeight\",DATATYPE_INTEGER,false,\"0\",\"0\",\"255\",true,true);addElement(\"JFIFthumbJPEG\",\"app0JFXX\",CHILD_POLICY_SOME);addElement(\"JFIFthumbPalette\",\"app0JFXX\",CHILD_POLICY_EMPTY);addElement(\"JFIFthumbRGB\",\"app0JFXX\",CHILD_POLICY_EMPTY);List<String>codes=new ArrayList<>();codes.add(\"16\");codes.add(\"17\");codes.add(\"19\");addAttribute(\"app0JFXX\",\"extensionCode\",DATATYPE_INTEGER,false,null,codes);addChildElement(\"markerSequence\",\"JFIFthumbJPEG\");addAttribute(\"JFIFthumbPalette\",\"thumbWidth\",DATATYPE_INTEGER,false,null,\"0\",\"255\",true,true);addAttribute(\"JFIFthumbPalette\",\"thumbHeight\",DATATYPE_INTEGER,false,null,\"0\",\"255\",true,true);addAttribute(\"JFIFthumbRGB\",\"thumbWidth\",DATATYPE_INTEGER,false,null,\"0\",\"255\",true,true);addAttribute(\"JFIFthumbRGB\",\"thumbHeight\",DATATYPE_INTEGER,false,null,\"0\",\"255\",true,true);addObjectValue(\"app2ICC\",ICC_Profile.class,false,null);addAttribute(\"app14Adobe\",\"version\",DATATYPE_INTEGER,false,\"100\",\"100\",\"255\",true,true);addAttribute(\"app14Adobe\",\"flags0\",DATATYPE_INTEGER,false,\"0\",\"0\",\"65535\",true,true);addAttribute(\"app14Adobe\",\"flags1\",DATATYPE_INTEGER,false,\"0\",\"0\",\"65535\",true,true);List<String>transforms=new ArrayList<>();transforms.add(\"0\");transforms.add(\"1\");transforms.add(\"2\");addAttribute(\"app14Adobe\",\"transform\",DATATYPE_INTEGER,true,null,transforms);addElement(\"componentSpec\",\"sof\",CHILD_POLICY_EMPTY);List<String>procs=new ArrayList<>();procs.add(\"0\");procs.add(\"1\");procs.add(\"2\");addAttribute(\"sof\",\"process\",DATATYPE_INTEGER,false,null,procs);addAttribute(\"sof\",\"samplePrecision\",DATATYPE_INTEGER,false,\"8\");addAttribute(\"sof\",\"numLines\",DATATYPE_INTEGER,false,null,\"0\",\"65535\",true,true);addAttribute(\"sof\",\"samplesPerLine\",DATATYPE_INTEGER,false,null,\"0\",\"65535\",true,true);List<String>comps=new ArrayList<>();comps.add(\"1\");comps.add(\"2\");comps.add(\"3\");comps.add(\"4\");addAttribute(\"sof\",\"numFrameComponents\",DATATYPE_INTEGER,false,null,comps);addAttribute(\"componentSpec\",\"componentId\",DATATYPE_INTEGER,true,null,\"0\",\"255\",true,true);addAttribute(\"componentSpec\",\"HsamplingFactor\",DATATYPE_INTEGER,true,null,\"1\",\"255\",true,true);addAttribute(\"componentSpec\",\"VsamplingFactor\",DATATYPE_INTEGER,true,null,\"1\",\"255\",true,true);List<String>tabids=new ArrayList<>();tabids.add(\"0\");tabids.add(\"1\");tabids.add(\"2\");tabids.add(\"3\");addAttribute(\"componentSpec\",\"QtableSelector\",DATATYPE_INTEGER,true,null,tabids);addElement(\"scanComponentSpec\",\"sos\",CHILD_POLICY_EMPTY);addAttribute(\"sos\",\"numScanComponents\",DATATYPE_INTEGER,true,null,comps);addAttribute(\"sos\",\"startSpectralSelection\",DATATYPE_INTEGER,false,\"0\",\"0\",\"63\",true,true);addAttribute(\"sos\",\"endSpectralSelection\",DATATYPE_INTEGER,false,\"63\",\"0\",\"63\",true,true);addAttribute(\"sos\",\"approxHigh\",DATATYPE_INTEGER,false,\"0\",\"0\",\"15\",true,true);addAttribute(\"sos\",\"approxLow\",DATATYPE_INTEGER,false,\"0\",\"0\",\"15\",true,true);addAttribute(\"scanComponentSpec\",\"componentSelector\",DATATYPE_INTEGER,true,null,\"0\",\"255\",true,true);addAttribute(\"scanComponentSpec\",\"dcHuffTable\",DATATYPE_INTEGER,true,null,tabids);addAttribute(\"scanComponentSpec\",\"acHuffTable\",DATATYPE_INTEGER,true,null,tabids);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void paintComponent(Graphics g){XPStyle xp=XPStyle.getXP();paintTitleBackground(g);String title=frame.getTitle();if(title!=null){boolean isSelected=frame.isSelected();Font oldFont=g.getFont();Font newFont=(titleFont!=null)? titleFont : getFont();g.setFont(newFont);FontMetrics fm=SwingUtilities2.getFontMetrics(frame,g,newFont);int baseline=(getHeight()+fm.getAscent()-fm.getLeading()-fm.getDescent())/2;Rectangle lastIconBounds=new Rectangle(0,0,0,0);if(frame.isIconifiable()){lastIconBounds=iconButton.getBounds();}else if(frame.isMaximizable()){lastIconBounds=maxButton.getBounds();}else if(frame.isClosable()){lastIconBounds=closeButton.getBounds();}int titleX;int titleW;int gap=2;if(WindowsGraphicsUtils.isLeftToRight(frame)){if(lastIconBounds.x==0){lastIconBounds.x=frame.getWidth()-frame.getInsets().right;}titleX=systemLabel.getX()+systemLabel.getWidth()+gap;if(xp!=null){titleX+=2;}titleW=lastIconBounds.x-titleX-gap;}else{if(lastIconBounds.x==0){lastIconBounds.x=frame.getInsets().left;}titleW=SwingUtilities2.stringWidth(frame,fm,title);int minTitleX=lastIconBounds.x+lastIconBounds.width+gap;if(xp!=null){minTitleX+=2;}int availableWidth=systemLabel.getX()-gap-minTitleX;if(availableWidth>titleW){titleX=systemLabel.getX()-gap-titleW;}else{titleX=minTitleX;titleW=availableWidth;}}title=getTitle(frame.getTitle(),fm,titleW);if(xp!=null){String shadowType=null;if(isSelected){shadowType=xp.getString(this,Part.WP_CAPTION,State.ACTIVE,Prop.TEXTSHADOWTYPE);}if(\"single\".equalsIgnoreCase(shadowType)){Point shadowOffset=xp.getPoint(this,Part.WP_WINDOW,State.ACTIVE,Prop.TEXTSHADOWOFFSET);Color shadowColor=xp.getColor(this,Part.WP_WINDOW,State.ACTIVE,Prop.TEXTSHADOWCOLOR,null);if(shadowOffset!=null && shadowColor!=null){g.setColor(shadowColor);SwingUtilities2.drawString(frame,g,title,titleX+shadowOffset.x,baseline+shadowOffset.y);}}}g.setColor(isSelected ? selectedTextColor : notSelectedTextColor);SwingUtilities2.drawString(frame,g,title,titleX,baseline);g.setFont(oldFont);}}"
  },
  {
    "code_smells": [],
    "source_code": "public int hashCode(){int hash=0;for(int i=0;i<tvs.size();i++){hash+=tvs.elementAt(i).hashCode();}return hash;}"
  },
  {
    "code_smells": [],
    "source_code": "protected Context getContinuationContext(Name n)throws NamingException{Object obj=lookup(n.get(0));CannotProceedException cpe=new CannotProceedException();cpe.setResolvedObj(obj);cpe.setEnvironment(myEnv);return NamingManager.getContinuationContext(cpe);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void accept(final Visitor v){v.visitStackConsumer(this);v.visitExceptionThrower(this);v.visitTypedInstruction(this);v.visitArrayInstruction(this);v.visitIASTORE(this);}"
  },
  {
    "code_smells": [],
    "source_code": "public void comment(char[]chars,int offset,int length)throws SAXException{if(_dom==null){prepareNewDOM();}maybeEmitStartElement();_dom.comment(chars,offset,length);}"
  },
  {
    "code_smells": [],
    "source_code": "public DocumentCache(int size)throws SAXException{this(size,null);try{_dtmManager=XSLTCDTMManager.createNewDTMManagerInstance();}catch(Exception e){throw new SAXException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public DTMAxisIterator reset(){_source.reset();return resetPosition();}"
  },
  {
    "source_code": "final protected Node internalRemoveNamedItemNS(String namespaceURI,String name,boolean raiseEx){CoreDocumentImpl ownerDocument=ownerNode.ownerDocument();if(ownerDocument.errorChecking && isReadOnly()){String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NO_MODIFICATION_ALLOWED_ERR\",null);throw new DOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,msg);}int i=findNamePoint(namespaceURI,name);if(i<0){if(raiseEx){String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,\"NOT_FOUND_ERR\",null);throw new DOMException(DOMException.NOT_FOUND_ERR,msg);}else{return null;}}AttrImpl n=(AttrImpl)nodes.get(i);if(n.isIdAttribute()){ownerDocument.removeIdentifier(n.getValue());}String nodeName=n.getNodeName();if(hasDefaults()){NamedNodeMapImpl privates=((ElementImpl)ownerNode).getDefaultAttributes();Node d;if(privates!=null &&(d=privates.getNamedItem(nodeName))!=null){int j=findNamePoint(nodeName,0);if(j>=0 && findNamePoint(nodeName,j+1)<0){NodeImpl clone=(NodeImpl)d.cloneNode(true);clone.ownerNode=ownerNode;if(d.getLocalName()!=null){((AttrNSImpl)clone).namespaceURI=namespaceURI;}clone.isOwned(true);clone.isSpecified(false);nodes.set(i,clone);if(clone.isIdAttribute()){ownerDocument.putIdentifier(clone.getNodeValue(),(ElementImpl)ownerNode);}}else{nodes.remove(i);}}else{nodes.remove(i);}}else{nodes.remove(i);}n.ownerNode=ownerDocument;n.isOwned(false);n.isSpecified(true);n.isIdAttribute(false);ownerDocument.removedAttrNode(n,ownerNode,name);return n;}",
    "code_smells": [
      "LongMethod"
    ]
  },
  {
    "code_smells": [],
    "source_code": "public StringList getErrorCodes(){if(fErrors==null || fErrors.length==0){return StringListImpl.EMPTY_LIST;}return new PSVIErrorList(fErrors,true);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void reset(XMLComponentManager componentManager)throws XMLConfigurationException{XMLSecurityPropertyManager spm=(XMLSecurityPropertyManager)componentManager.getProperty(XML_SECURITY_PROPERTY_MANAGER);if(spm==null){spm=new XMLSecurityPropertyManager();setProperty(XML_SECURITY_PROPERTY_MANAGER,spm);}XMLSecurityManager sm=(XMLSecurityManager)componentManager.getProperty(SECURITY_MANAGER);if(sm==null)setProperty(SECURITY_MANAGER,new XMLSecurityManager(true));faccessExternalSchema=spm.getValue(XMLSecurityPropertyManager.Property.ACCESS_EXTERNAL_SCHEMA);fGrammarBucket.reset();fSubGroupHandler.reset();boolean parser_settings=true;if(componentManager!=fLoaderConfig){parser_settings=componentManager.getFeature(PARSER_SETTINGS,true);}if(!parser_settings || !fSettingsChanged){fJAXPProcessed=false;initGrammarBucket();if(fDeclPool!=null){fDeclPool.reset();}return;}fNodeFactory.reset(componentManager);fEntityManager=(XMLEntityManager)componentManager.getProperty(ENTITY_MANAGER);fErrorReporter=(XMLErrorReporter)componentManager.getProperty(ERROR_REPORTER);SchemaDVFactory dvFactory=null;dvFactory=fSchemaHandler.getDVFactory();if(dvFactory==null){dvFactory=SchemaDVFactory.getInstance();fSchemaHandler.setDVFactory(dvFactory);}try{fExternalSchemas=(String)componentManager.getProperty(SCHEMA_LOCATION);fExternalNoNSSchema=(String)componentManager.getProperty(SCHEMA_NONS_LOCATION);}catch(XMLConfigurationException e){fExternalSchemas=null;fExternalNoNSSchema=null;}fJAXPSource=componentManager.getProperty(JAXP_SCHEMA_SOURCE,null);fJAXPProcessed=false;fGrammarPool=(XMLGrammarPool)componentManager.getProperty(XMLGRAMMAR_POOL,null);initGrammarBucket();boolean psvi=componentManager.getFeature(AUGMENT_PSVI,false);if(!psvi && fGrammarPool==null && false){if(fDeclPool!=null){fDeclPool.reset();}else{fDeclPool=new XSDeclarationPool();}fCMBuilder.setDeclPool(fDeclPool);fSchemaHandler.setDeclPool(fDeclPool);if(dvFactory instanceof SchemaDVFactoryImpl){fDeclPool.setDVFactory((SchemaDVFactoryImpl)dvFactory);((SchemaDVFactoryImpl)dvFactory).setDeclPool(fDeclPool);}}else{fCMBuilder.setDeclPool(null);fSchemaHandler.setDeclPool(null);if(dvFactory instanceof SchemaDVFactoryImpl){((SchemaDVFactoryImpl)dvFactory).setDeclPool(null);}}try{boolean fatalError=componentManager.getFeature(CONTINUE_AFTER_FATAL_ERROR,false);if(!fatalError){fErrorReporter.setFeature(CONTINUE_AFTER_FATAL_ERROR,fatalError);}}catch(XMLConfigurationException e){}fIsCheckedFully=componentManager.getFeature(SCHEMA_FULL_CHECKING,false);fSchemaHandler.setGenerateSyntheticAnnotations(componentManager.getFeature(GENERATE_SYNTHETIC_ANNOTATIONS,false));fSchemaHandler.reset(componentManager);}"
  },
  {
    "source_code": "public static Element getParent(Element elem){Node parent=elem.getParentNode();if(parent instanceof Element)return(Element)parent;return null;}",
    "code_smells": []
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public final Element getDocumentElement(){int dochandle=dtm.getDocument();int elementhandle=DTM.NULL;for(int kidhandle=dtm.getFirstChild(dochandle);kidhandle!=DTM.NULL;kidhandle=dtm.getNextSibling(kidhandle)){switch(dtm.getNodeType(kidhandle)){case Node.ELEMENT_NODE: if(elementhandle!=DTM.NULL){elementhandle=DTM.NULL;kidhandle=dtm.getLastChild(dochandle);}else elementhandle=kidhandle;break;case Node.COMMENT_NODE: case Node.PROCESSING_INSTRUCTION_NODE: case Node.DOCUMENT_TYPE_NODE: break;default: elementhandle=DTM.NULL;kidhandle=dtm.getLastChild(dochandle);break;}}if(elementhandle==DTM.NULL)throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);else return(Element)(dtm.getNode(elementhandle));}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private static Class<?>loadClass2(String className,Class<?>callingClass)throws ClassNotFoundException{try{return Class.forName(className);}catch(ClassNotFoundException ex){try{if(ClassLoaderUtils.class.getClassLoader()!=null){return ClassLoaderUtils.class.getClassLoader().loadClass(className);}}catch(ClassNotFoundException exc){if(callingClass!=null && callingClass.getClassLoader()!=null){return callingClass.getClassLoader().loadClass(className);}}LOG.debug(ex.getMessage(),ex);throw ex;}}"
  },
  {
    "code_smells": [],
    "source_code": "public byte[]getBytes(int columnIndex)throws SQLException{checkIndex(columnIndex);checkCursor();if(isBinary(RowSetMD.getColumnType(columnIndex))==false){throw new SQLException(resBundle.handleGetObject(\"cachedrowsetimpl.dtypemismt\").toString());}return(byte[])(getCurrentRow().getColumnObject(columnIndex));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public R visitLink(LinkTree node,P p){return defaultAction(node,p);}"
  },
  {
    "code_smells": [],
    "source_code": "public List getPublishers(){return(_publisher==null)?(_publisher=new ArrayList()): _publisher;}"
  },
  {
    "code_smells": [],
    "source_code": "protected Item parseItem(Element rssRoot,Element eItem){Item item=super.parseItem(rssRoot,eItem);Element e=eItem.getChild(\"description\",getRSSNamespace());if(e!=null){item.setDescription(parseItemDescription(rssRoot,e));}Element ce=eItem.getChild(\"encoded\",getContentNamespace());if(ce!=null){Content content=new Content();content.setType(Content.HTML);content.setValue(ce.getText());item.setContent(content);}return item;}"
  },
  {
    "code_smells": [],
    "source_code": "public Content getTagletOutput(Doc holder,TagletWriter writer){throw new IllegalArgumentException(\"Method not supported in taglet \"+getName()+\".\");}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public CapturedType cloneWithMetadata(TypeMetadata md){return new CapturedType(tsym,bound,bound,lower,wildcard,md){@Override public Type baseType(){return CapturedType.this.baseType();}};}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasSameBounds(ForAll t,ForAll s){List<Type>l1=t.tvars;List<Type>l2=s.tvars;while(l1.nonEmpty()&& l2.nonEmpty()&& isSameType(l1.head.getUpperBound(),subst(l2.head.getUpperBound(),s.tvars,t.tvars))){l1=l1.tail;l2=l2.tail;}return l1.isEmpty()&& l2.isEmpty();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "List<JCVariableDecl>freevarDefs(int pos,List<VarSymbol>freevars,Symbol owner,long additionalFlags){long flags=FINAL | SYNTHETIC | additionalFlags;List<JCVariableDecl>defs=List.nil();Set<Name>proxyNames=new HashSet<>();for(List<VarSymbol>l=freevars;l.nonEmpty();l=l.tail){VarSymbol v=l.head;int index=0;Name proxyName;do{proxyName=proxyName(v.name,index++);}while(!proxyNames.add(proxyName));VarSymbol proxy=new VarSymbol(flags,proxyName,v.erasure(types),owner);proxies.put(v,proxy);JCVariableDecl vd=make.at(pos).VarDef(proxy,null);vd.vartype=access(vd.vartype);defs=defs.prepend(vd);}return defs;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @DefinedBy(Api.COMPILER)public CharSequence getCharContent(boolean ignoreEncodingErrors)throws IOException{CharBuffer cb=fileManager.getCachedContent(this);if(cb==null){try(InputStream in=openInputStream()){ByteBuffer bb=fileManager.makeByteBuffer(in);JavaFileObject prev=fileManager.log.useSource(this);try{cb=fileManager.decode(bb,ignoreEncodingErrors);}finally{fileManager.log.useSource(prev);}fileManager.recycleByteBuffer(bb);if(!ignoreEncodingErrors){fileManager.cache(this,cb);}}}return cb;}"
  },
  {
    "code_smells": [],
    "source_code": "public JCNewClass SpeculativeNewClass(JCExpression encl,List<JCExpression>typeargs,JCExpression clazz,List<JCExpression>args,JCClassDecl def,boolean classDefRemoved){JCNewClass tree=classDefRemoved ? new JCNewClass(encl,typeargs,clazz,args,def){@Override public boolean classDeclRemoved(){return true;}}: new JCNewClass(encl,typeargs,clazz,args,def);tree.pos=pos;return tree;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return defaultFormatter.format(this,Locale.getDefault());}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private Object invoke(String methodName,Object returnValueIfNonExistent,Class<?>[]paramTypes,Object[]params)throws DocletInvokeException{Method meth;try{meth=docletClass.getMethod(methodName,paramTypes);}catch(NoSuchMethodException exc){if(returnValueIfNonExistent==null){messager.error(Messager.NOPOS,\"main.doclet_method_not_found\",docletClassName,methodName);throw new DocletInvokeException();}else{return returnValueIfNonExistent;}}catch(SecurityException exc){messager.error(Messager.NOPOS,\"main.doclet_method_not_accessible\",docletClassName,methodName);throw new DocletInvokeException();}if(!Modifier.isStatic(meth.getModifiers())){messager.error(Messager.NOPOS,\"main.doclet_method_must_be_static\",docletClassName,methodName);throw new DocletInvokeException();}ClassLoader savedCCL=Thread.currentThread().getContextClassLoader();try{if(appClassLoader!=null)Thread.currentThread().setContextClassLoader(appClassLoader);return meth.invoke(null,params);}catch(IllegalArgumentException | NullPointerException exc){messager.error(Messager.NOPOS,\"main.internal_error_exception_thrown\",docletClassName,methodName,exc.toString());throw new DocletInvokeException();}catch(IllegalAccessException exc){messager.error(Messager.NOPOS,\"main.doclet_method_not_accessible\",docletClassName,methodName);throw new DocletInvokeException();}catch(InvocationTargetException exc){Throwable err=exc.getTargetException();if(apiMode)throw new ClientCodeException(err);if(err instanceof java.lang.OutOfMemoryError){messager.error(Messager.NOPOS,\"main.out.of.memory\");}else{messager.error(Messager.NOPOS,\"main.exception_thrown\",docletClassName,methodName,exc.toString());exc.getTargetException().printStackTrace(System.err);}throw new DocletInvokeException();}finally{Thread.currentThread().setContextClassLoader(savedCCL);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Void visitAnnotation(Annotation_element_value ev,Boolean resolveIndices){print((char)ev.tag);AnnotationWriter.this.write(ev.annotation_value,resolveIndices);return null;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "void setStackMap(StackMapTable_attribute attr){if(attr==null){map=null;return;}Method m=classWriter.getMethod();Descriptor d=m.descriptor;String[]args;try{ConstantPool cp=classWriter.getClassFile().constant_pool;String argString=d.getParameterTypes(cp);args=argString.substring(1,argString.length()-1).split(\"[,]+\");}catch(ConstantPoolException | InvalidDescriptor e){return;}boolean isStatic=m.access_flags.is(AccessFlags.ACC_STATIC);verification_type_info[]initialLocals=new verification_type_info[(isStatic ? 0 : 1)+args.length];if(!isStatic)initialLocals[0]=new CustomVerificationTypeInfo(\"this\");for(int i=0;i<args.length;i++){initialLocals[(isStatic ? 0 : 1)+i]=new CustomVerificationTypeInfo(args[i].replace(\".\",\"/\"));}map=new HashMap<>();StackMapBuilder builder=new StackMapBuilder();int pc=-1;map.put(pc,new StackMap(initialLocals,empty));for(int i=0;i<attr.entries.length;i++)pc=attr.entries[i].accept(builder,pc);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Void visitInvokeDynamic(ConstantPool.CONSTANT_InvokeDynamic_info info,CPEntries p){return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public ReferenceType referenceType(){if(type==null){try{JDWP.ObjectReference.ReferenceType rtinfo=JDWP.ObjectReference.ReferenceType.process(vm,this);type=vm.referenceType(rtinfo.typeID,rtinfo.refTypeTag);}catch(JDWPException exc){throw exc.toJDIException();}}return type;}"
  },
  {
    "code_smells": [],
    "source_code": "private ClassDefItemConsumer(String name,Future<ClassDefItem>futureClazz,int maxMethodIdsInClass,int maxFieldIdsInClass){this.name=name;this.futureClazz=futureClazz;this.maxMethodIdsInClass=maxMethodIdsInClass;this.maxFieldIdsInClass=maxFieldIdsInClass;}"
  },
  {
    "code_smells": [],
    "source_code": "public int adjustAnnotationDirectory(int annotationDirectoryOffset){return annotationDirectoryOffsets.get(annotationDirectoryOffset);}"
  },
  {
    "code_smells": [],
    "source_code": "public final int getBeUint24(final int pos){final int position=origin+pos;if(pos+2>=limit || pos<0)throw new IllegalArgumentException(\"limit excceed: \"+(pos<0 ? pos :(pos+2)));byte[]buf=buffer;return(0xff & buf[position+2])|((0xff & buf[position+1])<<8)|((0xff & buf[position])<<16);}"
  },
  {
    "code_smells": [],
    "source_code": "public final long getUlong56(){if(position+6>=origin+limit)throw new IllegalArgumentException(\"limit excceed: \"+(position-origin+6));byte[]buf=buffer;return((long)(0xff & buf[position++]))|((long)(0xff & buf[position++])<<8)|((long)(0xff & buf[position++])<<16)|((long)(0xff & buf[position++])<<24)|((long)(0xff & buf[position++])<<32)|((long)(0xff & buf[position++])<<40)|((long)(0xff & buf[position++])<<48);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean is2G(){LuaJavaNetworkState state=new LuaJavaNetworkState(mRapidID,mRapidView);return state.isNetworkActive();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override JSONObject getSimulateJsonResult(JSONObject requestJson){JSONObject result=new JSONObject();try{result.put(KEY_RESULT_IS_SUPPORT,true);}catch(JSONException e){e.printStackTrace();}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public void write(short[]shorts){ensureBufferSize(shorts.length*SizeOf.USHORT);for(short s : shorts){writeShort(s);}if(this.data.position()>this.dataBound){this.dataBound=this.data.position();}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static String getOatFileInstructionSet(File oatFile)throws Throwable{ShareElfFile elfFile=null;String result=\"\";try{elfFile=new ShareElfFile(oatFile);final ShareElfFile.SectionHeader roDataHdr=elfFile.getSectionHeaderByName(\".rodata\");if(roDataHdr==null){throw new IOException(\"Unable to find.rodata section.\");}final FileChannel channel=elfFile.getChannel();channel.position(roDataHdr.shOffset);final byte[]oatMagicAndVersion=new byte[8];ShareElfFile.readUntilLimit(channel,ByteBuffer.wrap(oatMagicAndVersion),\"Failed to read oat magic and version.\");if(oatMagicAndVersion[0]!='o' || oatMagicAndVersion[1]!='a' || oatMagicAndVersion[2]!='t' || oatMagicAndVersion[3]!='\\n'){throw new IOException(String.format(\"Bad oat magic: %x %x %x %x\",oatMagicAndVersion[0],oatMagicAndVersion[1],oatMagicAndVersion[2],oatMagicAndVersion[3]));}final int versionOffsetFromOatBegin=4;final int versionBytes=3;final String oatVersion=new String(oatMagicAndVersion,versionOffsetFromOatBegin,versionBytes,Charset.forName(\"ASCII\"));try{Integer.parseInt(oatVersion);}catch(NumberFormatException e){throw new IOException(\"Bad oat version: \"+oatVersion);}ByteBuffer buffer=ByteBuffer.allocate(128);buffer.order(elfFile.getDataOrder());final int isaNumOffsetFromOatBegin=12;channel.position(roDataHdr.shOffset+isaNumOffsetFromOatBegin);buffer.limit(4);ShareElfFile.readUntilLimit(channel,buffer,\"Failed to read isa num.\");int isaNum=buffer.getInt();if(isaNum<0 || isaNum>=InstructionSet.values().length){throw new IOException(\"Bad isa num: \"+isaNum);}switch(InstructionSet.values()[isaNum]){case kArm: case kThumb2: result=\"arm\";break;case kArm64: result=\"arm64\";break;case kX86: result=\"x86\";break;case kX86_64: result=\"x86_64\";break;case kMips: result=\"mips\";break;case kMips64: result=\"mips64\";break;case kNone: result=\"none\";break;default: throw new IOException(\"Should not reach here.\");}}finally{if(elfFile!=null){try{elfFile.close();}catch(Exception ignored){}}}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);setHasOptionsMenu(true);}"
  },
  {
    "code_smells": [],
    "source_code": "public Long getTotalLogRecordsCompacted(){Long totalLogRecords=0L;for(Map.Entry<String,List<HoodieWriteStat>>entry : partitionToWriteStats.entrySet()){for(HoodieWriteStat writeStat : entry.getValue()){totalLogRecords+=writeStat.getTotalLogRecords();}}return totalLogRecords;}"
  },
  {
    "code_smells": [],
    "source_code": "public static Schema readSchemaFromLogFile(FileSystem fs,Path path)throws IOException{Reader reader=HoodieLogFormat.newReader(fs,new HoodieLogFile(path),null);HoodieAvroDataBlock lastBlock=null;while(reader.hasNext()){HoodieLogBlock block=reader.next();if(block instanceof HoodieAvroDataBlock){lastBlock=(HoodieAvroDataBlock)block;}}reader.close();if(lastBlock!=null){return lastBlock.getSchema();}return null;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void handleChainFromFilter(StreamTypeRecord streamType,MethodInvocationTree observableDotFilter,Tree filterMethodOrLambda,VisitorState state){MethodInvocationTree outerCallInChain=observableDotFilter;if(outerCallInChain==null){return;}do{outerCallInChain=observableOuterCallInChain.get(outerCallInChain);MethodInvocationTree mapCallsite=observableOuterCallInChain.get(observableDotFilter);if(observableCallToInnerMethodOrLambda.containsKey(outerCallInChain)){Symbol.MethodSymbol mapMethod=ASTHelpers.getSymbol(outerCallInChain);if(streamType.isMapMethod(mapMethod)){MaplikeToFilterInstanceRecord record=new MaplikeToFilterInstanceRecord(streamType.getMaplikeMethodRecord(mapMethod),filterMethodOrLambda);mapToFilterMap.put(observableCallToInnerMethodOrLambda.get(outerCallInChain),record);}}}while(outerCallInChain!=null && streamType.matchesType(ASTHelpers.getReceiverType(outerCallInChain),state)&& streamType.isPassthroughMethod(ASTHelpers.getSymbol(outerCallInChain)));}"
  },
  {
    "code_smells": [],
    "source_code": "public RaveError(Class<?>clazz,String item,String errorMsg){this.clazz=clazz;this.errorMsg=errorMsg;classElement=item;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ByteBuf encodeHeader(ByteBufAllocator allocator){ByteBuf buffer=allocator.buffer(31);buffer.writeInt((int)getTTL());CodecUtils.encodeTrace(getTracing(),buffer);CodecUtils.encodeString(getWhy(),buffer);return buffer;}"
  },
  {
    "code_smells": [],
    "source_code": "@NotNull public final Builder setHeader(@NotNull String header){this.setArg2(Unpooled.wrappedBuffer(header.getBytes(StandardCharsets.UTF_8)));this.header=header;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getHost(){return host;}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isTrustAliasMissing(ComputeState computeState){URI hostUri=ContainerDescription.getDockerHostUri(computeState);return UriUtils.HTTPS_SCHEME.equalsIgnoreCase(hostUri.getScheme())&&(getTrustAlias(computeState)==null);}"
  },
  {
    "code_smells": [],
    "source_code": "public ResourceOperationSpecService(){super(ResourceOperationSpec.class);super.toggleOption(ServiceOption.PERSISTENCE,true);super.toggleOption(ServiceOption.REPLICATION,true);super.toggleOption(ServiceOption.OWNER_SELECTION,true);super.toggleOption(ServiceOption.IDEMPOTENT_POST,true);}"
  },
  {
    "code_smells": [],
    "source_code": "public String toString(){StringBuilder sb=new StringBuilder();sb.append(\"name: \").append(this.name);sb.append(\",id: \").append(this.id);sb.append(\",subnet range link: \").append(this.subnetRangeLink);sb.append(\",resource link: \").append(this.connectedResourceLink);sb.append(\",IP address: \").append(this.ipAddress);sb.append(\",IP version: \").append(this.ipVersion);sb.append(\",status: \").append(this.ipAddressStatus);return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public final boolean isPrivateImage(){return !StringUtil.isNullOrEmpty(this.endpointLink);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void log(Operation op,OperationProcessingContext context,String msg,Level logLevel){String hostId=context.host!=null ? context.host.getId(): \"\";String path=op.getUri()!=null ? op.getUri().getPath(): \"\";Filter filter=this.filters.get(context.currentFilterPosition);String filterName=filter!=null ? filter.getClass().getSimpleName(): \"\";String logMsg=String.format(\"(host: %s,op %d %s %s)filter %s: %s\",hostId,op.getId(),op.getAction(),path,filterName,msg);Level level=logLevel!=null ? logLevel : Level.INFO;Utils.log(getClass(),op.getUri().getPath(),level,logMsg);}"
  },
  {
    "code_smells": [],
    "source_code": "public void selectOwner(String selectorPath,String key,Operation op){if(isStopping()){op.fail(new CancellationException(\"Host is stopping\"));return;}SelectAndForwardRequest body=this.selectOwnerRequests.get();body.key=key;NodeSelectorService nss=findNodeSelectorService(selectorPath,op);if(nss==null){return;}nss.selectAndForward(op,body);}"
  },
  {
    "code_smells": [],
    "source_code": "String get(String subsystem,String name,boolean verboseResolution){String key=buildKey(subsystem,name);String value=getProperty(key);if(value==null){key=toSnakeUpperCase(Utils.PROPERTY_NAME_PREFIX+subsystem).replace(\".\",\"\");key=key+'_'+toSnakeUpperCase(name);value=getEnv(key);if(value!=null){logFoundEnvVar(verboseResolution,key,value);}}else{logFoundSystemProperty(verboseResolution,key,value);}if(value==null || value.length()==0){return null;}return value;}"
  },
  {
    "code_smells": [],
    "source_code": "public Customer1935(String firstName,String lastName){this.firstName=firstName;this.lastName=lastName;}"
  },
  {
    "code_smells": [],
    "source_code": "protected Customer1942(){}"
  },
  {
    "code_smells": [],
    "source_code": "protected Customer377(){}"
  },
  {
    "code_smells": [],
    "source_code": "public Customer888(String firstName,String lastName){this.firstName=firstName;this.lastName=lastName;}"
  },
  {
    "code_smells": [],
    "source_code": "public Customer1085Service(Customer1085Repository repo){}"
  },
  {
    "code_smells": [],
    "source_code": "public Customer123Service(Customer123Repository repo){}"
  },
  {
    "code_smells": [],
    "source_code": "public Customer970Service(Customer970Repository repo){}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean equals(Object object){boolean isEqual=false;if(super.equals(object)&&(object instanceof DefineShape)){DefineShape defineShape=(DefineShape)object;if(equals(defineShape.bounds,this.bounds)&& equals(defineShape.shapeWithStyle,this.shapeWithStyle)&& equals(defineShape.edgeBounds,this.edgeBounds)&&(defineShape.usesFillWindingRule==this.usesFillWindingRule)&&(defineShape.usesNonScalingStrokes==this.usesNonScalingStrokes)&&(defineShape.usesScalingStrokes==this.usesScalingStrokes)){isEqual=true;}}return isEqual;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isSuspended()throws NotConnectedException{if(!isConnected())throw new NotConnectedException();return m_isHalted;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ConfigurationInfo getAdjustOpdebuglineInfo(){return new AdvancedConfigurationInfo(){public boolean isHidden(){return true;}};}"
  },
  {
    "code_smells": [],
    "source_code": "boolean isSQLDateAndTimeTimeZoneSameAsNormal(){if(cachedSQLDateAndTimeTimeZoneSameAsNormal==null){cachedSQLDateAndTimeTimeZoneSameAsNormal=Boolean.valueOf(getSQLDateAndTimeTimeZone()==null || getSQLDateAndTimeTimeZone().equals(getTimeZone()));}return cachedSQLDateAndTimeTimeZoneSameAsNormal.booleanValue();}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isInfinite(Number num){if(num instanceof Double){return((Double)num).isInfinite();}else if(num instanceof Float){return((Float)num).isInfinite();}else if(hasTypeThatIsKnownToNotSupportInfiniteAndNaN(num)){return false;}else{throw new UnsupportedNumberClassException(num.getClass());}}"
  },
  {
    "code_smells": [],
    "source_code": "public static TimeOfYear fromDateTime(DateTime dateTime){DateTime nextYear=dateTime.plusYears(1);TimeOfYear instance=new TimeOfYear();instance.timeString=String.format(\"%02d %02d %08d\",nextYear.getMonthOfYear(),nextYear.getDayOfMonth(),nextYear.getMillisOfDay());return instance;}"
  },
  {
    "code_smells": [],
    "source_code": "private RequestHandler(@Nullable Class<C>component,Provider<? extends RequestComponentBuilder<C>>requestComponentBuilderProvider,RequestAuthenticator requestAuthenticator){this.router=Router.create(component!=null ? component : new TypeInstantiator<C>(getClass()){}.getExactType());this.requestComponentBuilderProvider=checkNotNull(requestComponentBuilderProvider);this.requestAuthenticator=checkNotNull(requestAuthenticator);}"
  },
  {
    "code_smells": [],
    "source_code": "@Provides @Parameter(\"fields\")static Optional<String>provideFields(HttpServletRequest req){return extractOptionalParameter(req,ListObjectsAction.FIELDS_PARAM);}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")private Comparable increment(Object value,Number step){return(Comparable)plus((Number)value,step);}"
  },
  {
    "code_smells": [],
    "source_code": "private static void validateArguments(final int p,final int sp)throws UDFArgumentException{if(p<4 || p>sp){throw new UDFArgumentException(\"p must be between 4 and sp(inclusive)\");}if(sp>32){throw new UDFArgumentException(\"sp values greater than 32 not supported\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean iterate(DoubleWritable xi)throws HiveException{if(xi==null){return true;}if(partial==null){this.partial=new PartialResult();}partial.iterate(xi.get());return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Nonnull public static double[]set(@Nonnull double[]src,final int index,final double value){if(index>=src.length){src=Arrays.copyOf(src,src.length*2);}src[index]=value;return src;}"
  },
  {
    "code_smells": [],
    "source_code": "private void writeObject(ObjectOutputStream s)throws java.io.IOException{s.defaultWriteObject();AWTEventMulticaster.save(s,itemListenerK,itemListener);s.writeObject(null);}"
  },
  {
    "code_smells": [],
    "source_code": "protected Container getGlobalCurrentFocusCycleRoot()throws SecurityException{synchronized(KeyboardFocusManager.class){checkKFMSecurity();return currentFocusCycleRoot;}}"
  },
  {
    "code_smells": [],
    "source_code": "public Shape createTransformedShape(Shape pSrc){if(pSrc==null){return null;}return new Path2D.Double(pSrc,this);}"
  },
  {
    "code_smells": [],
    "source_code": "@Transient public Rectangle2D getFrame(){return new Rectangle2D.Double(getX(),getY(),getWidth(),getHeight());}"
  },
  {
    "code_smells": [],
    "source_code": "static void decompress(char[]array1,int start1,char[]array2,int start2,int length){for(int i=0;i<length;++i){helpers.putCharInArrayByIndex(array2,start2+i,helpers.byteToCharUnsigned(helpers.getByteFromArrayByIndex(array1,start1+i)));}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ByteBuffer put(byte x){if(isReadOnly){throw new ReadOnlyBufferException();}hb[ix(nextPutIndex())]=x;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "private static Void checkPermission(){SecurityManager sm=System.getSecurityManager();if(sm!=null)sm.checkPermission(new RuntimePermission(\"selectorProvider\"));return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setExtendedKeyUsage(Set<String>keyPurposeSet)throws IOException{if((keyPurposeSet==null)|| keyPurposeSet.isEmpty()){this.keyPurposeSet=null;keyPurposeOIDSet=null;}else{this.keyPurposeSet=Collections.unmodifiableSet(new HashSet<String>(keyPurposeSet));keyPurposeOIDSet=new HashSet<ObjectIdentifier>();for(String s : this.keyPurposeSet){keyPurposeOIDSet.add(new ObjectIdentifier(s));}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int compareTo(OffsetDateTime other){int cmp=compareInstant(this,other);if(cmp==0){cmp=toLocalDateTime().compareTo(other.toLocalDateTime());}return cmp;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private int encode0(byte[]src,int off,int end,byte[]dst){char[]base64=isURL ? toBase64URL : toBase64;int sp=off;int slen=(end-off)/3*3;int sl=off+slen;if(linemax>0 && slen>linemax/4*3)slen=linemax/4*3;int dp=0;while(sp<sl){int sl0=Math.min(sp+slen,sl);for(int sp0=sp,dp0=dp;sp0<sl0;){int bits=(src[sp0++]& 0xff)<<16 |(src[sp0++]& 0xff)<<8 |(src[sp0++]& 0xff);dst[dp0++]=(byte)base64[(bits>>>18)& 0x3f];dst[dp0++]=(byte)base64[(bits>>>12)& 0x3f];dst[dp0++]=(byte)base64[(bits>>>6)& 0x3f];dst[dp0++]=(byte)base64[bits & 0x3f];}int dlen=(sl0-sp)/3*4;dp+=dlen;sp=sl0;if(dlen==linemax && sp<end){for(byte b : newline){dst[dp++]=b;}}}if(sp<end){int b0=src[sp++]& 0xff;dst[dp++]=(byte)base64[b0>>2];if(sp==end){dst[dp++]=(byte)base64[(b0<<4)& 0x3f];if(doPadding){dst[dp++]='=';dst[dp++]='=';}}else{int b1=src[sp++]& 0xff;dst[dp++]=(byte)base64[(b0<<4)& 0x3f |(b1>>4)];dst[dp++]=(byte)base64[(b1<<2)& 0x3f];if(doPadding){dst[dp++]='=';}}}return dp;}"
  },
  {
    "code_smells": [],
    "source_code": "public FormatFlagsConversionMismatchException(String f,char c){if(f==null)throw new NullPointerException();this.f=f;this.c=c;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int getActualMinimum(int field){if(field==DAY_OF_MONTH){GregorianCalendar gc=getNormalizedCalendar();int year=gc.cdate.getNormalizedYear();if(year==gregorianCutoverYear || year==gregorianCutoverYearJulian){long month1=getFixedDateMonth1(gc.cdate,gc.calsys.getFixedDate(gc.cdate));BaseCalendar.Date d=getCalendarDate(month1);return d.getDayOfMonth();}}return getMinimum(field);}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized Enumeration<V>elements(){return this.<V>getEnumeration(VALUES);}"
  },
  {
    "code_smells": [],
    "source_code": "public int lastIndexOf(Object o){int index=size;if(o==null){for(Node<E>x=last;x!=null;x=x.prev){index--;if(x.item==null)return index;}}else{for(Node<E>x=last;x!=null;x=x.prev){index--;if(o.equals(x.item))return index;}}return-1;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){return isPresent ? Double.hashCode(value): 0;}"
  },
  {
    "code_smells": [],
    "source_code": "public Enumeration<K>keys(){Node<K,V>[]t;int f=(t=table)==null ? 0 : t.length;return new KeyIterator<K,V>(t,f,0,f,this);}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean equals(Object o){Object k,v;Map.Entry<?,?>e;return((o instanceof Map.Entry)&&(k=(e=(Map.Entry<?,?>)o).getKey())!=null &&(v=e.getValue())!=null &&(k==key || k.equals(key))&&(v==val || v.equals(val)));}"
  },
  {
    "code_smells": [],
    "source_code": "public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize){return new ScheduledThreadPoolExecutor(corePoolSize);}"
  },
  {
    "code_smells": [],
    "source_code": "private void siftUp(int k,RunnableScheduledFuture<?>key){while(k>0){int parent=(k-1)>>>1;RunnableScheduledFuture<?>e=queue[parent];if(key.compareTo(e)>=0)break;queue[k]=e;setIndex(e,k);k=parent;}queue[k]=key;setIndex(key,k);}"
  },
  {
    "code_smells": [],
    "source_code": "private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){int ws=pred.waitStatus;if(ws==Node.SIGNAL)return true;if(ws>0){do{node.prev=pred=pred.prev;}while(pred.waitStatus>0);pred.next=node;}else{pred.compareAndSetWaitStatus(ws,Node.SIGNAL);}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public String toString(){StringBuilder sb=new StringBuilder();sb.append(\"java.util.regex.Matcher\").append(\"[pattern=\").append(pattern()).append(\" region=\").append(regionStart()).append(',').append(regionEnd()).append(\" lastmatch=\");if((first>=0)&&(group()!=null)){sb.append(group());}sb.append(']');return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "private static boolean isMetaName(byte[]name,int off,int len){return len>9 && name[off+len-1]!='/' &&(name[off++]| 0x20)=='m' &&(name[off++]| 0x20)=='e' &&(name[off++]| 0x20)=='t' &&(name[off++]| 0x20)=='a' &&(name[off++])=='-' &&(name[off++]| 0x20)=='i' &&(name[off++]| 0x20)=='n' &&(name[off++]| 0x20)=='f' &&(name[off])=='/';}"
  },
  {
    "code_smells": [],
    "source_code": "@BeanProperty(bound=false)public boolean getScrollableTracksViewportWidth(){Container parent=SwingUtilities.getUnwrappedParent(this);if(parent instanceof JViewport){JViewport port=(JViewport)parent;TextUI ui=getUI();int w=port.getWidth();Dimension min=ui.getMinimumSize(this);Dimension max=ui.getMaximumSize(this);if((w>=min.width)&&(w<=max.width)){return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public void selectAllAccessibleSelection(){TreeModel model=JTree.this.getModel();if(model!=null){int childCount=getAccessibleChildrenCount();TreePath path;for(int i=0;i<childCount;i++){path=getChildTreePath(i);JTree.this.addSelectionPath(path);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"deprecation\")public void show(){Component component=getComponent();if(component!=null){component.show();}}"
  },
  {
    "code_smells": [],
    "source_code": "static JComponent getPaintingOrigin(JComponent c){Container p=c;while((p=p.getParent())instanceof JComponent){JComponent jp=(JComponent)p;if(jp.isPaintingOrigin()){return jp;}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public void stateChanged(ChangeEvent e){if(!isDragging){calculateThumbLocation();slider.repaint();}lastValue=slider.getValue();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected void baselineLayout(int targetSpan,int axis,int[]offsets,int[]spans){int totalAscent=(int)(targetSpan*getAlignment(axis));int totalDescent=targetSpan-totalAscent;int n=getViewCount();for(int i=0;i<n;i++){View v=getView(i);float align=v.getAlignment(axis);float viewSpan;if(v.getResizeWeight(axis)>0){float minSpan=v.getMinimumSpan(axis);float maxSpan=v.getMaximumSpan(axis);if(align==0.0f){viewSpan=Math.max(Math.min(maxSpan,totalDescent),minSpan);}else if(align==1.0f){viewSpan=Math.max(Math.min(maxSpan,totalAscent),minSpan);}else{float fitSpan=Math.min(totalAscent/align,totalDescent/(1.0f-align));viewSpan=Math.max(Math.min(maxSpan,fitSpan),minSpan);}}else{viewSpan=v.getPreferredSpan(axis);}offsets[i]=totalAscent-(int)(viewSpan*align);spans[i]=(int)viewSpan;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setEditFormatter(JFormattedTextField.AbstractFormatter atf){editFormat=atf;}"
  },
  {
    "code_smells": [],
    "source_code": "PlainHttpConnection(InetSocketAddress addr,HttpClientImpl client){super(addr,client);try{this.chan=SocketChannel.open();chan.configureBlocking(false);trySetReceiveBufferSize(client.getReceiveBufferSize());if(debug.on()){int bufsize=getInitialBufferSize();debug.log(\"Initial receive buffer size is: %d\",bufsize);}chan.setOption(StandardSocketOptions.TCP_NODELAY,true);tube=new SocketTube(client(),chan,Utils::getBuffer);}catch(IOException e){throw new InternalError(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "private PublishingBodySubscriber(){completionCF=new MinimalFuture<>();completionCF.whenComplete((r,t)->subscribedCF.thenAccept(s->complete(s,t)));}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "boolean increaseConnectionWindow(int amount){List<Stream<?>>candidates=null;controllerLock.lock();try{int size=connectionWindowSize;size+=amount;if(size<0)return false;connectionWindowSize=size;if(debug.on())debug.log(\"Connection window size is now %d(amount added %d)\",size,amount);Iterator<Map.Entry<Integer,Map.Entry<Stream<?>,Integer>>>iter=pending.entrySet().iterator();while(iter.hasNext()&& size>0){Map.Entry<Integer,Map.Entry<Stream<?>,Integer>>item=iter.next();Integer streamSize=streams.get(item.getKey());if(streamSize==null){iter.remove();}else{Map.Entry<Stream<?>,Integer>e=item.getValue();int requestedAmount=e.getValue();int minAmount=1;if(size>=minAmount && streamSize>=minAmount){size-=Math.min(streamSize,requestedAmount);iter.remove();if(candidates==null)candidates=new ArrayList<>();candidates.add(e.getKey());}}}}finally{controllerLock.unlock();}if(candidates!=null){candidates.forEach(Stream::signalWindowUpdate);}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "protected SignatureVisitor createSignatureRemapper(final SignatureVisitor signatureVisitor){return new SignatureRemapper(signatureVisitor,this);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void set(Object obj,Object value)throws IllegalArgumentException,IllegalAccessException{ensureObj(obj);if(isFinal){throwFinalFieldIllegalAccessException(value);}if(value==null){throwSetIllegalArgumentException(value);}if(value instanceof Byte){unsafe.putInt(obj,fieldOffset,((Byte)value).byteValue());return;}if(value instanceof Short){unsafe.putInt(obj,fieldOffset,((Short)value).shortValue());return;}if(value instanceof Character){unsafe.putInt(obj,fieldOffset,((Character)value).charValue());return;}if(value instanceof Integer){unsafe.putInt(obj,fieldOffset,((Integer)value).intValue());return;}throwSetIllegalArgumentException(value);}"
  },
  {
    "code_smells": [],
    "source_code": "public TypeElementCatalog(Iterable<TypeElement>typeElements,Configuration config){this(config);for(TypeElement typeElement : typeElements){addTypeElement(typeElement);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void visitTryCatchBlock(Label start,Label end,Label handler,String type){if(!inlining){blocks.add(new CatchBlock(start,end,handler,type));}else{super.visitTryCatchBlock(start,end,handler,type);}}"
  },
  {
    "code_smells": [],
    "source_code": "void commandLoop(){try{while(processCommand()){}}catch(IOException ex){}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private ConfigurationInfo(CompositeData cd){this.settings=createMap(cd.get(\"settings\"));this.name=(String)cd.get(\"name\");this.label=(String)cd.get(\"label\");this.description=(String)cd.get(\"description\");this.provider=(String)cd.get(\"provider\");this.contents=(String)cd.get(\"contents\");}"
  },
  {
    "code_smells": [],
    "source_code": "private void setElem(final int index,final double elem){try{if(index<nb.limit()){nb.put(index,elem);}}catch(final IndexOutOfBoundsException e){throw new ClassCastException();}}"
  },
  {
    "code_smells": [],
    "source_code": "private static void relinkComposableInvoker(final CallSite cs,final CompiledFunction inv,final boolean constructor){final HandleAndAssumptions handleAndAssumptions=inv.getValidOptimisticInvocation(new Supplier<MethodHandle>(){@Override public MethodHandle get(){return inv.getInvokerOrConstructor(constructor);}});final MethodHandle handle=handleAndAssumptions.handle;final SwitchPoint assumptions=handleAndAssumptions.assumptions;final MethodHandle target;if(assumptions==null){target=handle;}else{final MethodHandle relink=MethodHandles.insertArguments(RELINK_COMPOSABLE_INVOKER,0,cs,inv,constructor);target=assumptions.guardWithTest(handle,MethodHandles.foldArguments(cs.dynamicInvoker(),relink));}cs.setTarget(target.asType(cs.type()));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ArrayData copy(){final UndefinedArrayFilter copy=new UndefinedArrayFilter(underlying.copy());copy.getUndefined().copy(undefined);return copy;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getNameAndSignature(){String className=method.getDeclaringClass().getName();return className+\".\"+method.getName()+method.getSignature().toMethodDescriptor();}"
  },
  {
    "code_smells": [],
    "source_code": "@GET @Path(\"list\")public Collection<Subject>list(){return dao.findAll();}"
  },
  {
    "code_smells": [],
    "source_code": "public static void main(String[]args){}"
  },
  {
    "code_smells": [],
    "source_code": "public _Job[]listJobs()throws TransportException,SOAPFault{final _ReportingService2005Soap_ListJobs requestData=new _ReportingService2005Soap_ListJobs();final SOAPRequest request=createSOAPRequest(\"ListJobs\",new SOAPMethodRequestWriter(){public void writeSOAPRequest(final XMLStreamWriter writer,final OutputStream out)throws XMLStreamException,IOException{requestData.writeAsElement(writer,\"ListJobs\");}});final _ReportingService2005Soap_ListJobsResponse responseData=new _ReportingService2005Soap_ListJobsResponse();executeSOAPRequest(request,\"ListJobsResponse\",new SOAPMethodResponseReader(){public void readSOAPResponse(final XMLStreamReader reader,final InputStream in)throws XMLStreamException,IOException{responseData.readFromElement(reader);}});return responseData.getJobs();}"
  },
  {
    "code_smells": [],
    "source_code": "public _MonthlyDOWRecurrence getMonthlyDOWRecurrence(){return this.monthlyDOWRecurrence;}"
  },
  {
    "code_smells": [],
    "source_code": "public _Failure[]getFailures(){return this.failures;}"
  },
  {
    "code_smells": [],
    "source_code": "public _ClientService3Soap_SyncExternalStructures(final String projectURI){setProjectURI(projectURI);}"
  },
  {
    "code_smells": [],
    "source_code": "public List<HarPostDataParam>getParams(){return params;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void validateArrayStep(String arrStep)throws QueryException{boolean wildAllowed=true;boolean digitAllowed=true;boolean commaAllowed=false;boolean afterDigit=false;boolean toAllowed=false;boolean afterTo=false;boolean toInProgress=false;boolean spaceRequired=false;boolean digitRequired=false;for(int i=1;i<arrStep.length()-1;++i){char currentChar=arrStep.charAt(i);if(currentChar=='*'){if(!wildAllowed)throwArrayException(arrStep);wildAllowed=false;digitAllowed=false;}else if(currentChar==','){if(!commaAllowed)throwArrayException(arrStep);commaAllowed=false;toAllowed=false;afterDigit=false;afterTo=false;digitRequired=true;}else if(\"0123456789\".indexOf(currentChar)>=0){if(!digitAllowed)throwArrayException(arrStep);wildAllowed=false;commaAllowed=true;afterDigit=true;digitRequired=false;}else if(\" \\t\\n\\r\".indexOf(currentChar)>=0){if(toInProgress)throwArrayException(arrStep);if(afterDigit){digitAllowed=false;toAllowed=!afterTo;commaAllowed=true;}else if(spaceRequired){digitAllowed=true;spaceRequired=false;digitRequired=true;}}else if(currentChar=='t'){if(!toAllowed)throwArrayException(arrStep);toInProgress=true;commaAllowed=false;afterDigit=false;}else if(currentChar=='o'){if(!toInProgress)throwArrayException(arrStep);toInProgress=false;toAllowed=false;afterTo=true;spaceRequired=true;}else{throwArrayException(arrStep);}}if(wildAllowed)throwArrayException(arrStep);if(toInProgress || spaceRequired || digitRequired)throwArrayException(arrStep);}"
  },
  {
    "code_smells": [],
    "source_code": "private V1SelfSubjectAccessReview prepareSelfSubjectAccessReview(Operation operation,Resource resource,String resourceName,Scope scope,String namespaceName){LOGGER.entering();V1SelfSubjectAccessReviewSpec subjectAccessReviewSpec=new V1SelfSubjectAccessReviewSpec();subjectAccessReviewSpec.setResourceAttributes(prepareResourceAttributes(operation,resource,resourceName,scope,namespaceName));V1SelfSubjectAccessReview subjectAccessReview=new V1SelfSubjectAccessReview();subjectAccessReview.setApiVersion(\"authorization.k8s.io/v1\");subjectAccessReview.setKind(\"SelfSubjectAccessReview\");subjectAccessReview.setMetadata(new V1ObjectMeta());subjectAccessReview.setSpec(subjectAccessReviewSpec);LOGGER.exiting(subjectAccessReview);return subjectAccessReview;}"
  },
  {
    "code_smells": [],
    "source_code": "public Step deleteJobAsync(String name,String namespace,V1DeleteOptions deleteOptions,ResponseStep<V1Status>responseStep){return createRequestAsync(responseStep,new RequestParams(\"deleteJob\",namespace,name,deleteOptions),DELETE_JOB);}"
  },
  {
    "code_smells": [],
    "source_code": "public void severe(String msg,Object...params){if(isSevereEnabled()){CallerDetails details=inferCaller();logger.logp(Level.SEVERE,details.clazz,details.method,msg,params);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void unsetTinfo(){this.tinfo=null;}"
  },
  {
    "code_smells": [],
    "source_code": "private static<S extends org.apache.thrift.scheme.IScheme>S scheme(org.apache.thrift.protocol.TProtocol proto){return(org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme())? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.thrift.annotation.Nullable public java.lang.Object getFieldValue(_Fields field){switch(field){case SEC: return getSec();case TOPE: return getTope();}throw new java.lang.IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "public hasNamespacePermission_args setTblNspcPerm(byte tblNspcPerm){this.tblNspcPerm=tblNspcPerm;setTblNspcPermIsSet(true);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public void unsetTinfo(){this.tinfo=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public int compareColumnQualifier(Text cq){return WritableComparator.compareBytes(colQualifier,0,colQualifier.length,cq.getBytes(),0,cq.getLength());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return new StringBuilder(\"v\").append(major).append(\".\").append(minor).toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public TableInfo(){}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.thrift.annotation.Nullable public static _Fields findByName(java.lang.String name){return byName.get(name);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setTmfeIsSet(boolean value){if(!value){this.tmfe=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public TStatus getStatus(long tid){verifyReserved(tid);return _getStatus(tid);}"
  },
  {
    "code_smells": [],
    "source_code": "public static ServersShuttingDown getServersShuttingDown(){ServersShuttingDown servers=new ServersShuttingDown();for(String server : Monitor.getMmi().serversShuttingDown){servers.addServerShuttingDown(new ServerShuttingDownInformation(server));}return servers;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void read(org.apache.thrift.protocol.TProtocol prot,cancelCompaction_args struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TTupleProtocol iprot=(org.apache.thrift.protocol.TTupleProtocol)prot;java.util.BitSet incoming=iprot.readBitSet(2);if(incoming.get(0)){struct.login=iprot.readBinary();struct.setLoginIsSet(true);}if(incoming.get(1)){struct.tableName=iprot.readString();struct.setTableNameIsSet(true);}}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.thrift.annotation.Nullable public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return LOGIN;case 2: return TABLE_NAME;case 3: return VERSIONING_ITER;case 4: return TYPE;default: return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "private void writeObject(java.io.ObjectOutputStream out)throws java.io.IOException{try{write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));}catch(org.apache.thrift.TException te){throw new java.io.IOException(te);}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public void read(org.apache.thrift.protocol.TProtocol prot,getNamespaceIteratorSetting_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TTupleProtocol iprot=(org.apache.thrift.protocol.TTupleProtocol)prot;java.util.BitSet incoming=iprot.readBitSet(4);if(incoming.get(0)){struct.success=new IteratorSetting();struct.success.read(iprot);struct.setSuccessIsSet(true);}if(incoming.get(1)){struct.ouch1=new AccumuloException();struct.ouch1.read(iprot);struct.setOuch1IsSet(true);}if(incoming.get(2)){struct.ouch2=new AccumuloSecurityException();struct.ouch2.read(iprot);struct.setOuch2IsSet(true);}if(incoming.get(3)){struct.ouch3=new NamespaceNotFoundException();struct.ouch3.read(iprot);struct.setOuch3IsSet(true);}}"
  },
  {
    "code_smells": [],
    "source_code": "public getSiteConfiguration_args(java.nio.ByteBuffer login){this();this.login=org.apache.thrift.TBaseHelper.copyBinary(login);}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.thrift.annotation.Nullable public java.lang.Object getFieldValue(_Fields field){switch(field){case OUCH1: return getOuch1();case OUCH2: return getOuch2();}throw new java.lang.IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "public listNamespaceIterators_result setOuch1(@org.apache.thrift.annotation.Nullable AccumuloException ouch1){this.ouch1=ouch1;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setOuch2IsSet(boolean value){if(!value){this.ouch2=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public renameNamespace_args setNewNamespaceName(@org.apache.thrift.annotation.Nullable java.lang.String newNamespaceName){this.newNamespaceName=newNamespaceName;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.thrift.annotation.Nullable public static _Fields findByName(java.lang.String name){return byName.get(name);}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.thrift.annotation.Nullable public java.lang.Object getFieldValue(_Fields field){switch(field){case CONDITIONAL_WRITER: return getConditionalWriter();case UPDATES: return getUpdates();}throw new java.lang.IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "public int getIteratorsSize(){return(this.iterators==null)? 0 : this.iterators.size();}"
  },
  {
    "code_smells": [],
    "source_code": "public ScanOptions(){}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private static void listZookeeper(ServerContext context)throws Exception{TreeSet<String>volumes=new TreeSet<>();volumes.add(getTableURI(MetadataTableUtil.getRootTabletDir(context)));ArrayList<LogEntry>result=new ArrayList<>();MetadataTableUtil.getRootLogEntries(context,result);for(LogEntry logEntry : result){getLogURIs(volumes,logEntry);}for(String volume : volumes)System.out.println(\"\\tVolume : \"+volume);}"
  },
  {
    "code_smells": [],
    "source_code": "public String getDefaultPrompt(){Objects.requireNonNull(accumuloClient);ClientInfo info=ClientInfo.from(accumuloClient.properties());return accumuloClient.whoami()+\"@\"+info.getInstanceName()+(getTableName().isEmpty()? \"\" : \" \")+getTableName()+\">\";}"
  },
  {
    "code_smells": [],
    "source_code": "public static String repeat(String s,int c){StringBuilder sb=new StringBuilder();for(int i=0;i<c;i++)sb.append(s);return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void runLater(State state,RandWalkEnv env)throws Exception{Text[]points=getRandomTabletRange(state);log.info(\"merging \"+rangeToString(points));env.getAccumuloClient().tableOperations().merge(Setup.getTableName(),points[0],points[1]);log.info(\"merging \"+rangeToString(points)+\" complete\");}"
  },
  {
    "code_smells": [],
    "source_code": "public long getConsumerFailoverRedeliveryWaitPeriod(){return consumerFailoverRedeliveryWaitPeriod;}"
  },
  {
    "source_code": "private int getGroupSequence(){return 0;}",
    "code_smells": "class C{private int getGroupSequence(){return 0;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void run(){try{callOnMessage();}catch(Exception e){ActiveMQClientLogger.LOGGER.onMessageError(e);lastException=e;}}"
  },
  {
    "code_smells": [],
    "source_code": "private byte getByte(final long index){checkForPacket(index);if(fileCache!=null && index<packetPosition){return fileCache.getByteFromCache(index);}else{return currentPacket.getChunk()[(int)(index-packetPosition)];}}"
  },
  {
    "code_smells": [],
    "source_code": "public void resetHistory(){int max=dayCounterMax;setHistoryLimit(0);setHistoryLimit(max);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean addAddressInfo(AddressInfo addressInfo)throws Exception{boolean added=reloadAddressInfo(addressInfo);if(added && storageManager!=null){long txID=storageManager.generateID();try{storageManager.addAddressBinding(txID,addressInfo);storageManager.commitBindings(txID);}catch(Exception e){try{storageManager.rollbackBindings(txID);}catch(Exception ignored){}throw e;}}return added;}"
  },
  {
    "code_smells": [],
    "source_code": "private VoteRunnableHolder(QuorumVote quorumVote,List<VoteRunnable>runnables,int size){this.quorumVote=quorumVote;this.runnables=runnables;this.size=size;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public MessageReference copy(final Queue queue){return new MessageReferenceImpl(this,queue);}"
  },
  {
    "code_smells": [],
    "source_code": "public TransactionDetail(Xid xid,Transaction tx,Long creation){this.xid=xid;this.transaction=tx;this.creationTime=creation;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(final Object other){if(this==other){return true;}if(!(other instanceof Xid)){return false;}Xid xother=(Xid)other;if(xother.getFormatId()!=formatId){return false;}if(xother.getBranchQualifier().length!=branchQualifier.length){return false;}if(xother.getGlobalTransactionId().length!=globalTransactionId.length){return false;}for(int i=0;i<branchQualifier.length;i++){byte[]otherBQ=xother.getBranchQualifier();if(branchQualifier[i]!=otherBQ[i]){return false;}}for(int i=0;i<globalTransactionId.length;i++){byte[]otherGtx=xother.getGlobalTransactionId();if(globalTransactionId[i]!=otherGtx[i]){return false;}}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public InMemoryDirectoryServiceFactory(){try{directoryService=new DefaultDirectoryService();}catch(Exception e){throw new RuntimeException(e);}directoryService.setShutdownHookEnabled(false);partitionFactory=new AvlPartitionFactory();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int readInt()throws JMSException{if(ActiveMQRALogger.LOGGER.isTraceEnabled()){}return((BytesMessage)message).readInt();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void reset(){RepeatableIteratorWrapper<E>changedIterator=this.changedIterator;if(changedIterator!=null){currentIterator=changedIterator;changedIteratorFieldUpdater.compareAndSet(this,changedIterator,null);}currentIterator.reset();}"
  },
  {
    "code_smells": [],
    "source_code": "protected DataStructure looseUnmarsalNestedObject(OpenWireFormat wireFormat,DataInput dataIn)throws IOException{return wireFormat.looseUnmarshalNestedObject(dataIn);}"
  },
  {
    "code_smells": [],
    "source_code": "public int tightMarshal1(OpenWireFormat wireFormat,Object o,BooleanStream bs)throws IOException{MessageDispatchNotification info=(MessageDispatchNotification)o;int rc=super.tightMarshal1(wireFormat,o,bs);rc+=tightMarshalCachedObject1(wireFormat,(DataStructure)info.getConsumerId(),bs);rc+=tightMarshalCachedObject1(wireFormat,(DataStructure)info.getDestination(),bs);rc+=tightMarshalLong1(wireFormat,info.getDeliverySequenceId(),bs);rc+=tightMarshalNestedObject1(wireFormat,(DataStructure)info.getMessageId(),bs);return rc+0;}"
  },
  {
    "code_smells": [],
    "source_code": "public int tightMarshal1(OpenWireFormat wireFormat,Object o,BooleanStream bs)throws IOException{ControlCommand info=(ControlCommand)o;int rc=super.tightMarshal1(wireFormat,o,bs);rc+=tightMarshalString1(info.getCommand(),bs);return rc+0;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void looseMarshalByteArray(OpenWireFormat wireFormat,byte[]data,DataOutput dataOut)throws IOException{dataOut.writeBoolean(data!=null);if(data!=null){dataOut.writeInt(data.length);dataOut.write(data);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public SubscriptionInfo lookupSubscription(String clientId,String subscriptionName)throws IOException{TransactionContext c=persistenceAdapter.getTransactionContext();try{return adapter.doGetSubscriberEntry(c,destination,clientId,subscriptionName);}catch(SQLException e){JDBCPersistenceAdapter.log(\"JDBC Failure: \",e);throw IOExceptionSupport.create(\"Failed to lookup subscription for: \"+clientId+\".Reason: \"+e,e);}finally{c.close();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void add(Sequence value){for(long i=value.first;i<value.last+1;i++){add(i);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public long size(){return 0;}"
  },
  {
    "code_smells": [],
    "source_code": "public String recv_registerComputeResource()throws org.apache.airavata.model.error.InvalidRequestException,org.apache.airavata.model.error.AiravataClientException,org.apache.airavata.model.error.AiravataSystemException,org.apache.airavata.model.error.AuthorizationException,org.apache.thrift.TException{registerComputeResource_result result=new registerComputeResource_result();receiveBase(result,\"registerComputeResource\");if(result.isSetSuccess()){return result.success;}if(result.ire!=null){throw result.ire;}if(result.ace!=null){throw result.ace;}if(result.ase!=null){throw result.ase;}if(result.ae!=null){throw result.ae;}throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,\"registerComputeResource failed: unknown result\");}"
  },
  {
    "code_smells": [],
    "source_code": "public addSSHJobSubmissionDetails_args getEmptyArgsInstance(){return new addSSHJobSubmissionDetails_args();}"
  },
  {
    "code_smells": [],
    "source_code": "public deleteExperiment_result setSuccess(boolean success){this.success=success;setSuccessIsSet(true);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setAeIsSet(boolean value){if(!value){this.ae=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void validate()throws org.apache.thrift.TException{if(authzToken==null){throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'authzToken' was not present! Struct: \"+toString());}if(gatewayId==null){throw new org.apache.thrift.protocol.TProtocolException(\"Required field 'gatewayId' was not present! Struct: \"+toString());}if(authzToken!=null){authzToken.validate();}}"
  },
  {
    "code_smells": [],
    "source_code": "public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void write(org.apache.thrift.protocol.TProtocol prot,registerApplicationModule_args struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;struct.authzToken.write(oprot);oprot.writeString(struct.gatewayId);struct.applicationModule.write(oprot);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setIreIsSet(boolean value){if(!value){this.ire=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((Boolean)value);}break;case IRE: if(value==null){unsetIre();}else{setIre((org.apache.airavata.model.error.InvalidRequestException)value);}break;case ACE: if(value==null){unsetAce();}else{setAce((org.apache.airavata.model.error.AiravataClientException)value);}break;case ASE: if(value==null){unsetAse();}else{setAse((org.apache.airavata.model.error.AiravataSystemException)value);}break;case AE: if(value==null){unsetAe();}else{setAe((org.apache.airavata.model.error.AuthorizationException)value);}break;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){List<Object>list=new ArrayList<Object>();boolean present_query=true &&(isSetQuery());list.add(present_query);if(present_query)list.add(query);return list.hashCode();}"
  },
  {
    "code_smells": [],
    "source_code": "public Object getFieldValue(_Fields field){switch(field){case SUCCESS: return getSuccess();case CS_EXCEPTION: return getCsException();}throw new IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){List<Object>list=new ArrayList<Object>();boolean present_name=true &&(isSetName());list.add(present_name);if(present_name)list.add(name);boolean present_value=true &&(isSetValue());list.add(present_value);if(present_value)list.add(value);boolean present_envPathOrder=true &&(isSetEnvPathOrder());list.add(present_envPathOrder);if(present_envPathOrder)list.add(envPathOrder);return list.hashCode();}"
  },
  {
    "code_smells": [],
    "source_code": "public void setDestinationIsSet(boolean value){if(!value){this.destination=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public updateUnicoreJobSubmissionDetails_args getEmptyArgsInstance(){return new updateUnicoreJobSubmissionDetails_args();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public void updateExperiment(String airavataExperimentId,ExperimentModel experiment)throws RegistryServiceException,TException{try{experimentCatalog=RegistryFactory.getDefaultExpCatalog();if(!experimentCatalog.isExist(ExperimentCatalogModelType.EXPERIMENT,airavataExperimentId)){logger.error(airavataExperimentId,\"Update request failed,Experiment{}doesn't exist.\",airavataExperimentId);throw new RegistryServiceException(\"Requested experiment id \"+airavataExperimentId+\" does not exist in the system..\");}ExperimentStatus experimentStatus=getExperimentStatusInternal(airavataExperimentId);if(experimentStatus!=null){ExperimentState experimentState=experimentStatus.getState();switch(experimentState){case CREATED: case VALIDATED: if(experiment.getUserConfigurationData()!=null && experiment.getUserConfigurationData().getComputationalResourceScheduling()!=null){String compResourceId=experiment.getUserConfigurationData().getComputationalResourceScheduling().getResourceHostId();ComputeResourceDescription computeResourceDescription=appCatalog.getComputeResource().getComputeResource(compResourceId);if(!computeResourceDescription.isEnabled()){logger.error(\"Compute Resource is not enabled by the Admin!\");AiravataSystemException exception=new AiravataSystemException();exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);exception.setMessage(\"Compute Resource is not enabled by the Admin!\");throw exception;}}experimentCatalog.update(ExperimentCatalogModelType.EXPERIMENT,experiment,airavataExperimentId);logger.debug(airavataExperimentId,\"Successfully updated experiment{}\",experiment.getExperimentName());break;default: logger.error(airavataExperimentId,\"Error while updating experiment.Update experiment is only valid for experiments \"+\"with status CREATED,VALIDATED,CANCELLED,FAILED and UNKNOWN.Make sure the given \"+\"experiment is in one of above statuses...\");AiravataSystemException exception=new AiravataSystemException();exception.setAiravataErrorType(AiravataErrorType.INTERNAL_ERROR);exception.setMessage(\"Error while updating experiment.Update experiment is only valid for experiments \"+\"with status CREATED,VALIDATED,CANCELLED,FAILED and UNKNOWN.Make sure the given \"+\"experiment is in one of above statuses...\");throw exception;}}}catch(RegistryException e){logger.error(airavataExperimentId,\"Error while updating experiment\",e);RegistryServiceException exception=new RegistryServiceException();exception.setMessage(\"Error while updating experiment.More info : \"+e.getMessage());throw exception;}catch(AppCatalogException e){logger.error(airavataExperimentId,\"Error while updating experiment\",e);RegistryServiceException exception=new RegistryServiceException();exception.setMessage(\"Error while updating experiment.More info : \"+e.getMessage());throw exception;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public boolean isExists(Object identifier)throws AppCatalogException{HashMap<String,String>ids;if(identifier instanceof Map){ids=(HashMap)identifier;}else{logger.error(\"Identifier should be a map with the field name and it's value\");throw new AppCatalogException(\"Identifier should be a map with the field name and it's value\");}EntityManager em=null;try{em=AppCatalogJPAUtils.getEntityManager();ComputeResourcePreference existingPreference=em.find(ComputeResourcePreference.class,new ComputeResourcePreferencePK(ids.get(ComputeResourcePreferenceConstants.GATEWAY_ID),ids.get(ComputeResourcePreferenceConstants.RESOURCE_ID)));if(em.isOpen()){if(em.getTransaction().isActive()){em.getTransaction().rollback();}em.close();}return existingPreference!=null;}catch(Exception e){logger.error(e.getMessage(),e);throw new AppCatalogException(e);}finally{if(em!=null && em.isOpen()){if(em.getTransaction().isActive()){em.getTransaction().rollback();}em.close();}}}"
  },
  {
    "code_smells": [],
    "source_code": "private Runnable getIAMUserProfileUpdater(AuthzToken authzToken,UserProfile userProfile)throws UserProfileServiceException{IamAdminServices.Client iamAdminServicesClient=getIamAdminServicesClient();return()->{try{iamAdminServicesClient.updateUserProfile(authzToken,userProfile);}catch(TException e){throw new RuntimeException(\"Failed to update user profile in IAM service\",e);}};}"
  },
  {
    "code_smells": [],
    "source_code": "public getAllGateways_args(org.apache.airavata.model.security.AuthzToken authzToken){this();this.authzToken=authzToken;}"
  },
  {
    "code_smells": [],
    "source_code": "public org.apache.airavata.sharing.registry.models.Entity getResult()throws org.apache.airavata.sharing.registry.models.SharingRegistryException,org.apache.thrift.TException{if(getState()!=org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ){throw new IllegalStateException(\"Method call not finished!\");}org.apache.thrift.transport.TMemoryInputTransport memoryTransport=new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());org.apache.thrift.protocol.TProtocol prot=client.getProtocolFactory().getProtocol(memoryTransport);return(new Client(prot)).recv_getEntity();}"
  },
  {
    "code_smells": [],
    "source_code": "public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return USER;default: return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void write(org.apache.thrift.protocol.TProtocol prot,getEntity_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}if(struct.isSetSre()){optionals.set(1);}oprot.writeBitSet(optionals,2);if(struct.isSetSuccess()){struct.success.write(oprot);}if(struct.isSetSre()){struct.sre.write(oprot);}}"
  },
  {
    "code_smells": [],
    "source_code": "protected XmlElement toXML(){XmlElement portElement=XMLUtil.BUILDER.newFragment(GraphSchema.NS,GraphSchema.PORT_TAG);XmlElement idElement=portElement.addElement(GraphSchema.NS,GraphSchema.PORT_ID_TAG);idElement.addChild(getID());if(this.name!=null){XmlElement nameElement=portElement.addElement(GraphSchema.NS,GraphSchema.PORT_NAME_TAG);nameElement.addChild(this.name);}XmlElement nodeElement=portElement.addElement(GraphSchema.NS,GraphSchema.PORT_NODE_TAG);nodeElement.addChild(this.node.getID());return portElement;}"
  },
  {
    "code_smells": [],
    "source_code": "protected String getHash(T data,String salt){String json=null;try{json=MAPPER.writeValueAsString(data);}catch(JsonProcessingException e){throw new RuntimeException(\"Error during mapping message to calculate hash\",e);}String generatedPassword=null;try{MessageDigest md=MessageDigest.getInstance(\"SHA-512\");md.update(salt.getBytes(\"UTF-8\"));byte[]bytes=md.digest(json.getBytes(\"UTF-8\"));StringBuilder sb=new StringBuilder();for(byte b : bytes){sb.append(Integer.toString((b & 0xff)+0x100,16).substring(1));}generatedPassword=sb.toString();}catch(NoSuchAlgorithmException | UnsupportedEncodingException e){e.printStackTrace();}return generatedPassword;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean evaluate(Resource resource){Set<Map<String,Object>>extendedPropertySet=joinedResources.get(resource);if(extendedPropertySet==null){return predicate.evaluate(resource);}for(Map<String,Object>extendedProperties : extendedPropertySet){Resource extendedResource=new ExtendedResourceImpl(resource,extendedProperties);if(predicate.evaluate(extendedResource)){return true;}}return false;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "protected void addRequiredAlertProperties(Set<String>properties){properties.add(AlertResourceProvider.ALERT_STATE);properties.add(AlertResourceProvider.ALERT_ORIGINAL_TIMESTAMP);properties.add(AlertResourceProvider.ALERT_MAINTENANCE_STATE);}"
  },
  {
    "code_smells": [],
    "source_code": "@DELETE @Path(\"{requestScheduleId}\")@Produces(MediaType.TEXT_PLAIN)@ApiOperation(value=\"Delete a request schedule\",notes=\"Changes status from COMPLETED to DISABLED\")@ApiResponses({@ApiResponse(code=HttpStatus.SC_OK,message=MSG_SUCCESSFUL_OPERATION),@ApiResponse(code=HttpStatus.SC_NOT_FOUND,message=MSG_CLUSTER_OR_HOST_NOT_FOUND),@ApiResponse(code=HttpStatus.SC_UNAUTHORIZED,message=MSG_NOT_AUTHENTICATED),@ApiResponse(code=HttpStatus.SC_FORBIDDEN,message=MSG_PERMISSION_DENIED),@ApiResponse(code=HttpStatus.SC_INTERNAL_SERVER_ERROR,message=MSG_SERVER_ERROR)})public Response deleteRequestSchedule(@Context HttpHeaders headers,@Context UriInfo ui,@PathParam(\"requestScheduleId\")String requestScheduleId){return handleRequest(headers,null,ui,Request.Type.DELETE,createRequestSchedule(m_clusterName,requestScheduleId));}"
  },
  {
    "code_smells": [],
    "source_code": "ResourceInstance createStackVersionResource(String stackName,String stackVersion){Map<Resource.Type,String>mapIds=new HashMap<>();mapIds.put(Resource.Type.Stack,stackName);mapIds.put(Resource.Type.StackVersion,stackVersion);return createResource(Resource.Type.StackVersion,mapIds);}"
  },
  {
    "code_smells": [],
    "source_code": "private ResourceInstance createConfigResource(){Map<Resource.Type,String>mapIds=new HashMap<>();mapIds.put(Resource.Type.RootService,RootService.AMBARI.name());mapIds.put(Resource.Type.RootServiceComponent,RootComponent.AMBARI_SERVER.name());return createResource(Resource.Type.RootServiceComponentConfiguration,mapIds);}"
  },
  {
    "code_smells": [],
    "source_code": "protected DeleteAlertGroupRequestAuditEvent(){}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void verifyRepository(RepositoryRequest request)throws AmbariException{URLStreamProvider usp=new URLStreamProvider(REPO_URL_CONNECT_TIMEOUT,REPO_URL_READ_TIMEOUT,null,null,null);usp.setSetupTruststoreForHttps(false);String repoName=request.getRepoName();if(StringUtils.isEmpty(repoName)){throw new IllegalArgumentException(\"repo_name is required to verify repository\");}String errorMessage=null;Exception e=null;String[]suffixes=configs.getRepoValidationSuffixes(request.getOsType());for(String suffix : suffixes){String formatted_suffix=String.format(suffix,repoName);String spec=request.getBaseUrl().trim();if(spec.charAt(spec.length()-1)!='/' && formatted_suffix.charAt(0)!='/'){spec=spec+\"/\"+formatted_suffix;}else if(spec.charAt(spec.length()-1)=='/' && formatted_suffix.charAt(0)=='/'){spec=spec+formatted_suffix.substring(1);}else{spec=spec+formatted_suffix;}final String FILE_SCHEME=\"file://\";if(spec.toLowerCase().startsWith(FILE_SCHEME)){String filePath=spec.substring(FILE_SCHEME.length());File f=new File(filePath);if(!f.exists()){errorMessage=\"Could not access base url.\"+spec+\".\";e=new FileNotFoundException(errorMessage);break;}}else{try{IOUtils.readLines(usp.readFrom(spec));}catch(IOException ioe){e=ioe;errorMessage=\"Could not access base url.\"+request.getBaseUrl()+\".\";if(LOG.isDebugEnabled()){errorMessage+=ioe;}else{errorMessage+=ioe.getMessage();}break;}}}if(e!=null){LOG.error(errorMessage);throw new IllegalArgumentException(errorMessage,e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@ApiModelProperty(name=ServiceConfigVersionResourceProvider.CLUSTER_NAME_PROPERTY_ID)public String getClusterName(){return clusterName;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setTimeCreated(Long timeCreated){this.timeCreated=timeCreated;}"
  },
  {
    "code_smells": [],
    "source_code": "@RequiresSession public List<ClusterConfigEntity>getLatestConfigurations(long clusterId,StackId stackId){StackEntity stackEntity=stackDAO.find(stackId.getStackName(),stackId.getStackVersion());TypedQuery<ClusterConfigEntity>query=entityManagerProvider.get().createNamedQuery(\"ClusterConfigEntity.findLatestConfigsByStack\",ClusterConfigEntity.class);query.setParameter(\"clusterId\",clusterId);query.setParameter(\"stack\",stackEntity);return daoUtils.selectList(query);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setViewEntity(ViewEntity view){this.view=view;}"
  },
  {
    "code_smells": [],
    "source_code": "public static RSAPublicKey getPublicKeyFromFile(String filePath)throws IOException,CertificateException{String pemString=FileUtils.readFileToString(new File(filePath));return getPublicKeyFromString(pemString);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object o){if(this==o)return true;if(o==null || getClass()!=o.getClass())return false;LinkAttributeFilter that=(LinkAttributeFilter)o;return isVisible()==that.isVisible()&& Objects.equals(linkAttribute,that.linkAttribute);}"
  },
  {
    "code_smells": [],
    "source_code": "public RemoteAmbariCluster(String name,String clusterPath,AmbariStreamProvider streamProvider){this.name=name;this.clusterPath=clusterPath;this.streamProvider=streamProvider;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getId(){return id;}"
  },
  {
    "code_smells": [],
    "source_code": "static Object checkValue(Object value){if(value==null){throw new IllegalArgumentException(\"Value must not be null\");}return value;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private ApplicationDTO buildApplicationDTO(ApplicationRuntimeInformation ari){ApplicationDTO applicationDTO=new ApplicationDTO(){};applicationDTO.name=getServiceName(ari._cachingServiceReference::getProperty);applicationDTO.base=_whiteboard.getApplicationBase(ari._cachingServiceReference::getProperty);applicationDTO.serviceId=(Long)ari._cachingServiceReference.getProperty(\"service.id\");applicationDTO.resourceDTOs=getApplicationEndpointsStream(applicationDTO.name).toArray(ResourceDTO[]::new);applicationDTO.extensionDTOs=getApplicationExtensionsStream(applicationDTO.name).toArray(ExtensionDTO[]::new);Map<String,Set<ExtensionDTO>>nameBoundExtensions=new HashMap<>();Map<ExtensionDTO,Set<ResourceDTO>>extensionResources=new HashMap<>();for(ExtensionDTO extensionDTO : applicationDTO.extensionDTOs){if(extensionDTO.nameBindings==null){continue;}for(String nameBinding : extensionDTO.nameBindings){Set<ExtensionDTO>extensionDTOS=nameBoundExtensions.computeIfAbsent(nameBinding,__->new HashSet<>());extensionDTOS.add(extensionDTO);}}for(ResourceDTO resourceDTO : applicationDTO.resourceDTOs){for(ResourceMethodInfoDTO resourceMethodInfo : resourceDTO.resourceMethods){if(resourceMethodInfo.nameBindings==null){continue;}for(String nameBinding : resourceMethodInfo.nameBindings){Set<ExtensionDTO>extensionDTOS=nameBoundExtensions.get(nameBinding);if(extensionDTOS!=null){for(ExtensionDTO extensionDTO : extensionDTOS){Set<ResourceDTO>resourceDTOS=extensionResources.computeIfAbsent(extensionDTO,__->new HashSet<>());resourceDTOS.add(resourceDTO);}}}}}extensionResources.forEach((extensionDTO,resourceDTOS)->extensionDTO.filteredByName=resourceDTOS.toArray(new ResourceDTO[0]));CxfJaxrsServiceRegistrator cxfJaxRsServiceRegistrator=ari._cxfJaxRsServiceRegistrator;Bus bus=cxfJaxRsServiceRegistrator.getBus();Iterable<Class<?>>resourceClasses=cxfJaxRsServiceRegistrator.getStaticResourceClasses();ArrayList<ResourceMethodInfoDTO>resourceMethodInfoDTOS=new ArrayList<>();for(Class<?>resourceClass : resourceClasses){resourceMethodInfoDTOS.addAll(ClassIntrospector.getResourceMethodInfos(resourceClass,bus));}applicationDTO.resourceMethods=resourceMethodInfoDTOS.toArray(new ResourceMethodInfoDTO[0]);return applicationDTO;}"
  },
  {
    "code_smells": [],
    "source_code": "public void removeDependentService(CachingServiceReference<?>serviceReference){_dependentServices.remove(serviceReference);}"
  },
  {
    "code_smells": [],
    "source_code": "private final void writePreInvoke(){Label nullListener=newLabel();beginListenerInvocation(nullListener);loadLocal(dispatchTarget);getStatic(typeBeingWoven,methodStaticFieldName,METHOD_TYPE);loadArgArray();invokeInterface(LISTENER_TYPE,PRE_INVOKE_METHOD);storeLocal(preInvokeReturnedToken);mark(nullListener);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void connected(SocketChannel channel)throws IOException,Exception{this.channel=channel;if(codec!=null){initializeCodec();}this.channel.configureBlocking(false);this.remoteAddress=channel.socket().getRemoteSocketAddress().toString();channel.socket().setSoLinger(true,0);channel.socket().setTcpNoDelay(true);this.socketState=new CONNECTED();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private static void weaveDir(File dir,String consumerHeaderKey,String consumerHeaderValue,String bundleClassPath)throws Exception{Set<WeavingData>wd=ConsumerHeaderProcessor.processHeader(consumerHeaderKey,consumerHeaderValue);URLClassLoader cl=new URLClassLoader(new URL[]{dir.toURI().toURL()},Main.class.getClassLoader());String dirName=dir.getAbsolutePath();DirTree dt=new DirTree(dir);for(File f : dt.getFiles()){if(!f.getName().endsWith(\".class\"))continue;String className=f.getAbsolutePath().substring(dirName.length());if(className.startsWith(File.separator))className=className.substring(1);className=className.substring(0,className.length()-\".class\".length());className=className.replace(File.separator,\".\");InputStream is=new FileInputStream(f);byte[]b;try{ClassReader cr=new ClassReader(is);ClassWriter cw=new StaticToolClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES,cl);TCCLSetterVisitor cv=new TCCLSetterVisitor(cw,className,wd);cr.accept(cv,ClassReader.SKIP_FRAMES);if(cv.isWoven()){b=cw.toByteArray();}else{b=Streams.suck(new FileInputStream(f));}}finally{is.close();}OutputStream os=new FileOutputStream(f);try{os.write(b);}finally{os.close();}}if(bundleClassPath!=null){for(String entry : bundleClassPath.split(\",\")){File jarFile=new File(dir,entry.trim());if(jarFile.isFile()){weaveBCPJar(jarFile,consumerHeaderKey,consumerHeaderValue);}}}}"
  },
  {
    "code_smells": [],
    "source_code": "public Clause getClause(Resource resource){String symbolicName=ResourceHelper.getSymbolicNameAttribute(resource);Version version=ResourceHelper.getVersionAttribute(resource);String type=ResourceHelper.getTypeAttribute(resource);for(Clause clause : clauses){if(symbolicName.equals(clause.getPath())&& clause.getDeployedVersion().equals(version)&& type.equals(clause.getType()))return clause;}return null;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private void processAsSubstitutableExport(boolean isFragment,Requirement requirement,List<Capability>capabilities){String namespace=requirement.getNamespace();if(!PackageNamespace.PACKAGE_NAMESPACE.equals(namespace)){return;}Resource resource=requirement.getResource();Wiring wiring=wirings.get(resource);if(isFragment){List<Wire>fragmentWires=wiring.getRequiredResourceWires(HostNamespace.HOST_NAMESPACE);for(Wire fragmentWire : fragmentWires){Resource host=fragmentWire.getProvider();processResourceCapabilities(wirings.get(host).getResourceCapabilities(namespace),requirement,capabilities);}}else{List<Capability>resourceCapabilities=wiring.getResourceCapabilities(namespace);processResourceCapabilities(resourceCapabilities,requirement,capabilities);}}"
  },
  {
    "code_smells": [],
    "source_code": "private static String extractErrorMessage(Throwable e){Throwable cause=getRootCause(e);String fullyQualifiedExceptionClassName=cause.getClass().getName();String[]hierarchySplits=fullyQualifiedExceptionClassName.split(\"\\\\.\");String exceptionClassName=hierarchySplits[hierarchySplits.length-1];String localizedMessage=cause.getLocalizedMessage();if(localizedMessage==null){localizedMessage=\"Internal error.Please check instance logs for further details.\";}return localizedMessage+\"[\"+exceptionClassName+\"]\";}"
  },
  {
    "code_smells": [],
    "source_code": "public ShutdownAllCommand(Args args){super(args,\"?all=true\");}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public IBinaryHashFunction createBinaryHashFunction(){return new IBinaryHashFunction(){@Override public int hash(byte[]bytes,int offset,int length){return IntegerPointable.getInteger(bytes,offset+4);}};}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void serialize(AGeometry instance,DataOutput out)throws HyracksDataException{try{OGCGeometry geometry=instance.getGeometry();byte[]buffer=geometry.asBinary().array();out.writeInt(buffer.length);out.write(buffer);}catch(IOException e){throw HyracksDataException.create(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean parse(DataOutput out)throws HyracksDataException{try{resetPools();return parseAdmInstance(recordType,out);}catch(ParseException e){e.setLocation(filename,admLexer.getLine(),admLexer.getColumn());throw e;}catch(IOException e){throw new ParseException(e,filename,admLexer.getLine(),admLexer.getColumn());}}"
  },
  {
    "code_smells": [],
    "source_code": "static void registerConfigOptions(IConfigManager configManager){AsterixProperties.registerConfigOptions(configManager);ControllerConfig.Option.DEFAULT_DIR.setDefaultValue(FileUtil.joinPath(System.getProperty(ConfigurationUtil.JAVA_IO_TMPDIR),\"asterixdb\"));NCConfig.Option.APP_CLASS.setDefaultValue(NCApplication.class.getName());CCConfig.Option.APP_CLASS.setDefaultValue(CCApplication.class.getName());try{InputStream propertyStream=ApplicationConfigurator.class.getClassLoader().getResourceAsStream(\"git.properties\");if(propertyStream!=null){Properties gitProperties=new Properties();gitProperties.load(propertyStream);StringWriter sw=new StringWriter();gitProperties.store(sw,null);configManager.setVersionString(sw.toString());}}catch(IOException e){throw new IllegalStateException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "private static void insertInitialDataverses(MetadataTransactionContext mdTxnCtx)throws AlgebricksException{String dataFormat=NonTaggedDataFormat.NON_TAGGED_DATA_FORMAT;MetadataManager.INSTANCE.addDataverse(mdTxnCtx,new Dataverse(MetadataConstants.METADATA_DATAVERSE_NAME,dataFormat,MetadataUtil.PENDING_NO_OP));MetadataManager.INSTANCE.addDataverse(mdTxnCtx,MetadataBuiltinEntities.DEFAULT_DATAVERSE);}"
  },
  {
    "code_smells": [],
    "source_code": "public Mutable<ILogicalOperator>getRootRef(){return rootRef;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public FunctionIdentifier getIdentifier(){return FID;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public List<Long>getOrderedLogFileIds(){File fileLogDir=new File(logDir);String[]logFileNames=null;List<Long>logFileIds=null;if(!fileLogDir.exists()){LOGGER.log(Level.INFO,\"log dir \"+logDir+\" doesn't exist.returning empty list\");return Collections.emptyList();}if(!fileLogDir.isDirectory()){throw new IllegalStateException(\"log dir \"+logDir+\" exists but it is not a directory\");}logFileNames=fileLogDir.list((dir,name)->name.startsWith(logFilePrefix));if(logFileNames==null){throw new IllegalStateException(\"listing of log dir(\"+logDir+\")files returned null.\"+\"Either an IO error occurred or the dir was just deleted by another process/thread\");}if(logFileNames.length==0){LOGGER.log(Level.INFO,\"the log dir(\"+logDir+\")is empty.returning empty list\");return Collections.emptyList();}logFileIds=new ArrayList<>();for(String fileName : logFileNames){logFileIds.add(Long.parseLong(fileName.substring(logFilePrefix.length()+1)));}logFileIds.sort(Long::compareTo);return logFileIds;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getIndexName(){return indexName;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void generateGroovy(GroovyGenerationContext context){context.append(label);context.append(\":\");expr.generateGroovy(context);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Consumer build(BlockingQueue<JsonNode>queue){return(isResuming)? new ResumingConsumer(queue,graph,bulkLoadGraph,parseElement,batchSize): new Consumer(queue,graph,bulkLoadGraph,parseElement,batchSize);}"
  },
  {
    "code_smells": [],
    "source_code": "public IDataType getElemType(){return elemType;}"
  },
  {
    "code_smells": [],
    "source_code": "private static JsonNode validateDefault(String fieldName,Schema schema,JsonNode defaultValue){if(VALIDATE_DEFAULTS.get()&&(defaultValue!=null)&& !isValidDefault(schema,defaultValue)){String message=\"Invalid default for field \"+fieldName+\": \"+defaultValue+\" not a \"+schema;throw new AvroTypeException(message);}return defaultValue;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean validate(Schema schema,Object datum){switch(schema.getType()){case ARRAY: if(!datum.getClass().isArray())return super.validate(schema,datum);int length=java.lang.reflect.Array.getLength(datum);for(int i=0;i<length;i++)if(!validate(schema.getElementType(),java.lang.reflect.Array.get(datum,i)))return false;return true;default: return super.validate(schema,datum);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void positionWriterAtCheckpoint(){writerChkptDK=new CheckpointDataKey(jobExecutionImpl.getJobInstance().getInstanceId(),step.getId(),CheckpointType.WRITER);CheckpointData writerData=persistenceManagerService.getCheckpointData(writerChkptDK);try{if(writerData!=null){byte[]writertoken=writerData.getRestartToken();TCCLObjectInputStream writerOIS;try{writerProxy.open((Serializable)dataRepresentationService.toJavaRepresentation(writertoken));}catch(Exception ex){throw new BatchContainerServiceException(\"Cannot read the checkpoint data for[\"+step.getId()+\"]\",ex);}}else{writerData=null;try{writerProxy.open(null);}catch(Exception ex){throw new BatchContainerServiceException(\"Cannot open the step[\"+step.getId()+\"]\",ex);}}}catch(ClassCastException e){throw new IllegalStateException(\"Expected CheckpointData but found\"+writerData);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setX(float value)throws DOMException{throw element.createDOMException(DOMException.NO_MODIFICATION_ALLOWED_ERR,\"readonly.length\",null);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected float removeInstanceTime(InstanceTime time,boolean isBegin){hasPropagated=true;List instanceTimes=isBegin ? beginInstanceTimes : endInstanceTimes;int index=Collections.binarySearch(instanceTimes,time);for(int i=index;i>=0;i--){InstanceTime it=(InstanceTime)instanceTimes.get(i);if(it==time){instanceTimes.remove(i);break;}if(it.compareTo(time)!=0){break;}}int len=instanceTimes.size();for(int i=index+1;i<len;i++){InstanceTime it=(InstanceTime)instanceTimes.get(i);if(it==time){instanceTimes.remove(i);break;}if(it.compareTo(time)!=0){break;}}shouldUpdateCurrentInterval=true;float ret;if(root.isSampling()&& !isSampling){ret=sampleAt(root.getCurrentTime(),root.isHyperlinking());}else{ret=Float.POSITIVE_INFINITY;}hasPropagated=false;root.currentIntervalWillUpdate();return ret;}"
  },
  {
    "code_smells": [],
    "source_code": "public Component getTreeCellRendererComponent(JTree tree,Object value,boolean sel,boolean expanded,boolean leaf,int row,boolean hasFocus){super.getTreeCellRendererComponent(tree,value,sel,expanded,leaf,row,hasFocus);switch(getNodeType(value)){case Node.ELEMENT_NODE: setIcon(elementIcon);break;case Node.COMMENT_NODE: setIcon(commentIcon);break;case Node.PROCESSING_INSTRUCTION_NODE: setIcon(piIcon);break;case Node.TEXT_NODE: case Node.CDATA_SECTION_NODE: setIcon(textIcon);break;}return this;}"
  },
  {
    "code_smells": [],
    "source_code": "protected String getEventType(String eventName){if(eventName.equals(\"focusin\")){return \"DOMFocusIn\";}else if(eventName.equals(\"focusout\")){return \"DOMFocusOut\";}else if(eventName.equals(\"activate\")){return \"DOMActivate\";}if(isSVG12){if(animationEventNames12.contains(eventName)){return eventName;}}else{if(animationEventNames11.contains(eventName)){return eventName;}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public AbstractView getView(){return view;}"
  },
  {
    "code_smells": [],
    "source_code": "public void addPoint(Point2D p){addPoint((float)p.getX(),(float)p.getY());}"
  },
  {
    "code_smells": [],
    "source_code": "public WritableRaster copyData(WritableRaster wr){CachableRed srcRed=(CachableRed)getSources().get(0);SampleModel sm=srcRed.getSampleModel();if(sm.getNumBands()==1)return srcRed.copyData(wr);Raster srcRas=srcRed.getData(wr.getBounds());PixelInterleavedSampleModel srcSM;srcSM=(PixelInterleavedSampleModel)srcRas.getSampleModel();DataBufferByte srcDB=(DataBufferByte)srcRas.getDataBuffer();byte[]src=srcDB.getData();PixelInterleavedSampleModel dstSM;dstSM=(PixelInterleavedSampleModel)wr.getSampleModel();DataBufferByte dstDB=(DataBufferByte)wr.getDataBuffer();byte[]dst=dstDB.getData();int srcX0=srcRas.getMinX()-srcRas.getSampleModelTranslateX();int srcY0=srcRas.getMinY()-srcRas.getSampleModelTranslateY();int dstX0=wr.getMinX()-wr.getSampleModelTranslateX();int dstX1=dstX0+wr.getWidth()-1;int dstY0=wr.getMinY()-wr.getSampleModelTranslateY();int srcStep=srcSM.getPixelStride();int[]offsets=srcSM.getBandOffsets();int srcLOff=offsets[0];int srcAOff=offsets[1];if(srcRed.getColorModel().isAlphaPremultiplied()){for(int y=0;y<srcRas.getHeight();y++){int srcI=srcDB.getOffset()+srcSM.getOffset(srcX0,srcY0);int dstI=dstDB.getOffset()+dstSM.getOffset(dstX0,dstY0);int dstE=dstDB.getOffset()+dstSM.getOffset(dstX1+1,dstY0);srcI+=srcLOff;while(dstI<dstE){dst[dstI++]=src[srcI];srcI+=srcStep;}srcY0++;dstY0++;}}else{srcAOff=srcAOff-srcLOff;for(int y=0;y<srcRas.getHeight();y++){int srcI=srcDB.getOffset()+srcSM.getOffset(srcX0,srcY0);int dstI=dstDB.getOffset()+dstSM.getOffset(dstX0,dstY0);int dstE=dstDB.getOffset()+dstSM.getOffset(dstX1+1,dstY0);srcI+=srcLOff;while(dstI<dstE){int sl=(src[srcI])& 0xFF;int sa=(src[srcI+srcAOff])& 0xFF;dst[dstI++]=(byte)((sl*sa+0x80)>>8);srcI+=srcStep;}srcY0++;dstY0++;}}return wr;}"
  },
  {
    "code_smells": [],
    "source_code": "public static void setSize(int sz){cache.setSize(sz);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @SuppressWarnings(\"unchecked\")public void processElement(Object untypedElem)throws Exception{WindowedValue<T>elem=(WindowedValue<T>)untypedElem;Collection<W>windows=windowFn.assignWindows(windowFn.new AssignContext(){@Override public T element(){return elem.getValue();}@Override public Instant timestamp(){return elem.getTimestamp();}@Override public BoundedWindow window(){return Iterables.getOnlyElement(elem.getWindows());}});WindowedValue<T>res=WindowedValue.of(elem.getValue(),elem.getTimestamp(),windows,elem.getPane());receiver.process(res);}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasFailed()throws ExecutionException,InterruptedException{if(processBundleResponse!=null && processBundleResponse.toCompletableFuture().isDone()){return !processBundleResponse.toCompletableFuture().get().getError().isEmpty();}else{return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void saw(T element){long thisElementIndex=nextElementIndex;nextElementIndex++;if(thisElementIndex==nextIndexToReport){nextIndexToReport=nextElementIndex;report(element);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static String addLengthPrefixedCoder(String coderId,RunnerApi.Components.Builder components,boolean replaceWithByteArrayCoder){String lengthPrefixedByteArrayCoderId=addLengthPrefixByteArrayCoder(components);String urn=components.getCodersOrThrow(coderId).getSpec().getSpec().getUrn();if(ModelCoders.LENGTH_PREFIX_CODER_URN.equals(urn)){return replaceWithByteArrayCoder ? lengthPrefixedByteArrayCoderId : coderId;}else if(ModelCoders.urns().contains(urn)){return addForModelCoder(coderId,components,replaceWithByteArrayCoder);}else{return replaceWithByteArrayCoder ? lengthPrefixedByteArrayCoderId : addWrappedWithLengthPrefixCoder(coderId,components);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public PCollection<OutputT>expand(PCollection<InputT>input){PCollection<KV<Long,InputT>>in;in=input.apply(getName(\"wrap\"),ParDo.of(new Wrap<>()));if(input.getTypeDescriptor()!=null){in=in.setTypeDescriptor(TypeDescriptors.kvs(TypeDescriptors.longs(),input.getTypeDescriptor()));}return timestampedTransform.apply(in);}"
  },
  {
    "code_smells": [],
    "source_code": "static<T>Sketch<T>create(CountMinSketch sketch){int width=(int)Math.ceil(2/sketch.getRelativeError());int depth=(int)Math.ceil(-Math.log(1-sketch.getConfidence())/Math.log(2));return new AutoValue_SketchFrequencies_Sketch<>(depth,width,sketch);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public PCollection<Message>expand(PBegin input){org.apache.beam.sdk.io.Read.Unbounded<Message>unbounded=org.apache.beam.sdk.io.Read.from(new SqsUnboundedSource(this,new SqsConfiguration(input.getPipeline().getOptions().as(AwsOptions.class))));PTransform<PBegin,PCollection<Message>>transform=unbounded;if(maxNumRecords()<Long.MAX_VALUE || maxReadTime()!=null){transform=unbounded.withMaxReadTime(maxReadTime()).withMaxNumRecords(maxNumRecords());}return input.getPipeline().apply(transform);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String apply(TableReferenceProto.TableReference from){return toTableSpec(from);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Mutation apply(Key key){checkArgument(isValidKey(key),\"Keys to be deleted from the Cloud Datastore must be complete:\\n%s\",key);return makeDelete(key).build();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Sampler deserialize(JsonParser jp,DeserializationContext ctxt)throws IOException{JsonNode node=jp.getCodec().readTree(jp);String type=node.get(\"type\").asText();switch(type){case \"uniform\":{double lowerBound=node.get(\"lower\").asDouble();double upperBound=node.get(\"upper\").asDouble();checkArgument(lowerBound>=0,\"The lower bound of uniform distribution should be a non-negative number,\"+\"but found %s.\",lowerBound);return fromRealDistribution(new UniformRealDistribution(lowerBound,upperBound));}case \"exp\":{double mean=node.get(\"mean\").asDouble();return fromRealDistribution(new ExponentialDistribution(mean));}case \"normal\":{double mean=node.get(\"mean\").asDouble();double stddev=node.get(\"stddev\").asDouble();checkArgument(mean>=0,\"The mean of normal distribution should be a non-negative number,but found %s.\",mean);return fromRealDistribution(new NormalDistribution(mean,stddev));}case \"const\":{double constant=node.get(\"const\").asDouble();checkArgument(constant>=0,\"The value of constant distribution should be a non-negative number,but found %s.\",constant);return fromRealDistribution(new ConstantRealDistribution(constant));}case \"zipf\":{double param=node.get(\"param\").asDouble();final double multiplier=node.has(\"multiplier\")? node.get(\"multiplier\").asDouble(): 1.0;checkArgument(param>1,\"The parameter of the Zipf distribution should be>1,but found %s.\",param);checkArgument(multiplier>=0,\"The multiplier of the Zipf distribution should be>=0,but found %s.\",multiplier);final ZipfDistribution dist=new ZipfDistribution(100,param);return scaledSampler(fromIntegerDistribution(dist),multiplier);}default:{throw new IllegalArgumentException(\"Unknown distribution type: \"+type);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public static<T>void structuralValueDecodeEncodeEqualInContext(Coder<T>coder,Coder.Context context,T value)throws Exception{assertEquals(coder.structuralValue(value),coder.structuralValue(decodeEncode(coder,context,value)));}"
  },
  {
    "code_smells": [],
    "source_code": "private QuantileBuffer<T>collapse(Iterable<QuantileBuffer<T>>buffers){int newLevel=0;long newWeight=0;for(QuantileBuffer<T>buffer : buffers){newLevel=Math.max(newLevel,buffer.level+1);newWeight+=buffer.weight;}List<T>newElements=interpolate(buffers,bufferSize,newWeight,offset(newWeight));return new QuantileBuffer<>(newLevel,newWeight,newElements);}"
  },
  {
    "code_smells": [],
    "source_code": "public ProductCategoryUsageSimulator(double dailyUsageRate,double amountUsedAverage,double amountUsedVariance,SeedFactory seedFactory){this.amountUsedAverage=amountUsedAverage;this.amountUsedVariance=amountUsedVariance;timestepSampler=new ExponentialSampler(dailyUsageRate,seedFactory);R=new GaussianSampler(0.0,1.0,seedFactory);}"
  },
  {
    "code_smells": [],
    "source_code": "public int size(){return trajectory.size();}"
  },
  {
    "code_smells": [],
    "source_code": "private FrameworkMethod getParametersMethod(TestClass testClass)throws Exception{List<FrameworkMethod>methods=testClass.getAnnotatedMethods(Parameterized.Parameters.class);for(FrameworkMethod each : methods){int modifiers=each.getMethod().getModifiers();if(Modifier.isStatic(modifiers)&& Modifier.isPublic(modifiers))return each;}throw new Exception(\"No public static parameters method on class \"+testClass.getName());}"
  },
  {
    "code_smells": [],
    "source_code": "private Optional<WatchRequest>nextResume(){EtcdWatcher pendingWatcher=this.pendingWatchers.peek();if(pendingWatcher!=null){return Optional.of(this.toWatchCreateRequest(pendingWatcher));}return Optional.empty();}"
  },
  {
    "code_smells": [],
    "source_code": "public GetLastLogMarkService(ServerConfiguration conf){checkNotNull(conf);this.conf=conf;}"
  },
  {
    "code_smells": [],
    "source_code": "private void finalizeCheckpoint(String checkpointId,File checkpointedDir,byte[]txid)throws IOException{File[]files=checkpointedDir.listFiles();CheckpointMetadata.Builder metadataBuilder=CheckpointMetadata.newBuilder();for(File file : files){metadataBuilder.addFiles(file.getName());}if(null!=txid){metadataBuilder.setTxid(UnsafeByteOperations.unsafeWrap(txid));}metadataBuilder.setCreatedAt(System.currentTimeMillis());String destCheckpointPath=RocksUtils.getDestCheckpointMetadataPath(dbPrefix,checkpointId);try(OutputStream os=checkpointStore.openOutputStream(destCheckpointPath)){os.write(metadataBuilder.build().toByteArray());}}"
  },
  {
    "code_smells": [],
    "source_code": "static final long hash(long key){long hash=key*HashMixer;hash ^=hash>>>R;hash*=HashMixer;return hash;}"
  },
  {
    "code_smells": [],
    "source_code": "public long computeIfAbsent(long key,LongLongFunction provider){checkBiggerEqualZero(key);checkNotNull(provider);long h=hash(key);return getSection(h).put(key,ValueNotFound,(int)h,true,provider);}"
  },
  {
    "code_smells": [],
    "source_code": "@JsonInclude(Include.NON_EMPTY)public List<LinkDto>getPlatformComponents(){return platformComponents;}"
  },
  {
    "code_smells": [],
    "source_code": "protected KubernetesClient getClient(ConfigBag config){if(client==null){KubernetesClientRegistry registry=getConfig(KUBERNETES_CLIENT_REGISTRY);client=registry.getKubernetesClient(ResolvingConfigBag.newInstanceExtending(getManagementContext(),config));}return client;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Deprecated public<T>SubscriptionHandle subscribeToChildren(Entity parent,Sensor<T>sensor,SensorEventListener<? super T>listener){return subscriptions().subscribeToChildren(parent,sensor,listener);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void checkDuringManage(){if(!inManage.get()|| app==null){throw new IllegalStateException(\"Operation only permitted during manage,e.g.called from doBuild()of \"+this);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Boolean handleAddCatalogItem(Object catalogItemBeingAdded){return isEntitledToAddCatalogItem(context,catalogItemBeingAdded);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected Optional<HostAndPort>getMappedEndpoint(Entity source,MachineLocation machine,int port){String address=source.sensors().get(Attributes.SUBNET_ADDRESS);if(Strings.isNonBlank(address)){return Optional.of(HostAndPort.fromParts(address,port));}else{return Optional.absent();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public RabbitBroker getParent(){return(RabbitBroker)super.getParent();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onManagementStarting(){super.onManagementStarting();exchange=(getConfig(EXCHANGE_NAME)!=null)? getConfig(EXCHANGE_NAME): getDefaultExchangeName();virtualHost=getConfig(RabbitBroker.VIRTUAL_HOST_NAME);sensors().set(RabbitBroker.VIRTUAL_HOST_NAME,virtualHost);machine=(SshMachineLocation)Iterables.find(getParent().getLocations(),Predicates.instanceOf(SshMachineLocation.class));shellEnvironment=getParent().getShellEnvironment();}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean containsDownEntity(Set<Entity>seeds){for(Entity seed : seeds){if(!isViableSeed(seed)){return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setReuseSessions(boolean reuseSessions){this.reuseSessions=reuseSessions;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void customize(){newScript(CUSTOMIZING).body.append(format(\"mkdir-p %s\",getRunDir()),format(\"cp-R %s/dist/{conf,html,logs,sbin}%s\",getExpandedInstallDir(),getRunDir())).execute();String archiveUrl=entity.getConfig(NginxController.STATIC_CONTENT_ARCHIVE_URL);if(Strings.isNonBlank(archiveUrl)){getEntity().deploy(archiveUrl);}customizationCompleted=true;}"
  },
  {
    "code_smells": [],
    "source_code": "protected Integer getPortIncrement(){return entity.getAttribute(JBoss6Server.PORT_INCREMENT);}"
  },
  {
    "code_smells": [],
    "source_code": "private void onContainerAdded(Entity container,boolean rebalanceNow){subscriptions().subscribe(container,Attributes.LOCATION_CHANGED,eventHandler);Location location=locationFinder.apply(container);if(LOG.isTraceEnabled())LOG.trace(\"{}recording addition of container{}in location{}\",new Object[]{this,container,location});model.onContainerAdded(container,location);if(rebalanceNow)scheduleLatencyReductionJig();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private synchronized void checkHealth(){CalculatedStatus status=calculateStatus();boolean healthy=status.isHealthy();long now=System.currentTimeMillis();if(healthy){stateLastGood.set(now);if(lastPublished==LastPublished.FAILED){if(currentRecoveryStartTime==null){LOG.info(\"{}check for{},now recovering:{}\",new Object[]{this,entity,getDescription(status)});currentRecoveryStartTime=now;schedulePublish();}else{if(LOG.isTraceEnabled())LOG.trace(\"{}check for{},continuing recovering:{}\",new Object[]{this,entity,getDescription(status)});}}else{if(currentFailureStartTime!=null){LOG.info(\"{}check for{},now healthy:{}\",new Object[]{this,entity,getDescription(status)});currentFailureStartTime=null;}else{if(LOG.isTraceEnabled())LOG.trace(\"{}check for{},still healthy:{}\",new Object[]{this,entity,getDescription(status)});}}}else{stateLastFail.set(now);if(lastPublished!=LastPublished.FAILED){if(currentFailureStartTime==null){LOG.info(\"{}check for{},now failing:{}\",new Object[]{this,entity,getDescription(status)});currentFailureStartTime=now;schedulePublish();}else{if(LOG.isTraceEnabled())LOG.trace(\"{}check for{},continuing failing:{}\",new Object[]{this,entity,getDescription(status)});}}else{if(currentRecoveryStartTime!=null){LOG.info(\"{}check for{},now failing:{}\",new Object[]{this,entity,getDescription(status)});currentRecoveryStartTime=null;}else{if(LOG.isTraceEnabled())LOG.trace(\"{}check for{},still failed:{}\",new Object[]{this,entity,getDescription(status)});}}}}"
  },
  {
    "code_smells": [],
    "source_code": "public Response asJsonResponse(){return asResponse(MediaType.APPLICATION_JSON_TYPE);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object other){if(this==other)return true;if(other==null || getClass()!=other.getClass())return false;ApiError that=ApiError.class.cast(other);return Objects.equal(this.message,that.message)&& Objects.equal(this.details,that.details)&& Objects.equal(this.error,that.error);}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean checkExplicitUserPassword(ManagementContext mgmt,String user,String password){BrooklynProperties properties=((ManagementContextInternal)mgmt).getBrooklynProperties();String expectedPassword=properties.getConfig(BrooklynWebConfig.PASSWORD_FOR_USER(user));String salt=properties.getConfig(BrooklynWebConfig.SALT_FOR_USER(user));String expectedSha256=properties.getConfig(BrooklynWebConfig.SHA256_FOR_USER(user));return checkPassword(password,expectedPassword,expectedSha256,salt);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public T get(Duration duration)throws InterruptedException,ExecutionException,TimeoutException{long start=System.currentTimeMillis();Long end=duration==null ? null : start+duration.toMillisecondsRoundingUp();while(end==null || end>System.currentTimeMillis()){if(cancelled)throw new CancellationException();if(internalFuture==null){synchronized(this){long remaining=end-System.currentTimeMillis();if(internalFuture==null && remaining>0)wait(remaining);}}if(internalFuture!=null)break;}Long remaining=end==null ? null : end-System.currentTimeMillis();if(isDone()){return internalFuture.get(1,TimeUnit.MILLISECONDS);}else if(remaining==null){return internalFuture.get();}else if(remaining>0){return internalFuture.get(remaining,TimeUnit.MILLISECONDS);}else{throw new TimeoutException();}}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"deprecation\")private static Maybe<Calendar>parseCalendarDefaultParse(String input){try{long ms=Date.parse(input);if(ms>=new Date(1999,12,25).getTime()&& ms<=new Date(2200,1,2).getTime()){GregorianCalendar c=new GregorianCalendar();c.setTimeInMillis(ms);return Maybe.of((Calendar)c);}}catch(Exception e){Exceptions.propagateIfFatal(e);}return Maybe.absent();}"
  },
  {
    "code_smells": [],
    "source_code": "public void initialize(BSFManager mgr,String lang,Vector declaredBeans)throws BSFException{super.initialize(mgr,lang,declaredBeans);mgrfuncs=new BSFFunctions(mgr,this);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<T>Set<ConstraintViolation<T>>validateParameters(T object,Method method,Object[]parameterValues,Class<?>...groups){return validationJobFactory.validateParameters(object,method,parameterValues,groups).getResults();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public RelOptCost computeSelfCost(RelOptPlanner planner,RelMetadataQuery mq){return super.computeSelfCost(planner,mq).multiplyBy(JdbcConvention.COST_MULTIPLIER);}"
  },
  {
    "code_smells": [],
    "source_code": "public AvaticaStatement newStatement(AvaticaConnection connection,Meta.StatementHandle h,int resultSetType,int resultSetConcurrency,int resultSetHoldability){return new AvaticaJdbc41Statement(connection,h,resultSetType,resultSetConcurrency,resultSetHoldability);}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable(){return org.apache.calcite.avatica.proto.Requests.internal_static_CatalogsRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(org.apache.calcite.avatica.proto.Requests.CatalogsRequest.class,org.apache.calcite.avatica.proto.Requests.CatalogsRequest.Builder.class);}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){return(Builder)super.clearOneof(oneof);}"
  },
  {
    "code_smells": [],
    "source_code": "public Collection<Function>getFunctions(String name){return CalciteSchema.this.getFunctions(name,true);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){return obj==this || obj instanceof Measure && this.agg.equals(((Measure)obj).agg)&& this.args.equals(((Measure)obj).args)&& this.distinct==((Measure)obj).distinct;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasNext(){if(firstCall){initializeMapping();firstCall=false;}else{computeNextMapping(iterationIdx.length-1);}return nextMapping!=null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Deprecated public static RelNode swap(Join join){return swap(join,false,RelFactories.LOGICAL_BUILDER.create(join.getCluster(),null));}"
  },
  {
    "code_smells": [],
    "source_code": "protected RexNode makeMultiply(RexNode a,RexNode b){return builder.makeCall(SqlStdOperatorTable.MULTIPLY,a,b);}"
  },
  {
    "code_smells": [],
    "source_code": "protected List<RexFieldCollation>visitFieldCollations(List<RexFieldCollation>collations,boolean[]update){ImmutableList.Builder<RexFieldCollation>clonedOperands=ImmutableList.builder();for(RexFieldCollation collation : collations){RexNode clonedOperand=collation.left.accept(this);if((clonedOperand!=collation.left)&&(update!=null)){update[0]=true;collation=new RexFieldCollation(clonedOperand,collation.right);}clonedOperands.add(collation);}return clonedOperands.build();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ColumnStrategy generationStrategy(RelOptTable table,int iColumn){final ModifiableViewTable viewTable=table.unwrap(ModifiableViewTable.class);assert iColumn<viewTable.columnMapping.size();final int mappedOrdinal=viewTable.columnMapping.get(iColumn);final RexNode viewConstraint=projectMap.get(mappedOrdinal);if(viewConstraint!=null){return ColumnStrategy.DEFAULT;}final Table schemaTable=viewTable.getTable();if(schemaTable instanceof Wrapper){final InitializerExpressionFactory initializerExpressionFactory=((Wrapper)schemaTable).unwrap(InitializerExpressionFactory.class);if(initializerExpressionFactory!=null){return initializerExpressionFactory.generationStrategy(table,iColumn);}}return super.generationStrategy(table,iColumn);}"
  },
  {
    "code_smells": [],
    "source_code": "public SqlSetOperator(String name,SqlKind kind,int prec,boolean all){super(name,kind,prec,true,ReturnTypes.LEAST_RESTRICTIVE,null,OperandTypes.SET_OP);this.all=all;}"
  },
  {
    "code_smells": [],
    "source_code": "public int compareTypePrecedence(RelDataType type1,RelDataType type2){assert containsType(type1): type1;assert containsType(type2): type2;int p1=getListPosition(type1.getSqlTypeName(),typeNames);int p2=getListPosition(type2.getSqlTypeName(),typeNames);return p2-p1;}"
  },
  {
    "code_smells": [],
    "source_code": "public SqlNode getNode(){return overCall;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public SqlNode visit(SqlIdentifier id){SqlCall call=SqlUtil.makeCall(validator.getOperatorTable(),id);if(call!=null){return call.accept(this);}final SqlIdentifier fqId=getScope().fullyQualify(id).identifier;SqlNode expandedExpr=expandDynamicStar(id,fqId);validator.setOriginal(expandedExpr,id);return expandedExpr;}"
  },
  {
    "code_smells": [],
    "source_code": "public RouteDefinition from(String uri){getRouteCollection().setCamelContext(getContext());RouteDefinition answer=getRouteCollection().from(uri);configureRoute(answer);return answer;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean matches(Exchange exchange){if(predicate==null){predicate=createPredicate(exchange);}return predicate.matches(exchange);}"
  },
  {
    "code_smells": [],
    "source_code": "public String getUriAuthority(){return uriAuthority;}"
  },
  {
    "code_smells": [],
    "source_code": "public int getConcurrentConsumers(){return concurrentConsumers;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public WorkflowDefinitionFactory getWorkflowDefinitionFactory(WorkflowType workflowType){WorkflowTypeRegistrationOptions registrationOptions=configuration.getWorkflowTypeRegistrationOptions()!=null ? configuration.getWorkflowTypeRegistrationOptions(): new WorkflowTypeRegistrationOptions();DataConverter dataConverter=configuration.getDataConverter()!=null ? configuration.getDataConverter(): new JsonDataConverter();return new CamelWorkflowDefinitionFactory(swfWorkflowConsumer,workflowType,registrationOptions,dataConverter);}"
  },
  {
    "code_smells": [],
    "source_code": "public MethodNotFoundException(Object pojo,String methodName,Throwable cause){super(\"Method with name: \"+methodName+\" not found on bean: \"+pojo+\" of type:\"+ObjectHelper.className(pojo),null,cause);this.methodName=methodName;this.bean=pojo;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setSslContextParameters(String sslContextParameters){this.sslContextParameters=sslContextParameters;}"
  },
  {
    "code_smells": [],
    "source_code": "public Certificate getCertificate()throws Exception{return getConfiguration().getCertificate();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void buildServiceFromWSDL(String url){getDefinition(url);super.buildServiceFromWSDL(url);}"
  },
  {
    "code_smells": [],
    "source_code": "public DnsDigProducer(Endpoint endpoint){super(endpoint);}"
  },
  {
    "code_smells": [],
    "source_code": "private void tryConfigureBulkRequests()throws JSchException{Integer bulkRequests=endpoint.getConfiguration().getBulkRequests();if(bulkRequests!=null){LOG.trace(\"configuring channel to use up to{}bulk request(s)\",bulkRequests);channel.setBulkRequests(bulkRequests);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void doStart()throws Exception{if(gson==null){GsonBuilder builder=new GsonBuilder();if(exclusionStrategies!=null && !exclusionStrategies.isEmpty()){ExclusionStrategy[]strategies=exclusionStrategies.toArray(new ExclusionStrategy[exclusionStrategies.size()]);builder.setExclusionStrategies(strategies);}if(longSerializationPolicy!=null){builder.setLongSerializationPolicy(longSerializationPolicy);}if(fieldNamingPolicy!=null){builder.setFieldNamingPolicy(fieldNamingPolicy);}if(fieldNamingStrategy!=null){builder.setFieldNamingStrategy(fieldNamingStrategy);}if(serializeNulls){builder.serializeNulls();}if(prettyPrint){builder.setPrettyPrinting();}if(dateFormatPattern!=null){builder.setDateFormat(dateFormatPattern);}gson=builder.create();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"JCachePolicy{\"+\"keyExpression=\"+keyExpression+\",enabled=\"+enabled+'}';}"
  },
  {
    "code_smells": [],
    "source_code": "private Region messageToRegion(Message message){Region region=message.getBody(Region.class);if(region==null){Map headers=message.getHeaders();RegionBuilder builder=Builders.region();if(headers.containsKey(KeystoneConstants.DESCRIPTION)){builder.description(message.getHeader(KeystoneConstants.DESCRIPTION,String.class));}region=builder.build();}return region;}"
  },
  {
    "code_smells": [],
    "source_code": "public AllRedisProcessorsCreator(RedisClient redisClient,ExchangeConverter exchangeConverter){this.processors.putAll(new ConnectionRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new HashesRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new KeysRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new ListsRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new PubSubRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new SetsRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new SortedSetsRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new StringsRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new TransactionRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));this.processors.putAll(new GeoRedisProcessorsCreator().getProcessors(redisClient,exchangeConverter));}"
  },
  {
    "code_smells": [],
    "source_code": "public static String[]filteredFieldNamesOf(final AbstractDescribedSObjectBase object,final Predicate<SObjectField>filter){if(object==null){return NONE;}if(filter==null){return fieldNamesOf(object);}final SObjectDescription description=object.description();final List<SObjectField>fields=description.getFields();return fields.stream().filter(filter).map(SObjectField::getName).toArray(String[]::new);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setServiceSelector(String serviceSelector){this.serviceSelector=serviceSelector;}"
  },
  {
    "code_smells": [],
    "source_code": "public TelegramServiceRestBotAPIAdapter(RestBotAPI api){this.api=api;}"
  },
  {
    "code_smells": [],
    "source_code": "public SynchronizedValueFactory<Long>getNonceFactory(){return delegate.getNonceFactory();}"
  },
  {
    "code_smells": [],
    "source_code": "public String getType(){return type;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setHeight(Integer height){this.height=height;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setContentTypeHeader(Boolean contentTypeHeader){this.contentTypeHeader=contentTypeHeader;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void configureFormat(FixedWidthFormat format){super.configureFormat(format);if(padding!=null){format.setPadding(padding);}}"
  },
  {
    "code_smells": [],
    "source_code": "public DefaultServiceDefinition(String id,String name,String host,int port){this(id,name,host,port,Collections.emptyMap(),DEFAULT_SERVICE_HEALTH);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void changeFunctionEndToken(String...endToken){for(SimpleTokenType type : KNOWN_TOKENS){if(type.getType()==TokenType.functionEnd){KNOWN_TOKENS.remove(type);}}int pos=0;for(SimpleTokenType type : KNOWN_TOKENS){if(type.getType()==TokenType.functionStart){pos++;}}for(String token : endToken){KNOWN_TOKENS.add(pos,new SimpleTokenType(TokenType.functionEnd,token));}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setLoggingLevel(String level){backlogDebugger.setLoggingLevel(level);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void addRelevantPluginDependenciesToClasspath(Set<URL>path)throws MojoExecutionException{if(hasCommandlineArgs()){arguments=parseCommandlineArgs();}try{Iterator<Artifact>iter=this.determineRelevantPluginDependencies().iterator();while(iter.hasNext()){Artifact classPathElement=iter.next();if(classPathElement.getArtifactId().equals(\"org.osgi.core\")){if(getLog().isDebugEnabled()){getLog().debug(\"Skipping org.osgi.core->\"+classPathElement.getGroupId()+\"/\"+classPathElement.getArtifactId()+\"/\"+classPathElement.getVersion());}continue;}getLog().debug(\"Adding plugin dependency artifact: \"+classPathElement.getArtifactId()+\" to classpath\");path.add(classPathElement.getFile().toURI().toURL());}}catch(MalformedURLException e){throw new MojoExecutionException(\"Error during setting up classpath\",e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setLabel(String label){this.label=label;}"
  },
  {
    "code_smells": [],
    "source_code": "public AggregationStrategy getAggregationStrategy(){return aggregationStrategy;}"
  },
  {
    "code_smells": [],
    "source_code": "public int forceCompletionOfGroup(String key){if(processor!=null){return processor.forceCompletionOfGroup(key);}else{return 0;}}"
  },
  {
    "code_smells": [],
    "source_code": "public CamelCloudServiceDiscovery(Long timeout,List<ServiceDiscovery>serviceDiscoveryList){this.delegate=new CombinedServiceDiscovery(serviceDiscoveryList);if(timeout!=null && timeout>0){this.delegate=CachingServiceDiscovery.wrap(this.delegate,timeout,TimeUnit.MILLISECONDS);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Terminal bind(QueryOptions options)throws InvalidRequestException{Term term=options.getJsonColumnValue(marker.bindIndex,column.name,marker.columns);return term==null ?(defaultUnset ? Constants.UNSET_VALUE : null): term.bind(options);}"
  },
  {
    "code_smells": [],
    "source_code": "public File getLocationForDisk(DataDirectory dataDirectory){if(dataDirectory!=null)for(File dir : dataPaths)if(dir.getAbsolutePath().startsWith(dataDirectory.location.getAbsolutePath()))return dir;return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static SetMultimap<InetAddressAndPort,Token>loadTokens(){SetMultimap<InetAddressAndPort,Token>tokenMap=HashMultimap.create();for(UntypedResultSet.Row row : executeInternal(\"SELECT peer,peer_port,tokens FROM system.\"+PEERS_V2)){InetAddress address=row.getInetAddress(\"peer\");Integer port=row.getInt(\"peer_port\");InetAddressAndPort peer=InetAddressAndPort.getByAddressOverrideDefaults(address,port);if(row.has(\"tokens\"))tokenMap.putAll(peer,deserializeTokens(row.getSet(\"tokens\",UTF8Type.instance)));}return tokenMap;}"
  },
  {
    "code_smells": [],
    "source_code": "public String toString(TableMetadata metadata){return String.format(\"slice(slices=%s,reversed=%b)\",slices,reversed);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Term fromJSONObject(Object parsed)throws MarshalException{return baseType.fromJSONObject(parsed);}"
  },
  {
    "code_smells": [],
    "source_code": "public Expression setUpper(Bound newUpper){upper=newUpper==null ? null : new Bound(newUpper.value,newUpper.inclusive);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean matchesEndpoints(Set<InetAddressAndPort>endpoints,Set<InetAddressAndPort>transEndpoints){return this.endpoints.equals(endpoints)&& this.transEndpoints.equals(transEndpoints);}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder add(TableMetadata table){tables.put(table.name,table);tablesById.put(table.id,table);table.indexes.stream().filter(i->!i.isCustom()).map(i->CassandraIndex.indexCfsMetadata(table,i)).forEach(i->indexTables.put(i.indexName().get(),i));return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public void onRemove(InetAddressAndPort endpoint){convict(endpoint,Double.MAX_VALUE);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String shortDisplay(){return(happy()? \"[\" : \"\")+name+\"(?)\"+(happy()? \"]\" : \"\");}"
  },
  {
    "code_smells": [],
    "source_code": "private long rollEpoch(long delta,long epoch,long nanos){if(delta>2*INTERVAL){epoch=epoch(nanos);sum=0;Arrays.fill(samples,0);}else{sum+=samples[ix(epoch-1)];while(epoch+INTERVAL<nanos){int index=ix(epoch);sum-=samples[index];samples[index]=0;epoch+=BUCKET_INTERVAL;}}this.epoch=epoch;return epoch;}"
  },
  {
    "code_smells": [],
    "source_code": "public MerkleTrees deserialize(DataInputPlus in,int version)throws IOException{IPartitioner partitioner=null;int nTrees=in.readInt();Collection<MerkleTree>trees=new ArrayList<>(nTrees);if(nTrees>0){for(int i=0;i<nTrees;i++){MerkleTree tree=MerkleTree.serializer.deserialize(in,version);trees.add(tree);if(partitioner==null)partitioner=tree.partitioner();else assert tree.partitioner()==partitioner;}}return new MerkleTrees(partitioner,trees);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"(\"+left+\",\"+right+\")\";}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void write(String s)throws IOException{if(suspended){return;}if(s==null){s=\"null\";}write(s,0,s.length());}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void endAccess(){super.endAccess();if(manager instanceof ClusterManagerBase){((ClusterManagerBase)manager).registerSessionAtReplicationValve(this);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setLogArgs(boolean logArgs){this.logArgs=logArgs;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean hasMembers(){if(membership==null)return false;return membership.hasMembers();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public WeightedAshwoodEntitySorter(){this.weightedDbEntityComparator=new WeightedDbEntityComparator();this.weightedObjEntityComparator=new WeightedObjEntityComparator();this.entityWeights=Collections.emptyMap();}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isSkipRelationshipsLoading(){return skipRelationshipsLoading!=null && skipRelationshipsLoading;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "static boolean evaluateImpl(Object o1,Object o2){if(o1==null && o2==null){return true;}else if(o1!=null){if(o2 instanceof Collection){for(Object element :((Collection<?>)o2)){if(element!=null && Evaluator.evaluator(element).eq(element,o1)){return true;}}return false;}return Evaluator.evaluator(o1).eq(o1,o2);}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public DbRelationship(String name){super(name);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setProcedureParams(String procedureParams){this.procedureParams=procedureParams;if(procedureParams!=null){getCurrentPreference().put(PROCEDURE_PARAMS_PROPERTY,procedureParams);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getPresentationName(){return \"Create DataNode\";}"
  },
  {
    "code_smells": [],
    "source_code": "protected String getCsrfHeader(){Object csrfHeaderObject=getSession().get(SessionParameter.CSRF_HEADER);if(csrfHeaderObject instanceof String){return(String)csrfHeaderObject;}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void execute(){CallContext.current().setEventDetails(\"Virtual router element Id: \"+getEntityId());VirtualRouterProvider result=_service.get(0).getInternalLoadBalancerElement(getEntityId());if(result!=null){InternalLoadBalancerElementResponse response=_responseGenerator.createInternalLbElementResponse(result);response.setResponseName(getCommandName());this.setResponseObject(response);}else{throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,\"Failed to add Virtual Router entity to physical network\");}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void execute()throws ResourceUnavailableException,InsufficientCapacityException,ServerApiException,ConcurrentOperationException,ResourceAllocationException,NetworkRuleConflictException{Map<String,String>dm=new HashMap();dm.put(ApiConstants.S3_ACCESS_KEY,getAccessKey());dm.put(ApiConstants.S3_SECRET_KEY,getSecretKey());dm.put(ApiConstants.S3_END_POINT,getEndPoint());dm.put(ApiConstants.S3_BUCKET_NAME,getBucketName());if(getSigner()!=null &&(getSigner().equals(ApiConstants.S3_V3_SIGNER)|| getSigner().equals(ApiConstants.S3_V4_SIGNER))){dm.put(ApiConstants.S3_SIGNER,getSigner());}if(isHttps()!=null){dm.put(ApiConstants.S3_HTTPS_FLAG,isHttps().toString());}if(getConnectionTimeout()!=null){dm.put(ApiConstants.S3_CONNECTION_TIMEOUT,getConnectionTimeout().toString());}if(getMaxErrorRetry()!=null){dm.put(ApiConstants.S3_MAX_ERROR_RETRY,getMaxErrorRetry().toString());}if(getSocketTimeout()!=null){dm.put(ApiConstants.S3_SOCKET_TIMEOUT,getSocketTimeout().toString());}if(getConnectionTtl()!=null){dm.put(ApiConstants.S3_CONNECTION_TTL,getConnectionTtl().toString());}if(getUseTCPKeepAlive()!=null){dm.put(ApiConstants.S3_USE_TCP_KEEPALIVE,getUseTCPKeepAlive().toString());}try{ImageStore result=_storageService.discoverImageStore(null,null,\"S3\",null,dm);ImageStoreResponse storeResponse;if(result!=null){storeResponse=_responseGenerator.createImageStoreResponse(result);storeResponse.setResponseName(getCommandName());storeResponse.setObjectName(\"imagestore\");setResponseObject(storeResponse);}else{throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,\"Failed to add S3 Image Store.\");}}catch(DiscoveryException ex){s_logger.warn(\"Exception: \",ex);throw new ServerApiException(ApiErrorCode.INTERNAL_ERROR,ex.getMessage());}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getDisplayText(){return displayText;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getCurrentState(){return null;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private boolean configureHA(final Long resourceId,final HAResource.ResourceType resourceType,final Boolean enable,final String haProvider){return Transaction.execute(new TransactionCallback<Boolean>(){@Override public Boolean doInTransaction(TransactionStatus status){HAConfigVO haConfig=(HAConfigVO)haConfigDao.findHAResource(resourceId,resourceType);if(haConfig==null){haConfig=new HAConfigVO();if(haProvider!=null){haConfig.setHaProvider(haProvider);}if(enable!=null){haConfig.setEnabled(enable);haConfig.setManagementServerId(ManagementServerNode.getManagementServerId());}haConfig.setResourceId(resourceId);haConfig.setResourceType(resourceType);if(Strings.isNullOrEmpty(haConfig.getHaProvider())){throw new ServerApiException(ApiErrorCode.PARAM_ERROR,\"HAProvider is not provided for the resource,failing configuration.\");}if(haConfigDao.persist(haConfig)!=null){return true;}}else{if(enable!=null){haConfig.setEnabled(enable);}if(haProvider!=null){haConfig.setHaProvider(haProvider);}if(Strings.isNullOrEmpty(haConfig.getHaProvider())){throw new ServerApiException(ApiErrorCode.PARAM_ERROR,\"HAProvider is not provided for the resource,failing configuration.\");}return haConfigDao.update(haConfig.getId(),haConfig);}return false;}});}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public short syncAll(short syncMode){short syncState=SYNC_STATE_IN_SYNC;s_logger.debug(\"syncing cloudstack db with vnc\");try{for(Class<?>cls : _vncClasses){_lockSyncMode.lock();_rwMode=syncMode==DBSyncGeneric.SYNC_MODE_UPDATE;_dbSync.setSyncMode(syncMode);if(_dbSync.getSyncMode()==DBSyncGeneric.SYNC_MODE_CHECK){s_logger.debug(\"sync check start: \"+DBSyncGeneric.getClassName(cls));}else{s_logger.debug(\"sync start: \"+DBSyncGeneric.getClassName(cls));}if(_dbSync.sync(cls)==false){if(_dbSync.getSyncMode()==DBSyncGeneric.SYNC_MODE_CHECK){s_logger.info(\"out of sync detected: \"+DBSyncGeneric.getClassName(cls));}else{s_logger.info(\"out of sync detected and re-synced: \"+DBSyncGeneric.getClassName(cls));}syncState=SYNC_STATE_OUT_OF_SYNC;}if(_dbSync.getSyncMode()==DBSyncGeneric.SYNC_MODE_CHECK){s_logger.debug(\"sync check finish: \"+DBSyncGeneric.getClassName(cls));}else{s_logger.debug(\"sync finish: \"+DBSyncGeneric.getClassName(cls));}_lockSyncMode.unlock();}}catch(Exception ex){s_logger.warn(\"DB Synchronization\",ex);syncState=SYNC_STATE_UNKNOWN;if(_lockSyncMode.isLocked()){_lockSyncMode.unlock();}}return syncState;}"
  },
  {
    "code_smells": [],
    "source_code": "public void initialize(final Attribute[]attributes,final ElementProcessor parent)throws IOException{super.initialize(attributes,parent);int cellType=CellType.CELL_TYPE_FORMULA;try{cellType=getCellType();}catch(NullPointerException ignored){}_cell=getSheet().getRow(getRow()).createCell(getColumn(),cellType);}"
  },
  {
    "code_smells": [],
    "source_code": "public WebContinuation getContinuation(int level){if(level<=0){return this;}else if(parentContinuation==null){return this;}else{return parentContinuation.getContinuation(level-1);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void setResponse(CachedSourceResponse response)throws IOException{this.response=response;if(this.expires!=0){try{this.cache.store(this.cacheKey,this.response);}catch(ProcessingException e){throw new CascadingIOException(\"Failure storing response.\",e);}}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void addAncestorPath(TraversableSource source,Stack ancestors)throws SAXException,ProcessingException{if(ancestors.empty()){this.isRequestedSource=true;addPath(source,depth);}else{startNode(COL_NODE_NAME,(TraversableSource)ancestors.pop());addAncestorPath(source,ancestors);endNode(COL_NODE_NAME);}}"
  },
  {
    "code_smells": [],
    "source_code": "public Call(ParsingContext parsingContext,StartElement raw,Attributes attrs,Stack stack)throws SAXException{super(raw);this.parameters=new HashMap();Locator locator=getLocation();String name=attrs.getValue(\"macro\");if(name==null){throw new SAXParseException(\"if: \\\"test\\\" is required\",locator,null);}this.macro=parsingContext.getStringTemplateParser().compileExpr(name,\"call: \\\"macro\\\": \",locator);String namespace=StringUtils.defaultString(attrs.getValue(\"targetNamespace\"));this.targetNamespace=parsingContext.getStringTemplateParser().compileExpr(namespace,\"call: \\\"targetNamespace\\\": \",locator);}"
  },
  {
    "code_smells": [],
    "source_code": "public void startElement(String uri,String name,String raw,Attributes attr)throws SAXException{if(namespaceURI.equals(uri)&& ignoreHooksCount==0){try{startTransformingElement(uri,name,raw,attr);}catch(ProcessingException e){throw new SAXException(\"ProcessingException: \"+e,e);}catch(IOException e){throw new SAXException(\"IOException occured during processing: \"+e,e);}}else{if(ignoreEventsCount==0){super.startElement(uri,name,raw,attr);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void ignorableWhitespace(char[]ch,int start,int len)throws SAXException{this.log(\"ignorableWhitespace\",new String(ch,start,len));if(super.contentHandler!=null){super.contentHandler.ignorableWhitespace(ch,start,len);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static int getAttributeAsInteger(Element element,String attributeName)throws Exception{String attrValue=getAttribute(element,attributeName);try{return Integer.parseInt(attrValue);}catch(NumberFormatException e){throw new Exception(\"Cannot parse the value \\\"\"+attrValue+\"\\\" as an integer in the attribute \\\"\"+attributeName+\"\\\" on the element \\\"\"+element.getTagName()+\"\\\" at \"+getLocation(element));}}"
  },
  {
    "code_smells": [],
    "source_code": "public void dispose(){this.decommission(this.instance);this.instance=null;super.dispose();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static Class<?>getPropertyEditorClass(final Object bean,final String name)throws IllegalAccessException,InvocationTargetException,NoSuchMethodException{return PropertyUtilsBean.getInstance().getPropertyEditorClass(bean,name);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Set<Entry<String,Object>>entrySet(){return new EntrySetImpl();}"
  },
  {
    "code_smells": [],
    "source_code": "public FacesWebContext(FacesContext context){initialize(context);}"
  },
  {
    "code_smells": [],
    "source_code": "private static String[]enumerationToArray(Enumeration<String>values){ArrayList<String>list=new ArrayList<String>();while(values.hasMoreElements()){list.add(values.nextElement());}return list.toArray(new String[list.size()]);}"
  },
  {
    "code_smells": [],
    "source_code": "public static<T>Predicate<T>orPredicate(final Predicate<? super T>predicate1,final Predicate<? super T>predicate2){return OrPredicate.orPredicate(predicate1,predicate2);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void nextBytes(byte[]bytes){synchronized(OpenSslJnaCryptoRandom.class){if(rdrandEnabled && OpenSslNativeJna.RAND_get_rand_method().equals(OpenSslNativeJna.RAND_SSLeay())){close();throw new RuntimeException(\"rdrand should be used but default is detected\");}ByteBuffer buf=ByteBuffer.allocateDirect(bytes.length);int retVal=OpenSslNativeJna.RAND_bytes(buf,bytes.length);throwOnError(retVal);buf.rewind();buf.get(bytes,0,bytes.length);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setDefaultTestOnCreate(final boolean testOnCreate){assertInitializationAllowed();this.defaultTestOnCreate=testOnCreate;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean hasNext(){try{return !rs.isLast();}catch(final SQLException e){rethrow(e);return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void interpretPixel(final ImageBuilder imageBuilder,final int[]samples,final int x,final int y)throws ImageReadException,IOException{final int sc=samples[0];final int sm=samples[1];final int sy=samples[2];final int sk=samples[3];final int rgb=ColorConversions.convertCMYKtoRGB(sc,sm,sy,sk);imageBuilder.setRGB(x,y,rgb);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void throwCauseIfTaggedWith(final Throwable throwable,final Object tag)throws IOException{if(isTaggedWith(throwable,tag)){throw((TaggedIOException)throwable).getCause();}}"
  },
  {
    "code_smells": [],
    "source_code": "protected String getTableStatus(Statement sStatement)throws SQLException{ResultSet statusResultSet=sStatement.executeQuery(\"show table status\");StringBuilder statusString=new StringBuilder();int numColumns=statusResultSet.getMetaData().getColumnCount();while(statusResultSet.next()){statusString.append(\"\\n\");for(int i=1;i<=numColumns;i++){statusString.append(statusResultSet.getMetaData().getColumnLabel(i)+\"[\"+statusResultSet.getString(i)+\"]| \");}}return statusString.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void dispose(){this.managers.clear();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static String getNamespaceURI(Node node){if(node instanceof Document){node=((Document)node).getDocumentElement();}Element element=(Element)node;String uri=element.getNamespaceURI();if(uri==null){String prefix=getPrefix(node);String qname=prefix==null ? \"xmlns\" : \"xmlns:\"+prefix;Node aNode=node;while(aNode!=null){if(aNode.getNodeType()==Node.ELEMENT_NODE){Attr attr=((Element)aNode).getAttributeNode(qname);if(attr!=null){uri=attr.getValue();break;}}aNode=aNode.getParentNode();}}return \"\".equals(uri)? null : uri;}"
  },
  {
    "code_smells": [],
    "source_code": "private T getPointFromLargestNumberCluster(final Collection<? extends Cluster<T>>clusters)throws ConvergenceException{int maxNumber=0;Cluster<T>selected=null;for(final Cluster<T>cluster : clusters){final int number=cluster.getPoints().size();if(number>maxNumber){maxNumber=number;selected=cluster;}}if(selected==null){throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS);}final List<T>selectedPoints=selected.getPoints();return selectedPoints.remove(random.nextInt(selectedPoints.size()));}"
  },
  {
    "code_smells": [],
    "source_code": "AdamsFieldStepInterpolator(final T stepSize,final FieldODEStateAndDerivative<T>reference,final T[]scaled,final Array2DRowFieldMatrix<T>nordsieck,final boolean isForward,final FieldODEStateAndDerivative<T>globalPreviousState,final FieldODEStateAndDerivative<T>globalCurrentState,final FieldEquationsMapper<T>equationsMapper){this(stepSize,reference,scaled,nordsieck,isForward,globalPreviousState,globalCurrentState,globalPreviousState,globalCurrentState,equationsMapper);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public double correlation(final double[]xArray,final double[]yArray)throws DimensionMismatchException{if(xArray.length!=yArray.length){throw new DimensionMismatchException(xArray.length,yArray.length);}final int n=xArray.length;final long numPairs=sum(n-1);@SuppressWarnings(\"unchecked\")Pair<Double,Double>[]pairs=new Pair[n];for(int i=0;i<n;i++){pairs[i]=new Pair<>(xArray[i],yArray[i]);}Arrays.sort(pairs,new Comparator<Pair<Double,Double>>(){@Override public int compare(Pair<Double,Double>pair1,Pair<Double,Double>pair2){int compareFirst=pair1.getFirst().compareTo(pair2.getFirst());return compareFirst!=0 ? compareFirst : pair1.getSecond().compareTo(pair2.getSecond());}});long tiedXPairs=0;long tiedXYPairs=0;long consecutiveXTies=1;long consecutiveXYTies=1;Pair<Double,Double>prev=pairs[0];for(int i=1;i<n;i++){final Pair<Double,Double>curr=pairs[i];if(curr.getFirst().equals(prev.getFirst())){consecutiveXTies++;if(curr.getSecond().equals(prev.getSecond())){consecutiveXYTies++;}else{tiedXYPairs+=sum(consecutiveXYTies-1);consecutiveXYTies=1;}}else{tiedXPairs+=sum(consecutiveXTies-1);consecutiveXTies=1;tiedXYPairs+=sum(consecutiveXYTies-1);consecutiveXYTies=1;}prev=curr;}tiedXPairs+=sum(consecutiveXTies-1);tiedXYPairs+=sum(consecutiveXYTies-1);long swaps=0;@SuppressWarnings(\"unchecked\")Pair<Double,Double>[]pairsDestination=new Pair[n];for(int segmentSize=1;segmentSize<n;segmentSize<<=1){for(int offset=0;offset<n;offset+=2*segmentSize){int i=offset;final int iEnd=FastMath.min(i+segmentSize,n);int j=iEnd;final int jEnd=FastMath.min(j+segmentSize,n);int copyLocation=offset;while(i<iEnd || j<jEnd){if(i<iEnd){if(j<jEnd){if(pairs[i].getSecond().compareTo(pairs[j].getSecond())<=0){pairsDestination[copyLocation]=pairs[i];i++;}else{pairsDestination[copyLocation]=pairs[j];j++;swaps+=iEnd-i;}}else{pairsDestination[copyLocation]=pairs[i];i++;}}else{pairsDestination[copyLocation]=pairs[j];j++;}copyLocation++;}}final Pair<Double,Double>[]pairsTemp=pairs;pairs=pairsDestination;pairsDestination=pairsTemp;}long tiedYPairs=0;long consecutiveYTies=1;prev=pairs[0];for(int i=1;i<n;i++){final Pair<Double,Double>curr=pairs[i];if(curr.getSecond().equals(prev.getSecond())){consecutiveYTies++;}else{tiedYPairs+=sum(consecutiveYTies-1);consecutiveYTies=1;}prev=curr;}tiedYPairs+=sum(consecutiveYTies-1);final long concordantMinusDiscordant=numPairs-tiedXPairs-tiedYPairs+tiedXYPairs-2*swaps;final double nonTiedPairsMultiplied=(numPairs-tiedXPairs)*(double)(numPairs-tiedYPairs);return concordantMinusDiscordant/FastMath.sqrt(nonTiedPairsMultiplied);}"
  },
  {
    "code_smells": [],
    "source_code": "double getRemB(){return finalRemB;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void send(byte[]data,int length,InetAddress host,int port)throws IOException{_sendPacket.setData(data);_sendPacket.setLength(length);_sendPacket.setAddress(host);_sendPacket.setPort(port);_socket_.send(_sendPacket);}"
  },
  {
    "code_smells": [],
    "source_code": "public FTPFile[]mlistDir(String pathname,FTPFileFilter filter)throws IOException{FTPListParseEngine engine=initiateMListParsing(pathname);return engine.getFiles(filter);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int compare(int[]c1,int[]c2){if(c1.length!=k){throw new CombinatoricsException(CombinatoricsException.MISMATCH,c1.length,k);}if(c2.length!=k){throw new CombinatoricsException(CombinatoricsException.MISMATCH,c2.length,k);}final int[]c1s=Arrays.copyOf(c1,k);final int[]c2s=Arrays.copyOf(c2,k);Arrays.sort(c1s);Arrays.sort(c2s);final long v1=lexNorm(c1s);final long v2=lexNorm(c2s);if(v1<v2){return-1;}else if(v1>v2){return 1;}else{return 0;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void invoke(Class<?>c)throws Exception{getRuntime().getConstructors(c);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Map<String,Integer>getNumWaitersByKey(){final Map<String,Integer>result=new HashMap<>();for(final Map.Entry<K,ObjectDeque<T>>entry : poolMap.entrySet()){final K k=entry.getKey();final ObjectDeque<T>deque=entry.getValue();if(deque!=null){if(getBlockWhenExhausted()){result.put(k.toString(),Integer.valueOf(deque.getIdleObjects().getTakeQueueLength()));}else{result.put(k.toString(),Integer.valueOf(0));}}}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public TextStringBuilder appendln(final boolean value){return append(value).appendNewLine();}"
  },
  {
    "code_smells": [],
    "source_code": "public Integer getThreshold(){return threshold;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void init()throws FileSystemException{addCapabilities(caps);}"
  },
  {
    "code_smells": [],
    "source_code": "@Before public void setUp()throws Exception{Configuration conf=HBaseConfiguration.create(tmpDir.getDefaultConfiguration());conf.set(HConstants.TEMPORARY_FS_DIRECTORY_KEY,tmpDir.getFile(\"hbase-staging\").getAbsolutePath());hbaseTestUtil=new HBaseTestingUtility(conf);hbaseTestUtil.startMiniCluster();}"
  },
  {
    "code_smells": [],
    "source_code": "public BinarySearchNode(K[]splitPoints,RawComparator<K>comparator){this.splitPoints=splitPoints;this.comparator=comparator;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"CuratorEventImpl{\"+\"type=\"+type+\",resultCode=\"+resultCode+\",path='\"+path+'\\''+\",name='\"+name+'\\''+\",children=\"+children+\",context=\"+context+\",stat=\"+stat+\",data=\"+Arrays.toString(data)+\",watchedEvent=\"+watchedEvent+\",aclList=\"+aclList+\",opResults=\"+opResults+'}';}"
  },
  {
    "code_smells": [],
    "source_code": "private void setupHeaders(BindingOperationInfo op,BindingMessageInfo bMsg,BindingMessageInfo unwrappedBMsg,MessageInfo msg,SoapBindingConfiguration config){List<MessagePartInfo>parts=new ArrayList<>();for(MessagePartInfo part : msg.getMessageParts()){if(config.isHeader(op,part)){SoapHeaderInfo headerInfo=new SoapHeaderInfo();headerInfo.setPart(part);headerInfo.setUse(config.getUse());bMsg.addExtensor(headerInfo);}else{parts.add(part);}}unwrappedBMsg.setMessageParts(parts);}"
  },
  {
    "code_smells": [],
    "source_code": "public void clientCreated(Client client){for(ClientLifeCycleListener listener : listeners){listener.clientCreated(client);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void finer(String msg){if(isLoggable(Level.FINER)){LogRecord lr=new LogRecord(Level.FINER,msg);doLog(lr);}}"
  },
  {
    "code_smells": [],
    "source_code": "MtomValidationErrorHandler(ErrorHandler origErrorHandler,Node node){this.origErrorHandler=origErrorHandler;this.node=node;}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean checkSecurityToken(FedizResponse response){if(response==null){return false;}long currentTime=System.currentTimeMillis();return response.getTokenExpires().getTime()>currentTime;}"
  },
  {
    "code_smells": [],
    "source_code": "public JAXRSBinding(BindingInfo bindingInfo){super();this.bindingInfo=bindingInfo;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<R>Promise<R>put(Entity<?>entity,Class<R>aClass){return method(HttpMethod.PUT,entity,aClass);}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")@Override public void write(T data)throws IOException{Class<?>actualCls=entityCls!=Object.class ? entityCls : data.getClass();if(writer==null){writer=(MessageBodyWriter<T>)providers.getMessageBodyWriter(actualCls,actualCls,anns,mt);if(writer==null){throw new InternalServerErrorException();}}writer.writeTo(data,actualCls,actualCls,anns,mt,headers,os);}"
  },
  {
    "code_smells": [],
    "source_code": "public JsonWebKeys(JsonWebKey key){setInitKey(key);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static JsonWebKey fromRSAPrivateKey(RSAPrivateKey pk,String algo,String kid){JsonWebKey jwk=prepareRSAJwk(pk.getModulus(),algo,kid);String encodedPrivateExponent=Base64UrlUtility.encode(pk.getPrivateExponent().toByteArray());jwk.setProperty(JsonWebKey.RSA_PRIVATE_EXP,encodedPrivateExponent);if(pk instanceof RSAPrivateCrtKey){RSAPrivateCrtKey pkCrt=(RSAPrivateCrtKey)pk;jwk.setProperty(JsonWebKey.RSA_PUBLIC_EXP,Base64UrlUtility.encode(pkCrt.getPublicExponent().toByteArray()));jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_FACTOR,Base64UrlUtility.encode(pkCrt.getPrimeP().toByteArray()));jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_FACTOR,Base64UrlUtility.encode(pkCrt.getPrimeQ().toByteArray()));jwk.setProperty(JsonWebKey.RSA_FIRST_PRIME_CRT,Base64UrlUtility.encode(pkCrt.getPrimeExponentP().toByteArray()));jwk.setProperty(JsonWebKey.RSA_SECOND_PRIME_CRT,Base64UrlUtility.encode(pkCrt.getPrimeExponentQ().toByteArray()));jwk.setProperty(JsonWebKey.RSA_FIRST_CRT_COEFFICIENT,Base64UrlUtility.encode(pkCrt.getCrtCoefficient().toByteArray()));}return jwk;}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getOpenIdScope(){return OPENID_SCOPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public void writeEntityRef(String ent)throws XMLStreamException{delegate.writeEntityRef(ent);}"
  },
  {
    "code_smells": [],
    "source_code": "public void onClose(CachedOutputStream cos){try{byte[]bytes=cos.getBytes();synchronized(outbound){outbound.add(bytes);}}catch(Exception e){LOG.fine(\"Can't record message from output stream class: \"+cos.getOut().getClass().getName());}}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean accept(AST node){return TypedefVisitor.accept(node)|| StructVisitor.accept(node)|| UnionVisitor.accept(node)|| EnumVisitor.accept(node);}"
  },
  {
    "code_smells": [],
    "source_code": "public RMConfiguration getConfiguration(){return configuration;}"
  },
  {
    "code_smells": [],
    "source_code": "public Set<String>keySet(){return wrappedService.keySet();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public PullPoint create(String queueName)throws UnableToCreatePullPointFault{org.oasis_open.docs.wsn.b_2.CreatePullPoint request=new org.oasis_open.docs.wsn.b_2.CreatePullPoint();request.getOtherAttributes().put(NotificationBroker.QNAME_PULLPOINT_QUEUE_NAME,queueName);CreatePullPointResponse response=createPullPoint.createPullPoint(request);return new PullPoint(response.getPullPoint());}"
  },
  {
    "code_smells": [],
    "source_code": "DependentBeanEntry(T instance,Bean<?>bean,CreationalContext<T>creationalContext){this.instance=instance;this.bean=bean;this.creationalContext=creationalContext;}"
  },
  {
    "code_smells": [],
    "source_code": "public PersistentService getServiceType(Object serviceModule){TopService ts=findTopService(serviceModule);if(ts==null)return null;return ts.getServiceType();}"
  },
  {
    "code_smells": [],
    "source_code": "private ThreadGroup createDaemonGroup(){try{ThreadGroup group=new ThreadGroup(\"derby.daemons\");group.setDaemon(true);return group;}catch(SecurityException se){reportThread(se);return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public final Dependable getDependable(DataDictionary dd,UUID dependableObjectID)throws StandardException{Dependable dependable=findDependable(dd,dependableObjectID);if(dependable==null)throw StandardException.newException(SQLState.LANG_OBJECT_NOT_FOUND,getSQLObjectType(),dependableObjectID);return dependable;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ExecIndexRow getIndexRowFromHeapRow(IndexRowGenerator irg,RowLocation rl,ExecRow heapRow)throws StandardException{ExecIndexRow indexRow;indexRow=irg.getIndexRowTemplate();irg.getIndexRow(heapRow,rl,indexRow,(FormatableBitSet)null);return indexRow;}"
  },
  {
    "code_smells": [],
    "source_code": "private void createTriggerDependencies(TriggerDescriptorList tdl,Dependent dependent)throws StandardException{CompilerContext compilerContext=getCompilerContext();for(TriggerDescriptor td : tdl){if(dependent==null){compilerContext.createDependency(td);}else{compilerContext.createDependency(dependent,td);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override CostEstimate getFinalCostEstimate()throws StandardException{if(getCandidateFinalCostEstimate()!=null){return getCandidateFinalCostEstimate();}CostEstimate leftCE=leftResultSet.getFinalCostEstimate();CostEstimate rightCE=rightResultSet.getFinalCostEstimate();setCandidateFinalCostEstimate(getNewCostEstimate());getCandidateFinalCostEstimate().setCost(leftCE.getEstimatedCost()+rightCE.getEstimatedCost(),getRowCountEstimate(leftCE.rowCount(),rightCE.rowCount()),getSingleScanRowCountEstimate(leftCE.singleScanRowCount(),rightCE.singleScanRowCount()));return getCandidateFinalCostEstimate();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "NormalizeResultSetNode(ResultSetNode chldRes,ResultColumnList targetResultColumnList,Properties tableProperties,boolean forUpdate,ContextManager cm)throws StandardException{super(chldRes,tableProperties,cm);this.forUpdate=forUpdate;ResultColumnList rcl=chldRes.getResultColumns();ResultColumnList targetRCL=targetResultColumnList;ResultColumnList prRCList=rcl;chldRes.setResultColumns(rcl.copyListAndObjects());prRCList.removeGeneratedGroupingColumns();prRCList.removeOrderByColumns();prRCList.genVirtualColumnNodes(chldRes,chldRes.getResultColumns());setResultColumns(prRCList);if(chldRes.getReferencedTableMap()!=null){setReferencedTableMap((JBitSet)getReferencedTableMap().clone());}if(targetResultColumnList!=null){int size=Math.min(targetRCL.size(),getResultColumns().size());for(int index=0;index<size;index++){ResultColumn sourceRC=getResultColumns().elementAt(index);ResultColumn resultColumn=targetRCL.elementAt(index);sourceRC.setType(resultColumn.getTypeServices());}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override ValueNode preprocess(int numTables,FromList outerFromList,SubqueryList outerSubqueryList,PredicateList outerPredicateList)throws StandardException{if(preprocessed){return this;}preprocessed=true;boolean flattenable;ValueNode topNode=this;final boolean haveOrderBy;if(orderByList!=null){haveOrderBy=true;if(orderByList.size()>1){orderByList.removeDupColumns();}resultSet.pushOrderByList(orderByList);orderByList=null;}else{haveOrderBy=false;}resultSet=resultSet.preprocess(numTables,null,(FromList)null);if(leftOperand!=null){leftOperand=leftOperand.preprocess(numTables,outerFromList,outerSubqueryList,outerPredicateList);}if(resultSet instanceof SelectNode){if(((SelectNode)resultSet).hasDistinct()){((SelectNode)resultSet).clearDistinct();if(subqueryType==EXPRESSION_SUBQUERY){distinctExpression=true;}}}if((isIN()|| isANY())&& resultSet.returnsAtMostOneRow()){if(!hasCorrelatedCRs()){changeToCorrespondingExpressionType();}}flattenable=(resultSet instanceof RowResultSetNode)&& underTopAndNode && !havingSubquery && !haveOrderBy && offset==null && fetchFirst==null && !isWhereExistsAnyInWithWhereSubquery()&& parentComparisonOperator!=null;if(flattenable){leftOperand=parentComparisonOperator.getLeftOperand();RowResultSetNode rrsn=(RowResultSetNode)resultSet;FromList fl=new FromList(getContextManager());outerSubqueryList.removeElement(this);if(rrsn.subquerys.size()!=0){fl.addElement(rrsn);outerFromList.destructiveAppend(fl);}outerSubqueryList.destructiveAppend(rrsn.subquerys);return getNewJoinCondition(leftOperand,getRightOperand());}boolean flattenableNotExists=(isNOT_EXISTS()|| canAllBeFlattened());flattenable=(resultSet instanceof SelectNode)&& !((SelectNode)resultSet).hasWindows()&& !haveOrderBy && offset==null && fetchFirst==null && underTopAndNode && !havingSubquery && !isWhereExistsAnyInWithWhereSubquery()&&(isIN()|| isANY()|| isEXISTS()|| flattenableNotExists || parentComparisonOperator!=null);if(flattenable){SelectNode select=(SelectNode)resultSet;if((!select.hasAggregatesInSelectList())&&(select.havingClause==null)){ValueNode origLeftOperand=leftOperand;boolean additionalEQ=(subqueryType==IN_SUBQUERY)||(subqueryType==EQ_ANY_SUBQUERY);additionalEQ=additionalEQ &&((leftOperand instanceof ConstantNode)||(leftOperand instanceof ColumnReference)||(leftOperand.requiresTypeFromContext()));if(parentComparisonOperator!=null){leftOperand=parentComparisonOperator.getLeftOperand();}if((!flattenableNotExists)&& select.uniqueSubquery(additionalEQ)){return flattenToNormalJoin(numTables,outerFromList,outerSubqueryList,outerPredicateList);}else if((isIN()|| isANY()|| isEXISTS()|| flattenableNotExists)&&((leftOperand==null)? true : leftOperand.categorize(new JBitSet(numTables),false))&& select.getWherePredicates().allPushable()){FromBaseTable fbt=singleFromBaseTable(select.getFromList());if(fbt!=null &&(!flattenableNotExists ||(select.getWherePredicates().allReference(fbt)&& rightOperandFlattenableToNotExists(numTables,fbt)))){return flattenToExistsJoin(numTables,outerFromList,outerSubqueryList,outerPredicateList,flattenableNotExists);}}leftOperand=origLeftOperand;}}resultSet.pushQueryExpressionSuffix();resultSet.pushOffsetFetchFirst(offset,fetchFirst,hasJDBClimitClause);if(leftOperand!=null){topNode=pushNewPredicate(numTables);pushedNewPredicate=true;}else if(isEXISTS()|| isNOT_EXISTS()){topNode=genIsNullTree(isEXISTS());subqueryType=EXISTS_SUBQUERY;}isInvariant();hasCorrelatedCRs();if(parentComparisonOperator!=null){parentComparisonOperator.setRightOperand(topNode);return parentComparisonOperator;}return topNode;}"
  },
  {
    "code_smells": [],
    "source_code": "private void bindSQRTABS()throws StandardException{TypeId operandType;int jdbcType;operandType=operand.getTypeId();if(operandType.userType()){operand=operand.genSQLJavaSQLTree();}jdbcType=operandType.getJDBCTypeId();if(!operandType.isNumericTypeId())throw StandardException.newException(SQLState.LANG_UNARY_FUNCTION_BAD_TYPE,getOperatorString(),operandType.getSQLTypeName());if(kind==K_SQRT && jdbcType!=Types.DOUBLE){operand=new CastNode(operand,new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.DOUBLE),true),getContextManager());((CastNode)operand).bindCastNodeOnly();}}"
  },
  {
    "code_smells": [],
    "source_code": "public long update(long t){counter=t;initialized=true;return counter;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close()throws StandardException{super.close(constants.underMerge());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void finish()throws StandardException{source.finish();super.finish();}"
  },
  {
    "code_smells": [],
    "source_code": "public ResultSet getUpdateVTIResultSet(NoPutResultSet source)throws StandardException{Activation activation=source.getActivation();getAuthorizer(activation).authorize(activation,Authorizer.SQL_WRITE_OP);return new UpdateVTIResultSet(source,activation);}"
  },
  {
    "code_smells": [],
    "source_code": "private static Object bootServiceModule(final boolean create,final Object serviceModule,final String factoryInterface,final Properties properties)throws StandardException{try{return AccessController.doPrivileged(new PrivilegedExceptionAction<Object>(){public Object run()throws StandardException{return Monitor.bootServiceModule(create,serviceModule,factoryInterface,properties);}});}catch(PrivilegedActionException pae){throw StandardException.plainWrapException(pae);}}"
  },
  {
    "code_smells": [],
    "source_code": "public OutputStream setBinaryStream(long arg0)throws SQLException{throw new SQLException(\"not implemented for this test\");}"
  },
  {
    "code_smells": [],
    "source_code": "public static double double_double_double(Blob a){return-1.0;}"
  },
  {
    "code_smells": [],
    "source_code": "public static Test clientExistingServerSuite(Class testClass,String hostName,int portNumber){return existingServerDecorator(bareClientServerSuite(testClass),hostName,portNumber);}"
  },
  {
    "code_smells": [],
    "source_code": "public Connection getConnection(){Connection conn=null;String jdbcurl=\"\";try{NsTest.logger.println(getThread_id()+\" is getting a connection to the database...\");if(NsTest.embeddedMode){jdbcurl=NsTest.embedDbURL+\";\"+NsTest.bootPwd;}else{if(NsTest.driver_type.equalsIgnoreCase(\"DerbyClient\"))jdbcurl=NsTest.clientDbURL+\";\"+NsTest.bootPwd;}NsTest.logger.println(\"-->Thread \"+getThread_id()+\" starting with url \"+jdbcurl+\"<--\");conn=DriverManager.getConnection(jdbcurl,NsTest.prop);}catch(Exception e){e.printStackTrace(NsTest.logger);NsTest.logger.println(\"FAIL: \"+getThread_id()+\" could not get the database connection\");printException(\"Failed getting database connection using \"+jdbcurl,e);}NsTest.addStats(NsTest.CONNECTIONS_MADE,1);NsTest.logger.println(\"Connection number: \"+NsTest.numConnections);return conn;}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isOid(String oidString){try{Oid.fromString(oidString);return true;}catch(DecoderException e){return false;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public int hashCode(){int hash=37;if(baseDn!=null){hash=hash*17+baseDn.hashCode();}hash=hash*17+aliasDerefMode.hashCode();hash=hash*17+scope.hashCode();hash=hash*17+Long.valueOf(sizeLimit).hashCode();hash=hash*17+timeLimit;hash=hash*17+(typesOnly ? 0 : 1);if(attributes!=null){hash=hash*17+attributes.size();for(String attr : attributes){if(attr!=null){hash=hash+attr.hashCode();}}}BranchNormalizedVisitor visitor=new BranchNormalizedVisitor();filterNode.accept(visitor);hash=hash*17+filterNode.toString().hashCode();hash=hash*17+super.hashCode();return hash;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public Iterator<LdapComparator<?>>iterator(){return immutableComparatorRegistry.iterator();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getOidByName(String name)throws LdapException{return immutableMatchingRuleUseRegistry.getOidByName(name);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public boolean isValidSyntax(Object value){String strValue;if(value==null){if(LOG.isDebugEnabled()){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,\"null\"));}return false;}if(value instanceof String){strValue=(String)value;}else if(value instanceof byte[]){strValue=Strings.utf8ToString((byte[])value);}else{strValue=value.toString();}if(strValue.length()<4){if(LOG.isDebugEnabled()){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,value));}return false;}if((strValue.charAt(0)!='(')||(strValue.charAt(strValue.length()-1)!=')')){if(LOG.isDebugEnabled()){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,value));}return false;}Set<String>keywords=new HashSet<>();int len=strValue.length()-1;boolean needKeyword=true;for(int i=1;i<len;){while((i<len)&&(strValue.charAt(i)==' ')){i++;}int pos=i;while((i<len)&& Chars.isAlphaASCII(strValue,pos)){pos++;}if(pos==i){if(LOG.isDebugEnabled()){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,value));}return false;}String keyword=strValue.substring(i,pos);i=pos;if(!DSE_BITS.contains(keyword)){if(LOG.isDebugEnabled()){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,value));}return false;}if(keywords.contains(keyword)){if(LOG.isDebugEnabled()){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,value));}return false;}keywords.add(keyword);needKeyword=false;while((i<len)&&(strValue.charAt(i)==' ')){i++;}if((i<len)&&(strValue.charAt(i)=='$')){i++;needKeyword=true;}}if(LOG.isDebugEnabled()){if(needKeyword){LOG.debug(I18n.err(I18n.ERR_13210_SYNTAX_INVALID,value));}else{LOG.debug(I18n.msg(I18n.MSG_13701_SYNTAX_VALID,value));}}return !needKeyword;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static byte[]decodeUrl(byte[]bytes)throws UrlDecoderException{if(bytes==null){return Strings.EMPTY_BYTES;}ByteArrayOutputStream buffer=new ByteArrayOutputStream();for(int i=0;i<bytes.length;i++){int b=bytes[i];if(b=='%'){try{int u=Character.digit((char)bytes[++i],16);int l=Character.digit((char)bytes[++i],16);if((u==-1)||(l==-1)){throw new UrlDecoderException(I18n.err(I18n.ERR_13040_INVALID_URL_ENCODING));}buffer.write((char)((u<<4)+l));}catch(ArrayIndexOutOfBoundsException aioobe){throw new UrlDecoderException(I18n.err(I18n.ERR_13040_INVALID_URL_ENCODING),aioobe);}}else{buffer.write(b);}}return buffer.toByteArray();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private LdapComparator<?>classLoadComparator(SchemaManager schemaManager,String oid,String className,Attribute byteCode)throws LdapException{LdapComparator<?>comparator;Class<?>clazz;String byteCodeStr=StringConstants.EMPTY;if(byteCode==null){try{clazz=Class.forName(className);}catch(ClassNotFoundException cnfe){LOG.error(I18n.err(I18n.ERR_16056_CANNOT_FIND_CMP_CTOR,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16057_CANNOT_FIND_CMP_CLASS,cnfe.getMessage()));}}else{classLoader.setAttribute(byteCode);try{clazz=classLoader.loadClass(className);}catch(ClassNotFoundException cnfe){LOG.error(I18n.err(I18n.ERR_16058_CANNOT_LOAD_CMP_CTOR,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16059_CANNOT_LOAD_CMP_CLASS,cnfe.getMessage()));}byteCodeStr=new String(Base64.encode(byteCode.getBytes()));}try{Constructor<?>constructor=clazz.getConstructor(new Class[]{String.class});try{comparator=(LdapComparator<?>)constructor.newInstance(oid);}catch(InvocationTargetException ite){LOG.error(I18n.err(I18n.ERR_16060_CANNOT_INVOKE_CMP_CTOR,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16061_CANNOT_INVOKE_CMP_CLASS,ite.getMessage()));}catch(InstantiationException ie){LOG.error(I18n.err(I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16063_CANNOT_INST_CMP_CLASS,ie.getMessage()));}catch(IllegalAccessException ie){LOG.error(I18n.err(I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS,ie.getMessage()));}}catch(NoSuchMethodException nsme){try{clazz.getConstructor();}catch(NoSuchMethodException nsme2){LOG.error(I18n.err(I18n.ERR_16066_CANNOT_FIND_CMP_CTOR_METH_CLASS,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16067_CANNOT_FIND_CMP_CTOR_METH,nsme2.getMessage()));}try{comparator=(LdapComparator<?>)clazz.newInstance();}catch(InstantiationException ie){LOG.error(I18n.err(I18n.ERR_16062_CANNOT_INST_CMP_CTOR_CLASS,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16063_CANNOT_INST_CMP_CLASS,ie.getMessage()));}catch(IllegalAccessException iae){LOG.error(I18n.err(I18n.ERR_16064_CANNOT_ACCESS_CMP_CTOR,className));throw new LdapSchemaException(I18n.err(I18n.ERR_16065_CANNOT_ACCESS_CMP_CLASS,iae.getMessage()));}if(!comparator.getOid().equals(oid)){String msg=I18n.err(I18n.ERR_16021_DIFFERENT_COMPARATOR_OID,oid,comparator.getOid());throw new LdapInvalidAttributeValueException(ResultCodeEnum.UNWILLING_TO_PERFORM,msg,nsme);}}comparator.setBytecode(byteCodeStr);comparator.setFqcn(className);comparator.setSchemaManager(schemaManager);return comparator;}"
  },
  {
    "code_smells": [],
    "source_code": "private LdapConnectionProvider(){init();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<Permission>sessionPermissions(Session session)throws SecurityException{VUtil.assertNotNull(session,GlobalErrIds.USER_SESS_NULL,CLS_NM+\".sessionPermissions\");List<Permission>retPerms;FortRequest request=new FortRequest();request.setContextId(this.contextId);request.setSession(session);String szRequest=RestUtils.marshal(request);String szResponse=RestUtils.getInstance().post(szRequest,HttpIds.ADMIN_PERMS);FortResponse response=RestUtils.unmarshall(szResponse);if(response.getErrorCode()==0){retPerms=response.getEntities();Session outSession=response.getSession();session.copy(outSession);}else{throw new SecurityException(response.getErrorCode(),response.getErrorMessage());}return retPerms;}"
  },
  {
    "code_smells": [],
    "source_code": "public void timeout(Integer timeout)throws ValidationException{if((timeout<0)||(timeout>=Integer.MAX_VALUE)){String error=\"timeout-invalid timeout value[\"+timeout+\"]\";throw new ValidationException(GlobalErrIds.CONST_TIMEOUT_INVLD,error);}}"
  },
  {
    "code_smells": [],
    "source_code": "public LdapClassLoader(DirectoryService directoryService)throws LdapException{super(LdapClassLoader.class.getClassLoader());this.directoryService=directoryService;defaultSearchDn=directoryService.getDnFactory().create(DEFAULT_SEARCH_CONTEXTS_CONFIG);objectClassAT=directoryService.getSchemaManager().getAttributeType(SchemaConstants.OBJECT_CLASS_AT);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean canVisit(ExprNode node){return node instanceof BranchNode;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void afterValue(K key,V value)throws LdapException,CursorException{checkNotClosed();if(value==null){containerCursor.after(new Tuple<K,DupsContainer<V>>(key,null));}else{containerCursor.before(new Tuple<K,DupsContainer<V>>(key,null));}if(containerCursor.next()){containerTuple.setBoth(containerCursor.get());DupsContainer<V>values=containerTuple.getValue();if(values.isArrayTree()){ArrayTree<V>set=values.getArrayTree();dupsCursor=new ArrayTreeCursor<>(set);}else{try{BTree tree=table.getBTree(values.getBTreeRedirect());dupsCursor=new KeyBTreeCursor<>(tree,table.getValueComparator());}catch(IOException e){throw new CursorException(e);}}if(value==null){return;}if(table.getKeyComparator().compare(containerTuple.getKey(),key)==0){dupsCursor.after(value);}return;}clearValue();containerTuple.setKey(null);containerTuple.setValue(null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close()throws IOException{if(IS_DEBUG){LOG_CURSOR.debug(\"Closing LessEqCursor{}\",this);}super.close();if(userIdxCursor!=null){userIdxCursor.close();}else{uuidIdxCursor.close();uuidCandidate=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getText(){IEntry[]entries=getEntries();if(entries!=null){return entries.length>1 ? Messages.getString(\"CopyAction.CopyEntriesDNs\"): Messages.getString(\"CopyAction.CopyEntryDN\");}ISearch[]searches=getSearches();if(searches!=null){return searches.length>1 ? Messages.getString(\"CopyAction.CopySearches\"): Messages.getString(\"CopyAction.CopySearch\");}IValue[]values=getValues();if(values!=null){return values.length>1 ? Messages.getString(\"CopyAction.CopyValues\"): Messages.getString(\"CopyAction.CopyValue\");}return Messages.getString(\"CopyAction.Copy\");}"
  },
  {
    "code_smells": [],
    "source_code": "private void validate(){setPageComplete(getApplyOnDns()!=null || spw.isValid());setErrorMessage(searchButton.getSelection()? spw.getErrorMessage(): null);}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean equals(Object that){if(this==that){return true;}if(that instanceof AclAttributeWrapper){AclAttributeWrapper thatInstance=(AclAttributeWrapper)that;return aclAttribute.getName().equalsIgnoreCase(thatInstance.aclAttribute.getName())&&(aclAttribute.isAttributeType()&& thatInstance.aclAttribute.isAttributeType()||((aclAttribute.isObjectClass()|| aclAttribute.isObjectClassNotAllowed())&&(thatInstance.aclAttribute.isObjectClass()|| thatInstance.aclAttribute.isObjectClassNotAllowed())));}else{return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "private void createServerIdEditGroup(Composite parent){Group serverIdGroup=BaseWidgetUtils.createGroup(parent,\"ServerID input\",1);GridLayout serverIdGroupGridLayout=new GridLayout(2,false);serverIdGroup.setLayout(serverIdGroupGridLayout);serverIdGroup.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false));BaseWidgetUtils.createLabel(serverIdGroup,\"ID:\",1);idText=BaseWidgetUtils.createText(serverIdGroup,\"\",1);idText.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false));BaseWidgetUtils.createLabel(serverIdGroup,\"URL:\",1);urlText=BaseWidgetUtils.createText(serverIdGroup,\"\",1);urlText.setLayoutData(new GridData(SWT.FILL,SWT.NONE,true,false));}"
  },
  {
    "code_smells": [],
    "source_code": "public void addAuxiliaryObjectClasses(AuxiliaryObjectClass...auxiliaryObjectClasses){for(AuxiliaryObjectClass auxiliaryObjectClass : auxiliaryObjectClasses){this.auxiliaryObjectClasses.add(auxiliaryObjectClass);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void initListeners(){importTemplatesButton.addSelectionListener(new SelectionAdapter(){public void widgetSelected(SelectionEvent e){importTemplatesAction();}});exportTemplatesButton.addSelectionListener(new SelectionAdapter(){public void widgetSelected(SelectionEvent e){exportTemplatesAction();}});removeTemplateButton.addSelectionListener(new SelectionAdapter(){public void widgetSelected(SelectionEvent e){removeTemplateAction();}});setDefaultTemplateButton.addSelectionListener(new SelectionAdapter(){public void widgetSelected(SelectionEvent e){setDefaultTemplateAction();}});useForAnyEntryButton.addSelectionListener(new SelectionAdapter(){public void widgetSelected(SelectionEvent e){useForAnyEntryAction();}});useForOnlyEntriesWithTemplateButton.addSelectionListener(new SelectionAdapter(){public void widgetSelected(SelectionEvent e){useForOnlyEntriesWithTemplateAction();}});}"
  },
  {
    "code_smells": [],
    "source_code": "protected void readPayload(ByteBuf in,boolean copyData)throws IOException{int length=in.readInt();if(length<0){throw new EOFException(\"Log Record is corrupt: Negative length \"+length);}if(copyData){setPayloadBuf(in.slice(in.readerIndex(),length),true);}else{setPayloadBuf(in.retainedSlice(in.readerIndex(),length),false);}in.skipBytes(length);}"
  },
  {
    "code_smells": [],
    "source_code": "public static LogicalExpression getIntervalDay(long intervalInMillis){return new IntervalDayExpression(intervalInMillis);}"
  },
  {
    "code_smells": [],
    "source_code": "public static java.lang.String getFieldName(int number){switch(number){case 1: return \"minorType\";case 2: return \"mode\";case 3: return \"width\";case 4: return \"precision\";case 5: return \"scale\";case 6: return \"timeZone\";case 7: return \"subType\";default: return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void output(){if(work.obj!=null){com.clearspring.analytics.stream.cardinality.HyperLogLog hll=(com.clearspring.analytics.stream.cardinality.HyperLogLog)work.obj;try{byte[]ba=hll.getBytes();out.buffer=buffer.reallocIfNeeded(ba.length);out.start=0;out.end=ba.length;out.buffer.setBytes(0,ba);out.isSet=1;}catch(java.io.IOException e){throw new org.apache.drill.common.exceptions.DrillRuntimeException(\"Failed to get HyperLogLog output\",e);}}else{out.isSet=0;}}"
  },
  {
    "code_smells": [],
    "source_code": "public FileSystem getFs(){return fs;}"
  },
  {
    "code_smells": [],
    "source_code": "public AbstractFileGroupScan(String userName){super(userName);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private void addOutputContainerData(){@SuppressWarnings(\"resource\")final VarCharVector fragmentIdVector=(VarCharVector)container.getValueAccessorById(VarCharVector.class,container.getValueVectorId(SchemaPath.getSimplePath(\"Fragment\")).getFieldIds()).getValueVector();AllocationHelper.allocate(fragmentIdVector,1,50);@SuppressWarnings(\"resource\")final BigIntVector summaryVector=(BigIntVector)container.getValueAccessorById(BigIntVector.class,container.getValueVectorId(SchemaPath.getSimplePath(\"Number of records written\")).getFieldIds()).getValueVector();AllocationHelper.allocate(summaryVector,1,8);fragmentIdVector.getMutator().setSafe(0,fragmentUniqueId.getBytes());fragmentIdVector.getMutator().setValueCount(1);summaryVector.getMutator().setSafe(0,counter);summaryVector.getMutator().setValueCount(1);container.setRecordCount(1);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void handleRemainder(){final int remainingRecordCount=incoming.getRecordCount()-remainderIndex;assert this.memoryManager.incomingBatch==incoming;final int recordsToProcess=Math.min(remainingRecordCount,memoryManager.getOutputRowCount());if(!doAlloc(recordsToProcess)){outOfMemory=true;return;}logger.trace(\"handleRemainder: remaining RC{},toProcess{},remainder index{},incoming{},Project{}\",remainingRecordCount,recordsToProcess,remainderIndex,incoming,this);long projectStartTime=System.currentTimeMillis();final int projRecords=projector.projectRecords(this.incoming,remainderIndex,recordsToProcess,0);long projectEndTime=System.currentTimeMillis();logger.trace(\"handleRemainder: projection: records{},time{}ms\",projRecords,(projectEndTime-projectStartTime));if(projRecords<remainingRecordCount){setValueCount(projRecords);this.recordCount=projRecords;remainderIndex+=projRecords;}else{setValueCount(remainingRecordCount);hasRemainder=false;remainderIndex=0;for(final VectorWrapper<?>v : incoming){v.clear();}this.recordCount=remainingRecordCount;}if(complexWriters!=null){container.buildSchema(SelectionVectorMode.NONE);}memoryManager.updateOutgoingStats(projRecords);RecordBatchStats.logRecordBatchStats(RecordBatchIOType.OUTPUT,this,getRecordBatchStatsContext());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void write(byte[]b)throws IOException{count+=b.length;out.write(b);}"
  },
  {
    "code_smells": [],
    "source_code": "public void configure(OptionManager optionsManager){assert(state==State.CONFIG);accuracy=optionsManager.getLong(ExecConstants.HLL_ACCURACY);state=State.MERGE;}"
  },
  {
    "code_smells": [],
    "source_code": "@VisibleForTesting public int getPreferredMergeBatchSize(){return preferredMergeBatchSize;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private void parseArray(NameSegment nameSeg){String name=nameSeg.getPath();ArraySegment arraySeg=((ArraySegment)nameSeg.getChild());int index=arraySeg.getIndex();RequestedColumnImpl member=getImpl(name);if(member==null){member=new RequestedColumnImpl(this,name);projection.add(name,member);}else if(member.isSimple()){member.projectAllElements();return;}else if(member.hasIndex(index)){throw UserException.validationError().message(\"Duplicate array index in project list: %s[%d]\",member.fullName(),index).build(logger);}member.addIndex(index);if(!arraySeg.isLastPath()){parseInternal(nameSeg);}}"
  },
  {
    "code_smells": [],
    "source_code": "public Wrapper get(Fragment node){Wrapper wrapper=fragmentMap.get(node);if(wrapper==null){int majorFragmentId=0;if(node.getSendingExchange()!=null){majorFragmentId=node.getSendingExchange().getChild().getOperatorId()>>16;if(majorFragmentId==0){majorFragmentId=majorFragmentIdIndex;}}wrapper=new Wrapper(node,majorFragmentId);fragmentMap.put(node,wrapper);majorFragmentIdIndex++;}return wrapper;}"
  },
  {
    "code_smells": [],
    "source_code": "DirectScanPrel(RelOptCluster cluster,RelTraitSet traits,GroupScan groupScan,RelDataType rowType){super(cluster,traits);this.groupScan=groupScan;this.rowType=rowType;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void computeScalePrecision(int leftPrecision,int leftScale,int rightPrecision,int rightScale){outputScale=Math.max(leftScale,rightScale);int leftIntegerDigits=leftPrecision-leftScale;outputPrecision=DRILL_REL_DATATYPE_SYSTEM.getMaxNumericPrecision();if(outputScale+leftIntegerDigits>outputPrecision){outputScale=outputPrecision-leftIntegerDigits;}outputPrecision=Math.min(outputPrecision,Math.max(leftPrecision,rightPrecision));}"
  },
  {
    "code_smells": [],
    "source_code": "public org.apache.drill.exec.proto.BitControl.PlanFragment.Builder addFragmentBuilder(){return getFragmentFieldBuilder().addBuilder(org.apache.drill.exec.proto.BitControl.PlanFragment.getDefaultInstance());}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasFragmentJson(){return((bitField0_ & 0x00000020)==0x00000020);}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override public boolean equals(final java.lang.Object obj){if(obj==this){return true;}if(!(obj instanceof org.apache.drill.exec.proto.UserBitShared.NamePart)){return super.equals(obj);}org.apache.drill.exec.proto.UserBitShared.NamePart other=(org.apache.drill.exec.proto.UserBitShared.NamePart)obj;boolean result=true;result=result &&(hasType()==other.hasType());if(hasType()){result=result && type_==other.type_;}result=result &&(hasName()==other.hasName());if(hasName()){result=result && getName().equals(other.getName());}result=result &&(hasChild()==other.hasChild());if(hasChild()){result=result && getChild().equals(other.getChild());}result=result && unknownFields.equals(other.unknownFields);return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override public final boolean isInitialized(){byte isInitialized=memoizedIsInitialized;if(isInitialized==1)return true;if(isInitialized==0)return false;memoizedIsInitialized=1;return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override protected Builder newBuilderForType(com.google.protobuf.GeneratedMessageV3.BuilderParent parent){Builder builder=new Builder(parent);return builder;}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override public int hashCode(){if(memoizedHashCode!=0){return memoizedHashCode;}int hash=41;hash=(19*hash)+getDescriptor().hashCode();if(hasSqlQuery()){hash=(37*hash)+SQL_QUERY_FIELD_NUMBER;hash=(53*hash)+getSqlQuery().hashCode();}hash=(29*hash)+unknownFields.hashCode();memoizedHashCode=hash;return hash;}"
  },
  {
    "code_smells": [],
    "source_code": "public static org.apache.drill.exec.proto.UserProtos.GetQueryPlanFragments parseFrom(com.google.protobuf.ByteString data)throws com.google.protobuf.InvalidProtocolBufferException{return PARSER.parseFrom(data);}"
  },
  {
    "code_smells": [],
    "source_code": "public Collector setIncomingMinorFragmentList(List<Integer>incomingMinorFragment){this.incomingMinorFragment=incomingMinorFragment;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public void mergeFrom(Input input,RunQuery message)throws IOException{for(int number=input.readFieldNumber(this);;number=input.readFieldNumber(this)){switch(number){case 0: return;case 1: message.resultsMode=QueryResultsMode.valueOf(input.readEnum());break;case 2: message.type=QueryType.valueOf(input.readEnum());break;case 3: message.plan=input.readString();break;case 4: if(message.fragments==null)message.fragments=new ArrayList<PlanFragment>();message.fragments.add(input.mergeObject(null,PlanFragment.getSchema()));break;case 5: message.preparedStatementHandle=input.mergeObject(message.preparedStatementHandle,PreparedStatementHandle.getSchema());break;default: input.handleUnknownField(number,this);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void startField()throws IOException{if(!skipNullFields || this.reader.isSet()){if(fieldName.equals(Statistic.ROWCOUNT)|| fieldName.equals(Statistic.NNROWCOUNT)|| fieldName.equals(Statistic.NDV)|| fieldName.equals(Statistic.SUM_DUPS)){nextField=fieldName;}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void parseQuotedValue(byte prev)throws IOException{final byte newLine=this.newLine;final byte delimiter=this.delimiter;final TextOutput output=this.output;final TextInput input=this.input;final byte quote=this.quote;ch=input.nextCharNoNewLineCheck();while(!(prev==quote &&(ch==delimiter || ch==newLine || isWhite(ch)))){if(ch!=quote){if(prev==quote){if(parseUnescapedQuotes){output.append(quote);output.append(ch);parseQuotedValue(ch);break;}else{throw new TextParsingException(context,\"Unescaped quote character '\"+quote+\"' inside quoted value of CSV field.To allow unescaped quotes,set 'parseUnescapedQuotes' to 'true' in the CSV parser settings.Cannot parse CSV input.\");}}output.append(ch);prev=ch;}else if(prev==quoteEscape){output.append(quote);prev=NULL_BYTE;}else{prev=ch;}ch=input.nextCharNoNewLineCheck();}if(ch!=newLine && ch<=' ' && ch!=delimiter){final DrillBuf workBuf=this.workBuf;workBuf.resetWriterIndex();do{workBuf.writeByte(ch);ch=input.nextChar();if(ch==newLine){return;}}while(ch<=' ' && ch!=delimiter);if(!(ch==delimiter || ch==newLine)&& parseUnescapedQuotes){output.append(quote);for(int i=0;i<workBuf.writerIndex();i++){output.append(workBuf.getByte(i));}if(ch!=quoteEscape){output.append(ch);}parseQuotedValue(ch);}}if(!(ch==delimiter || ch==newLine)){throw new TextParsingException(context,\"Unexpected character '\"+ch+\"' following quoted value of CSV field.Expecting '\"+delimiter+\"'.Cannot parse CSV input.\");}}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unused\")public void setTimestamp(String field,String value){if(value!=null){long ts=0;try{Date d=this.dateFormatter.parse(value);ts=d.getTime();}catch(Exception e){}final TimeStampWriter tw=times.get(field);if(tw!=null){LOG.trace(\"Parsed field:{},as time:{}\",field,value);tw.writeTimeStamp(ts);}else{LOG.warn(\"No 'timestamp' writer found for field:{}\",field);}}}"
  },
  {
    "code_smells": [],
    "source_code": "static boolean isPrecTypeFixed(ColumnPrecisionType type){return DT_PRECISION_IS_FIXED.equals(type);}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder defaultSchemaPathColumns(){this.columns=GroupScan.ALL_COLUMNS;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public Ack resumeFragment(final FragmentHandle handle){final FragmentManager manager=bee.getContext().getWorkBus().getFragmentManager(handle);if(manager!=null){manager.unpause();return Acks.OK;}final FragmentExecutor runner=bee.getFragmentRunner(handle);if(runner!=null){runner.unpause();return Acks.OK;}logger.warn(\"Dropping request to resume fragment.{}does not exist.\",QueryIdHelper.getQueryIdentifier(handle));return Acks.OK;}"
  },
  {
    "code_smells": [],
    "source_code": "public void add(RawFragmentBatchWrapper batchWrapper){buffer.add(batchWrapper);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void cleanUp(){final DrillConnectionImpl connection1=(DrillConnectionImpl)connection;connection1.openStatementsRegistry.removeStatement(this);}"
  },
  {
    "code_smells": [],
    "source_code": "@Benchmark @BenchmarkMode(Mode.AverageTime)@OutputTimeUnit(TimeUnit.MICROSECONDS)public void uncompressed(Blackhole blackhole){final ImmutableConciseSet set=ImmutableConciseSet.complement(null,emptyRows);blackhole.consume(set);assert(emptyRows==set.size());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ParseSpec withTimestampSpec(TimestampSpec spec){return new TimeAndDimsParseSpec(spec,getDimensionsSpec());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"SegmentListUnusedAction{\"+\"dataSource='\"+dataSource+'\\''+\",interval=\"+interval+'}';}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean isMoreToReadBeforeReadingRecord(final SequenceOffsetType recordSequenceNumber,final SequenceOffsetType endSequenceNumber){final int compareToEnd=createSequenceNumber(recordSequenceNumber).compareTo(createSequenceNumber(endSequenceNumber));return isEndOffsetExclusive()? compareToEnd<0 : compareToEnd<=0;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){int result=name.hashCode();result=31*result+field.hashCode();result=31*result+(errorBoundsStdDev!=null ? errorBoundsStdDev.hashCode(): 0);return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ClientResponse<FullResponseHolder>handleChunk(ClientResponse<FullResponseHolder>response,HttpChunk chunk,long chunkNum){BytesFullResponseHolder holder=(BytesFullResponseHolder)response.getObj();if(holder==null){return ClientResponse.finished(null);}holder.addChunk(getContentBytes(chunk.getContent()));return response;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void validateTwoSegments(final IndexableAdapter adapter1,final IndexableAdapter adapter2){if(adapter1.getNumRows()!=adapter2.getNumRows()){throw new SegmentValidationException(\"Row count mismatch.Expected[%d]found[%d]\",adapter1.getNumRows(),adapter2.getNumRows());}{final Set<String>dimNames1=Sets.newHashSet(adapter1.getDimensionNames());final Set<String>dimNames2=Sets.newHashSet(adapter2.getDimensionNames());if(!dimNames1.equals(dimNames2)){throw new SegmentValidationException(\"Dimension names differ.Expected[%s]found[%s]\",dimNames1,dimNames2);}final Set<String>metNames1=Sets.newHashSet(adapter1.getMetricNames());final Set<String>metNames2=Sets.newHashSet(adapter2.getMetricNames());if(!metNames1.equals(metNames2)){throw new SegmentValidationException(\"Metric names differ.Expected[%s]found[%s]\",metNames1,metNames2);}}final RowIterator it1=adapter1.getRows();final RowIterator it2=adapter2.getRows();long row=0L;while(it1.moveToNext()){if(!it2.moveToNext()){throw new SegmentValidationException(\"Unexpected end of second adapter\");}final RowPointer rp1=it1.getPointer();final RowPointer rp2=it2.getPointer();++row;if(rp1.getRowNum()!=rp2.getRowNum()){throw new SegmentValidationException(\"Row number mismatch:[%d]vs[%d]\",rp1.getRowNum(),rp2.getRowNum());}try{validateRowValues(rp1,adapter1,rp2,adapter2);}catch(SegmentValidationException ex){throw new SegmentValidationException(ex,\"Validation failure on row %d:[%s]vs[%s]\",row,rp1,rp2);}}if(it2.moveToNext()){throw new SegmentValidationException(\"Unexpected end of first adapter\");}if(row!=adapter1.getNumRows()){throw new SegmentValidationException(\"Actual Row count mismatch.Expected[%d]found[%d]\",row,adapter1.getNumRows());}}"
  },
  {
    "code_smells": [],
    "source_code": "synchronized void removeSegment(DataSegment segment){if(segments.remove(segment)){currSize-=segment.getSize();}}"
  },
  {
    "code_smells": [],
    "source_code": "public StorageAdapter getAdapter(){return adapter;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@VisibleForTesting @Nonnull static Supplier<Object>supplierFromDimensionSelector(final DimensionSelector selector){Preconditions.checkNotNull(selector,\"selector\");return()->{final IndexedInts row=selector.getRow();if(row.size()==1){return selector.lookupName(row.get(0));}else{return null;}};}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static DimFilter negate(final DimFilter filter){if(Filtration.matchEverything().equals(filter)){return Filtration.matchNothing();}else if(Filtration.matchNothing().equals(filter)){return Filtration.matchEverything();}else if(filter instanceof NotDimFilter){return((NotDimFilter)filter).getField();}else if(filter instanceof BoundDimFilter){final BoundDimFilter negated=Bounds.not((BoundDimFilter)filter);return negated!=null ? negated : new NotDimFilter(filter);}else{return new NotDimFilter(filter);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static long gzip(final ByteSource in,final ByteSink out,Predicate<Throwable>shouldRetry){return StreamUtils.retryCopy(in,new ByteSink(){@Override public OutputStream openStream()throws IOException{return new GZIPOutputStream(out.openStream());}},shouldRetry,DEFAULT_RETRY_COUNT);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void notifyOverrides(){notifyListener.doOverrideIfNecessary();}"
  },
  {
    "code_smells": [],
    "source_code": "private static boolean isMulticastAddress(String ip){int i=ip.indexOf('.');if(i>0){String prefix=ip.substring(0,i);if(StringUtils.isInteger(prefix)){int p=Integer.parseInt(prefix);return p>=224 && p<=239;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Deprecated public void reset(org.apache.dubbo.common.Parameters parameters){reset(getUrl().addParameters(parameters.getParameters()));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean isDone(){return super.isDone();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void unexport(){super.unexport();exporterMap.remove(key);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "final public void DynamicExpression()throws ParseException{AstDynamicExpression jjtn000=new AstDynamicExpression(JJTDYNAMICEXPRESSION);boolean jjtc000=true;jjtree.openNodeScope(jjtn000);try{jj_consume_token(START_DYNAMIC_EXPRESSION);Expression();jj_consume_token(RBRACE);}catch(Throwable jjte000){if(jjtc000){jjtree.clearNodeScope(jjtn000);jjtc000=false;}else{jjtree.popNode();}if(jjte000 instanceof RuntimeException){{if(true)throw(RuntimeException)jjte000;}}if(jjte000 instanceof ParseException){{if(true)throw(ParseException)jjte000;}}{if(true)throw(Error)jjte000;}}finally{if(jjtc000){jjtree.closeNodeScope(jjtn000,true);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public OptionEntry(Object value,String text){this.value=value;this.text=text;}"
  },
  {
    "code_smells": [],
    "source_code": "private void initWS(){EmployeeService impl=new EmployeeServiceImpl(db,conn);svrFactory=new JaxWsServerFactoryBean();svrFactory.setServiceClass(EmployeeService.class);svrFactory.setAddress(serviceAddress);svrFactory.setServiceBean(impl);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void warn(String msg,Object...params){if(LOG_LEVEL>=LogService.LOG_WARNING){log(LogService.LOG_WARNING,params.length>0 ? String.format(msg,params): msg);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void addBundleListener(BundleListener l){checkValidity();Object sm=System.getSecurityManager();if(sm!=null){if(l instanceof SynchronousBundleListener){((SecurityManager)sm).checkPermission(new AdminPermission(m_bundle,AdminPermission.LISTENER));}}m_felix.addBundleListener(m_bundle,l);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public synchronized void start(BundleContext context)throws Exception{PermissionAdminImpl pai=null;SecureAction action=new SecureAction();Permissions permissions=new Permissions(context,action);File tmp=context.getDataFile(\"security\"+File.separator+\"tmp\");if((tmp==null)||(!tmp.isDirectory()&& !tmp.mkdirs())){throw new IOException(\"Can't create tmp dir.\");}File[]old=tmp.listFiles();if(old!=null){for(int i=0;i<old.length;i++){old[i].delete();}}if(\"TRUE\".equalsIgnoreCase(getProperty(context,SecurityConstants.ENABLE_PERMISSIONADMIN_PROP,SecurityConstants.ENABLE_PERMISSIONADMIN_VALUE))){File cache=context.getDataFile(\"security\"+File.separator+\"pa.txt\");if((cache==null)||(!cache.isFile()&& !cache.createNewFile())){throw new IOException(\"Can't create cache file\");}pai=new PermissionAdminImpl(permissions,new PropertiesCache(cache,tmp,action));}ConditionalPermissionAdminImpl cpai=null;if(\"TRUE\".equalsIgnoreCase(getProperty(context,SecurityConstants.ENABLE_CONDPERMADMIN_PROP,SecurityConstants.ENABLE_CONDPERMADMIN_VALUE))){File cpaCache=context.getDataFile(\"security\"+File.separator+\"cpa.txt\");if((cpaCache==null)||(!cpaCache.isFile()&& !cpaCache.createNewFile())){throw new IOException(\"Can't create cache file\");}LocalPermissions localPermissions=new LocalPermissions(permissions);cpai=new ConditionalPermissionAdminImpl(permissions,new Conditions(action),localPermissions,new PropertiesCache(cpaCache,tmp,action),pai);}if((pai!=null)||(cpai!=null)){String crlList=getProperty(context,SecurityConstants.CRL_FILE_PROP,SecurityConstants.CRL_FILE_VALUE);String storeList=getProperty(context,SecurityConstants.KEYSTORE_FILE_PROP,SecurityConstants.KEYSTORE_FILE_VALUE);String passwdList=getProperty(context,SecurityConstants.KEYSTORE_PASS_PROP,SecurityConstants.KEYSTORE_PASS_VALUE);String typeList=getProperty(context,SecurityConstants.KEYSTORE_TYPE_PROP,SecurityConstants.KEYSTORE_TYPE_VALUE);String osgi_keystores=getProperty(context,Constants.FRAMEWORK_TRUST_REPOSITORIES,null);if(osgi_keystores!=null){StringTokenizer tok=new StringTokenizer(osgi_keystores,File.pathSeparator);if(storeList.length()==0){storeList+=\"file:\"+tok.nextToken();passwdList+=\" \";typeList+=\"JKS\";}while(tok.hasMoreTokens()){storeList+=\"|file:\"+tok.nextToken();passwdList+=\"| \";typeList+=\"|JKS\";}}StringTokenizer storeTok=new StringTokenizer(storeList,\"|\");StringTokenizer passwdTok=new StringTokenizer(passwdList,\"|\");StringTokenizer typeTok=new StringTokenizer(typeList,\"|\");if((storeTok.countTokens()!=typeTok.countTokens())||(passwdTok.countTokens()!=storeTok.countTokens())){throw new BundleException(\"Each CACerts keystore must have one type and one passwd entry and vice versa.\");}SecurityProvider provider=new SecurityProviderImpl(crlList,typeList,passwdList,storeList,pai,cpai,action,((Felix)context.getBundle(0)).getLogger());((Felix)context.getBundle(0)).setSecurityProvider(provider);}if(pai!=null){context.registerService(PermissionAdmin.class.getName(),pai,null);}if(cpai!=null){context.registerService(ConditionalPermissionAdmin.class.getName(),cpai,null);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private synchronized Map getResourceBundleEntries(final Bundle bundle){String file=(String)bundle.getHeaders().get(Constants.BUNDLE_LOCALIZATION);if(file==null){file=Constants.BUNDLE_LOCALIZATION_DEFAULT_BASENAME;}if(file.startsWith(\"/\")){file=file.substring(1);}int slash=file.lastIndexOf('/');String fileName=file.substring(slash+1);String path=(slash<=0)? \"/\" : file.substring(0,slash);HashMap resourceBundleEntries=new HashMap();Enumeration locales=bundle.findEntries(path,fileName+\"*.properties\",false);if(locales!=null){while(locales.hasMoreElements()){URL entry=(URL)locales.nextElement();String entryPath=entry.getPath();final int start=entryPath.lastIndexOf('/')+1+fileName.length();final int end=entryPath.length()-11;entryPath=entryPath.substring(start,end);if(entryPath.length()==0){entryPath=\"_\"+DEFAULT_LOCALE;}if(!resourceBundleEntries.containsKey(entryPath)){resourceBundleEntries.put(entryPath,entry);}}}return resourceBundleEntries;}"
  },
  {
    "code_smells": [],
    "source_code": "public AnnotationRecorder(){super(Opcodes.ASM5);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static byte[]encodeBase64(byte[]binaryData,boolean isChunked){int lengthDataBits=binaryData.length*EIGHTBIT;int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;int numberTriplets=lengthDataBits/TWENTYFOURBITGROUP;byte[]encodedData=null;int encodedDataLength=0;int nbrChunks=0;if(fewerThan24bits!=0){encodedDataLength=(numberTriplets+1)*4;}else{encodedDataLength=numberTriplets*4;}if(isChunked){nbrChunks=(CHUNK_SEPARATOR.length==0 ? 0 :(int)Math.ceil((float)encodedDataLength/CHUNK_SIZE));encodedDataLength+=nbrChunks*CHUNK_SEPARATOR.length;}encodedData=new byte[encodedDataLength];byte k=0,l=0,b1=0,b2=0,b3=0;int encodedIndex=0;int dataIndex=0;int i=0;int nextSeparatorIndex=CHUNK_SIZE;int chunksSoFar=0;for(i=0;i<numberTriplets;i++){dataIndex=i*3;b1=binaryData[dataIndex];b2=binaryData[dataIndex+1];b3=binaryData[dataIndex+2];l=(byte)(b2 & 0x0f);k=(byte)(b1 & 0x03);byte val1=((b1 & SIGN)==0)?(byte)(b1>>2):(byte)((b1)>>2 ^ 0xc0);byte val2=((b2 & SIGN)==0)?(byte)(b2>>4):(byte)((b2)>>4 ^ 0xf0);byte val3=((b3 & SIGN)==0)?(byte)(b3>>6):(byte)((b3)>>6 ^ 0xfc);encodedData[encodedIndex]=lookUpBase64Alphabet[val1];encodedData[encodedIndex+1]=lookUpBase64Alphabet[val2 |(k<<4)];encodedData[encodedIndex+2]=lookUpBase64Alphabet[(l<<2)| val3];encodedData[encodedIndex+3]=lookUpBase64Alphabet[b3 & 0x3f];encodedIndex+=4;if(isChunked){if(encodedIndex==nextSeparatorIndex){System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedIndex,CHUNK_SEPARATOR.length);chunksSoFar++;nextSeparatorIndex=(CHUNK_SIZE*(chunksSoFar+1))+(chunksSoFar*CHUNK_SEPARATOR.length);encodedIndex+=CHUNK_SEPARATOR.length;}}}dataIndex=i*3;if(fewerThan24bits==EIGHTBIT){b1=binaryData[dataIndex];k=(byte)(b1 & 0x03);byte val1=((b1 & SIGN)==0)?(byte)(b1>>2):(byte)((b1)>>2 ^ 0xc0);encodedData[encodedIndex]=lookUpBase64Alphabet[val1];encodedData[encodedIndex+1]=lookUpBase64Alphabet[k<<4];encodedData[encodedIndex+2]=PAD;encodedData[encodedIndex+3]=PAD;}else if(fewerThan24bits==SIXTEENBIT){b1=binaryData[dataIndex];b2=binaryData[dataIndex+1];l=(byte)(b2 & 0x0f);k=(byte)(b1 & 0x03);byte val1=((b1 & SIGN)==0)?(byte)(b1>>2):(byte)((b1)>>2 ^ 0xc0);byte val2=((b2 & SIGN)==0)?(byte)(b2>>4):(byte)((b2)>>4 ^ 0xf0);encodedData[encodedIndex]=lookUpBase64Alphabet[val1];encodedData[encodedIndex+1]=lookUpBase64Alphabet[val2 |(k<<4)];encodedData[encodedIndex+2]=lookUpBase64Alphabet[l<<2];encodedData[encodedIndex+3]=PAD;}if(isChunked){if(chunksSoFar<nbrChunks){System.arraycopy(CHUNK_SEPARATOR,0,encodedData,encodedDataLength-CHUNK_SEPARATOR.length,CHUNK_SEPARATOR.length);}}return encodedData;}"
  },
  {
    "code_smells": [],
    "source_code": "public void put(String sid,UPnPEventListener listener){if(!sidListener.containsKey(sid)){Vector vec=new Vector();vec.add(listener);sidListener.put(sid,vec);}else{Vector vec=(Vector)sidListener.get(sid);if(!vec.contains(listener)){vec.add(listener);}}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private void writeJSON(final Writer pw,final ServiceReference service,final boolean fullDetails,final Locale locale,final String filter)throws IOException{final ServiceReference[]allServices=this.getServices(filter);final String statusLine=getStatusLine(allServices);final ServiceReference[]services=(service!=null)? new ServiceReference[]{service}: allServices;final JSONWriter jw=new JSONWriter(pw);jw.object();jw.key(\"status\");jw.value(statusLine);jw.key(\"serviceCount\");jw.value(allServices.length);jw.key(\"data\");jw.array();for(int i=0;i<services.length;i++){serviceInfo(jw,services[i],fullDetails || service!=null,locale);}jw.endArray();jw.endObject();}"
  },
  {
    "code_smells": [],
    "source_code": "private final boolean sameDevice(String udn,String urn){String _udn=this.udn;String _urn=this.urn;if(_udn==null || _urn==null)return false;return _udn.equals(udn)&& _urn.equals(urn);}"
  },
  {
    "code_smells": [],
    "source_code": "private IdentificationCardScan createScan(final String customerIdentifier,final String cardNumber)throws Exception{final IdentificationCardScan scan=ScanGenerator.createRandomScan(null);this.postIdentificationCardScan(customerIdentifier,cardNumber,scan);return scan;}"
  },
  {
    "code_smells": [],
    "source_code": "@Permittable(value=AcceptedTokenType.TENANT,groupId=PermittableGroupIds.IDENTIFICATIONS)@RequestMapping(value=\"/customers/{identifier}/identifications\",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE,consumes=MediaType.APPLICATION_JSON_VALUE)@ResponseBody public ResponseEntity<Void>createIdentificationCard(@PathVariable(\"identifier\")final String identifier,@RequestBody @Valid final IdentificationCard identificationCard){if(this.customerService.customerExists(identifier)){if(this.customerService.identificationCardExists(identificationCard.getNumber())){throw ServiceException.conflict(\"IdentificationCard{0}already exists.\",identificationCard.getNumber());}this.commandGateway.process(new CreateIdentificationCardCommand(identifier,identificationCard));}else{throw ServiceException.notFound(\"Customer{0}not found.\",identifier);}return ResponseEntity.accepted().build();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void populate(Workbook workbook,String dateFormat){Sheet savingsTransactionSheet=workbook.createSheet(TemplatePopulateImportConstants.SAVINGS_TRANSACTION_SHEET_NAME);setLayout(savingsTransactionSheet);officeSheetPopulator.populate(workbook,dateFormat);clientSheetPopulator.populate(workbook,dateFormat);extrasSheetPopulator.populate(workbook,dateFormat);populateSavingsTable(savingsTransactionSheet,dateFormat);setRules(savingsTransactionSheet,dateFormat);setDefaults(savingsTransactionSheet);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void stopScheduler(final String name){final Scheduler scheduler=this.schedulers.remove(name);try{scheduler.shutdown();}catch(final SchedulerException e){logger.error(e.getMessage(),e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public LoanRescheduleRequestRowMapper(){final StringBuilder sqlBuilder=new StringBuilder(200);sqlBuilder.append(\"lr.id as id,lr.loan_id as loanId,lr.status_enum as statusEnum,\");sqlBuilder.append(\"mc.display_name as clientName,\");sqlBuilder.append(\"mc.id as clientId,\");sqlBuilder.append(\"ml.account_no as loanAccountNumber,\");sqlBuilder.append(\"lr.reschedule_from_installment as rescheduleFromInstallment,\");sqlBuilder.append(\"lr.reschedule_from_date as rescheduleFromDate,\");sqlBuilder.append(\"lr.recalculate_interest as recalculateInterest,\");sqlBuilder.append(\"lr.reschedule_reason_cv_id as rescheduleReasonCvId,\");sqlBuilder.append(\"cv.code_value as rescheduleReasonCvValue,\");sqlBuilder.append(\"lr.reschedule_reason_comment as rescheduleReasonComment,\");sqlBuilder.append(\"lr.submitted_on_date as submittedOnDate,\");sqlBuilder.append(\"sbu.username as submittedByUsername,\");sqlBuilder.append(\"sbu.firstname as submittedByFirstname,\");sqlBuilder.append(\"sbu.lastname as submittedByLastname,\");sqlBuilder.append(\"lr.approved_on_date as approvedOnDate,\");sqlBuilder.append(\"abu.username as approvedByUsername,\");sqlBuilder.append(\"abu.firstname as approvedByFirstname,\");sqlBuilder.append(\"abu.lastname as approvedByLastname,\");sqlBuilder.append(\"lr.rejected_on_date as rejectedOnDate,\");sqlBuilder.append(\"rbu.username as rejectedByUsername,\");sqlBuilder.append(\"rbu.firstname as rejectedByFirstname,\");sqlBuilder.append(\"rbu.lastname as rejectedByLastname,\");sqlBuilder.append(\"tv.id as termId,\");sqlBuilder.append(\"tv.term_type as termType,\");sqlBuilder.append(\"tv.applicable_date as variationApplicableFrom,\");sqlBuilder.append(\"tv.decimal_value as decimalValue,\");sqlBuilder.append(\"tv.date_value as dateValue,\");sqlBuilder.append(\"tv.is_specific_to_installment as isSpecificToInstallment \");sqlBuilder.append(\"from \"+loanRescheduleRequestTableName()+\" lr \");sqlBuilder.append(\"left join m_code_value cv on cv.id=lr.reschedule_reason_cv_id \");sqlBuilder.append(\"left join m_appuser sbu on sbu.id=lr.submitted_by_user_id \");sqlBuilder.append(\"left join m_appuser abu on abu.id=lr.approved_by_user_id \");sqlBuilder.append(\"left join m_appuser rbu on rbu.id=lr.rejected_by_user_id \");sqlBuilder.append(\"left join m_loan ml on ml.id=lr.loan_id \");sqlBuilder.append(\"left join m_client mc on mc.id=ml.client_id \");sqlBuilder.append(\"join m_loan_reschedule_request_term_variations_mapping rrtvm on lr.id=rrtvm.loan_reschedule_request_id \");sqlBuilder.append(\"join m_loan_term_variations tv on tv.id=rrtvm.loan_term_variations_id and tv.parent_id is null\");this.schema=sqlBuilder.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@GET @Path(\"downloadtemplate\")@Produces(\"application/vnd.ms-excel\")public Response getSavingsTemplate(@QueryParam(\"officeId\")final Long officeId,@QueryParam(\"staffId\")final Long staffId,@QueryParam(\"dateFormat\")final String dateFormat){return bulkImportWorkbookPopulatorService.getTemplate(GlobalEntityType.SAVINGS_ACCOUNT.toString(),officeId,staffId,dateFormat);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void validateDepositDetailForUpdate(final JsonElement element,final FromJsonHelper fromApiJsonHelper,final DataValidatorBuilder baseDataValidator){if(fromApiJsonHelper.parameterExists(nameParamName,element)){final String name=fromApiJsonHelper.extractStringNamed(nameParamName,element);baseDataValidator.reset().parameter(nameParamName).value(name).notBlank().notExceedingLengthOf(100);}if(fromApiJsonHelper.parameterExists(shortNameParamName,element)){final String shortName=fromApiJsonHelper.extractStringNamed(shortNameParamName,element);baseDataValidator.reset().parameter(shortNameParamName).value(shortName).notBlank().notExceedingLengthOf(4);}if(fromApiJsonHelper.parameterExists(descriptionParamName,element)){final String description=fromApiJsonHelper.extractStringNamed(descriptionParamName,element);baseDataValidator.reset().parameter(descriptionParamName).value(description).notBlank().notExceedingLengthOf(500);}if(fromApiJsonHelper.parameterExists(currencyCodeParamName,element)){final String currencyCode=fromApiJsonHelper.extractStringNamed(currencyCodeParamName,element);baseDataValidator.reset().parameter(currencyCodeParamName).value(currencyCode).notBlank();}if(fromApiJsonHelper.parameterExists(digitsAfterDecimalParamName,element)){final Integer digitsAfterDecimal=fromApiJsonHelper.extractIntegerSansLocaleNamed(digitsAfterDecimalParamName,element);baseDataValidator.reset().parameter(digitsAfterDecimalParamName).value(digitsAfterDecimal).notNull().inMinMaxRange(0,6);}if(fromApiJsonHelper.parameterExists(inMultiplesOfParamName,element)){final Integer inMultiplesOf=fromApiJsonHelper.extractIntegerNamed(inMultiplesOfParamName,element,Locale.getDefault());baseDataValidator.reset().parameter(inMultiplesOfParamName).value(inMultiplesOf).ignoreIfNull().integerZeroOrGreater();}if(fromApiJsonHelper.parameterExists(nominalAnnualInterestRateParamName,element)){final BigDecimal interestRate=fromApiJsonHelper.extractBigDecimalWithLocaleNamed(nominalAnnualInterestRateParamName,element);baseDataValidator.reset().parameter(nominalAnnualInterestRateParamName).value(interestRate).notNull().zeroOrPositiveAmount();}if(fromApiJsonHelper.parameterExists(interestCompoundingPeriodTypeParamName,element)){final Integer interestCompoundingPeriodType=fromApiJsonHelper.extractIntegerSansLocaleNamed(interestCompoundingPeriodTypeParamName,element);baseDataValidator.reset().parameter(interestCompoundingPeriodTypeParamName).value(interestCompoundingPeriodType).notNull().isOneOfTheseValues(SavingsCompoundingInterestPeriodType.integerValues());}if(fromApiJsonHelper.parameterExists(interestCalculationTypeParamName,element)){final Integer interestCalculationType=fromApiJsonHelper.extractIntegerSansLocaleNamed(interestCalculationTypeParamName,element);baseDataValidator.reset().parameter(interestCalculationTypeParamName).value(interestCalculationType).notNull().inMinMaxRange(1,2);}if(fromApiJsonHelper.parameterExists(interestCalculationDaysInYearTypeParamName,element)){final Integer interestCalculationDaysInYearType=fromApiJsonHelper.extractIntegerSansLocaleNamed(interestCalculationDaysInYearTypeParamName,element);baseDataValidator.reset().parameter(interestCalculationDaysInYearTypeParamName).value(interestCalculationDaysInYearType).notNull().isOneOfTheseValues(360,365);}if(fromApiJsonHelper.parameterExists(minRequiredOpeningBalanceParamName,element)){final BigDecimal minOpeningBalance=fromApiJsonHelper.extractBigDecimalWithLocaleNamed(minRequiredOpeningBalanceParamName,element);baseDataValidator.reset().parameter(minRequiredOpeningBalanceParamName).value(minOpeningBalance).ignoreIfNull().zeroOrPositiveAmount();}if(fromApiJsonHelper.parameterExists(lockinPeriodFrequencyParamName,element)){final Integer lockinPeriodFrequency=fromApiJsonHelper.extractIntegerWithLocaleNamed(lockinPeriodFrequencyParamName,element);baseDataValidator.reset().parameter(lockinPeriodFrequencyParamName).value(lockinPeriodFrequency).ignoreIfNull().integerZeroOrGreater();}if(fromApiJsonHelper.parameterExists(lockinPeriodFrequencyTypeParamName,element)){final Integer lockinPeriodFrequencyType=fromApiJsonHelper.extractIntegerSansLocaleNamed(lockinPeriodFrequencyTypeParamName,element);baseDataValidator.reset().parameter(lockinPeriodFrequencyTypeParamName).value(lockinPeriodFrequencyType).inMinMaxRange(0,3);}if(fromApiJsonHelper.parameterExists(withdrawalFeeForTransfersParamName,element)){final Boolean isWithdrawalFeeApplicableForTransfers=fromApiJsonHelper.extractBooleanNamed(withdrawalFeeForTransfersParamName,element);baseDataValidator.reset().parameter(withdrawalFeeForTransfersParamName).value(isWithdrawalFeeApplicableForTransfers).ignoreIfNull().validateForBooleanValue();}if(fromApiJsonHelper.parameterExists(feeAmountParamName,element)){final BigDecimal annualFeeAmount=fromApiJsonHelper.extractBigDecimalWithLocaleNamed(feeAmountParamName,element);baseDataValidator.reset().parameter(feeAmountParamName).value(annualFeeAmount).ignoreIfNull().zeroOrPositiveAmount();}if(fromApiJsonHelper.parameterExists(feeOnMonthDayParamName,element)){final MonthDay monthDayOfAnnualFee=fromApiJsonHelper.extractMonthDayNamed(feeOnMonthDayParamName,element);baseDataValidator.reset().parameter(feeOnMonthDayParamName).value(monthDayOfAnnualFee).ignoreIfNull();}if(this.fromApiJsonHelper.parameterExists(minBalanceForInterestCalculationParamName,element)){final BigDecimal minBalanceForInterestCalculation=this.fromApiJsonHelper.extractBigDecimalWithLocaleNamed(minBalanceForInterestCalculationParamName,element);baseDataValidator.reset().parameter(minBalanceForInterestCalculationParamName).value(minBalanceForInterestCalculation).ignoreIfNull().zeroOrPositiveAmount();}final Long savingsControlAccountId=fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue(),element);baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_CONTROL.getValue()).value(savingsControlAccountId).ignoreIfNull().integerGreaterThanZero();final Long savingsReferenceAccountId=fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue(),element);baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.SAVINGS_REFERENCE.getValue()).value(savingsReferenceAccountId).ignoreIfNull().integerGreaterThanZero();final Long transfersInSuspenseAccountId=fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue(),element);baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.TRANSFERS_SUSPENSE.getValue()).value(transfersInSuspenseAccountId).ignoreIfNull().integerGreaterThanZero();final Long interestOnSavingsAccountId=fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue(),element);baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INTEREST_ON_SAVINGS.getValue()).value(interestOnSavingsAccountId).ignoreIfNull().integerGreaterThanZero();final Long incomeFromFeeId=fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue(),element);baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_FEES.getValue()).value(incomeFromFeeId).ignoreIfNull().integerGreaterThanZero();final Long incomeFromPenaltyId=fromApiJsonHelper.extractLongNamed(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue(),element);baseDataValidator.reset().parameter(SAVINGS_PRODUCT_ACCOUNTING_PARAMS.INCOME_FROM_PENALTIES.getValue()).value(incomeFromPenaltyId).ignoreIfNull().integerGreaterThanZero();validatePaymentChannelFundSourceMappings(fromApiJsonHelper,baseDataValidator,element);validateChargeToIncomeAccountMappings(fromApiJsonHelper,baseDataValidator,element);validateTaxWithHoldingParams(baseDataValidator,element,false);}"
  },
  {
    "code_smells": [],
    "source_code": "private Money handleInstallmentTransaction(final RecurringDepositScheduleInstallment currentInstallment,final Money transactionAmountUnprocessed,final LocalDate transactionDate){Money transactionAmountRemaining=transactionAmountUnprocessed;Money depositAmountPortion=Money.zero(transactionAmountRemaining.getCurrency());depositAmountPortion=currentInstallment.payInstallment(transactionDate,transactionAmountRemaining);transactionAmountRemaining=transactionAmountRemaining.minus(depositAmountPortion);return transactionAmountRemaining;}"
  },
  {
    "code_smells": [],
    "source_code": "@Transactional @Override public CommandProcessingResult processCommand(final JsonCommand command){return this.depositAccountWritePlatformService.depositToRDAccount(command.entityId(),command);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void validateSelfUserAccountMapping(Long accountId){if(!this.appuserSavingsMapperReadService.isSavingsMappedToUser(accountId,this.context.getAuthenticatedUserIfPresent().getId())){throw new SavingsAccountNotFoundException(accountId);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Autowired public CloseShareAccountCommandHandler(final ShareAccountWritePlatformService shareAccountWritePlatformService){this.shareAccountWritePlatformService=shareAccountWritePlatformService;}"
  },
  {
    "code_smells": [],
    "source_code": "@Transactional @Override public CommandProcessingResult processCommand(JsonCommand jsonCommand){return this.shareProductWritePlatformService.deleteShareProductDividend(jsonCommand.entityId());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void writeSnapshot(DataOutputView out)throws IOException{throw new UnsupportedOperationException(\"This is a dummy config snapshot used only for backwards compatibility.\");}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")@Override @PublicEvolving public Class<T>getTypeClass(){return arrayType;}"
  },
  {
    "code_smells": [],
    "source_code": "@Nonnull private E deserializeElement(@Nonnull byte[]bytes){try{final int numPrefixBytes=groupPrefixBytes.length;inputView.setBuffer(bytes,numPrefixBytes,bytes.length-numPrefixBytes);return byteOrderProducingSerializer.deserialize(inputView);}catch(IOException e){throw new FlinkRuntimeException(\"Error while deserializing the element.\",e);}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void write(DataOutputView out)throws IOException{out.writeInt(position);for(int i=0;i<position;i++){out.writeDouble(data[i]);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){Preconditions.checkNotNull(type,\"TypeInformation type class is required\");return type.hashCode();}"
  },
  {
    "code_smells": [],
    "source_code": "public SlotID(ResourceID resourceId,int slotNumber){checkArgument(0<=slotNumber,\"Slot number must be positive.\");this.resourceId=checkNotNull(resourceId,\"ResourceID must not be null\");this.slotNumber=slotNumber;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<T>T invokeAny(@Nonnull Collection<? extends Callable<T>>tasks,long timeout,@Nonnull TimeUnit unit)throws ExecutionException,TimeoutException{long end=System.currentTimeMillis()+unit.toMillis(timeout);Exception exception=null;Iterator<? extends Callable<T>>iterator=tasks.iterator();while(end>System.currentTimeMillis()&& iterator.hasNext()){Callable<T>callable=iterator.next();try{return callable.call();}catch(Exception e){exception=e;}}if(iterator.hasNext()){throw new TimeoutException(\"Could not finish execution of tasks within time.\");}else{throw new ExecutionException(\"No tasks finished successfully.\",exception);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return String.format(\"cores=%d,physMem=%d,heap=%d,managed=%d\",numberOfCPUCores,sizeOfPhysicalMemory,sizeOfJvmHeap,sizeOfManagedMemory);}"
  },
  {
    "code_smells": [],
    "source_code": "@Nonnull @Override public TypeSerializerSchemaCompatibility<T>setPreviousSerializerSnapshotForRestoredState(TypeSerializerSnapshot<T>previousSerializerSnapshot){throw new UnsupportedOperationException(\"The snapshot of the state's previous serializer has already been set;cannot reset.\");}"
  },
  {
    "code_smells": [],
    "source_code": "private void tryConnectToResourceManager(){if(resourceManagerAddress!=null){connectToResourceManager();}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void configure(Context context){this.headerName=context.getString(CONFIG_MULTIPLEX_HEADER_NAME,DEFAULT_MULTIPLEX_HEADER);Map<String,Channel>channelNameMap=getChannelNameMap();defaultChannels=getChannelListFromNames(context.getString(CONFIG_DEFAULT_CHANNEL),channelNameMap);Map<String,String>mapConfig=context.getSubProperties(CONFIG_PREFIX_MAPPING);channelMapping=new HashMap<String,List<Channel>>();for(String headerValue : mapConfig.keySet()){List<Channel>configuredChannels=getChannelListFromNames(mapConfig.get(headerValue),channelNameMap);if(configuredChannels.size()==0){throw new FlumeException(\"No channel configured for when \"+\"header value is: \"+headerValue);}if(channelMapping.put(headerValue,configuredChannels)!=null){throw new FlumeException(\"Selector channel configured twice\");}}Map<String,String>optionalChannelsMapping=context.getSubProperties(CONFIG_PREFIX_OPTIONAL+\".\");optionalChannels=new HashMap<String,List<Channel>>();for(String hdr : optionalChannelsMapping.keySet()){List<Channel>confChannels=getChannelListFromNames(optionalChannelsMapping.get(hdr),channelNameMap);if(confChannels.isEmpty()){confChannels=EMPTY_LIST;}List<Channel>reqdChannels=channelMapping.get(hdr);if(reqdChannels==null || reqdChannels.isEmpty()){reqdChannels=defaultChannels;}for(Channel c : reqdChannels){if(confChannels.contains(c)){confChannels.remove(c);}}if(optionalChannels.put(hdr,confChannels)!=null){throw new FlumeException(\"Selector channel configured twice\");}}}"
  },
  {
    "code_smells": [],
    "source_code": "protected MetaDataReader(File logFile,int logFileID)throws IOException{this.logFile=logFile;metaDataFile=Serialization.getMetaDataFile(logFile);this.logFileID=logFileID;}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")public SinkProcessorConfiguration getConfiguration(String name)throws ConfigurationException{Class<? extends SinkProcessorConfiguration>clazz;SinkProcessorConfiguration instance=null;try{if(processorClassName!=null){clazz=(Class<? extends SinkProcessorConfiguration>)Class.forName(processorClassName);instance=clazz.getConstructor(String.class).newInstance(name);}else{return new SinkProcessorConfiguration(name);}}catch(ClassNotFoundException e){instance=new SinkProcessorConfiguration(name);instance.setNotFoundConfigClass();}catch(Exception e){throw new ConfigurationException(\"Could not instantiate configuration!\",e);}return instance;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override boolean isValid(LifecycleAware object,Status status){return true;}"
  },
  {
    "code_smells": [],
    "source_code": "private Object getKey(Event e){String timestamp=e.getHeaders().get(\"timestamp\");long eventStamp;if(timestamp==null){eventStamp=System.currentTimeMillis();}else{eventStamp=Long.valueOf(timestamp);}return new LongWritable(eventStamp);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void childEvent(CuratorFramework curatorFramework,PathChildrenCacheEvent event)throws Exception{try{if(isConnected()&&(event.getType().equals(PathChildrenCacheEvent.Type.CHILD_ADDED)|| event.getType().equals(PathChildrenCacheEvent.Type.CHILD_REMOVED)|| event.getType().equals(PathChildrenCacheEvent.Type.CHILD_UPDATED))){synchronized(this){Participant participant=leaderLatch.getLeader();if(isLeader(participant)&& !leaderLatch.hasLeadership()){currentLeader=participant;}}}}catch(InterruptedException e){log.warn(\"Oracle leadership watcher has been interrupted unexpectedly\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public int peekUnsignedByte(int offset)throws IOException{int b=peek(offset);if(b<0){throw new EOFException();}return b;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object clone(){AFPData obj=(AFPData)super.clone();obj.filled=this.filled;obj.imageUri=this.imageUri;return obj;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public FOPGVTFontFamily resolve(String familyName){FOPGVTFontFamily fopGVTFontFamily=super.resolve(familyName);if(fopGVTFontFamily!=null && fopGVTFontFamily.deriveFont(1,new HashMap()).getFont().getFontMetrics()instanceof DoubleByteFont){notifyDBFontRejection(fopGVTFontFamily.getFamilyName());fopGVTFontFamily=null;}return fopGVTFontFamily;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void startElement(String uri,String localName,String qName,Attributes attributes)throws SAXException{if(delegate!=null){delegateStack.push(qName);delegate.startElement(uri,localName,qName,attributes);}else if(domImplementation!=null){TransformerHandler handler;try{handler=tFactory.newTransformerHandler();}catch(TransformerConfigurationException e){throw new SAXException(\"Error creating a new TransformerHandler\",e);}Document doc=domImplementation.createDocument(uri,qName,null);doc.removeChild(doc.getDocumentElement());handler.setResult(new DOMResult(doc));Area parent=(Area)areaStack.peek();((ForeignObject)parent).setDocument(doc);domImplementation=null;this.delegate=handler;delegateStack.push(qName);delegate.startDocument();delegate.startElement(uri,localName,qName,attributes);}else{boolean handled=true;if(\"\".equals(uri)){if(localName.equals(\"structureTree\")){delegate=new DefaultHandler();delegateStack.push(qName);delegate.startDocument();delegate.startElement(uri,localName,qName,attributes);}else{handled=startAreaTreeElement(localName,attributes);}}else{ContentHandlerFactoryRegistry registry=userAgent.getContentHandlerFactoryRegistry();ContentHandlerFactory factory=registry.getFactory(uri);if(factory!=null){delegate=factory.createContentHandler();delegateStack.push(qName);delegate.startDocument();delegate.startElement(uri,localName,qName,attributes);}else{handled=false;}}if(!handled){if(uri==null || uri.length()==0){throw new SAXException(\"Unhandled element \"+localName+\" in namespace: \"+uri);}else{log.warn(\"Unhandled element \"+localName+\" in namespace: \"+uri);}}}}"
  },
  {
    "code_smells": [],
    "source_code": "static GlyphSubstitutionSubtable create(String id,int sequence,int flags,int format,GlyphCoverageTable coverage,List entries){if(format==1){return new ReverseChainedSingleSubtableFormat1(id,sequence,flags,format,coverage,entries);}else{throw new UnsupportedOperationException();}}"
  },
  {
    "code_smells": [],
    "source_code": "public int bidiLevelAt(int position)throws IndexOutOfBoundsException{if((position<0)||(position>=length())){throw new IndexOutOfBoundsException();}else if(bidiLevels!=null){return bidiLevels[position];}else{return-1;}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void bind(PropertyList pList)throws FOPException{super.bind(pList);alignmentAdjust=pList.get(PR_ALIGNMENT_ADJUST).getLength();alignmentBaseline=pList.get(PR_ALIGNMENT_BASELINE).getEnum();baselineShift=pList.get(PR_BASELINE_SHIFT).getLength();dominantBaseline=pList.get(PR_DOMINANT_BASELINE).getEnum();leaderAlignment=pList.get(PR_LEADER_ALIGNMENT).getEnum();leaderLength=pList.get(PR_LEADER_LENGTH).getLengthRange();leaderPattern=pList.get(PR_LEADER_PATTERN).getEnum();leaderPatternWidth=pList.get(PR_LEADER_PATTERN_WIDTH).getLength();ruleThickness=getPropertyMakerFor(PR_RULE_THICKNESS).make(pList).getLength();switch(leaderPattern){case EN_SPACE: break;case EN_RULE: ruleStyle=pList.get(PR_RULE_STYLE).getEnum();ruleThickness=pList.get(PR_RULE_THICKNESS).getLength();break;case EN_DOTS: break;case EN_USECONTENT: break;default: throw new RuntimeException(\"Invalid leader pattern: \"+leaderPattern);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public boolean readFont(FontFileReader in,String header,String name)throws IOException{initializeFont(in);if(!checkTTC(header,name)){if(name==null){throw new IllegalArgumentException(\"For TrueType collection you must specify which font \"+\"to select(-ttcname)\");}else{throw new IOException(\"Name does not exist in the TrueType collection: \"+name);}}readDirTabs();readFontHeader();getNumGlyphs();if(log.isDebugEnabled()){log.debug(\"Number of glyphs in font: \"+numberOfGlyphs);}readHorizontalHeader();readHorizontalMetrics();initAnsiWidths();readPostScript();readOS2();determineAscDesc();readName();boolean pcltFound=readPCLT();boolean valid=readCMAP();if(!valid){return false;}createCMaps();updateBBoxAndOffset();if(useKerning){readKerning();}handleCharacterSpacing(in);guessVerticalMetricsFromGlyphBBox();return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public void addChildLMs(List newLMs){if(newLMs==null || newLMs.size()==0){return;}for(LayoutManager newLM :(Iterable<LayoutManager>)newLMs){addChildLM(newLM);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void addLetterAdjust(GlyphMapping wordMapping){int letterSpaceCount=wordMapping.letterSpaceCount;int wordLength=wordMapping.getWordLength();int taAdjust=textArea.getTextLetterSpaceAdjust();for(int i=0,n=wordLength;i<n;i++){int j=letterSpaceAdjustIndex+i;if(j>0){int k=wordMapping.startIndex+i;MinOptMax adj=(k<letterSpaceAdjustArray.length)? letterSpaceAdjustArray[k]: null;letterSpaceAdjust[j]=(adj==null)? 0 : adj.getOpt();}if(letterSpaceCount>0){letterSpaceAdjust[j]+=taAdjust;letterSpaceCount--;}}letterSpaceAdjustIndex+=wordLength;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public float computeTableUnit(PercentBaseContext percentBaseContext,int contentAreaIPD){int sumCols=0;float factors=0;float unit=0;for(Object colWidth1 : colWidths){Length colWidth=(Length)colWidth1;if(colWidth!=null){sumCols+=colWidth.getValue(percentBaseContext);if(colWidth instanceof RelativeNumericProperty){factors+=((RelativeNumericProperty)colWidth).getTableUnits();}else if(colWidth instanceof TableColLength){factors+=((TableColLength)colWidth).getTableUnits();}}}if(factors>0){if(sumCols<contentAreaIPD){unit=(contentAreaIPD-sumCols)/factors;}else{log.warn(\"No space remaining to distribute over columns.\");}}return unit;}"
  },
  {
    "code_smells": [],
    "source_code": "public long outputCrossReferenceObject(OutputStream stream,TrailerDictionary trailerDictionary,int first,int last,int size)throws IOException{assert objects.isEmpty();new CrossReferenceStream(PDFDocument.this,++objectcount,trailerDictionary,position,indirectObjectOffsets,structureTreeObjectStreams.getCompressedObjectReferences()).output(stream);return position;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isCompatible(RenderingContext targetContext,Image image){return(image==null || image instanceof ImageRawJPEG)&& targetContext instanceof PDFRenderingContext;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override protected GraphicsNode createImageGraphicsNode(BridgeContext ctx,Element imageElement,ParsedURL purl){AbstractFOPBridgeContext bridgeCtx=(AbstractFOPBridgeContext)ctx;ImageManager manager=bridgeCtx.getImageManager();ImageSessionContext sessionContext=bridgeCtx.getImageSessionContext();try{ImageInfo info=manager.getImageInfo(purl.toString(),sessionContext);ImageFlavor[]supportedFlavors=getSupportedFlavours();Image image=manager.getImage(info,supportedFlavors,sessionContext);AbstractGraphicsNode specializedNode=null;if(image instanceof ImageXMLDOM){ImageXMLDOM xmlImage=(ImageXMLDOM)image;if(xmlImage.getDocument()instanceof SVGDocument){SVGDocument clonedDoc=(SVGDocument)BatikUtil.cloneSVGDocument(xmlImage.getDocument());return createSVGImageNode(ctx,imageElement,clonedDoc);}else{image=manager.convertImage(xmlImage,new ImageFlavor[]{ImageFlavor.GRAPHICS2D});}}if(image instanceof ImageRawJPEG){specializedNode=createLoaderImageNode(image,ctx,imageElement,purl);}else if(image instanceof ImageRawCCITTFax){specializedNode=createLoaderImageNode(image,ctx,imageElement,purl);}else if(image instanceof ImageGraphics2D){ImageGraphics2D g2dImage=(ImageGraphics2D)image;specializedNode=new Graphics2DNode(g2dImage);}else{ctx.getUserAgent().displayError(new ImageException(\"Cannot convert an image to a usable format: \"+purl));}if(specializedNode!=null){Rectangle2D imgBounds=getImageBounds(ctx,imageElement);Rectangle2D bounds=specializedNode.getPrimitiveBounds();float[]vb=new float[4];vb[0]=0;vb[1]=0;vb[2]=(float)bounds.getWidth();vb[3]=(float)bounds.getHeight();initializeViewport(ctx,imageElement,specializedNode,vb,imgBounds);return specializedNode;}}catch(Exception e){ctx.getUserAgent().displayError(e);}return superCreateGraphicsNode(ctx,imageElement,purl);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private void processEmail(EmailData emailData){if(logger.isTraceEnabled()){logger.trace(\"Entered MailManager:processEmail\");}if(mailHost==null || mailHost.length()==0 || emailData==null || mailToAddresses.length==0){logger.error(\"Required mail server configuration is not specfied.\");if(logger.isDebugEnabled()){logger.debug(\"Exited MailManager:processEmail: Not sending email as conditions not met\");}return;}Session session=Session.getDefaultInstance(getMailHostConfiguration());MimeMessage mimeMessage=new MimeMessage(session);String subject=emailData.subject;String message=emailData.message;String mailToList=getMailToAddressesAsString();try{for(int i=0;i<mailToAddresses.length;i++){mimeMessage.addRecipient(Message.RecipientType.TO,new InternetAddress(mailToAddresses[i]));}if(subject==null){subject=\"Alert from GemFire Admin Agent\";}mimeMessage.setSubject(subject);if(message==null){message=\"\";}mimeMessage.setText(message);Transport.send(mimeMessage);logger.info(\"Email sent to{}.Subject:{},Content:{}\",new Object[]{mailToList,subject,message});}catch(VirtualMachineError err){SystemFailure.initiateFailure(err);throw err;}catch(Throwable ex){SystemFailure.checkFailure();StringBuilder buf=new StringBuilder();buf.append(\"An exception occurred while sending email.\");buf.append(\"Unable to send email.Please check your mail settings and the log file.\");buf.append(\"\\n\\n\").append(String.format(\"Exception message: %s\",ex.getMessage()));buf.append(\"\\n\\n\").append(\"Following email was not delivered:\");buf.append(\"\\n\\t\").append(String.format(\"Mail Host: %s\",mailHost));buf.append(\"\\n\\t\").append(String.format(\"From: %s\",mailFrom));buf.append(\"\\n\\t\").append(String.format(\"To: %s\",mailToList));buf.append(\"\\n\\t\").append(String.format(\"Subject: %s\",subject));buf.append(\"\\n\\t\").append(String.format(\"Content: %s\",message));logger.error(buf.toString(),ex);}if(logger.isTraceEnabled()){logger.trace(\"Exited MailManager:processEmail\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public static DataPolicy fromString(String s){String[]allowedValues=new String[]{\"EMPTY\",\"NORMAL\",\"REPLICATE\",\"PERSISTENT_REPLICATE\",\"PARTITION\",\"PRELOADED\",\"PERSISTENT_PARTITION\"};int valueIndex=-1;for(int i=0;i<allowedValues.length;i++){if(allowedValues[i].equals(s)){valueIndex=i;break;}}if(valueIndex!=-1)return VALUES[valueIndex];return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static EvictionAction parseAction(String s){if(s==null)return NONE;if(s.length()<1)return NONE;for(int i=0;i<stringTable.length;++i){if(s.equals(stringTable[i])){return enumValueTable[i];}}return NONE;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ResumptionAction fromName(String name){if(name==null || name.length()==0){throw new IllegalArgumentException(String.format(\"Invalid ResumptionAction name: %s\",name));}for(int i=0;i<PRIVATE_VALUES.length;i++){if(name.equals(PRIVATE_VALUES[i].name)){return PRIVATE_VALUES[i];}}throw new IllegalArgumentException(String.format(\"Invalid ResumptionAction name: %s\",name));}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected void sendMessage(Connection cnx)throws Exception{if(cnx.getServer().getRequiresCredentials()){getMessage().setMessageHasSecurePartFlag();long userId=-1;if(UserAttributes.userAttributes.get()==null){userId=cnx.getServer().getUserId();}else{Object id=UserAttributes.userAttributes.get().getServerToId().get(cnx.getServer());if(id==null){throw new ServerConnectivityException(\"Connection error while authenticating user\");}userId=(Long)id;}HeapDataOutputStream hdos=new HeapDataOutputStream(Version.CURRENT);try{hdos.writeLong(cnx.getConnectionID());hdos.writeLong(userId);getMessage().setSecurePart(((ConnectionImpl)cnx).encryptBytes(hdos.toByteArray()));}finally{hdos.close();}}getMessage().send(false);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void removeHealthMonitor(InternalDistributedMember owner,int theId){final HealthMonitor hm=getHealthMonitor(owner);if(hm!=null && hm.getId()==theId){hm.stop();this.hmMap.remove(owner);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void rehash(Entry[]oldMap,int newCount,int newCapacity){int oldCapacity=oldMap.length;Entry[]newMap=new Entry[newCapacity];synchronized(rehashLock){for(int i=oldCapacity;i-->0;){for(Entry old=oldMap[i];old!=null;){Entry e=old;old=old.next;if(e.value!=null && e.value instanceof WeakReference){WeakReference r=(WeakReference)e.value;if(r.get()==null){newCount--;continue;}}int index=Math.abs(e.key)% newCapacity;e.next=newMap[index];newMap[index]=e;}}threshold=(int)(newCapacity*loadFactor);count=newCount;table=newMap;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void removeAsyncEventQueueId(String asyncEventQueueId){super.removeAsyncEventQueueId(asyncEventQueueId);new UpdateAttributesProcessor(this).distribute();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "long recoverDrf(OplogEntryIdSet deletedIds,boolean alreadyRecoveredOnce,boolean latestOplog){File drfFile=this.drf.f;if(drfFile==null){this.haveRecoveredDrf=true;return 0L;}lockCompactor();try{if(this.haveRecoveredDrf && !getHasDeletes())return 0L;if(!this.haveRecoveredDrf){this.haveRecoveredDrf=true;}logger.info(\"Recovering{}{}for disk store{}.\",new Object[]{toString(),drfFile.getAbsolutePath(),getParent().getName()});this.recoverDelEntryId=DiskStoreImpl.INVALID_ID;boolean readLastRecord=true;CountingDataInputStream dis=null;try{int recordCount=0;boolean foundDiskStoreRecord=false;FileInputStream fis=null;try{fis=new FileInputStream(drfFile);dis=new CountingDataInputStream(new BufferedInputStream(fis,32*1024),drfFile.length());boolean endOfLog=false;while(!endOfLog){if(dis.atEndOfFile()){endOfLog=true;break;}readLastRecord=false;byte opCode=dis.readByte();if(logger.isTraceEnabled(LogMarker.PERSIST_RECOVERY_VERBOSE)){logger.trace(LogMarker.PERSIST_RECOVERY_VERBOSE,\"drf byte={}location={}\",opCode,Long.toHexString(dis.getCount()));}switch(opCode){case OPLOG_EOF_ID: dis.decrementCount();endOfLog=true;break;case OPLOG_DEL_ENTRY_1ID: case OPLOG_DEL_ENTRY_2ID: case OPLOG_DEL_ENTRY_3ID: case OPLOG_DEL_ENTRY_4ID: case OPLOG_DEL_ENTRY_5ID: case OPLOG_DEL_ENTRY_6ID: case OPLOG_DEL_ENTRY_7ID: case OPLOG_DEL_ENTRY_8ID: readDelEntry(dis,opCode,deletedIds,parent);recordCount++;break;case OPLOG_DISK_STORE_ID: readDiskStoreRecord(dis,this.drf.f);foundDiskStoreRecord=true;recordCount++;break;case OPLOG_MAGIC_SEQ_ID: readOplogMagicSeqRecord(dis,this.drf.f,OPLOG_TYPE.DRF);break;case OPLOG_GEMFIRE_VERSION: readGemfireVersionRecord(dis,this.drf.f);recordCount++;break;case OPLOG_RVV: long idx=dis.getCount();readRVVRecord(dis,this.drf.f,true,latestOplog);recordCount++;break;default: throw new DiskAccessException(String.format(\"Unknown opCode %s found in disk operation log.\",opCode),getParent());}readLastRecord=true;}}finally{if(dis!=null){dis.close();}if(fis!=null){fis.close();}}if(!foundDiskStoreRecord && recordCount>0){throw new DiskAccessException(\"The oplog file \\\"\"+this.drf.f+\"\\\" does not belong to the init file \\\"\"+getParent().getInitFile()+\"\\\".Drf did not contain a disk store id.\",getParent());}}catch(EOFException ignore){}catch(IOException ex){getParent().getCancelCriterion().checkCancelInProgress(ex);throw new DiskAccessException(String.format(\"Failed to read file during recovery from %s\",drfFile.getPath()),ex,getParent());}catch(CancelException e){if(logger.isDebugEnabled()){logger.debug(\"Oplog::readOplog:Error in recovery as Cache was closed\",e);}}catch(RegionDestroyedException e){if(logger.isDebugEnabled()){logger.debug(\"Oplog::readOplog:Error in recovery as Region was destroyed\",e);}}long byteCount=0;if(!readLastRecord){this.crashed=true;if(dis!=null){byteCount=dis.getFileLength();}}else{if(dis!=null){byteCount=dis.getCount();}}if(!alreadyRecoveredOnce){setRecoveredDrfSize(byteCount);this.dirHolder.incrementTotalOplogSize(byteCount);}return byteCount;}finally{unlockCompactor();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void setLastModifiedAndAccessedTimes(final long lastModified,final long lastAccessed){_setLastModified(lastModified);if(!DISABLE_ACCESS_TIME_UPDATE_ON_PUT){setLastAccessed(lastAccessed);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void setVersions(final VersionTag versionTag){this.memberId=versionTag.getMemberID();int eVersion=versionTag.getEntryVersion();this.entryVersionLowBytes=(short)(eVersion & 0xffff);this.entryVersionHighByte=(byte)((eVersion & 0xff0000)>>16);this.regionVersionHighBytes=versionTag.getRegionVersionHighBytes();this.regionVersionLowBytes=versionTag.getRegionVersionLowBytes();if(!versionTag.isGatewayTag()&& this.distributedSystemId==versionTag.getDistributedSystemId()){if(getVersionTimeStamp()<=versionTag.getVersionTimeStamp()){setVersionTimeStamp(versionTag.getVersionTimeStamp());}else{versionTag.setVersionTimeStamp(getVersionTimeStamp());}}else{setVersionTimeStamp(versionTag.getVersionTimeStamp());}this.distributedSystemId=(byte)(versionTag.getDistributedSystemId()& 0xff);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setIgnoreDepartedMembers(boolean ignore){this.ignoreDepartedMembers=ignore;if(ignore){setWaitOnExceptionFlag(true);}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void createClientServerScenarion_SingleConnection(ArrayList commonAttributes,int localMaxMemoryServer1,int localMaxMemoryServer2,int localMaxMemoryServer3){createCacheInClientServer();Integer port1=(Integer)server1.invoke(()->PRClientServerTestBase.createCacheServer(commonAttributes,new Integer(localMaxMemoryServer1)));server2.invoke(()->PRClientServerTestBase.createCacheServer(commonAttributes,new Integer(localMaxMemoryServer2)));serverPort1=port1;client.invoke(()->PRClientServerTestBase.createCacheClient_SingleConnection(NetworkUtils.getServerHostName(server1.getHost()),port1));}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Serializable getRoutingObject(EntryOperation opDetails){Date date=(Date)opDetails.getKey();Calendar cal=Calendar.getInstance();cal.setTime(date);int month=cal.get(Calendar.MONTH);switch(month){case 0: return \"January\";case 1: return \"February\";case 2: return \"March\";case 3: return \"April\";case 4: return \"May\";case 5: return \"June\";case 6: return \"July\";case 7: return \"August\";case 8: return \"September\";case 9: return \"October\";case 10: return \"November\";case 11: return \"December\";default: return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public long getConnectionId(){return connectionId;}"
  },
  {
    "code_smells": [],
    "source_code": "private static VersionTagHolder createVersionTagHolder(){VersionTagHolder versionHolder=new VersionTagHolder();versionHolder.setOperation(Operation.GET_FOR_REGISTER_INTEREST);return versionHolder;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String composeName(String name,String prefix)throws NamingException{checkIsDestroyed();return composeName(nameParser.parse(name),nameParser.parse(prefix)).toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public static long compute8(long x){x ^=x<<13;x ^=x>>>7;x ^=(x<<17);return x;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isPersistent(){return persistent;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getId(){return \"AddFreeItemToOrders\";}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void writeRequest(DataOutput output)throws IOException{output.writeInt(partitionId);output.writeInt(vertexIdMutations.size());for(Entry<I,VertexMutations<I,V,E>>entry : vertexIdMutations.entrySet()){entry.getKey().write(output);entry.getValue().write(output);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void postSuperstep(){}"
  },
  {
    "code_smells": [],
    "source_code": "public void forEachIntByte(IntByteConsumer f){for(int i=0;i<size();++i){f.apply(keys[i],values[i]);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void clear(){size=0;}"
  },
  {
    "code_smells": [],
    "source_code": "@ThriftField public void setPartitionsToCompute(int partitionsToCompute){this.partitionsToCompute=partitionsToCompute;}"
  },
  {
    "code_smells": [],
    "source_code": "private static Method getMethod(String className,String methodName,Class<?>...parameterTypes)throws ClassNotFoundException,NoSuchMethodException{Class<?>clazz=Class.forName(className);return clazz.getMethod(methodName,parameterTypes);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String convertSchema(String inputSchema,WorkUnitState workUnit)throws SchemaConversionException{return inputSchema;}"
  },
  {
    "code_smells": [],
    "source_code": "private void printWithBanner(String s,char c){this.outputBufferPrintStream.print(s);this.outputBufferPrintStream.print(' ');for(int i=0;i<(CONSOLE_WIDTH-s.length()-1);i++){this.outputBufferPrintStream.print(c);}this.outputBufferPrintStream.println();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private static Optional<Schema>removeUncomparableFieldsFromRecord(Schema record,Set<Schema>processed){Preconditions.checkArgument(record.getType()==Schema.Type.RECORD);if(processed.contains(record)){return Optional.absent();}processed.add(record);List<Field>fields=Lists.newArrayList();for(Field field : record.getFields()){Optional<Schema>newFieldSchema=removeUncomparableFields(field.schema(),processed);if(newFieldSchema.isPresent()){fields.add(new Field(field.name(),newFieldSchema.get(),field.doc(),field.defaultValue()));}}Schema newSchema=Schema.createRecord(record.getName(),record.getDoc(),record.getNamespace(),false);newSchema.setFields(fields);return Optional.of(newSchema);}"
  },
  {
    "code_smells": [],
    "source_code": "public static char[]add(char[]array,StringBuilder stringBuilder){return add(array,getCharsFromStringBuilder(stringBuilder));}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public String getColumnText(Object element,int columnIndex){if(element instanceof HadoopServer){HadoopServer server=(HadoopServer)element;switch(columnIndex){case 0: return server.getLocationName();case 1: return server.getMasterHostName().toString();case 2: return server.getState();case 3: return \"\";}}else if(element instanceof HadoopJob){HadoopJob job=(HadoopJob)element;switch(columnIndex){case 0: return job.getJobID().toString();case 1: return \"\";case 2: return job.getState().toString();case 3: return job.getStatus();}}else if(element instanceof JarModule){JarModule jar=(JarModule)element;switch(columnIndex){case 0: return jar.toString();case 1: return \"Publishing jar to server..\";case 2: return \"\";}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "FSDataBoundedInputStream(FileSystem fs,Path file,InputStream in){super(in);this.fs=fs;this.file=file;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close(){bandwidthGaugeUpdater.close();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public synchronized int read(final byte[]b,final int off,final int len)throws IOException{int currentOff=off;int currentLen=len;int lastReadBytes;int totalReadBytes=0;do{lastReadBytes=readOneBlock(b,currentOff,currentLen);if(lastReadBytes>0){currentOff+=lastReadBytes;currentLen-=lastReadBytes;totalReadBytes+=lastReadBytes;}if(currentLen<=0 || currentLen>b.length-currentOff){break;}}while(lastReadBytes>0);return totalReadBytes>0 ? totalReadBytes : lastReadBytes;}"
  },
  {
    "code_smells": [],
    "source_code": "public HttpInputStreamWithRelease(URI uri,HttpRequestBase req,HttpResponse resp)throws IOException{this.uri=uri;this.req=req;this.resp=resp;constructionStack=LOG.isDebugEnabled()? new Exception(\"stack\"): null;if(req==null){throw new IllegalArgumentException(\"Null 'request' parameter \");}try{inStream=resp.getEntity().getContent();}catch(IOException e){inStream=new ByteArrayInputStream(new byte[]{});throw releaseAndRethrow(\"getResponseBodyAsStream()in constructor-\"+e,e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static KeyValue createKeyValueFromKey(final ByteBuffer bb){return createKeyValueFromKey(bb.array(),bb.arrayOffset(),bb.limit());}"
  },
  {
    "code_smells": [],
    "source_code": "private BackupCommand getCommand(String cmdStr)throws IOException{switch(cmdStr){case SET_ADD_CMD: return BackupCommand.SET_ADD;case SET_REMOVE_CMD: return BackupCommand.SET_REMOVE;case SET_DELETE_CMD: return BackupCommand.SET_DELETE;case SET_DESCRIBE_CMD: return BackupCommand.SET_DESCRIBE;case SET_LIST_CMD: return BackupCommand.SET_LIST;default: printUsage();throw new IOException(INCORRECT_USAGE);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@SuppressWarnings(\"unchecked\")protected Map<byte[],List<Path>>[]handleBulkLoad(List<TableName>sTableList)throws IOException{Map<byte[],List<Path>>[]mapForSrc=new Map[sTableList.size()];List<String>activeFiles=new ArrayList<>();List<String>archiveFiles=new ArrayList<>();Pair<Map<TableName,Map<String,Map<String,List<Pair<String,Boolean>>>>>,List<byte[]>>pair=backupManager.readBulkloadRows(sTableList);Map<TableName,Map<String,Map<String,List<Pair<String,Boolean>>>>>map=pair.getFirst();FileSystem tgtFs;try{tgtFs=FileSystem.get(new URI(backupInfo.getBackupRootDir()),conf);}catch(URISyntaxException use){throw new IOException(\"Unable to get FileSystem\",use);}Path rootdir=FSUtils.getRootDir(conf);Path tgtRoot=new Path(new Path(backupInfo.getBackupRootDir()),backupId);for(Map.Entry<TableName,Map<String,Map<String,List<Pair<String,Boolean>>>>>tblEntry : map.entrySet()){TableName srcTable=tblEntry.getKey();int srcIdx=getIndex(srcTable,sTableList);if(srcIdx<0){LOG.warn(\"Couldn't find \"+srcTable+\" in source table List\");continue;}if(mapForSrc[srcIdx]==null){mapForSrc[srcIdx]=new TreeMap<>(Bytes.BYTES_COMPARATOR);}Path tblDir=FSUtils.getTableDir(rootdir,srcTable);Path tgtTable=new Path(new Path(tgtRoot,srcTable.getNamespaceAsString()),srcTable.getQualifierAsString());for(Map.Entry<String,Map<String,List<Pair<String,Boolean>>>>regionEntry : tblEntry.getValue().entrySet()){String regionName=regionEntry.getKey();Path regionDir=new Path(tblDir,regionName);for(Map.Entry<String,List<Pair<String,Boolean>>>famEntry : regionEntry.getValue().entrySet()){String fam=famEntry.getKey();Path famDir=new Path(regionDir,fam);List<Path>files;if(!mapForSrc[srcIdx].containsKey(Bytes.toBytes(fam))){files=new ArrayList<>();mapForSrc[srcIdx].put(Bytes.toBytes(fam),files);}else{files=mapForSrc[srcIdx].get(Bytes.toBytes(fam));}Path archiveDir=HFileArchiveUtil.getStoreArchivePath(conf,srcTable,regionName,fam);String tblName=srcTable.getQualifierAsString();Path tgtFam=new Path(new Path(tgtTable,regionName),fam);if(!tgtFs.mkdirs(tgtFam)){throw new IOException(\"couldn't create \"+tgtFam);}for(Pair<String,Boolean>fileWithState : famEntry.getValue()){String file=fileWithState.getFirst();int idx=file.lastIndexOf(\"/\");String filename=file;if(idx>0){filename=file.substring(idx+1);}Path p=new Path(famDir,filename);Path tgt=new Path(tgtFam,filename);Path archive=new Path(archiveDir,filename);if(fs.exists(p)){if(LOG.isTraceEnabled()){LOG.trace(\"found bulk hfile \"+file+\" in \"+famDir+\" for \"+tblName);}if(LOG.isTraceEnabled()){LOG.trace(\"copying \"+p+\" to \"+tgt);}activeFiles.add(p.toString());}else if(fs.exists(archive)){LOG.debug(\"copying archive \"+archive+\" to \"+tgt);archiveFiles.add(archive.toString());}files.add(tgt);}}}}copyBulkLoadedFiles(activeFiles,archiveFiles);backupManager.deleteBulkLoadedRows(pair.getSecond());return mapForSrc;}"
  },
  {
    "code_smells": [],
    "source_code": "void updateCachedLocationOnError(HRegionLocation loc,Throwable exception){AsyncRegionLocatorHelper.updateCachedLocationOnError(loc,exception,this::getCachedLocation,this::addLocationToCache,this::removeLocationFromCache);}"
  },
  {
    "code_smells": [],
    "source_code": "public void updateFsReadTime(long t){source.updateFsReadTime(t);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void encrypt(OutputStream out,byte[]src,int offset,int length,Encryptor e)throws IOException{OutputStream cout=e.createEncryptionStream(out);try{cout.write(src,offset,length);}finally{cout.close();}}"
  },
  {
    "code_smells": [],
    "source_code": "public DataBlockEncoder getEncoder(){if(encoder==null && id!=0){encoder=createEncoder(encoderCls);}return encoder;}"
  },
  {
    "code_smells": [],
    "source_code": "@edu.umd.cs.findbugs.annotations.SuppressWarnings(value=\"NN_NAKED_NOTIFY\",justification=\"This is what we want\")public void evict(){synchronized(this){this.notifyAll();}}"
  },
  {
    "code_smells": [],
    "source_code": "public long getCallMethodCount(String callQueueName,String methodName){long methodCount;Map<String,Long>methodCountMap=callQueueMethodCountsSummary.getOrDefault(callQueueName,null);if(null!=methodCountMap){methodCount=methodCountMap.getOrDefault(methodName,0L);}else{methodCount=0L;}return methodCount;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isUnassignable(){return isUnassignable(state);}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized boolean addServerToDrainList(final ServerName sn){if(!this.isServerOnline(sn)){LOG.warn(\"Server \"+sn+\" is not currently online.\"+\"Ignoring request to add it to draining list.\");return false;}if(this.drainingServers.contains(sn)){LOG.warn(\"Server \"+sn+\" is already in the draining server list.\"+\"Ignoring request to add it again.\");return true;}LOG.info(\"Server \"+sn+\" added to draining server list.\");return this.drainingServers.add(sn);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected boolean startTransition(final MasterProcedureEnv env,final RegionStateNode regionNode)throws IOException{return true;}"
  },
  {
    "code_smells": [],
    "source_code": "synchronized void remoteOperationDone(MasterProcedureEnv env,Throwable error){if(this.isFinished()){LOG.info(\"This procedure{}is already finished,skip the rest processes\",this.getProcId());return;}if(event==null){LOG.warn(\"procedure event for{}is null,maybe the procedure is created when recovery\",getProcId());return;}complete(env,error);event.wake(env.getProcedureScheduler());event=null;}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")public E loadInstance(Class<?>implClass)throws IOException{E impl;Object o=null;try{o=implClass.getDeclaredConstructor().newInstance();impl=(E)o;}catch(Exception e){throw new IOException(e);}return impl;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void enqueue(final Procedure procedure,final boolean addFront){if(addFront){runnables.addFirst(procedure);}else{runnables.addLast(procedure);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean hasReferences(){this.lock.readLock().lock();try{Collection<HStoreFile>allStoreFiles=new ArrayList<>(getStorefiles());allStoreFiles.addAll(getCompactedFiles());return StoreUtils.hasReferences(allStoreFiles);}finally{this.lock.readLock().unlock();}}"
  },
  {
    "code_smells": [],
    "source_code": "protected WALHdrContext readHeader(Builder builder,FSDataInputStream stream)throws IOException{boolean res=builder.mergeDelimitedFrom(stream);if(!res)return new WALHdrContext(WALHdrResult.EOF,null);if(builder.hasWriterClsName()&& !getWriterClsNames().contains(builder.getWriterClsName())){return new WALHdrContext(WALHdrResult.UNKNOWN_WRITER_CLS,null);}String clsName=null;if(builder.hasCellCodecClsName()){clsName=builder.getCellCodecClsName();}return new WALHdrContext(WALHdrResult.SUCCESS,clsName);}"
  },
  {
    "code_smells": [],
    "source_code": "public AuthenticationKey(int keyId,long expirationDate,SecretKey key){this.id=keyId;this.expirationDate=expirationDate;this.secret=key;}"
  },
  {
    "code_smells": [],
    "source_code": "public static void concurrentVisitReferencedFiles(final Configuration conf,final FileSystem fs,final SnapshotManifest manifest,final String desc,final StoreFileVisitor visitor)throws IOException{final Path snapshotDir=manifest.getSnapshotDir();List<SnapshotRegionManifest>regionManifests=manifest.getRegionManifests();if(regionManifests==null || regionManifests.isEmpty()){LOG.debug(\"No manifest files present: \"+snapshotDir);return;}ExecutorService exec=SnapshotManifest.createExecutor(conf,desc);try{concurrentVisitReferencedFiles(conf,fs,manifest,exec,visitor);}finally{exec.shutdown();}}"
  },
  {
    "code_smells": [],
    "source_code": "protected boolean isOneway(){return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(java.lang.Object that){if(that==null)return false;if(that instanceof deleteAll_args)return this.equals((deleteAll_args)that);return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public deleteAll_result deepCopy(){return new deleteAll_result(this);}"
  },
  {
    "code_smells": [],
    "source_code": "public java.nio.ByteBuffer bufferForRow(){return org.apache.thrift.TBaseHelper.copyBinary(row);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setStartRowIsSet(boolean value){if(!value){this.startRow=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public getNamespaceDescriptor_args(){}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isSet(_Fields field){if(field==null){throw new java.lang.IllegalArgumentException();}switch(field){case TABLE: return isSetTable();case TPUT: return isSetTput();}throw new java.lang.IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "private static int putUint32(PositionedByteRange dst,int val){dst.put((byte)(val>>>24)).put((byte)(val>>>16)).put((byte)(val>>>8)).put((byte)val);return 4;}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized void removePipeline(Pipeline pipeline){for(DatanodeDetails details : pipeline.getNodes()){UUID dnId=details.getUuid();dn2ObjectMap.computeIfPresent(dnId,(k,v)->{v.remove(pipeline.getId());return v;});}}"
  },
  {
    "code_smells": [],
    "source_code": "public void removeFileBeingWritten(final long inodeId){synchronized(filesBeingWritten){filesBeingWritten.remove(inodeId);if(filesBeingWritten.isEmpty()){lastLeaseRenewal=0;}}}"
  },
  {
    "code_smells": [],
    "source_code": "public int hashCode(){int result=cookie.hashCode();for(String file : files){result=PRIME*result+file.hashCode();}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "private void initFields(){poolId_=\"\";blockId_=0L;numBytes_=0L;generationStamp_=0L;}"
  },
  {
    "code_smells": [],
    "source_code": "public ConnectionPoolId(final UserGroupInformation ugi,final String nnId,final Class<?>proto){this.nnId=nnId;this.ugi=ugi;this.protocol=proto;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void updateStateAsync(){Thread thread=new Thread(new Runnable(){@Override public void run(){updateStateStore();}},\"Router Heartbeat Async\");thread.setDaemon(true);thread.start();}"
  },
  {
    "code_smells": [],
    "source_code": "public String toString(){return String.valueOf(layoutVersion)+FIELD_SEPARATOR+String.valueOf(namespaceID)+FIELD_SEPARATOR+String.valueOf(cTime)+FIELD_SEPARATOR+String.valueOf(editsTime)+FIELD_SEPARATOR+String.valueOf(checkpointTime)+FIELD_SEPARATOR+imageDigest.toString()+FIELD_SEPARATOR+clusterID+FIELD_SEPARATOR+blockpoolID;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public final short getFsPermissionShort(){return referred.getFsPermissionShort();}"
  },
  {
    "code_smells": [],
    "source_code": "private void lostFoundInit(DFSClient dfs){lfInited=true;try{String lfName=\"/lost+found\";final HdfsFileStatus lfStatus=dfs.getFileInfo(lfName);if(lfStatus==null){lfInitedOk=dfs.mkdirs(lfName,null,true);lostFound=lfName;}else if(!lfStatus.isDirectory()){LOG.warn(\"Cannot use/lost+found : a regular file with this name exists.\");lfInitedOk=false;}else{lostFound=lfName;lfInitedOk=true;}}catch(Exception e){e.printStackTrace();lfInitedOk=false;}if(lostFound==null){LOG.warn(\"Cannot initialize/lost+found.\");lfInitedOk=false;internalError=true;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int run(String[]args)throws IOException{if(args.length==0){printUsage(false);return 1;}final Command command=determineCommand(args[0]);if(command==null){System.err.println(\"Can't understand command '\"+args[0]+\"'\");if(!args[0].startsWith(\"-\")){System.err.println(\"Command names must start with dashes.\");}printUsage(false);return 1;}final List<String>argsList=new LinkedList<String>();for(int j=1;j<args.length;j++){argsList.add(args[j]);}try{return command.run(getConf(),argsList);}catch(IllegalArgumentException e){System.err.println(prettifyException(e));return-1;}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private XMLEvent expectTag(String expected,boolean allowEnd)throws IOException{XMLEvent ev=null;while(true){try{ev=events.nextEvent();}catch(XMLStreamException e){throw new IOException(\"Expecting \"+expected+\",but got XMLStreamException\",e);}switch(ev.getEventType()){case XMLEvent.ATTRIBUTE: throw new IOException(\"Got unexpected attribute: \"+ev);case XMLEvent.CHARACTERS: if(!ev.asCharacters().isWhiteSpace()){throw new IOException(\"Got unxpected characters while \"+\"looking for \"+expected+\": \"+ev.asCharacters().getData());}break;case XMLEvent.END_ELEMENT: if(!allowEnd){throw new IOException(\"Got unexpected end event \"+\"while looking for \"+expected);}return ev;case XMLEvent.START_ELEMENT: if(!expected.startsWith(\"[\")){if(!ev.asStartElement().getName().getLocalPart().equals(expected)){throw new IOException(\"Failed to find<\"+expected+\">;\"+\"got \"+ev.asStartElement().getName().getLocalPart()+\" instead.\");}}return ev;default: if(LOG.isTraceEnabled()){LOG.trace(\"Skipping XMLEvent of type \"+ev.getEventType()+\"(\"+ev+\")\");}break;}}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getValueOrNull(String name)throws InvalidXmlException{if(!subtrees.containsKey(name)){return null;}LinkedList<Stanza>l=subtrees.get(name);if(l.size()!=1){throw new InvalidXmlException(\"More than one value found for \"+name);}return l.get(0).getValue();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override HttpURLConnection getResponse(final HttpURLConnection conn)throws IOException{return conn;}"
  },
  {
    "code_smells": [],
    "source_code": "protected FastCheckPrecisionScaleStatus fastCheckPrecisionScale(int maxPrecision,int maxScale){return FastHiveDecimalImpl.fastCheckPrecisionScale(fastSignum,fast0,fast1,fast2,fastIntegerDigitCount,fastScale,maxPrecision,maxScale);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void initialize(Configuration conf,Properties tbl)throws SerDeException{super.initialize(conf,tbl);try{@SuppressWarnings(\"unchecked\")Parser<? extends Message>tmpParser=(Parser<? extends Message>)protoMessageClass.getField(\"PARSER\").get(null);this.parser=tmpParser;}catch(IllegalArgumentException | IllegalAccessException | NoSuchFieldException | SecurityException e){throw new SerDeException(\"Unable get PARSER from class: \"+protoMessageClass.getName(),e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean nextKeyValue(){if(values.hasNext()){return true;}if(queryResultsIterator.hasNext()){current=queryResultsIterator.next();values=current.getValue().getValue().iterator();return nextKeyValue();}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void recordAllocBytes(long bytesUsed,long bytesAllocated){incrCounter(LlapIOCounters.ALLOCATED_USED_BYTES,bytesUsed);incrCounter(LlapIOCounters.ALLOCATED_BYTES,bytesAllocated);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setWmCountersDone(){if(wmCounters!=null){wmCounters.changeStateDone();}}"
  },
  {
    "code_smells": [],
    "source_code": "public static org.apache.hadoop.hive.llap.daemon.rpc.LlapDaemonProtocolProtos.PurgeCacheResponseProto parseFrom(java.io.InputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry)throws java.io.IOException{return PARSER.parseFrom(input,extensionRegistry);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Pool<OrcEncodedColumnBatch>createEncodedColumnBatchPool(){return ECB_POOL;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void alterTableStatsForTruncate(RawStore ms,String catName,String dbName,String tableName,Table table,List<String>partNames,String validWriteIds,long writeId)throws Exception{if(partNames==null){if(0!=table.getPartitionKeysSize()){for(Partition partition : ms.getPartitions(catName,dbName,tableName,Integer.MAX_VALUE)){alterPartitionForTruncate(ms,catName,dbName,tableName,table,partition,validWriteIds,writeId);}}else{EnvironmentContext environmentContext=new EnvironmentContext();updateStatsForTruncate(table.getParameters(),environmentContext);if(!transactionalListeners.isEmpty()){MetaStoreListenerNotifier.notifyEvent(transactionalListeners,EventType.ALTER_TABLE,new AlterTableEvent(table,table,true,true,writeId,this));}if(!listeners.isEmpty()){MetaStoreListenerNotifier.notifyEvent(listeners,EventType.ALTER_TABLE,new AlterTableEvent(table,table,true,true,writeId,this));}if(writeId>0){table.setWriteId(writeId);}alterHandler.alterTable(ms,wh,catName,dbName,tableName,table,environmentContext,this,validWriteIds);}}else{for(Partition partition : ms.getPartitionsByNames(catName,dbName,tableName,partNames)){alterPartitionForTruncate(ms,catName,dbName,tableName,table,partition,validWriteIds,writeId);}}return;}"
  },
  {
    "code_smells": [],
    "source_code": "_Fields(short thriftId,String fieldName){_thriftId=thriftId;_fieldName=fieldName;}"
  },
  {
    "code_smells": [],
    "source_code": "public void addToAborted(long elem){if(this.aborted==null){this.aborted=new HashSet<Long>();}this.aborted.add(elem);}"
  },
  {
    "code_smells": [],
    "source_code": "public SQLUniqueConstraint deepCopy(){return new SQLUniqueConstraint(this);}"
  },
  {
    "code_smells": [],
    "source_code": "public void unsetTable_name(){this.table_name=null;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot,add_check_constraint_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.o1=new NoSuchObjectException();struct.o1.read(iprot);struct.setO1IsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 2: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.o2=new MetaException();struct.o2.read(iprot);struct.setO2IsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){List<Object>list=new ArrayList<Object>();boolean present_o1=true &&(isSetO1());list.add(present_o1);if(present_o1)list.add(o1);boolean present_o2=true &&(isSetO2());list.add(present_o2);if(present_o2)list.add(o2);return list.hashCode();}"
  },
  {
    "code_smells": [],
    "source_code": "public void unsetEnvironment_context(){this.environment_context=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case O1: return isSetO1();case O2: return isSetO2();}throw new IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot)throws org.apache.thrift.TException{schemes.get(iprot.getScheme()).getScheme().read(iprot,this);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot,alter_table_with_cascade_result struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.o1=new InvalidOperationException();struct.o1.read(iprot);struct.setO1IsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 2: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.o2=new MetaException();struct.o2.read(iprot);struct.setO2IsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}"
  },
  {
    "code_smells": [],
    "source_code": "public short getThriftFieldId(){return _thriftId;}"
  },
  {
    "code_smells": [],
    "source_code": "public void unsetDb_name(){this.db_name=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public Object getFieldValue(_Fields field){switch(field){case SCHEMA_VERSION: return getSchemaVersion();}throw new IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "public void setSuccessIsSet(boolean value){if(!value){this.success=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void validate()throws org.apache.thrift.TException{if(request!=null){request.validate();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){this.cr=null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){List<Object>list=new ArrayList<Object>();boolean present_success=true;list.add(present_success);if(present_success)list.add(success);return list.hashCode();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void setFieldValue(_Fields field,Object value){switch(field){case SUCCESS: if(value==null){unsetSuccess();}else{setSuccess((List<String>)value);}break;case O1: if(value==null){unsetO1();}else{setO1((MetaException)value);}break;}}"
  },
  {
    "code_smells": [],
    "source_code": "public WMDropPoolRequestTupleScheme getScheme(){return new WMDropPoolRequestTupleScheme();}"
  },
  {
    "code_smells": [],
    "source_code": "public static _Fields findByThriftIdOrThrow(int fieldId){_Fields fields=findByThriftId(fieldId);if(fields==null)throw new IllegalArgumentException(\"Field \"+fieldId+\" doesn't exist!\");return fields;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isSet(_Fields field){if(field==null){throw new IllegalArgumentException();}switch(field){case NS: return isSetNs();}throw new IllegalStateException();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot,WMTrigger struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.resourcePlanName=iprot.readString();struct.setResourcePlanNameIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 2: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.triggerName=iprot.readString();struct.setTriggerNameIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 3: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.triggerExpression=iprot.readString();struct.setTriggerExpressionIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.actionExpression=iprot.readString();struct.setActionExpressionIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 5: if(schemeField.type==org.apache.thrift.protocol.TType.BOOL){struct.isInUnmanaged=iprot.readBool();struct.setIsInUnmanagedIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 6: if(schemeField.type==org.apache.thrift.protocol.TType.STRING){struct.ns=iprot.readString();struct.setNsIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}"
  },
  {
    "code_smells": [],
    "source_code": "public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return TXN_ID;case 2: return WRITE_ID;case 3: return DB;case 4: return TABLE;case 5: return FILE_INFO;case 6: return PARTITION_VALS;default: return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String serialize(EventMessage message){String messageAsString=MessageSerializer.super.serialize(message);try(ByteArrayOutputStream baos=new ByteArrayOutputStream()){GZIPOutputStream gout=new GZIPOutputStream(baos);gout.write(messageAsString.getBytes(StandardCharsets.UTF_8));gout.close();byte[]compressed=baos.toByteArray();return new String(Base64.getEncoder().encode(compressed),StandardCharsets.UTF_8);}catch(IOException e){LOG.error(\"could not use gzip output stream\",e);LOG.debug(\"message \"+messageAsString);throw new RuntimeException(\"could not use the gzip output Stream\",e);}}"
  },
  {
    "code_smells": [],
    "source_code": "static DescriptiveStatistics benchmarkTableCreate(@NotNull MicroBenchmark bench,@NotNull BenchData data){final HMSClient client=data.getClient();String dbName=data.dbName;String tableName=data.tableName;Table table=Util.TableBuilder.buildDefaultTable(dbName,tableName);return bench.measure(null,()->throwingSupplierWrapper(()->client.createTable(table)),()->throwingSupplierWrapper(()->client.dropTable(dbName,tableName)));}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override protected void initializeOp(Configuration hconf)throws HiveException{initDone=true;super.initializeOp(hconf);closeCalled=false;this.firstFetchHappened=false;this.inputFileChanged=false;int maxAlias=0;for(byte pos=0;pos<order.length;pos++){if(pos>maxAlias){maxAlias=pos;}}maxAlias+=1;nextGroupStorage=new RowContainer[maxAlias];candidateStorage=new RowContainer[maxAlias];keyWritables=new ArrayList[maxAlias];nextKeyWritables=new ArrayList[maxAlias];fetchDone=new boolean[maxAlias];foundNextKeyGroup=new boolean[maxAlias];int bucketSize;int oldVar=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVEMAPJOINBUCKETCACHESIZE);if(oldVar!=100){bucketSize=oldVar;}else{bucketSize=HiveConf.getIntVar(hconf,HiveConf.ConfVars.HIVESMBJOINCACHEROWS);}for(byte pos=0;pos<order.length;pos++){RowContainer<List<Object>>rc=JoinUtil.getRowContainer(hconf,rowContainerStandardObjectInspectors[pos],pos,bucketSize,spillTableDesc,conf,!hasFilter(pos),reporter);nextGroupStorage[pos]=rc;RowContainer<List<Object>>candidateRC=JoinUtil.getRowContainer(hconf,rowContainerStandardObjectInspectors[pos],pos,bucketSize,spillTableDesc,conf,!hasFilter(pos),reporter);candidateStorage[pos]=candidateRC;}tagToAlias=conf.convertToArray(conf.getTagToAlias(),String.class);for(byte pos=0;pos<order.length;pos++){if(pos!=posBigTable){fetchDone[pos]=false;}foundNextKeyGroup[pos]=false;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void tryStoreVectorizedKey(HiveKey key,boolean partColsIsNull,int batchIndex)throws HiveException,IOException{int size=indexes.size();int index=size<topN ? size : evicted;keys[index]=Arrays.copyOf(key.getBytes(),key.getLength());distKeyLengths[index]=key.getDistKeyLength();hashes[index]=key.hashCode();Integer collisionIndex=indexes.store(index);if(null!=collisionIndex){if(indexes instanceof HashForGroup){indexes.store(collisionIndex);}++batchNumForwards;batchIndexToResult[batchIndex]=MAY_FORWARD-collisionIndex;return;}indexToBatchIndex[index]=batchIndex;batchIndexToResult[batchIndex]=index;if(size!=topN)return;evicted=indexes.removeBiggest();if(index==evicted){excluded++;batchIndexToResult[batchIndex]=EXCLUDE;indexToBatchIndex[index]=-1;return;}removed(evicted);int evictedBatchIndex=indexToBatchIndex[evicted];if(evictedBatchIndex>=0){batchIndexToResult[evictedBatchIndex]=EXCLUDE;indexToBatchIndex[evicted]=-1;}int evictedForward=(MAY_FORWARD-evicted);for(int i=evictedBatchIndex+1;i<batchIndex &&(batchNumForwards>0);++i){if(batchIndexToResult[i]==evictedForward){batchIndexToResult[i]=EXCLUDE;--batchNumForwards;}}}"
  },
  {
    "code_smells": [],
    "source_code": "public IfExprStringGroupColumnStringGroupColumn(){super();arg1Column=-1;arg2Column=-1;arg3Column=-1;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void reset(AggregationBuffer agg)throws HiveException{Aggregation myAgg=(Aggregation)agg;myAgg.reset();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected VectorizedRowBatch setupOverflowBatch()throws HiveException{int initialColumnCount=vContext.firstOutputColumnIndex();VectorizedRowBatch overflowBatch;int totalNumColumns=initialColumnCount+vOutContext.getScratchColumnTypeNames().length;overflowBatch=new VectorizedRowBatch(totalNumColumns);for(int i=0;i<outputProjectionColumnMap.length;i++){int outputColumn=outputProjectionColumnMap[i];String typeName=outputTypeInfos[i].getTypeName();allocateOverflowBatchColumnVector(overflowBatch,outputColumn,typeName);}int outputColumn=initialColumnCount;for(String typeName : vOutContext.getScratchColumnTypeNames()){allocateOverflowBatchColumnVector(overflowBatch,outputColumn++,typeName);}overflowBatch.projectedColumns=outputProjectionColumnMap;overflowBatch.projectionSize=outputProjectionColumnMap.length;overflowBatch.reset();return overflowBatch;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean isNull(int keyIndex){if(keyIndex==0){return isNull0;}else if(keyIndex==1){return isNull1;}else{throw new ArrayIndexOutOfBoundsException();}}"
  },
  {
    "code_smells": [],
    "source_code": "public com.google.protobuf.ByteString getHiveQueryIdBytes(){java.lang.Object ref=hiveQueryId_;if(ref instanceof java.lang.String){com.google.protobuf.ByteString b=com.google.protobuf.ByteString.copyFromUtf8((java.lang.String)ref);hiveQueryId_=b;return b;}else{return(com.google.protobuf.ByteString)ref;}}"
  },
  {
    "code_smells": [],
    "source_code": "public final boolean isInitialized(){byte isInitialized=memoizedIsInitialized;if(isInitialized!=-1)return isInitialized==1;memoizedIsInitialized=1;return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int compareTo(RecordIdentifier other){if(other.getClass()!=RecordIdentifier.class){return-other.compareTo(this);}return compareToInternal(other);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void walk(Node nd)throws SemanticException{opStack.push(nd);dispatch(nd,opStack);if(retMap.get(nd)!=null){opStack.pop();return;}if(nd.getChildren()!=null){for(Node n : nd.getChildren()){walk(n);}}opStack.pop();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object process(Node nd,Stack<Node>stack,NodeProcessorCtx procCtx,Object...nodeOutputs)throws SemanticException{MapJoinWalkerCtx ctx=(MapJoinWalkerCtx)procCtx;AbstractMapJoinOperator<? extends MapJoinDesc>mapJoin=ctx.getCurrMapJoinOp();List<AbstractMapJoinOperator<? extends MapJoinDesc>>listRejectedMapJoins=ctx.getListRejectedMapJoins();if((listRejectedMapJoins!=null)&&(listRejectedMapJoins.contains(mapJoin))){return null;}addNoReducerMapJoinToCtx(ctx,mapJoin);return null;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public RelOptCost getCost(HiveJoin join){final RelMetadataQuery mq=join.getCluster().getMetadataQuery();final Double leftRCount=mq.getRowCount(join.getLeft());final Double rightRCount=mq.getRowCount(join.getRight());if(leftRCount==null || rightRCount==null){return null;}final double rCount=leftRCount+rightRCount;ImmutableList<Double>cardinalities=new ImmutableList.Builder<Double>().add(leftRCount).add(rightRCount).build();ImmutableBitSet.Builder streamingBuilder=ImmutableBitSet.builder();switch(join.getStreamingSide()){case LEFT_RELATION: streamingBuilder.set(0);break;case RIGHT_RELATION: streamingBuilder.set(1);break;default: return null;}ImmutableBitSet streaming=streamingBuilder.build();final double cpuCost=algoUtils.computeBucketMapJoinCPUCost(cardinalities,streaming);final Double leftRAverageSize=mq.getAverageRowSize(join.getLeft());final Double rightRAverageSize=mq.getAverageRowSize(join.getRight());if(leftRAverageSize==null || rightRAverageSize==null){return null;}ImmutableList<Pair<Double,Double>>relationInfos=new ImmutableList.Builder<Pair<Double,Double>>().add(new Pair<Double,Double>(leftRCount,leftRAverageSize)).add(new Pair<Double,Double>(rightRCount,rightRAverageSize)).build();JoinAlgorithm oldAlgo=join.getJoinAlgorithm();join.setJoinAlgorithm(TezBucketJoinAlgorithm.INSTANCE);final int parallelism=mq.splitCount(join)==null ? 1 : mq.splitCount(join);join.setJoinAlgorithm(oldAlgo);final double ioCost=algoUtils.computeBucketMapJoinIOCost(relationInfos,streaming,parallelism);return HiveCost.FACTORY.makeCost(rCount,cpuCost,ioCost);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public AggregateCall other(RelDataTypeFactory typeFactory,AggregateCall e){return AggregateCall.create(new HiveSqlCountAggFunction(isDistinct,returnTypeInference,operandTypeInference,operandTypeChecker),false,ImmutableIntList.of(),-1,typeFactory.createTypeWithNullability(typeFactory.createSqlType(SqlTypeName.BIGINT),true),\"count\");}"
  },
  {
    "code_smells": [],
    "source_code": "private static SelectOperator genReduceSinkAndBacktrackSelect(Operator<?>input,ExprNodeDesc[]keys,int tag,ArrayList<ExprNodeDesc>partitionCols,String order,String nullOrder,int numReducers,Operation acidOperation,HiveConf hiveConf)throws SemanticException{return genReduceSinkAndBacktrackSelect(input,keys,tag,partitionCols,order,nullOrder,numReducers,acidOperation,hiveConf,input.getSchema().getColumnNames());}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static void walker(List<List<String>>finalResult,final List<List<String>>input,List<String>listSoFar,final int level)throws SemanticException{if(level==(input.size()-1)){assert(input.get(level)!=null): \"Unique skewed element list has null list in \"+level+\"th position.\";for(String v : input.get(level)){List<String>oneCompleteIndex=new ArrayList<String>(listSoFar);oneCompleteIndex.add(v);finalResult.add(oneCompleteIndex);}return;}for(String v : input.get(level)){List<String>clonedListSoFar=new ArrayList<String>(listSoFar);clonedListSoFar.add(v);int nextLevel=level+1;walker(finalResult,input,clonedListSoFar,nextLevel);}}"
  },
  {
    "code_smells": [],
    "source_code": "private SparkSkewJoinProcFactory(){}"
  },
  {
    "code_smells": [],
    "source_code": "private static String applyTimestampFormat(String arg,String format,TimeZone timeZone){return DruidExpressions.functionCall(\"timestamp_format\",ImmutableList.of(arg,DruidExpressions.stringLiteral(format),DruidExpressions.stringLiteral(timeZone.getID())));}"
  },
  {
    "code_smells": [],
    "source_code": "public void initParseCtx(ParseContext pctx){opToPartPruner=pctx.getOpToPartPruner();opToPartList=pctx.getOpToPartList();opToSamplePruner=pctx.getOpToSamplePruner();topOps=pctx.getTopOps();loadTableWork=pctx.getLoadTableWork();loadFileWork=pctx.getLoadFileWork();ctx=pctx.getContext();destTableId=pctx.getDestTableId();idToTableNameMap=pctx.getIdToTableNameMap();uCtx=pctx.getUCtx();listMapJoinOpsNoReducer=pctx.getListMapJoinOpsNoReducer();prunedPartitions=pctx.getPrunedPartitions();tabNameToTabObject=pctx.getTabNameToTabObject();fetchTask=pctx.getFetchTask();setLineageInfo(pctx.getLineageInfo());}"
  },
  {
    "code_smells": [],
    "source_code": "public LeadLagInfo getLlInfo(){return llInfo;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public AggregationBuffer getNewAggregationBuffer()throws HiveException{NGramAggBuf result=new NGramAggBuf();result.nge=new NGramEstimator();reset(result);return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public Text evaluate(String xml,String path){String s=xpath.evalString(xml,path);if(s==null){return null;}result.set(s);return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public SerDeStats getSerDeStats(){return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public DynamicSerDeFieldRequiredness(int id){super(id);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void adjustArraySize(int newSize){if(keyStart==null || keyStart.length<newSize){keyStart=new int[newSize];keyLength=new int[newSize];valueStart=new int[newSize];valueLength=new int[newSize];keyInited=new boolean[newSize];keyIsNull=new boolean[newSize];valueInited=new boolean[newSize];valueIsNull=new boolean[newSize];keyObjects=new LazyBinaryPrimitive<?,?>[newSize];valueObjects=new LazyBinaryObject[newSize];}}"
  },
  {
    "code_smells": [],
    "source_code": "private byte[]byteVars(){if(byteVars.length==size){byte[]newVars=new byte[size<<1];System.arraycopy(byteVars,0,newVars,0,size);return byteVars=newVars;}return byteVars;}"
  },
  {
    "code_smells": [],
    "source_code": "private static WebAppContext createWebAppContext(Builder b,AccessControlList adminsAcl,final String appDir){WebAppContext ctx=new WebAppContext();ctx.setDefaultsDescriptor(null);ServletHolder holder=new ServletHolder(new DefaultServlet());Map<String,String>params=ImmutableMap.<String,String>builder().put(\"acceptRanges\",\"true\").put(\"dirAllowed\",\"false\").put(\"gzip\",\"true\").put(\"useFileMappedBuffer\",\"true\").build();holder.setInitParameters(params);ctx.setWelcomeFiles(new String[]{\"index.html\"});ctx.addServlet(holder,\"/\");ctx.setDisplayName(b.name);ctx.setContextPath(\"/\");ctx.setWar(appDir+\"/\"+b.name);String tempDirectory=b.conf.get(HTTP_TEMP_DIR_KEY);if(tempDirectory!=null && !tempDirectory.isEmpty()){ctx.setTempDirectory(new File(tempDirectory));ctx.setAttribute(\"javax.servlet.context.tempdir\",tempDirectory);}ctx.getServletContext().setAttribute(CONF_CONTEXT_ATTRIBUTE,b.conf);ctx.getServletContext().setAttribute(ADMINS_ACL,adminsAcl);addNoCacheFilter(ctx);return ctx;}"
  },
  {
    "code_smells": [],
    "source_code": "public RpcRequestMessageWrapper(RpcRequestHeaderProto requestHeader,Message theRequest){super(requestHeader,theRequest);}"
  },
  {
    "code_smells": [],
    "source_code": "static String classNameBase(String className){String[]names=className.split(\"\\\\.\",-1);if(names==null || names.length==0){return className;}return names[names.length-1];}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){int result=1;result=PRIME*result+((serverAddress==null)? 0 : serverAddress.hashCode());result=PRIME*result+((protocol==null)? 0 : protocol.hashCode());result=PRIME*result+((rpcKind==null)? 0 : rpcKind.hashCode());return result;}"
  },
  {
    "code_smells": [],
    "source_code": "InetSocketAddress getAddress(){return(InetSocketAddress)acceptChannel.socket().getLocalSocketAddress();}"
  },
  {
    "code_smells": [],
    "source_code": "public void deleteLocalFiles(String subdir)throws IOException{String[]localDirs=getLocalDirs();for(int i=0;i<localDirs.length;i++){FileSystem.getLocal(this).delete(new Path(localDirs[i],subdir),true);}}"
  },
  {
    "code_smells": [],
    "source_code": "private int getMatchingLevelForNodes(Node n1,Node n2){int count=0;do{if(n1.equals(n2)){return count;}++count;n1=n1.getParent();n2=n2.getParent();}while(n1!=null);return this.maxLevel;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public KillTaskAttemptResponse killTaskAttempt(KillTaskAttemptRequest request)throws IOException{KillTaskAttemptResponse resp=recordFactory.newRecordInstance(KillTaskAttemptResponse.class);return resp;}"
  },
  {
    "code_smells": [],
    "source_code": "int[][]burst(){int[][]result=new int[4][];result[WALLCLOCK_TIME_INDEX]=progressWallclockTime.getValues();result[CPU_TIME_INDEX]=progressCPUTime.getValues();result[VIRTUAL_MEMORY_KBYTES_INDEX]=progressVirtualMemoryKbytes.getValues();result[PHYSICAL_MEMORY_KBYTES_INDEX]=progressPhysicalMemoryKbytes.getValues();return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public int compareTo(Range o){return this.startIndex<o.startIndex ?-1 :(this.startIndex>o.startIndex ? 1 :(this.length<o.length ?-1 :(this.length>o.length ? 1 : 0)));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close()throws IOException{IOUtils.cleanup(null,src);factory.close();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setKeyComparator(Class<? extends WritableComparator>cmpcl){super.setKeyComparator(cmpcl);for(Node n : kids){n.setKeyComparator(cmpcl);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void transition(JobImpl job,JobEvent event){job.addDiagnostic(((JobDiagnosticsUpdateEvent)event).getDiagnosticUpdate());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void handleFailedContainer(TaskAttemptId attemptID){toBePreempted.remove(attemptID);checkpoints.remove(attemptID.getTaskId());}"
  },
  {
    "code_smells": [],
    "source_code": "public MetricsInfo info(){return info;}"
  },
  {
    "code_smells": [],
    "source_code": "void setIncludePattern(Pattern includePattern){this.includePattern=includePattern;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public synchronized int read()throws IOException{int data=blockInputStream.read();return data;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean checkVolume(final HddsVolume volume,Callback callback){if(volume==null){LOG.debug(\"Cannot schedule check on null volume\");return false;}Optional<ListenableFuture<VolumeCheckResult>>olf=delegateChecker.schedule(volume,null);if(olf.isPresent()){numVolumeChecks.incrementAndGet();Futures.addCallback(olf.get(),new ResultHandler(volume,new HashSet<>(),new HashSet<>(),new AtomicLong(1),callback),checkVolumeResultHandlerExecutorService);return true;}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "private void printCommaUnlessFirst(){if(!isFirst){stream.print(\",\");}isFirst=false;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void createAInfo(ServiceRecord record)throws Exception{AContainerRecordDescriptor recordInfo=new AContainerRecordDescriptor(getPath(),record);registerRecordDescriptor(Type.A,recordInfo);}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")private static Class<? extends Principal>getOsPrincipalClass(){ClassLoader cl=ClassLoader.getSystemClassLoader();try{String principalClass=null;if(IBM_JAVA){if(is64Bit){principalClass=\"com.ibm.security.auth.UsernamePrincipal\";}else{if(windows){principalClass=\"com.ibm.security.auth.NTUserPrincipal\";}else if(aix){principalClass=\"com.ibm.security.auth.AIXPrincipal\";}else{principalClass=\"com.ibm.security.auth.LinuxPrincipal\";}}}else{principalClass=windows ? \"com.sun.security.auth.NTUserPrincipal\" : \"com.sun.security.auth.UnixPrincipal\";}return(Class<? extends Principal>)cl.loadClass(principalClass);}catch(ClassNotFoundException e){LOG.error(\"Unable to find JAAS classes:\"+e.getMessage());}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "private void writeRawBytes(Writable writable)throws IOException{if(writable instanceof BytesWritable){BytesWritable bw=(BytesWritable)writable;byte[]bytes=bw.getBytes();int length=bw.getLength();clientOut.writeInt(length);clientOut.write(bytes,0,length);}else{bufferOut.reset();writable.write(bufferDataOut);byte[]bytes=bufferOut.toByteArray();clientOut.writeInt(bytes.length);clientOut.write(bytes);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Private @Unstable public static GetQueueInfoResponse newInstance(QueueInfo queueInfo){GetQueueInfoResponse response=Records.newRecord(GetQueueInfoResponse.class);response.setQueueInfo(queueInfo);return response;}"
  },
  {
    "code_smells": [],
    "source_code": "private void initReleases(){if(this.release!=null){return;}AllocateRequestProtoOrBuilder p=viaProto ? proto : builder;List<ContainerIdProto>list=p.getReleaseList();this.release=new ArrayList<ContainerId>();for(ContainerIdProto c : list){this.release.add(convertFromProtoFormat(c));}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object other){if(other==null)return false;if(other.getClass().isAssignableFrom(this.getClass())){return this.getProto().equals(this.getClass().cast(other).getProto());}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "protected String getContainerPrivateDir(String appIdStr,String containerIdStr){return getAppPrivateDir(appIdStr)+Path.SEPARATOR+containerIdStr+Path.SEPARATOR;}"
  },
  {
    "code_smells": [],
    "source_code": "boolean isProcessTreeOverLimit(String containerId,long currentMemUsage,long curMemUsageOfAgedProcesses,long vmemLimit){boolean isOverLimit=false;if(currentMemUsage>(2*vmemLimit)){LOG.warn(\"Process tree for container: \"+containerId+\" running over twice \"+\"the configured limit.Limit=\"+vmemLimit+\",current usage=\"+currentMemUsage);isOverLimit=true;}else if(curMemUsageOfAgedProcesses>vmemLimit){LOG.warn(\"Process tree for container: \"+containerId+\" has processes older than 1 \"+\"iteration running over the configured limit.Limit=\"+vmemLimit+\",current usage=\"+curMemUsageOfAgedProcesses);isOverLimit=true;}return isOverLimit;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int compareInputOrderTo(SchedulableEntity other){if(other instanceof SchedulerApplicationAttempt){return getApplicationId().compareTo(((SchedulerApplicationAttempt)other).getApplicationId());}return 1;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void activateApplication(String user,ApplicationId applicationId){this.writeLock.lock();try{User userDesc=getUser(user);if(userDesc!=null && userDesc.getActiveApplications()<=0){return;}Set<ApplicationId>userApps=usersApplications.get(user);if(userApps==null){userApps=new HashSet<ApplicationId>();usersApplications.put(user,userApps);activeUsers.incrementAndGet();metrics.incrActiveUsers();userLimitNeedsRecompute();updateActiveUsersResourceUsage(user);LOG.debug(\"User{}added to activeUsers,currently:{}\",user,activeUsers);}if(userApps.add(applicationId)){metrics.activateApp(user);}}finally{this.writeLock.unlock();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void applicationFinished(ApplicationId applicationId){processDelegationTokenRenewerEvent(new DelegationTokenRenewerEvent(applicationId,DelegationTokenRenewerEventType.FINISH_APPLICATION));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void serviceInit(Configuration conf)throws Exception{this.conf=conf;ThreadFactory tf=new ThreadFactoryBuilder().setNameFormat(\"Shared cache cleaner\").build();scheduledExecutor=HadoopExecutors.newScheduledThreadPool(2,tf);super.serviceInit(conf);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public GetCompInstancesResponseProto getCompInstances(GetCompInstancesRequestProto request)throws IOException,YarnException{try{return proxy.getCompInstances(null,request);}catch(ServiceException e){RPCUtil.unwrapAndThrowException(e);}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static RMNode newNodeInfo(String rackName,String hostName,final ResourceOption resourceOption,int port){final NodeId nodeId=newNodeID(hostName,port);final String nodeAddr=hostName+\":\"+port;final String httpAddress=hostName;return new FakeRMNodeImpl(nodeId,nodeAddr,httpAddress,resourceOption,rackName,\"Me good\",port,hostName,null);}"
  },
  {
    "code_smells": [],
    "source_code": "private Dest resolveAction(WebApp.HTTP method,Dest dest,String path){if(dest.prefix.length()==1){return null;}checkState(!isGoodMatch(dest,path),dest.prefix);checkState(SLASH.countIn(path)>1,path);List<String>parts=WebApp.parseRoute(path);String controller=parts.get(WebApp.R_CONTROLLER);String action=parts.get(WebApp.R_ACTION);return add(method,pjoin(\"\",controller,action),dest.controllerClass,action,null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public CODE<T>$class(String value){addAttr(\"class\",value);return this;}"
  },
  {
    "source_code": "@Override public CODE<T>a(String selector,String href,String anchorText){return setSelector(a(),selector).$href(href).method(anchorText).method();}",
    "code_smells": "class C{@Override public CODE<T>a(String selector,String href,String anchorText){return setSelector(a(),selector).$href(href).method(anchorText).method();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public UL<T>$onmousedown(String value){addAttr(\"onmousedown\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public BODY<T>$onclick(String value){addAttr(\"onclick\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public BUTTON<T>$lang(String value){addAttr(\"lang\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public TFOOT<T>$onmouseover(String value){addAttr(\"onmouseover\",value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean namedNodeMapsEqual(NamedNodeMap a,NamedNodeMap b){if(a.getLength()!=b.getLength()){return false;}for(int i=0;i<a.getLength();i++){Node aNode=a.item(i);Node bNode=aNode.getLocalName()==null ? b.getNamedItem(aNode.getNodeName()): b.getNamedItemNS(aNode.getNamespaceURI(),aNode.getLocalName());if(bNode==null || !aNode.isEqualNode(bNode)){return false;}}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public final HttpAsyncClientBuilder disableAutomaticRetries(){automaticRetriesDisabled=true;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void execute(final IOEventHandlerFactory ioEventHandlerFactory)throws IOException{Args.notNull(ioEventHandlerFactory,\"Handler factory\");if(ioReactorRef.compareAndSet(null,createIOReactor(ioEventHandlerFactory,ioReactorConfig,workerThreadFactory,ShutdownCommand.GRACEFUL_NORMAL_CALLBACK))){if(status.compareAndSet(Status.READY,Status.RUNNING)){ioReactorRef.get().start();}}else{throw new IllegalStateException(\"I/O reactor has already been started\");}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public AgentStateModel createNewStateModel(String resourceName,String partitionKey){AgentStateModel model=new AgentStateModel();return model;}"
  },
  {
    "code_smells": [],
    "source_code": "public JobContext getJobContext(String resourceName){if(_contextMap.containsKey(resourceName)&& _contextMap.get(resourceName)!=null){return new JobContext(_contextMap.get(resourceName));}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public StreamManagerClient(NIOLooper s,String streamManagerHost,int streamManagerPort,String topologyName,String topologyId,PhysicalPlans.Instance instance,Communicator<Message>inStreamQueue,Communicator<Message>outStreamQueue,Communicator<InstanceControlMsg>inControlQueue,HeronSocketOptions options,GatewayMetrics gatewayMetrics){super(s,streamManagerHost,streamManagerPort,options);this.topologyName=topologyName;this.topologyId=topologyId;this.instance=instance;this.inStreamQueue=inStreamQueue;this.outStreamQueue=outStreamQueue;this.inControlQueue=inControlQueue;this.systemConfig=(SystemConfig)SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);this.gatewayMetrics=gatewayMetrics;addStreamManagerClientTasksOnWakeUp();}"
  },
  {
    "code_smells": [],
    "source_code": "public int getParamCount(HplsqlParser.Expr_func_paramsContext ctx){if(ctx==null){return 0;}return ctx.func_param().size();}"
  },
  {
    "code_smells": [],
    "source_code": "public void setFieldValue(_Fields field,Object value){switch(field){case VALUE: if(value==null){unsetValue();}else{setValue((Byte)value);}break;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void validate()throws org.apache.thrift.TException{if(req!=null){req.validate();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void read(org.apache.thrift.protocol.TProtocol iprot,TCancelOperationResp struct)throws org.apache.thrift.TException{org.apache.thrift.protocol.TField schemeField;iprot.readStructBegin();while(true){schemeField=iprot.readFieldBegin();if(schemeField.type==org.apache.thrift.protocol.TType.STOP){break;}switch(schemeField.id){case 1: if(schemeField.type==org.apache.thrift.protocol.TType.STRUCT){struct.status=new TStatus();struct.status.read(iprot);struct.setStatusIsSet(true);}else{org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default: org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}"
  },
  {
    "code_smells": [],
    "source_code": "public String getFieldName(){return _fieldName;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){this.type=null;this.typeQualifiers=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setDelegationToken(String delegationToken){this.delegationToken=delegationToken;}"
  },
  {
    "code_smells": [],
    "source_code": "public int getMaxFramesForWindow(){int frameSize=getFrameSize();return getInt(MAX_FRAMES_FOR_WINDOW,(int)(((long)4*MB)/frameSize));}"
  },
  {
    "code_smells": [],
    "source_code": "public static void serializeFrameSize(ByteBuffer outputFrame,int numberOfMinFrame){serializeFrameSize(outputFrame,0,numberOfMinFrame);}"
  },
  {
    "code_smells": [],
    "source_code": "public static ITypeTraits[]serdesToTypeTraits(ISerializerDeserializer[]serdes,int payloadSize){ITypeTraits[]typeTraits=new ITypeTraits[serdes.length+1];for(int i=0;i<serdes.length;i++){typeTraits[i]=serdeToTypeTrait(serdes[i]);}typeTraits[serdes.length]=new FixedLengthTypeTrait(payloadSize);return typeTraits;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public NestedLoopJoin(IHyracksTaskContext ctx,FrameTupleAccessor accessorOuter,FrameTupleAccessor accessorInner,ITuplePairComparator comparatorsOuter2Inner,int memSize,IPredicateEvaluator predEval,boolean isLeftOuter,IMissingWriter[]missingWriters)throws HyracksDataException{this.accessorInner=accessorInner;this.accessorOuter=accessorOuter;this.appender=new FrameTupleAppender();this.tpComparator=comparatorsOuter2Inner;this.outBuffer=new VSizeFrame(ctx);this.innerBuffer=new VSizeFrame(ctx);this.appender.reset(outBuffer,true);if(memSize<3){throw new HyracksDataException(\"Not enough memory is available for Nested Loop Join\");}this.outerBufferMngr=new VariableFrameMemoryManager(new VariableFramePool(ctx,ctx.getInitialFrameSize()*(memSize-2)),FrameFreeSlotPolicyFactory.createFreeSlotPolicy(EnumFreeSlotPolicy.LAST_FIT,memSize-2));this.predEvaluator=predEval;this.isReversed=false;this.isLeftOuter=isLeftOuter;if(isLeftOuter){int innerFieldCount=this.accessorInner.getFieldCount();missingTupleBuilder=new ArrayTupleBuilder(innerFieldCount);DataOutput out=missingTupleBuilder.getDataOutput();for(int i=0;i<innerFieldCount;i++){missingWriters[i].writeMissing(out);missingTupleBuilder.addFieldEndOffset();}}else{missingTupleBuilder=null;}FileReference file=ctx.getJobletContext().createManagedWorkspaceFile(this.getClass().getSimpleName()+this.toString());runFileWriter=new RunFileWriter(file,ctx.getIoManager());runFileWriter.open();}"
  },
  {
    "code_smells": [],
    "source_code": "public UnionAllOperatorDescriptor(IOperatorDescriptorRegistry spec,int nInputs,RecordDescriptor recordDescriptor){super(spec,nInputs,1);outRecDescs[0]=recordDescriptor;}"
  },
  {
    "code_smells": [],
    "source_code": "private void processSelectedKeys(){for(Iterator<SelectionKey>i=selector.selectedKeys().iterator();i.hasNext();){SelectionKey key=i.next();i.remove();final SelectableChannel sc=key.channel();if(key.isReadable()&& key.attachment()!=null){read(key);}else if(key.isWritable()&& key.attachment()!=null){write(key);}else if(key.isAcceptable()){assert sc==serverSocketChannel;accept();}else if(key.isConnectable()){finishConnect(key);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close()throws HyracksDataException{Throwable failure=releaseResources();failure=CleanupUtils.close(writer,failure);if(failure!=null){throw HyracksDataException.create(failure);}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public ILSMIndex createInstance(INCServiceContext serviceCtx)throws HyracksDataException{IIOManager ioManager=serviceCtx.getIoManager();FileReference file=ioManager.resolve(path);List<IVirtualBufferCache>virtualBufferCaches=vbcProvider.getVirtualBufferCaches(serviceCtx,file);ioOpCallbackFactory.initialize(serviceCtx,this);return LSMRTreeUtils.createLSMTreeWithAntiMatterTuples(ioManager,virtualBufferCaches,file,storageManager.getBufferCache(serviceCtx),typeTraits,cmpFactories,btreeCmpFactories,valueProviderFactories,rtreePolicyType,mergePolicyFactory.createMergePolicy(mergePolicyProperties,serviceCtx),opTrackerProvider.getOperationTracker(serviceCtx,this),ioSchedulerProvider.getIoScheduler(serviceCtx),ioOpCallbackFactory,linearizeCmpFactory,rtreeFields,filterTypeTraits,filterCmpFactories,filterFields,durable,isPointMBR,metadataPageManagerFactory);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){if(delegate==null)delegate=new ArrayList<>();else delegate.clear();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void restartNodes(Collection<UUID>ids)throws IgniteException{guard();try{ctx.grid().compute(forNodeIds(ids)).execute(IgniteKillTask.class,true);}finally{unguard();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void onBeforeWrite(){if(req && reqSndTs==0){reqSndTs=System.nanoTime();reqSndTsMillis=System.currentTimeMillis();}if(!req && resSndTs==0){resSndTs=System.nanoTime();resSndTsMillis=System.currentTimeMillis();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void onRemove(){rmCnt.incrementAndGet();if(delegate!=null)delegate.onRemove();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<K1,V1>GridCacheProxyImpl<K1,V1>keepBinary(){if(opCtx!=null && opCtx.isKeepBinary())return(GridCacheProxyImpl<K1,V1>)this;return new GridCacheProxyImpl<>((GridCacheContext<K1,V1>)ctx,(GridCacheAdapter<K1,V1>)delegate,opCtx!=null ? opCtx.keepBinary(): new CacheOperationContext(false,null,true,null,false,null,false,DFLT_ALLOW_ATOMIC_OPS_IN_TX));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Collection<ClusterNode>mapPartitionToPrimaryAndBackups(int part){CacheOperationContext old=gate.enter(null);try{return delegate.mapPartitionToPrimaryAndBackups(part);}finally{gate.leave(old);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void advance(){while(nextIdx<locParts.length()){GridDhtLocalPartition part=locParts.get(nextIdx);if(part!=null && part.state().active()){nextPart=part;return;}nextIdx++;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void sessionEnd0(@Nullable IgniteInternalTx tx,boolean threwEx)throws IgniteCheckedException{try{if(tx==null){if(sesLsnrs!=null && sesHolder.get().contains(store)){for(CacheStoreSessionListener lsnr : sesLsnrs)lsnr.onSessionEnd(locSes,!threwEx);}if(!sesHolder.get().ended(store))store.sessionEnd(!threwEx);}}catch(Exception e){if(!threwEx)throw U.cast(e);}finally{if(sesHolder!=null)sesHolder.set(null);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public boolean readFrom(ByteBuffer buf,MessageReader reader){reader.setBuffer(buf);if(!reader.beforeMessageRead())return false;if(!super.readFrom(buf,reader))return false;switch(reader.state()){case 3: futId=reader.readLong(\"futId\");if(!reader.isLastRead())return false;reader.incrementState();case 4: locksArr=reader.readObjectArray(\"locksArr\",MessageCollectionItemType.MSG,TxLockList.class);if(!reader.isLastRead())return false;reader.incrementState();case 5: nearTxKeysArr=reader.readObjectArray(\"nearTxKeysArr\",MessageCollectionItemType.MSG,IgniteTxKey.class);if(!reader.isLastRead())return false;reader.incrementState();case 6: txKeysArr=reader.readObjectArray(\"txKeysArr\",MessageCollectionItemType.MSG,IgniteTxKey.class);if(!reader.isLastRead())return false;reader.incrementState();}return reader.afterMessageRead(TxLocksResponse.class);}"
  },
  {
    "code_smells": [],
    "source_code": "public HadoopTaskOutput output(HadoopTaskContext taskCtx)throws IgniteCheckedException{switch(taskCtx.taskInfo().type()){case MAP: assert !job.info().hasCombiner(): \"The output creation is allowed if combiner has not been defined.\";case COMBINE: return new PartitionedOutput(taskCtx);default: throw new IllegalStateException(\"Illegal type: \"+taskCtx.taskInfo().type());}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void writeExternal(ObjectOutput out)throws IOException{jobId.writeExternal(out);out.writeLong(msgId);out.writeInt(reducer);out.writeInt(off);U.writeByteArray(out,buf);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public ClientListenerResponse doHandle(OdbcRequest req){if(!busyLock.enterBusy())return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,\"Failed to handle ODBC request because node is stopping: \"+req);if(actx!=null)AuthorizationContext.context(actx);try{switch(req.command()){case QRY_EXEC: return executeQuery((OdbcQueryExecuteRequest)req);case QRY_EXEC_BATCH: return executeBatchQuery((OdbcQueryExecuteBatchRequest)req);case STREAMING_BATCH: return dispatchBatchOrdered((OdbcStreamingBatchRequest)req);case QRY_FETCH: return fetchQuery((OdbcQueryFetchRequest)req);case QRY_CLOSE: return closeQuery((OdbcQueryCloseRequest)req);case META_COLS: return getColumnsMeta((OdbcQueryGetColumnsMetaRequest)req);case META_TBLS: return getTablesMeta((OdbcQueryGetTablesMetaRequest)req);case META_PARAMS: return getParamsMeta((OdbcQueryGetParamsMetaRequest)req);case MORE_RESULTS: return moreResults((OdbcQueryMoreResultsRequest)req);}return new OdbcResponse(IgniteQueryErrorCode.UNKNOWN,\"Unsupported ODBC request: \"+req);}finally{AuthorizationContext.clear();busyLock.leaveBusy();}}"
  },
  {
    "code_smells": [],
    "source_code": "ClientCacheQueryResponse(long requestId,ClientCacheQueryCursor cursor){super(requestId);assert cursor!=null;this.cursor=cursor;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private IgniteFuture<UUID>startRemoteListenAsync(BinaryRawReaderEx reader,IgniteMessaging messaging){Object nativeFilter=reader.readObjectDetached();long ptr=reader.readLong();Object topic=reader.readObjectDetached();PlatformMessageFilter filter=platformCtx.createRemoteMessageFilter(nativeFilter,ptr);return messaging.remoteListenAsync(topic,filter);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private boolean fetchNext()throws IgniteCheckedException{if(data==null)return false;try{if(!data.next()){close();return false;}if(res!=null){Value[]values=res.currentRow();for(int c=0;c<row.length;c++){Value val=values[c];if(val instanceof GridH2ValueCacheObject){GridH2ValueCacheObject valCacheObj=(GridH2ValueCacheObject)values[c];row[c]=valCacheObj.getObject(true);}else row[c]=val.getObject();}}else{for(int c=0;c<row.length;c++)row[c]=data.getObject(c+1);}return true;}catch(SQLException e){throw new IgniteSQLException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "private BPlusTree.TreeRowClosure<H2Row,H2Row>filter(QueryContext qctx){if(qctx==null){assert !cctx.mvccEnabled();return null;}IndexingQueryFilter f=qctx.filter();IndexingQueryCacheFilter p=f==null ? null : f.forCache(getTable().cacheName());MvccSnapshot v=qctx.mvccSnapshot();assert !cctx.mvccEnabled()|| v!=null;if(p==null && v==null)return null;return new H2TreeFilterClosure(p,v,cctx,log);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public Iterator<Row>getRows(Session ses,SearchRow first,SearchRow last){List<Row>rows=new ArrayList<>();Collection<ClusterNode>nodes;SqlSystemViewColumnCondition idCond=conditionForColumn(\"NODE_ID\",first,last);if(idCond.isEquality()){try{UUID nodeId=uuidFromValue(idCond.valueForEquality());ClusterNode node=nodeId==null ? null : ctx.discovery().node(nodeId);if(node!=null)nodes=Collections.singleton(node);else nodes=Collections.emptySet();}catch(Exception e){nodes=Collections.emptySet();}}else nodes=F.concat(false,ctx.discovery().allNodes(),ctx.discovery().daemonNodes());for(ClusterNode node : nodes){if(node!=null){ClusterMetrics metrics=node.metrics();rows.add(createRow(ses,node.id(),valueTimestampFromMillis(metrics.getLastUpdateTime()),metrics.getMaximumActiveJobs(),metrics.getCurrentActiveJobs(),metrics.getAverageActiveJobs(),metrics.getMaximumWaitingJobs(),metrics.getCurrentWaitingJobs(),metrics.getAverageWaitingJobs(),metrics.getMaximumRejectedJobs(),metrics.getCurrentRejectedJobs(),metrics.getAverageRejectedJobs(),metrics.getTotalRejectedJobs(),metrics.getMaximumCancelledJobs(),metrics.getCurrentCancelledJobs(),metrics.getAverageCancelledJobs(),metrics.getTotalCancelledJobs(),metrics.getMaximumJobWaitTime(),metrics.getCurrentJobWaitTime(),(long)metrics.getAverageJobWaitTime(),metrics.getMaximumJobExecuteTime(),metrics.getCurrentJobExecuteTime(),(long)metrics.getAverageJobExecuteTime(),metrics.getTotalJobsExecutionTime(),metrics.getTotalExecutedJobs(),metrics.getTotalExecutedTasks(),metrics.getTotalBusyTime(),metrics.getTotalIdleTime(),metrics.getCurrentIdleTime(),metrics.getBusyTimePercentage(),metrics.getIdleTimePercentage(),metrics.getTotalCpus(),metrics.getCurrentCpuLoad(),metrics.getAverageCpuLoad(),metrics.getCurrentGcCpuLoad(),metrics.getHeapMemoryInitialized(),metrics.getHeapMemoryUsed(),metrics.getHeapMemoryCommitted(),metrics.getHeapMemoryMaximum(),metrics.getHeapMemoryTotal(),metrics.getNonHeapMemoryInitialized(),metrics.getNonHeapMemoryUsed(),metrics.getNonHeapMemoryCommitted(),metrics.getNonHeapMemoryMaximum(),metrics.getNonHeapMemoryTotal(),metrics.getUpTime(),valueTimestampFromMillis(metrics.getStartTime()),valueTimestampFromMillis(metrics.getNodeStartTime()),metrics.getLastDataVersion(),metrics.getCurrentThreadCount(),metrics.getMaximumThreadCount(),metrics.getTotalStartedThreadCount(),metrics.getCurrentDaemonThreadCount(),metrics.getSentMessagesCount(),metrics.getSentBytesCount(),metrics.getReceivedMessagesCount(),metrics.getReceivedBytesCount(),metrics.getOutboundMessagesQueueSize()));}}return rows.iterator();}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isAccessed(){return accessed;}"
  },
  {
    "code_smells": [],
    "source_code": "protected final void unregisterMBean()throws IgniteSpiException{if(spiMBean!=null && ignite!=null){assert !U.IGNITE_MBEANS_DISABLED;MBeanServer jmx=ignite.configuration().getMBeanServer();assert jmx!=null;try{jmx.unregisterMBean(spiMBean);if(log.isDebugEnabled())log.debug(\"Unregistered SPI MBean: \"+spiMBean);}catch(JMException e){throw new IgniteSpiException(\"Failed to unregister SPI MBean: \"+spiMBean,e);}}}"
  },
  {
    "code_smells": [],
    "source_code": "ZkDiscoveryNodeJoinEventData(long evtId,long topVer,List<ZkJoinedNodeEvtData>joinedNodes,int dataForJoinedPartCnt){super(evtId,ZK_EVT_NODE_JOIN,topVer);this.joinedNodes=joinedNodes;this.dataForJoinedPartCnt=dataForJoinedPartCnt;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void process(final ProcessClassContext processClassContext){removeIgnoredMethods(processClassContext.getCls(),processClassContext);}"
  },
  {
    "code_smells": [],
    "source_code": "public int from(MemberGroupLayout.ColumnSpans columnSpans){if(this==LEFT)return columnSpans.getLeft();if(this==MIDDLE)return columnSpans.getMiddle();if(this==RIGHT)return columnSpans.getRight();throw new IllegalStateException();}"
  },
  {
    "code_smells": [],
    "source_code": "private Persistability determinePersistability(){final NotPersistableFacet notPersistableFacet=getFacet(NotPersistableFacet.class);if(notPersistableFacet==null){return Persistability.USER_PERSISTABLE;}final NotPersistable.By initiatedBy=notPersistableFacet.value();if(initiatedBy==NotPersistable.By.USER_OR_PROGRAM){return Persistability.TRANSIENT;}else if(initiatedBy==NotPersistable.By.USER){return Persistability.PROGRAM_PERSISTABLE;}else{return Persistability.USER_PERSISTABLE;}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override protected void configure(final Marshaller marshaller){marshaller.setAdapter(PersistentEntityAdapter.class,serviceRegistry.injectServicesInto(new PersistentEntityAdapter()));marshaller.setAdapter(PersistentEntitiesAdapter.class,serviceRegistry.injectServicesInto(new PersistentEntitiesAdapter()));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void renderHead(Component component,IHeaderResponse response){super.renderHead(component,response);renderFeedbackMessages(response);}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized void setDefaultBranch(String defaultBranch){this.defaultBranch=defaultBranch;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private static void printAllExcludes(ModuleDescriptor md,PrintWriter out){ExcludeRule[]excludes=md.getAllExcludeRules();if(excludes.length>0){for(ExcludeRule exclude : excludes){out.print(String.format(\"\\t\\t<exclude org=\\\"%s\\\" module=\\\"%s\\\" artifact=\\\"%s\\\" type=\\\"%s\\\" ext=\\\"%s\\\"\",XMLHelper.escape(exclude.getId().getModuleId().getOrganisation()),XMLHelper.escape(exclude.getId().getModuleId().getName()),XMLHelper.escape(exclude.getId().getName()),XMLHelper.escape(exclude.getId().getType()),XMLHelper.escape(exclude.getId().getExt())));String[]ruleConfs=exclude.getConfigurations();if(!Arrays.asList(ruleConfs).equals(Arrays.asList(md.getConfigurationsNames()))){out.print(listToPrefixedString(ruleConfs,\" conf=\\\"\"));}out.print(\" matcher=\\\"\"+XMLHelper.escape(exclude.getMatcher().getName())+\"\\\"\");out.println(\"/>\");}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setLocal(boolean local){this.local=local;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setShowProgress(boolean progress){}"
  },
  {
    "code_smells": [],
    "source_code": "private void fillLocalToolBar(IToolBarManager toolBarManager){toolBarManager.add(refreshAction);toolBarManager.add(focusDialogActionToolbar);toolBarManager.add(new Separator());toolBarManager.add(historyAction);toolBarManager.add(forwardAction);}"
  },
  {
    "code_smells": [],
    "source_code": "private Path getNameElement(NodeId nodeId,NodeId parentId,HierarchyManager hmgr)throws ItemStateException{try{Name name=hmgr.getName(nodeId,parentId);return PathFactoryImpl.getInstance().create(name);}catch(RepositoryException e){String msg=\"Unable to get name for node with id: \"+nodeId;throw new ItemStateException(msg,e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int nextDoc()throws IOException{if(docNo==NO_MORE_DOCS){return docNo;}if(firstTime){firstTime=false;int docId=contextScorer.nextDoc();if(docId!=NO_MORE_DOCS){contextNo=docId;}}do{docNo++;}while(reader.isDeleted(docNo)&& docNo<reader.maxDoc());while(contextNo!=-1 && contextNo==docNo){docNo++;int docId=contextScorer.nextDoc();contextNo=docId==NO_MORE_DOCS ?-1 : docId;}if(docNo>=reader.maxDoc()){docNo=NO_MORE_DOCS;}return docNo;}"
  },
  {
    "code_smells": [],
    "source_code": "public int getRestrictionType(String restrictionName){if(restrictions.containsKey(restrictionName)){return restrictions.get(restrictionName);}else{return PropertyType.UNDEFINED;}}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean setNodeReferences(ChangeLog references){try{ChangeLog log=new ChangeLog();for(NodeReferences source : references.modifiedRefs()){NodeReferences target=new NodeReferences(source.getTargetId());for(PropertyId id : source.getReferences()){if(!hasNonVirtualItemState(id.getParentId())){target.addReference(id);}}log.modified(target);}if(log.hasUpdates()){pMgr.store(log);}return true;}catch(ItemStateException e){log.error(\"Error while setting references: \"+e.toString());return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized void reload()throws ItemNotFoundException,RepositoryException{if(isComplete()){return;}NodeId id=parent.getWorkspaceId();Iterator<ChildInfo>childNodeInfos=factory.getItemStateFactory().getChildNodeInfos(id);update(childNodeInfos);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override Path buildPath(boolean workspacePath)throws RepositoryException{Path parentPath=parent.buildPath(workspacePath);return getPathFactory().create(parentPath,getName(),true);}"
  },
  {
    "code_smells": [],
    "source_code": "public QPropertyDefinition[]getMandatoryQPropertyDefinitions(){if(namedItemDefs.size()==0){return QPropertyDefinition.EMPTY_ARRAY;}ArrayList<QItemDefinition>defs=new ArrayList<QItemDefinition>(namedItemDefs.size());for(List<QItemDefinition>list : namedItemDefs.values()){for(QItemDefinition qDef : list){if(!qDef.definesNode()&& qDef.isMandatory()){defs.add(qDef);}}}if(defs.size()==0){return QPropertyDefinition.EMPTY_ARRAY;}return defs.toArray(new QPropertyDefinition[defs.size()]);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ConcurrentMap<K,V>asMap(){return new ConcurrentMap<K,V>(){@Override public int size(){long size=CacheLIRS.this.size();return(int)Math.min(size,Integer.MAX_VALUE);}@Override public boolean isEmpty(){return CacheLIRS.this.size()==0;}@Override public boolean containsKey(Object key){return CacheLIRS.this.containsKey(key);}@Override public boolean containsValue(Object value){return CacheLIRS.this.containsValue(value);}@SuppressWarnings(\"unchecked\")@Override public V get(Object key){return CacheLIRS.this.peek((K)key);}@Override public V put(K key,V value){return CacheLIRS.this.put(key,value,sizeOf(key,value));}@Override public V remove(Object key){@SuppressWarnings(\"unchecked\")V old=CacheLIRS.this.getUnchecked((K)key);CacheLIRS.this.invalidate(key);return old;}@Override public void putAll(Map<? extends K,? extends V>m){for(Map.Entry<? extends K,? extends V>e : m.entrySet()){put(e.getKey(),e.getValue());}}@Override public void clear(){CacheLIRS.this.clear();}@Override public Set<K>keySet(){return CacheLIRS.this.keySet();}@Override public Collection<V>values(){return CacheLIRS.this.values();}@Override public Set<java.util.Map.Entry<K,V>>entrySet(){return CacheLIRS.this.entrySet();}@Override public V putIfAbsent(K key,V value){return CacheLIRS.this.putIfAbsent(key,value);}@Override public boolean remove(Object key,Object value){return CacheLIRS.this.remove(key,value);}@Override public boolean replace(K key,V oldValue,V newValue){return CacheLIRS.this.replace(key,oldValue,newValue);}@Override public V replace(K key,V value){return CacheLIRS.this.replace(key,value);}};}"
  },
  {
    "code_smells": [],
    "source_code": "private long numChildNodes(Node node)throws RepositoryException{NodeIterator iterator=node.getNodes();if(iterator.getSize()>=0){return iterator.getSize();}else{int num=0;while(iterator.hasNext()&& num<BUCKET_SIZE){iterator.nextNode();num++;}return num;}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public Validator childNodeChanged(String name,NodeState before,NodeState after)throws CommitFailedException{Tree beforeTree=(parentBefore==null)? null : parentBefore.getChild(name);Tree afterTree=parentAfter.getChild(name);if(isTokenTree(beforeTree)|| isTokenTree(afterTree)){validateTokenTree(afterTree);}else if(isTokensParent(beforeTree)|| isTokensParent(afterTree)){validateTokensParent(afterTree);}return new VisibleValidator(new TokenValidator(beforeTree,afterTree,commitInfo),true,true);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void propertyChanged(PropertyState before,PropertyState after)throws CommitFailedException{String propertyName=after.getName();if(TOKEN_ATTRIBUTE_KEY.equals(propertyName)){String msg=\"Attempt to change reserved token property \"+propertyName;throw constraintViolation(61,msg);}else if(TOKEN_ATTRIBUTE_EXPIRY.equals(propertyName)){verifyCommitInfo();}else if(JcrConstants.JCR_PRIMARYTYPE.equals(propertyName)){if(TOKEN_NT_NAME.equals(after.getValue(Type.STRING))){throw constraintViolation(62,\"Changing primary type of existing node to the reserved token node type.\");}if(isTokensParent(parentAfter)&& TOKENS_NT_NAME.equals(before.getValue(Type.STRING))){throw constraintViolation(69,\"Cannot change the primary type of an existing.tokens node.\");}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean releaseCheckpoint(String checkpoint){log.info(\"Released checkpoint[{}]\",checkpoint);return store.release(checkpoint);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean removeCheckpoint(String name){checkNotNull(name);for(int i=0;i<5;i++){if(commitSemaphore.tryAcquire()){try{refreshHead(true);SegmentNodeState state=head.get();SegmentNodeBuilder builder=state.builder();NodeBuilder cp=builder.child(\"checkpoints\").child(name);if(cp.exists()){cp.remove();SegmentNodeState newState=builder.getNodeState();if(revisions.setHead(state.getRecordId(),newState.getRecordId())){refreshHead(false);return true;}}}finally{commitSemaphore.release();}}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public InputStream getStream()throws RepositoryException{if(file==null && buffer==null){try{loadBinary();}catch(IOException e){throw new RepositoryException(e);}}if(file!=null){try{return new FileInputStream(file);}catch(FileNotFoundException fnfe){throw new RepositoryException(\"file backing binary value not found\",fnfe);}}else{return new ByteArrayInputStream(buffer);}}"
  },
  {
    "code_smells": [],
    "source_code": "public RepositoryServiceImpl(String jcrServerURI,String defaultWorkspaceName,BatchReadConfig batchReadConfig,int itemInfoCacheSize,int maximumHttpConnections)throws RepositoryException{super(jcrServerURI,IdFactoryImpl.getInstance(),NameFactoryImpl.getInstance(),PathFactoryImpl.getInstance(),new QValueFactoryImpl(),itemInfoCacheSize,maximumHttpConnections);try{URI repositoryUri=computeRepositoryUri(jcrServerURI);this.jcrServerURI=repositoryUri.toString();}catch(URISyntaxException e){throw new RepositoryException(e);}this.defaultWorkspaceName=defaultWorkspaceName;if(batchReadConfig==null){this.batchReadConfig=new BatchReadConfig(){public int getDepth(Path path,PathResolver resolver){return 0;}};}else{this.batchReadConfig=batchReadConfig;}}"
  },
  {
    "code_smells": [],
    "source_code": "private Mono<ModSeq>tryUpdateModSeq(CassandraId mailboxId,ModSeq modSeq){ModSeq nextModSeq=modSeq.next();return cassandraAsyncExecutor.executeReturnApplied(update.bind().setUUID(MAILBOX_ID,mailboxId.asUuid()).setLong(NEXT_MODSEQ,nextModSeq.getValue()).setLong(MOD_SEQ_CONDITION,modSeq.getValue())).flatMap(success->successToModSeq(nextModSeq,success));}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private QueryBuilder convertCustomFlagCriterion(SearchQuery.CustomFlagCriterion criterion){QueryBuilder termQueryBuilder=termQuery(JsonMessageConstants.USER_FLAGS,criterion.getFlag());if(criterion.getOperator().isSet()){return termQueryBuilder;}else{return boolQuery().mustNot(termQueryBuilder);}}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder username(String username){Preconditions.checkState(!this.username.isPresent());this.username=Optional.of(username);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "private SimpleDateFormat createFormat(DateResolution dateResolution){switch(dateResolution){case Year: return new SimpleDateFormat(\"yyyy\");case Month: return new SimpleDateFormat(\"yyyyMM\");case Day: return new SimpleDateFormat(\"yyyyMMdd\");case Hour: return new SimpleDateFormat(\"yyyyMMddhh\");case Minute: return new SimpleDateFormat(\"yyyyMMddhhmm\");case Second: return new SimpleDateFormat(\"yyyyMMddhhmmss\");default: return new SimpleDateFormat(\"yyyyMMddhhmmssSSS\");}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private ByteBuffer toByteBuffer(Serializable serializable){try{ByteArrayOutputStream outputStream=new ByteArrayOutputStream();new ObjectOutputStream(outputStream).writeObject(serializable);return ByteBuffer.wrap(outputStream.toByteArray());}catch(IOException e){throw new RuntimeException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public Address buildAddress(ASTaddress node,DecodeMonitor monitor)throws ParseException{ChildNodeIterator it=new ChildNodeIterator(node);Node n=it.next();if(n instanceof ASTaddr_spec){return buildAddrSpec((ASTaddr_spec)n);}else if(n instanceof ASTangle_addr){return buildAngleAddr((ASTangle_addr)n);}else if(n instanceof ASTphrase){String name=buildString((ASTphrase)n,false);Node n2=it.next();if(n2 instanceof ASTgroup_body){return new Group(name,buildGroupBody((ASTgroup_body)n2,monitor));}else if(n2 instanceof ASTangle_addr){try{name=DecoderUtil.decodeEncodedWords(name,monitor);}catch(IllegalArgumentException e){throw new ParseException(e);}Mailbox mb=buildAngleAddr((ASTangle_addr)n2);return new Mailbox(name,mb.getRoute(),mb.getLocalPart(),mb.getDomain());}else{throw new ParseException(\"Address \\\"group_body\\\" or \\\"angle_addr\\\" is expected but got \\\"\"+n+\"\\\"\");}}else{throw new ParseException(\"Address \\\"phrase\\\" is expected but got \\\"\"+n+\"\\\"\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getUsername(){return username;}"
  },
  {
    "code_smells": [],
    "source_code": "public String command(){String flags;if(add){flags=\"+FLAGS \";}else if(subtract){flags=\"-FLAGS \";}else{flags=\" FLAGS \";}if(silent){flags=flags+\".SILENT\";}return \"STORE \"+msn+flags+this.flags+\")\";}"
  },
  {
    "code_smells": [],
    "source_code": "private String getUnquoted(){while(i<size){parseLiteral();parseEL();}return result.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "private String escapeCDATA(String text){if(text==null)return \"\";int len=text.length();CharArrayWriter result=new CharArrayWriter(len);for(int i=0;i<len;i++){if(((i+2)<len)&&(text.charAt(i)==']')&&(text.charAt(i+1)==']')&&(text.charAt(i+2)=='>')){result.write(']');result.write(']');result.write('&');result.write('g');result.write('t');result.write(';');i+=2;}else{result.write(text.charAt(i));}}return result.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "private String getPageEncodingFromDirective(Attributes attrs,String attrName){String value=attrs.getValue(attrName);if(attrName.equals(\"pageEncoding\")){return value;}String contentType=value;String encoding=null;if(contentType!=null){int loc=contentType.indexOf(CHARSET);if(loc!=-1){encoding=contentType.substring(loc+CHARSET.length());}}return encoding;}"
  },
  {
    "code_smells": [],
    "source_code": "SDEInstaller(File inClassFile,byte[]sdeAttr,File outClassFile)throws IOException{if(!inClassFile.exists()){throw new FileNotFoundException(\"no such file: \"+inClassFile);}this.sdeAttr=sdeAttr;orig=readWhole(inClassFile);gen=new byte[orig.length+sdeAttr.length+100];addSDE();FileOutputStream outStream=new FileOutputStream(outClassFile);outStream.write(gen,0,genPos);outStream.close();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public long size(){return currentSize;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void sync(){if(dirty)writeState();}"
  },
  {
    "code_smells": [],
    "source_code": "public RDFParserBuilder fromString(String string){clearSource();this.content=string;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "private static Var asVar(Node node){if(Var.isVar(node))return Var.alloc(node);return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void endIterator(Iterator<?>iterator){checkIfClosed();transaction.removeIterator(iterator);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void configure(TestElement el){setName(el.getName());Arguments arguments=(Arguments)el.getProperty(HTTPSamplerBase.ARGUMENTS).getObjectValue();boolean useRaw=el.getPropertyAsBoolean(HTTPSamplerBase.POST_BODY_RAW,HTTPSamplerBase.POST_BODY_RAW_DEFAULT);if(useRaw){String postBody=computePostBody(arguments,true);postBodyContent.setInitialText(postBody);postBodyContent.setCaretPosition(0);argsPanel.clear();postContentTabbedPane.setSelectedIndex(tabRawBodyIndex,false);}else{postBodyContent.setInitialText(\"\");argsPanel.configure(arguments);postContentTabbedPane.setSelectedIndex(TAB_PARAMETERS,false);}if(showFileUploadPane){filesPanel.configure(el);}domain.setText(el.getPropertyAsString(HTTPSamplerBase.DOMAIN));String portString=el.getPropertyAsString(HTTPSamplerBase.PORT);if(portString.equals(HTTPSamplerBase.UNSPECIFIED_PORT_AS_STRING)){port.setText(\"\");}else{port.setText(portString);}protocol.setText(el.getPropertyAsString(HTTPSamplerBase.PROTOCOL));contentEncoding.setText(el.getPropertyAsString(HTTPSamplerBase.CONTENT_ENCODING));path.setText(el.getPropertyAsString(HTTPSamplerBase.PATH));if(notConfigOnly){method.setText(el.getPropertyAsString(HTTPSamplerBase.METHOD));followRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.FOLLOW_REDIRECTS));autoRedirects.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.AUTO_REDIRECTS));useKeepAlive.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.USE_KEEPALIVE));useMultipart.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.DO_MULTIPART_POST));useBrowserCompatibleMultipartMode.setSelected(el.getPropertyAsBoolean(HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART,HTTPSamplerBase.BROWSER_COMPATIBLE_MULTIPART_MODE_DEFAULT));}}"
  },
  {
    "code_smells": [],
    "source_code": "private JPanel createPortPanel(){portField=new JTextField(HttpMirrorControl.DEFAULT_PORT_S,8);portField.setName(HttpMirrorControl.PORT);JLabel label=new JLabel(JMeterUtils.getResString(\"port\"));label.setLabelFor(portField);maxPoolSizeField=new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_POOL_SIZE),8);maxPoolSizeField.setName(HttpMirrorControl.MAX_POOL_SIZE);JLabel mpsLabel=new JLabel(JMeterUtils.getResString(\"httpmirror_max_pool_size\"));mpsLabel.setLabelFor(maxPoolSizeField);maxQueueSizeField=new JTextField(Integer.toString(HttpMirrorControl.DEFAULT_MAX_QUEUE_SIZE),8);maxQueueSizeField.setName(HttpMirrorControl.MAX_QUEUE_SIZE);JLabel mqsLabel=new JLabel(JMeterUtils.getResString(\"httpmirror_max_queue_size\"));mqsLabel.setLabelFor(maxQueueSizeField);HorizontalPanel panel=new HorizontalPanel();panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),JMeterUtils.getResString(\"httpmirror_settings\")));panel.add(label);panel.add(portField);panel.add(mpsLabel);panel.add(maxPoolSizeField);panel.add(mqsLabel);panel.add(maxQueueSizeField);panel.add(Box.createHorizontalStrut(10));return panel;}"
  },
  {
    "code_smells": [],
    "source_code": "protected static boolean isNonProxy(String host){return nonProxyHostFull.contains(host)|| isPartialMatch(host);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int compare(PropertyDescriptor d1,PropertyDescriptor d2){String g1=group(d1);String g2=group(d2);Integer go1=groupOrder(g1);Integer go2=groupOrder(g2);int result=go1.compareTo(go2);if(result!=0){return result;}result=g1.compareTo(g2);if(result!=0){return result;}Integer po1=propertyOrder(d1);Integer po2=propertyOrder(d2);result=po1.compareTo(po2);if(result!=0){return result;}return d1.getName().compareTo(d2.getName());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void setNumberValue(Number n){value=n.longValue();}"
  },
  {
    "code_smells": [],
    "source_code": "public GraphVisualizer(){model=new CachingStatCalculator(\"Graph\");graph=new Graph(model);init();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public JsonSchemaGeneratorBuilder useInterfaceProxies(boolean value){super.useInterfaceProxies(value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return String.format(\"Partition(topic=%s,partition=%d,leader=%s,replicas=%s,isr=%s,offlineReplicas=%s)\",topic,partition,leader==null ? \"none\" : leader.idString(),formatNodeIds(replicas),formatNodeIds(inSyncReplicas),formatNodeIds(offlineReplicas));}"
  },
  {
    "code_smells": [],
    "source_code": "public Password(String value){this.value=value;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){if(this==obj)return true;if(!(obj instanceof Quota))return false;Quota that=(Quota)obj;return(that.bound==this.bound)&&(that.upper==this.upper);}"
  },
  {
    "code_smells": [],
    "source_code": "boolean updateNewAndRestoringTasks(){active.initializeNewTasks();standby.initializeNewTasks();final Collection<TopicPartition>restored=changelogReader.restore(active);active.updateRestored(restored);if(active.allTasksRunning()){final Set<TopicPartition>assignment=consumer.assignment();log.trace(\"Resuming partitions{}\",assignment);consumer.resume(assignment);assignStandbyPartitions();return true;}return false;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public Object doExecute()throws Exception{Group group=groupManager.findGroupByName(groupName);if(group==null){System.err.println(\"Cluster group \"+groupName+\" doesn't exist\");return null;}CellarSupport support=new CellarSupport();support.setClusterManager(clusterManager);support.setGroupManager(groupManager);support.setConfigurationAdmin(configurationAdmin);if(!in && !out){in=true;out=true;}if(!whitelist && !blacklist){whitelist=true;blacklist=true;}if(pid==null || pid.isEmpty()){if(in){if(whitelist){Set<String>list=support.getListEntries(Configurations.WHITELIST,groupName,Constants.CATEGORY,EventType.INBOUND);}if(blacklist){Set<String>list=support.getListEntries(Configurations.BLACKLIST,groupName,Constants.CATEGORY,EventType.INBOUND);}}if(out){if(whitelist){Set<String>list=support.getListEntries(Configurations.WHITELIST,groupName,Constants.CATEGORY,EventType.OUTBOUND);}if(blacklist){Set<String>list=support.getListEntries(Configurations.BLACKLIST,groupName,Constants.CATEGORY,EventType.OUTBOUND);}}}else{if(in){if(whitelist){support.switchListEntry(Configurations.WHITELIST,groupName,Constants.CATEGORY,EventType.INBOUND,pid);}if(blacklist){support.switchListEntry(Configurations.BLACKLIST,groupName,Constants.CATEGORY,EventType.INBOUND,pid);}}if(out){if(whitelist){support.switchListEntry(Configurations.WHITELIST,groupName,Constants.CATEGORY,EventType.OUTBOUND,pid);}if(blacklist){support.switchListEntry(Configurations.BLACKLIST,groupName,Constants.CATEGORY,EventType.OUTBOUND,pid);}}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public void stop()throws Exception{service.stopInstance(name);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){String typeStr=tag().typeStr()+\"[\"+\"tag=\"+tag()+\",len=\"+getHeaderLength()+\"+\"+getBodyLength()+\"]\";return typeStr+\"eoc\";}"
  },
  {
    "code_smells": [],
    "source_code": "public String getAdminRealm(){return adminServerSetting.getAdminRealm();}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean pricipalCompareIgnoreRealm(PrincipalName princ1,PrincipalName princ2)throws KrbException{if(princ1!=null && princ2!=null){princ1.setRealm(null);princ2.setRealm(null);if(princ1.getName().equals(princ2.getName())){return true;}else{return false;}}else{throw new KrbException(\"principal can't be null.\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public int confounderSize(){return 16;}"
  },
  {
    "code_smells": [],
    "source_code": "public GSSCredentialSpi getCredentialElement(GSSNameSpi name,int initLifetime,int acceptLifetime,int usage)throws GSSException{if(name!=null && !(name instanceof GssNameElement)){name=GssNameElement.getInstance(name.toString(),name.getStringNameType());}GssCredElement credElement;if(usage==GSSCredential.INITIATE_ONLY){credElement=GssInitCred.getInstance(caller,(GssNameElement)name,initLifetime);}else if(usage==GSSCredential.ACCEPT_ONLY){credElement=GssAcceptCred.getInstance(caller,(GssNameElement)name,acceptLifetime);}else if(usage==GSSCredential.INITIATE_AND_ACCEPT){throw new GSSException(GSSException.FAILURE,-1,\"Unsupported usage mode: INITIATE_AND_ACCEPT\");}else{throw new GSSException(GSSException.FAILURE,-1,\"Unknown usage mode: \"+usage);}return credElement;}"
  },
  {
    "code_smells": [],
    "source_code": "public byte[]decryptData(byte[]dataEncrypted,int keyUsage)throws GSSException{byte[]ret;try{EncTypeHandler encHandler=EncryptionHandler.getEncHandler(encKey.getKeyType());ret=encHandler.decrypt(dataEncrypted,encKey.getKeyData(),keyUsage);}catch(KrbException e){throw new GSSException(GSSException.FAILURE,-1,e.getMessage());}return ret;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public KrbIdentity getIdentity(String principalName)throws KrbException{if(idCache.containsKey(principalName)){return idCache.get(principalName);}KrbIdentity identity=underlying.getIdentity(principalName);if(identity!=null){idCache.put(principalName,identity);}return identity;}"
  },
  {
    "code_smells": [],
    "source_code": "public static void validate(EncryptionKey encKey,ApRep apRep,ApReq apReqSent)throws KrbException{EncAPRepPart encPart=EncryptionUtil.unseal(apRep.getEncryptedEncPart(),encKey,KeyUsage.AP_REP_ENCPART,EncAPRepPart.class);apRep.setEncRepPart(encPart);if(apReqSent!=null){Authenticator auth=apReqSent.getAuthenticator();if(!encPart.getCtime().equals(auth.getCtime())|| encPart.getCusec()!=auth.getCusec()){throw new KrbException(KrbErrorCode.KRB_AP_ERR_MUT_FAIL);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized void createPrincipal(String principal,String password)throws KrbException{kadmin.addPrincipal(principal,password);}"
  },
  {
    "code_smells": [],
    "source_code": "public AuthorizationData getAuthzData(){if(authzData==null){authzData=getFieldAs(IntendedForApplicationClassField.IFAC_elements,AuthorizationData.class);}return authzData;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getName(){return name();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int getValue(){return ordinal();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void toBytes(){byte[]bytes=ByteBuffer.allocate(4).putInt(getValue().getValue()).array();setBytes(bytes);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void main(String[]args)throws Exception{Configuration conf=new Configuration();String[]otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();if(otherArgs.length!=2){System.err.println(\"Usage: wordcount<in><out>\");System.exit(2);}Job job=Job.getInstance(conf,\"Word Count\");job.setJarByClass(WordCount.class);job.setMapperClass(TokenizerMapper.class);job.setCombinerClass(IntSumReducer.class);job.setReducerClass(IntSumReducer.class);job.setOutputKeyClass(Text.class);job.setOutputValueClass(IntWritable.class);FileInputFormat.addInputPath(job,new Path(otherArgs[0]));FileOutputFormat.setOutputPath(job,new Path(otherArgs[1]));System.exit(job.waitForCompletion(true)? 0 : 1);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override protected boolean isUnreachableException(Throwable ex){if(super.isUnreachableException(ex)){return true;}if(ex instanceof SocketTimeoutException)return true;List<String>exceptionList=new ArrayList<>();exceptionList.add(ex.getClass().getName());Throwable t=ex.getCause();int depth=0;while(t!=null && depth<5){exceptionList.add(t.getClass().getName());depth++;if(t instanceof ConnectException){return true;}t=t.getCause();}logger.trace(\"Not an unreachable exception with causes{}\",exceptionList);return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){final int prime=31;int result=1;result=prime*result+((name==null)? 0 : name.hashCode());result=prime*result+((table==null)? 0 : table.hashCode());return result;}"
  },
  {
    "code_smells": [],
    "source_code": "private FunctionDesc findAggrFuncFromCubeDesc(FunctionDesc aggrFunc){for(MeasureDesc measure : cubeDesc.getMeasures()){if(measure.getFunction().equals(aggrFunc))return measure.getFunction();}return aggrFunc;}"
  },
  {
    "code_smells": [],
    "source_code": "public StorageResponseGTScatter(GTScanRequest scanRequest,IPartitionStreamer partitionStreamer,StorageContext context){this.info=scanRequest.getInfo();this.partitionStreamer=partitionStreamer;this.blocks=partitionStreamer.asByteArrayIterator();this.columns=scanRequest.getColumns();this.groupByDims=scanRequest.getAggrGroupBy();this.needSorted=(context.getFinalPushDownLimit()!=Integer.MAX_VALUE)|| context.isStreamAggregateEnabled();}"
  },
  {
    "code_smells": [],
    "source_code": "synchronized public void removeAllAppenders(){if(aai!=null){Vector appenders=new Vector();for(Enumeration iter=aai.getAllAppenders();iter!=null && iter.hasMoreElements();){appenders.add(iter.nextElement());}aai.removeAllAppenders();for(Enumeration iter=appenders.elements();iter.hasMoreElements();){fireRemoveAppenderEvent((Appender)iter.nextElement());}aai=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "private void writeObject(ObjectOutputStream oos)throws java.io.IOException{this.getThreadName();this.getRenderedMessage();this.getNDC();this.getMDCCopy();this.getThrowableStrRep();oos.defaultWriteObject();writeLevel(oos);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public DirectWriteRolloverStrategy build(){int maxIndex=Integer.MAX_VALUE;if(maxFiles!=null){maxIndex=Integer.parseInt(maxFiles);if(maxIndex<0){maxIndex=Integer.MAX_VALUE;}else if(maxIndex<2){LOGGER.error(\"Maximum files too small.Limited to \"+DEFAULT_MAX_FILES);maxIndex=DEFAULT_MAX_FILES;}}final int compressionLevel=Integers.parseInt(compressionLevelStr,Deflater.DEFAULT_COMPRESSION);return new DirectWriteRolloverStrategy(maxIndex,compressionLevel,config.getStrSubstitutor(),customActions,stopCustomActionsOnError,tempCompressedFilePattern);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void run(){while(!shutdown){try{sleep(factoryData.reconnectIntervalMillis);reconnect();}catch(final InterruptedException | SQLException e){logger().debug(\"Cannot reestablish JDBC connection to{}:{}\",factoryData,e.getLocalizedMessage(),e);}finally{latch.countDown();}}}"
  },
  {
    "code_smells": [],
    "source_code": "public StringFormattedMessage(final Locale locale,final String messagePattern,final Object...arguments){this.locale=locale;this.messagePattern=messagePattern;this.argArray=arguments;if(arguments!=null && arguments.length>0 && arguments[arguments.length-1]instanceof Throwable){this.throwable=(Throwable)arguments[arguments.length-1];}}"
  },
  {
    "code_smells": [],
    "source_code": "private void refill()throws IOException{offset+=usableLength;int leftover=length-usableLength;System.arraycopy(buffer,usableLength,buffer,0,leftover);int requested=buffer.length-leftover;int returned=read(input,buffer,leftover,requested);length=returned+leftover;if(returned<requested)usableLength=length;else{usableLength=findSafeEnd();if(usableLength<0)usableLength=length;}breaker.setText(buffer,0,Math.max(0,usableLength));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getInflectionForm(int wordId){return inflFormDict[getLeftId(wordId)];}"
  },
  {
    "code_smells": [],
    "source_code": "public void write(String baseDir)throws IOException{String filename=baseDir+File.separator+CharacterDefinition.class.getName().replace('.',File.separatorChar)+CharacterDefinition.FILENAME_SUFFIX;new File(filename).getParentFile().mkdirs();OutputStream os=new FileOutputStream(filename);try{os=new BufferedOutputStream(os);final DataOutput out=new OutputStreamDataOutput(os);CodecUtil.writeHeader(out,CharacterDefinition.HEADER,CharacterDefinition.VERSION);out.writeBytes(characterCategoryMap,0,characterCategoryMap.length);for(int i=0;i<CharacterDefinition.CLASS_COUNT;i++){final byte b=(byte)((invokeMap[i]? 0x01 : 0x00)|(groupMap[i]? 0x02 : 0x00));out.writeByte(b);}}finally{os.close();}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public boolean incrementToken()throws IOException{for(;;){if(!remainingTokens.isEmpty()){restoreState(remainingTokens.removeFirst());return true;}if(!input.incrementToken())return false;int len=termAtt.length();if(len==0)return true;int firstAlternativeIncrement=inject ? 0 : posAtt.getPositionIncrement();String v=termAtt.toString();String primaryPhoneticValue=encoder.doubleMetaphone(v);String alternatePhoneticValue=encoder.doubleMetaphone(v,true);boolean saveState=inject;if(primaryPhoneticValue!=null && primaryPhoneticValue.length()>0 && !primaryPhoneticValue.equals(v)){if(saveState){remainingTokens.addLast(captureState());}posAtt.setPositionIncrement(firstAlternativeIncrement);firstAlternativeIncrement=0;termAtt.setEmpty().append(primaryPhoneticValue);saveState=true;}if(alternatePhoneticValue!=null && alternatePhoneticValue.length()>0 && !alternatePhoneticValue.equals(primaryPhoneticValue)&& !primaryPhoneticValue.equals(v)){if(saveState){remainingTokens.addLast(captureState());saveState=false;}posAtt.setPositionIncrement(firstAlternativeIncrement);termAtt.setEmpty().append(alternatePhoneticValue);saveState=true;}if(remainingTokens.isEmpty()){return true;}if(saveState){remainingTokens.addLast(captureState());}}}"
  },
  {
    "code_smells": [],
    "source_code": "UnifiedHLImpl(final UnifiedHighlighter.OffsetSource offsetSource){this.offsetSource=offsetSource;maxPassages=new int[hlFields.size()];Arrays.fill(maxPassages,maxFrags);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public PostingsEnum postings(PostingsEnum reuse,int flags)throws IOException{assert !eof;currentFrame.decodeMetaData();return fr.parent.postingsReader.postings(fr.fieldInfo,currentFrame.state,reuse,flags);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "OrdsSegmentTermsEnumFrame pushFrame(FST.Arc<Output>arc,long fp,int length,long termOrd)throws IOException{final OrdsSegmentTermsEnumFrame f=getFrame(1+currentFrame.ord);f.arc=arc;if(f.fpOrig==fp && f.nextEnt!=-1){if(f.prefix>targetBeforeCurrentLength){f.rewind();}else{}assert length==f.prefix;assert termOrd==f.termOrdOrig;}else{f.nextEnt=-1;f.prefix=length;f.state.termBlockOrd=0;f.termOrdOrig=termOrd;f.termOrd=termOrd;f.fpOrig=f.fp=fp;f.lastSubFP=-1;}return f;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void close()throws IOException{boolean success=false;try{if(meta!=null){meta.writeInt(-1);CodecUtil.writeFooter(meta);}if(data!=null){CodecUtil.writeFooter(data);}success=true;}finally{if(success){IOUtils.close(data,meta);}else{IOUtils.closeWhileHandlingException(data,meta);}meta=data=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void testSortedSetEnumAdvanceIndependently()throws IOException{Directory directory=newDirectory();Analyzer analyzer=new MockAnalyzer(random());IndexWriterConfig iwconfig=newIndexWriterConfig(analyzer);iwconfig.setMergePolicy(newLogMergePolicy());RandomIndexWriter iwriter=new RandomIndexWriter(random(),directory,iwconfig);Document doc=new Document();SortedSetDocValuesField field1=new SortedSetDocValuesField(\"field\",new BytesRef(\"2\"));SortedSetDocValuesField field2=new SortedSetDocValuesField(\"field\",new BytesRef(\"3\"));doc.add(field1);doc.add(field2);iwriter.addDocument(doc);field1.setBytesValue(new BytesRef(\"1\"));iwriter.addDocument(doc);field2.setBytesValue(new BytesRef(\"2\"));iwriter.addDocument(doc);iwriter.commit();iwriter.forceMerge(1);DirectoryReader ireader=iwriter.getReader();iwriter.close();SortedSetDocValues dv=getOnlyLeafReader(ireader).getSortedSetDocValues(\"field\");doTestSortedSetEnumAdvanceIndependently(dv);ireader.close();directory.close();}"
  },
  {
    "code_smells": [],
    "source_code": "public void testIndependantIterators()throws IOException{Directory dir=newDirectory();IndexWriterConfig conf=newIndexWriterConfig().setMergePolicy(newLogMergePolicy());CannedNormSimilarity sim=new CannedNormSimilarity(new long[]{42,10,20});conf.setSimilarity(sim);RandomIndexWriter writer=new RandomIndexWriter(random(),dir,conf);Document doc=new Document();Field indexedField=new TextField(\"indexed\",\"a\",Field.Store.NO);doc.add(indexedField);for(int i=0;i<3;++i){writer.addDocument(doc);}writer.forceMerge(1);LeafReader r=getOnlyLeafReader(maybeWrapWithMergingReader(writer.getReader()));NumericDocValues n1=r.getNormValues(\"indexed\");NumericDocValues n2=r.getNormValues(\"indexed\");assertEquals(0,n1.nextDoc());assertEquals(42,n1.longValue());assertEquals(1,n1.nextDoc());assertEquals(10,n1.longValue());assertEquals(0,n2.nextDoc());assertEquals(42,n2.longValue());assertEquals(1,n2.nextDoc());assertEquals(10,n2.longValue());assertEquals(2,n2.nextDoc());assertEquals(20,n2.longValue());assertEquals(2,n1.nextDoc());assertEquals(20,n1.longValue());assertEquals(DocIdSetIterator.NO_MORE_DOCS,n1.nextDoc());assertEquals(DocIdSetIterator.NO_MORE_DOCS,n2.nextDoc());IOUtils.close(r,writer,dir);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int docID(){return in.docID();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void markLargestWriterPending(DocumentsWriterFlushControl control,ThreadState perThreadState,final long currentBytesPerThread){ThreadState largestNonPendingWriter=findLargestNonPendingWriter(control,perThreadState);if(largestNonPendingWriter!=null){control.setFlushPending(largestNonPendingWriter);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public BytesRef next(){if(input.position()<end){try{int code=input.readVInt();boolean newField=(code & 1)!=0;if(newField){field=input.readString();}int prefix=code>>>1;int suffix=input.readVInt();readTermBytes(prefix,suffix);return bytes;}catch(IOException e){throw new RuntimeException(e);}}else{field=null;return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public int maxDoc(){if(this.maxDoc==-1){throw new IllegalStateException(\"maxDoc isn't set yet\");}return maxDoc;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int length(){return this.chars.length;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Explanation explain(LeafReaderContext context,int doc)throws IOException{Scorer scorer=scorer(context);if(scorer!=null){int newDoc=scorer.iterator().advance(doc);if(newDoc==doc){final float freq;if(scorer instanceof BM25FScorer){freq=((BM25FScorer)scorer).freq();}else{assert scorer instanceof TermScorer;freq=((TermScorer)scorer).freq();}final MultiNormsLeafSimScorer docScorer=new MultiNormsLeafSimScorer(simWeight,context.reader(),fieldAndWeights.values(),true);Explanation freqExplanation=Explanation.match(freq,\"termFreq=\"+freq);Explanation scoreExplanation=docScorer.explain(doc,freqExplanation);return Explanation.match(scoreExplanation.getValue(),\"weight(\"+getQuery()+\" in \"+doc+\")[\"+similarity.getClass().getSimpleName()+\"],result of:\",scoreExplanation);}}return Explanation.noMatch(\"no matching term\");}"
  },
  {
    "code_smells": [],
    "source_code": "public Builder(float k1,float b){this.similarity=new BM25Similarity(k1,b);}"
  },
  {
    "code_smells": [],
    "source_code": "public Geo3dRectangleShape(final GeoBBox shape,final SpatialContext spatialcontext,double minX,double maxX,double minY,double maxY){super(shape,spatialcontext);this.minX=minX;this.maxX=maxX;this.minY=minY;this.maxY=maxY;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void append(PointValue pointValue)throws IOException{assert closed==false : \"Point writer is already closed\";BytesRef packedValue=pointValue.packedValue();assert packedValue.length==packedBytesLength : \"[packedValue]must have length[\"+packedBytesLength+\"]but was[\"+packedValue.length+\"]\";out.writeBytes(packedValue.bytes,packedValue.offset,packedValue.length);BytesRef docIDBytes=pointValue.docIDBytes();assert docIDBytes.length==Integer.BYTES : \"[docIDBytes]must have length[\"+Integer.BYTES+\"]but was[\"+docIDBytes.length+\"]\";out.writeBytes(docIDBytes.bytes,docIDBytes.offset,docIDBytes.length);count++;assert expectedCount==0 || count<=expectedCount : \"expectedCount=\"+expectedCount+\" vs count=\"+count;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void configure(boolean noOutput,TreeBuilder treeBuilder,Dataset dataset){Preconditions.checkArgument(treeBuilder!=null,\"TreeBuilder not found in the Job parameters\");this.noOutput=noOutput;this.treeBuilder=treeBuilder;this.dataset=dataset;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){Arrays.fill(this.state,0,state.length-1,FREE);distinct=0;freeEntries=table.length;trimToSize();}"
  },
  {
    "code_smells": [],
    "source_code": "private int computeBatchSize(int position,int length){int batchSize=QUERY_BATCH_SIZE;while(length-position<batchSize){batchSize=batchSize>>1;}return batchSize;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected CloseableIteration<? extends BindingSet,QueryEvaluationException>evaluateInternal(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings,boolean includeInferred)throws SailException{tupleExpr=tupleExpr.clone();if(!(tupleExpr instanceof QueryRoot)){tupleExpr=new QueryRoot(tupleExpr);}try{KiWiTripleSource tripleSource=new KiWiTripleSource(this,includeInferred);EvaluationStrategy strategy=new EvaluationStrategyImpl(tripleSource,dataset);new BindingAssigner().optimize(tupleExpr,dataset,bindings);new ConstantOptimizer(strategy).optimize(tupleExpr,dataset,bindings);new CompareOptimizer().optimize(tupleExpr,dataset,bindings);new ConjunctiveConstraintSplitter().optimize(tupleExpr,dataset,bindings);new DisjunctiveConstraintOptimizer().optimize(tupleExpr,dataset,bindings);new SameTermFilterOptimizer().optimize(tupleExpr,dataset,bindings);new QueryModelNormalizer().optimize(tupleExpr,dataset,bindings);new QueryJoinOptimizer(new KiWiEvaluationStatistics()).optimize(tupleExpr,dataset,bindings);new IterativeEvaluationOptimizer().optimize(tupleExpr,dataset,bindings);new FilterOptimizer().optimize(tupleExpr,dataset,bindings);new OrderLimitOptimizer().optimize(tupleExpr,dataset,bindings);return strategy.evaluate(tupleExpr,EmptyBindingSet.getInstance());}catch(QueryEvaluationException e){throw new SailException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void deleteIndexFiles(boolean full)throws IOException{if(indexDirectory!=null){String[]names=indexDirectory.listAll();if(names!=null){for(String name : names){if(!(name.equals(INDEX_PACKER_PROPERTIES_FILE)|| name.equals(INDEX_UPDATER_PROPERTIES_FILE))){indexDirectory.deleteFile(name);}}}if(full){try{indexDirectory.deleteFile(INDEX_PACKER_PROPERTIES_FILE);}catch(IOException ioe){}try{indexDirectory.deleteFile(INDEX_UPDATER_PROPERTIES_FILE);}catch(IOException ioe){}}IndexUtils.deleteTimestamp(indexDirectory);}}"
  },
  {
    "code_smells": [],
    "source_code": "private static ScheduledExecutorService createTimeoutCheckScheduler(){ThreadFactory threadFactory=newDaemonThreadFactory(\"timeout-check-timer\");return newScheduledThreadPool(1,threadFactory);}"
  },
  {
    "code_smells": [],
    "source_code": "public static EarModule newEarModule(Artifact artifact,JavaEEVersion javaEEVersion,String defaultLibBundleDir,Boolean includeInApplicationXml,ArtifactTypeMappingService typeMappingService)throws UnknownArtifactTypeException{final String artifactType;try{artifactType=typeMappingService.getStandardType(artifact.getType());}catch(UnknownArtifactTypeException e){throw new UnknownArtifactTypeException(e.getMessage()+\" for \"+artifact.getArtifactId());}if(\"jar\".equals(artifactType)){return new JarModule(artifact,defaultLibBundleDir,includeInApplicationXml);}else if(\"ejb\".equals(artifactType)){return new EjbModule(artifact);}else if(\"par\".equals(artifactType)){return new ParModule(artifact);}else if(\"ejb-client\".equals(artifactType)){if(javaEEVersion.le(JavaEEVersion.ONE_DOT_FOUR)){return new EjbClientModule(artifact,null);}else{return new EjbClientModule(artifact,defaultLibBundleDir);}}else if(\"app-client\".equals(artifactType)){return new AppClientModule(artifact);}else if(\"rar\".equals(artifactType)){return new RarModule(artifact);}else if(\"war\".equals(artifactType)){return new WebModule(artifact);}else if(\"sar\".equals(artifactType)){return new SarModule(artifact);}else if(\"wsr\".equals(artifactType)){return new WsrModule(artifact);}else if(\"har\".equals(artifactType)){return new HarModule(artifact);}else{throw new IllegalStateException(\"Could not handle artifact type[\"+artifactType+\"]\");}}"
  },
  {
    "code_smells": [],
    "source_code": "private Set<Taglet>collectTaglets()throws MavenReportException{Set<Taglet>result=new LinkedHashSet<>();if(includeDependencySources){try{resolveDependencyBundles();}catch(IOException e){throw new MavenReportException(\"Failed to resolve javadoc bundles from dependencies: \"+e.getMessage(),e);}if(isNotEmpty(dependencyJavadocBundles)){for(JavadocBundle bundle : dependencyJavadocBundles){JavadocOptions options=bundle.getOptions();if(options!=null && isNotEmpty(options.getTaglets())){result.addAll(options.getTaglets());}}}}if(taglets!=null && taglets.length>0){result.addAll(Arrays.asList(taglets));}return result;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private Collection<MavenProject>getAggregatedProjects(){Map<Path,MavenProject>reactorProjectsMap=new HashMap<>();for(MavenProject reactorProject : this.reactorProjects){reactorProjectsMap.put(reactorProject.getBasedir().toPath(),reactorProject);}return modulesForAggregatedProject(project,reactorProjectsMap);}"
  },
  {
    "code_smells": [],
    "source_code": "private void generateReport(Locale locale,LinkcheckModel linkcheckModel){LinkcheckReportGenerator reportGenerator=new LinkcheckReportGenerator(i18n);reportGenerator.setExcludedHttpStatusErrors(excludedHttpStatusErrors);reportGenerator.setExcludedHttpStatusWarnings(excludedHttpStatusWarnings);reportGenerator.setExcludedLinks(excludedLinks);reportGenerator.setExcludedPages(excludedPages);reportGenerator.setHttpFollowRedirect(httpFollowRedirect);reportGenerator.setHttpMethod(httpMethod);reportGenerator.setOffline(offline);reportGenerator.generateReport(locale,linkcheckModel,getSink());closeReport();copyStaticResources();}"
  },
  {
    "code_smells": [],
    "source_code": "public String getStdErr(){StringBuilder str=new StringBuilder();for(String line : stderr){str.append(line);}return str.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected Query beforeRewrite(Query query){query=query.clone();JdbcDataContext dataContext=getDataContext();if(dataContext!=null){String identifierQuoteString=dataContext.getIdentifierQuoteString();if(identifierQuoteString!=null){List<SelectItem>selectItems=query.getSelectClause().getItems();for(SelectItem item : selectItems){String alias=item.getAlias();if(needsQuoting(alias,identifierQuoteString)){item.setAlias(identifierQuoteString+alias+identifierQuoteString);}}List<FromItem>fromItems=query.getFromClause().getItems();for(FromItem item : fromItems){String alias=item.getAlias();if(needsQuoting(alias,identifierQuoteString)){item.setAlias(identifierQuoteString+alias+identifierQuoteString);}}}}return query;}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getMessageHash(JSONObject message,Collection<String>hashFields){List<String>hashElements=hashFields.stream().map(errorField->String.format(\"%s-%s\",errorField,message.get(errorField))).collect(Collectors.toList());return DigestUtils.sha256Hex(String.join(\"|\",hashElements).getBytes(UTF_8));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object apply(List<Object>args,Context context)throws ParseException{if(!initialized){return null;}if(args.size()>2){throw new IllegalArgumentException(\"GEO_GET received more arguments than expected: \"+args.size());}if(args.size()==1 && args.get(0)instanceof String){String ip=(String)args.get(0);if(ip==null || ip.trim().isEmpty()){return null;}Optional<Map<String,String>>result=GeoLiteCityDatabase.INSTANCE.get(ip);return result.orElse(Collections.emptyMap());}else if(args.size()==2 && args.get(1)instanceof List){String ip=(String)args.get(0);@SuppressWarnings(\"unchecked\")List<String>fields=(List)args.get(1);Optional<Map<String,String>>result=GeoLiteCityDatabase.INSTANCE.get(ip);if(fields.size()==1 && result.isPresent()){return result.get().get(fields.get(0));}else if(result.isPresent()){Map<String,String>filteredInfo=new HashMap<>();for(String field : fields){Map<String,String>geoInfo=result.get();filteredInfo.put(field,geoInfo.get(field));}return filteredInfo;}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "protected Put buildPut(Document update)throws IOException{Key k=new Key(update.getGuid(),update.getSensorType());Put put=new Put(Key.toBytes(k));long ts=update.getTimestamp()==null || update.getTimestamp()==0 ? System.currentTimeMillis(): update.getTimestamp();byte[]columnQualifier=Bytes.toBytes(ts);byte[]doc=JSONUtils.INSTANCE.toJSONPretty(update.getDocument());put.addColumn(cf,columnQualifier,doc);return put;}"
  },
  {
    "code_smells": [],
    "source_code": "public JavaCharStream(java.io.Reader dstream,int startline,int startcolumn,int buffersize){inputStream=dstream;line=startline;column=startcolumn-1;available=bufsize=buffersize;buffer=new char[buffersize];bufline=new int[buffersize];bufcolumn=new int[buffersize];nextCharBuf=new char[4096];}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void encodeBadge(FacesContext facesContext,AbstractUICommand command)throws IOException{final AbstractUIButton button=(AbstractUIButton)command;for(final UIComponent child : button.getChildren()){if(child instanceof AbstractUIBadge){child.encodeAll(facesContext);}}}"
  },
  {
    "code_smells": [],
    "source_code": "private String getOwnerPartition(final File swapFile){final String filename=swapFile.getName();final int indexOfDot=filename.indexOf(\".\");if(indexOfDot<1){return null;}final int lastIndexOfDot=filename.lastIndexOf(\".\");if(lastIndexOfDot==indexOfDot){return null;}return filename.substring(indexOfDot+1,lastIndexOfDot);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Map<String,FlowFileEvent>getReportEntries(){return Collections.unmodifiableMap(entries);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public long exportTo(final ContentClaim claim,final Path destination,final boolean append,final long offset,final long length)throws IOException{if(claim==null){if(append){return 0L;}Files.createFile(destination);return 0L;}final StandardOpenOption openOption=append ? StandardOpenOption.APPEND : StandardOpenOption.CREATE;try(final InputStream in=read(claim);final OutputStream destinationStream=Files.newOutputStream(destination,openOption)){if(offset>0){StreamUtils.skip(in,offset);}StreamUtils.copy(in,destinationStream,length);return length;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Collection<ValidationResult>validate(final ValidationContext validationContext,final CredentialsStrategy primaryStrategy){boolean thisIsSelectedStrategy=this==primaryStrategy;Boolean useStrategy=validationContext.getProperty(strategyProperty).asBoolean();if(!thisIsSelectedStrategy && useStrategy){String failureFormat=\"property %1$s cannot be used with %2$s\";Collection<ValidationResult>validationFailureResults=new ArrayList<ValidationResult>();String message=String.format(failureFormat,strategyProperty.getDisplayName(),primaryStrategy.getName());validationFailureResults.add(new ValidationResult.Builder().subject(strategyProperty.getDisplayName()).valid(false).explanation(message).build());return validationFailureResults;}return null;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void onTrigger(final ProcessContext context,final ProcessSession session){List<FlowFile>flowFiles=session.get(context.getProperty(BATCH_SIZE).evaluateAttributeExpressions().asInteger());if(flowFiles==null || flowFiles.size()==0){return;}Map<ItemKeys,FlowFile>keysToFlowFileMap=new HashMap<>();final String table=context.getProperty(TABLE).evaluateAttributeExpressions().getValue();final String hashKeyName=context.getProperty(HASH_KEY_NAME).evaluateAttributeExpressions().getValue();final String hashKeyValueType=context.getProperty(HASH_KEY_VALUE_TYPE).getValue();final String rangeKeyName=context.getProperty(RANGE_KEY_NAME).evaluateAttributeExpressions().getValue();final String rangeKeyValueType=context.getProperty(RANGE_KEY_VALUE_TYPE).getValue();final String jsonDocument=context.getProperty(JSON_DOCUMENT).evaluateAttributeExpressions().getValue();final String charset=context.getProperty(DOCUMENT_CHARSET).evaluateAttributeExpressions().getValue();TableWriteItems tableWriteItems=new TableWriteItems(table);for(FlowFile flowFile : flowFiles){final Object hashKeyValue=getValue(context,HASH_KEY_VALUE_TYPE,HASH_KEY_VALUE,flowFile);final Object rangeKeyValue=getValue(context,RANGE_KEY_VALUE_TYPE,RANGE_KEY_VALUE,flowFile);if(!isHashKeyValueConsistent(hashKeyName,hashKeyValue,session,flowFile)){continue;}if(!isRangeKeyValueConsistent(rangeKeyName,rangeKeyValue,session,flowFile)){continue;}if(!isDataValid(flowFile,jsonDocument)){flowFile=session.putAttribute(flowFile,AWS_DYNAMO_DB_ITEM_SIZE_ERROR,\"Max size of item+attribute should be 400kb but was \"+flowFile.getSize()+jsonDocument.length());session.transfer(flowFile,REL_FAILURE);continue;}ByteArrayOutputStream baos=new ByteArrayOutputStream();session.exportTo(flowFile,baos);try{if(rangeKeyValue==null || StringUtils.isBlank(rangeKeyValue.toString())){tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName,hashKeyValue).withJSON(jsonDocument,IOUtils.toString(baos.toByteArray(),charset)));}else{tableWriteItems.addItemToPut(new Item().withKeyComponent(hashKeyName,hashKeyValue).withKeyComponent(rangeKeyName,rangeKeyValue).withJSON(jsonDocument,IOUtils.toString(baos.toByteArray(),charset)));}}catch(IOException ioe){flowFile=session.putAttribute(flowFile,DYNAMODB_ITEM_IO_ERROR,ioe.getMessage());session.transfer(flowFile,REL_FAILURE);}keysToFlowFileMap.put(new ItemKeys(hashKeyValue,rangeKeyValue),flowFile);}if(keysToFlowFileMap.isEmpty()){return;}final DynamoDB dynamoDB=getDynamoDB();try{BatchWriteItemOutcome outcome=dynamoDB.batchWriteItem(tableWriteItems);handleUnprocessedItems(session,keysToFlowFileMap,table,hashKeyName,hashKeyValueType,rangeKeyName,rangeKeyValueType,outcome);for(FlowFile flowFile : keysToFlowFileMap.values()){session.transfer(flowFile,REL_SUCCESS);}}catch(AmazonServiceException exception){List<FlowFile>failedFlowFiles=processServiceException(session,flowFiles,exception);session.transfer(failedFlowFiles,REL_FAILURE);}catch(AmazonClientException exception){List<FlowFile>failedFlowFiles=processClientException(session,flowFiles,exception);session.transfer(failedFlowFiles,REL_FAILURE);}catch(Exception exception){List<FlowFile>failedFlowFiles=processException(session,flowFiles,exception);session.transfer(failedFlowFiles,REL_FAILURE);}}"
  },
  {
    "code_smells": [],
    "source_code": "private Record transform(final Record record,final JoltTransform transform){Map<String,Object>recordMap=(Map<String,Object>)DataTypeUtils.convertRecordFieldtoObject(record,RecordFieldType.RECORD.getRecordDataType(record.getSchema()));recordMap=(Map<String,Object>)normalizeJoltObjects(recordMap);final Object transformedObject=transform(transform,recordMap);final Object normalizedRecordValues=normalizeRecordObjects(transformedObject);final Record updatedRecord=DataTypeUtils.toRecord(normalizedRecordValues,\"r\");return updatedRecord;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private Map<String,String>tika_parse(InputStream sourceStream,String prefix,Integer maxAttribs,Integer maxAttribLen)throws IOException,TikaException,SAXException{final Metadata metadata=new Metadata();final TikaInputStream tikaInputStream=TikaInputStream.get(sourceStream);try{autoDetectParser.parse(tikaInputStream,new DefaultHandler(),metadata);}finally{tikaInputStream.close();}final Map<String,String>results=new HashMap<>();final Pattern metadataKeyFilter=metadataKeyFilterRef.get();final StringBuilder dataBuilder=new StringBuilder();for(final String key : metadata.names()){if(metadataKeyFilter!=null && !metadataKeyFilter.matcher(key).matches()){continue;}dataBuilder.setLength(0);if(metadata.isMultiValued(key)){for(String val : metadata.getValues(key)){if(dataBuilder.length()>1){dataBuilder.append(\",\");}if(dataBuilder.length()+val.length()<maxAttribLen){dataBuilder.append(val);}else{dataBuilder.append(\"...\");break;}}}else{dataBuilder.append(metadata.get(key));}if(prefix==null){results.put(key,dataBuilder.toString().trim());}else{results.put(prefix+key,dataBuilder.toString().trim());}if(maxAttribs!=null && results.size()>=maxAttribs){break;}}return results;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void process(OutputStream out)throws IOException{IOUtils.write(\"<docs>\",out,StandardCharsets.UTF_8);for(SolrDocument doc : response.getResults()){final String xml=ClientUtils.toXML(toSolrInputDocument(doc));IOUtils.write(xml,out,StandardCharsets.UTF_8);}IOUtils.write(\"</docs>\",out,StandardCharsets.UTF_8);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Relationship mapToRelationship(final ProcessContext context,final FlowFile flowFile){final List<Relationship>relationshipList=DistributeLoad.this.weightedRelationshipListRef.get();final int numRelationships=relationshipList.size();boolean foundFreeRelationship=false;Relationship relationship=null;int attempts=0;while(!foundFreeRelationship){final long counterValue=counter.getAndIncrement();final int idx=(int)(counterValue % numRelationships);relationship=relationshipList.get(idx);foundFreeRelationship=context.getAvailableRelationships().contains(relationship);if(++attempts % numRelationships==0 && !foundFreeRelationship){return null;}}return relationship;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isSiteToSiteSecure(){return isSiteToSiteSecure;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override protected void writeTransactionResponse(ResponseCode response,String explanation)throws IOException{HttpCommunicationsSession commSession=(HttpCommunicationsSession)peer.getCommunicationsSession();if(TransferDirection.RECEIVE.equals(direction)){switch(response){case CONFIRM_TRANSACTION: logger.debug(\"{}Confirming transaction.checksum={}\",this,explanation);commSession.setChecksum(explanation);break;case TRANSACTION_FINISHED: logger.debug(\"{}Finishing transaction.\",this);break;case CANCEL_TRANSACTION: logger.debug(\"{}Canceling transaction.explanation={}\",this,explanation);TransactionResultEntity resultEntity=apiClient.commitReceivingFlowFiles(transactionUrl,ResponseCode.CANCEL_TRANSACTION,null);ResponseCode cancelResponse=ResponseCode.fromCode(resultEntity.getResponseCode());switch(cancelResponse){case CANCEL_TRANSACTION: logger.debug(\"{}CANCEL_TRANSACTION,The transaction is canceled on server properly.\",this);break;default: logger.warn(\"{}CANCEL_TRANSACTION,Expected the transaction is canceled on server,but received{}.\",this,cancelResponse);break;}break;}}else{switch(response){case FINISH_TRANSACTION: logger.debug(\"{}Finished sending flow files.\",this);break;case BAD_CHECKSUM:{TransactionResultEntity resultEntity=apiClient.commitTransferFlowFiles(transactionUrl,ResponseCode.BAD_CHECKSUM);ResponseCode badChecksumCancelResponse=ResponseCode.fromCode(resultEntity.getResponseCode());switch(badChecksumCancelResponse){case CANCEL_TRANSACTION: logger.debug(\"{}BAD_CHECKSUM,The transaction is canceled on server properly.\",this);break;default: logger.warn(\"{}BAD_CHECKSUM,Expected the transaction is canceled on server,but received{}.\",this,badChecksumCancelResponse);break;}}break;case CONFIRM_TRANSACTION: logger.debug(\"{}Transaction is confirmed.\",this);break;case CANCEL_TRANSACTION:{logger.debug(\"{}Canceling transaction.\",this);TransactionResultEntity resultEntity=apiClient.commitTransferFlowFiles(transactionUrl,ResponseCode.CANCEL_TRANSACTION);ResponseCode cancelResponse=ResponseCode.fromCode(resultEntity.getResponseCode());switch(cancelResponse){case CANCEL_TRANSACTION: logger.debug(\"{}CANCEL_TRANSACTION,The transaction is canceled on server properly.\",this);break;default: logger.warn(\"{}CANCEL_TRANSACTION,Expected the transaction is canceled on server,but received{}.\",this,cancelResponse);break;}}break;}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ProcessGroupEntity createProcessGroup(final Revision revision,final String parentGroupId,final ProcessGroupDTO processGroupDTO){final RevisionUpdate<ProcessGroupDTO>snapshot=createComponent(revision,processGroupDTO,()->processGroupDAO.createProcessGroup(parentGroupId,processGroupDTO),processGroup->dtoFactory.createProcessGroupDto(processGroup));final ProcessGroup processGroup=processGroupDAO.getProcessGroup(processGroupDTO.getId());final PermissionsDTO permissions=dtoFactory.createPermissionsDto(processGroup);final ProcessGroupStatusDTO status=dtoFactory.createConciseProcessGroupStatusDto(controllerFacade.getProcessGroupStatus(processGroup.getIdentifier()));final List<BulletinDTO>bulletins=dtoFactory.createBulletinDtos(bulletinRepository.findBulletinsForSource(processGroup.getIdentifier()));final List<BulletinEntity>bulletinEntities=bulletins.stream().map(bulletin->entityFactory.createBulletinEntity(bulletin,permissions.getCanRead())).collect(Collectors.toList());return entityFactory.createProcessGroupEntity(snapshot.getComponent(),dtoFactory.createRevisionDTO(snapshot.getLastModification()),permissions,status,bulletinEntities);}"
  },
  {
    "code_smells": [],
    "source_code": "@ApiModelProperty(value=\"If clustered,the address of the node from which the bulletin originated.\")public String getNodeAddress(){return nodeAddress;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public SystemDiagnosticsDTO createSystemDiagnosticsDto(final SystemDiagnostics sysDiagnostics){final SystemDiagnosticsDTO dto=new SystemDiagnosticsDTO();final SystemDiagnosticsSnapshotDTO snapshot=new SystemDiagnosticsSnapshotDTO();dto.setAggregateSnapshot(snapshot);snapshot.setStatsLastRefreshed(new Date(sysDiagnostics.getCreationTimestamp()));snapshot.setAvailableProcessors(sysDiagnostics.getAvailableProcessors());snapshot.setProcessorLoadAverage(sysDiagnostics.getProcessorLoadAverage());snapshot.setDaemonThreads(sysDiagnostics.getDaemonThreads());snapshot.setTotalThreads(sysDiagnostics.getTotalThreads());snapshot.setMaxHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxHeap()));snapshot.setMaxHeapBytes(sysDiagnostics.getMaxHeap());snapshot.setTotalHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalHeap()));snapshot.setTotalHeapBytes(sysDiagnostics.getTotalHeap());snapshot.setUsedHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedHeap()));snapshot.setUsedHeapBytes(sysDiagnostics.getUsedHeap());snapshot.setFreeHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeHeap()));snapshot.setFreeHeapBytes(sysDiagnostics.getFreeHeap());if(sysDiagnostics.getHeapUtilization()!=-1){snapshot.setHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getHeapUtilization()));}snapshot.setMaxNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getMaxNonHeap()));snapshot.setMaxNonHeapBytes(sysDiagnostics.getMaxNonHeap());snapshot.setTotalNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getTotalNonHeap()));snapshot.setTotalNonHeapBytes(sysDiagnostics.getTotalNonHeap());snapshot.setUsedNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getUsedNonHeap()));snapshot.setUsedNonHeapBytes(sysDiagnostics.getUsedNonHeap());snapshot.setFreeNonHeap(FormatUtils.formatDataSize(sysDiagnostics.getFreeNonHeap()));snapshot.setFreeNonHeapBytes(sysDiagnostics.getFreeNonHeap());if(sysDiagnostics.getNonHeapUtilization()!=-1){snapshot.setNonHeapUtilization(FormatUtils.formatUtilization(sysDiagnostics.getNonHeapUtilization()));}final SystemDiagnosticsSnapshotDTO.StorageUsageDTO flowFileRepositoryStorageUsageDto=createStorageUsageDTO(null,sysDiagnostics.getFlowFileRepositoryStorageUsage());snapshot.setFlowFileRepositoryStorageUsage(flowFileRepositoryStorageUsageDto);final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO>contentRepositoryStorageUsageDtos=new LinkedHashSet<>();snapshot.setContentRepositoryStorageUsage(contentRepositoryStorageUsageDtos);for(final Map.Entry<String,StorageUsage>entry : sysDiagnostics.getContentRepositoryStorageUsage().entrySet()){contentRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(),entry.getValue()));}final Set<SystemDiagnosticsSnapshotDTO.StorageUsageDTO>provenanceRepositoryStorageUsageDtos=new LinkedHashSet<>();snapshot.setProvenanceRepositoryStorageUsage(provenanceRepositoryStorageUsageDtos);for(final Map.Entry<String,StorageUsage>entry : sysDiagnostics.getProvenanceRepositoryStorageUsage().entrySet()){provenanceRepositoryStorageUsageDtos.add(createStorageUsageDTO(entry.getKey(),entry.getValue()));}final Set<SystemDiagnosticsSnapshotDTO.GarbageCollectionDTO>garbageCollectionDtos=new LinkedHashSet<>();snapshot.setGarbageCollection(garbageCollectionDtos);for(final Map.Entry<String,GarbageCollection>entry : sysDiagnostics.getGarbageCollection().entrySet()){garbageCollectionDtos.add(createGarbageCollectionDTO(entry.getKey(),entry.getValue()));}final SystemDiagnosticsSnapshotDTO.VersionInfoDTO versionInfoDto=createVersionInfoDTO();snapshot.setVersionInfo(versionInfoDto);snapshot.setUptime(FormatUtils.formatHoursMinutesSeconds(sysDiagnostics.getUptime(),TimeUnit.MILLISECONDS));return dto;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close()throws IOException{commit();if(client!=null){client.shutdown();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void declareVariable(String name){declarations.append(\"declare variable \").append(\"$\").append(name).append(\" external \").append(\";\\n\");}"
  },
  {
    "code_smells": [],
    "source_code": "private static List<Locale>getAvailableLocaleList(){TreeMap<String,Locale>localeMap=new TreeMap<>();String localesString=UtilProperties.getPropertyValue(\"general\",\"locales.available\");if(UtilValidate.isNotEmpty(localesString)){List<String>idList=StringUtil.split(localesString,\",\");for(String id : idList){Locale curLocale=parseLocale(id);localeMap.put(curLocale.getDisplayName(),curLocale);}}else{Locale[]locales=Locale.getAvailableLocales();for(int i=0;i<locales.length && locales[i]!=null;i++){String displayName=locales[i].getDisplayName();if(!displayName.isEmpty()){localeMap.put(displayName,locales[i]);}}}return Collections.unmodifiableList(new ArrayList<>(localeMap.values()));}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isSignedFloat(String s){if(isEmpty(s)){return defaultEmptyOK;}try{Float.parseFloat(s);return true;}catch(Exception e){return false;}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static void setResultSortOrder(ResultSortOrder resultSortOrder,HttpSession session){ContentSearchOptions contentSearchOptions=getContentSearchOptions(session);contentSearchOptions.resultSortOrder=resultSortOrder;contentSearchOptions.changed=true;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static String shortenDbName(String dbName,int desiredLength){StringBuilder dbBuf=new StringBuilder(dbName);if(dbBuf.length()>desiredLength){for(int i=dbBuf.length()-1;i>0;i--){if(dbBuf.charAt(i-1)=='_'){continue;}char curChar=dbBuf.charAt(i);if(vowelBag.indexOf(curChar)>0){dbBuf.deleteCharAt(i);}}}while(dbBuf.indexOf(\"__\")>0){dbBuf.deleteCharAt(dbBuf.indexOf(\"__\"));}while(dbBuf.length()>desiredLength){boolean removedChars=false;int usIndex=dbBuf.lastIndexOf(\"_\");while(usIndex>0 && dbBuf.length()>desiredLength){int prevUsIndex=dbBuf.lastIndexOf(\"_\",usIndex-1);if(prevUsIndex<0 && usIndex<4){break;}if(prevUsIndex>=0 &&(usIndex-prevUsIndex)<=4){usIndex=prevUsIndex;continue;}dbBuf.deleteCharAt(usIndex-2);removedChars=true;if(usIndex>2){usIndex=dbBuf.lastIndexOf(\"_\",usIndex-2);}else{break;}}if(dbBuf.length()>desiredLength){int removeIndex=dbBuf.length()-1;int prevRemoveIndex=dbBuf.lastIndexOf(\"_\",removeIndex-1);if(prevRemoveIndex<0 ||(removeIndex-prevRemoveIndex)>=3){dbBuf.deleteCharAt(removeIndex-1);removedChars=true;}}while(dbBuf.indexOf(\"__\")>0){dbBuf.deleteCharAt(dbBuf.indexOf(\"__\"));removedChars=true;}if(!removedChars){break;}}while(dbBuf.indexOf(\"__\")>0){dbBuf.deleteCharAt(dbBuf.indexOf(\"__\"));}while(dbBuf.length()>desiredLength){int firstUs=dbBuf.indexOf(\"_\");if(firstUs>0){int nextUs=dbBuf.indexOf(\"_\",firstUs+1);if(nextUs>0){dbBuf.delete(firstUs,nextUs);}}}return dbBuf.toString();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static List<Map<String,Object>>getFacilityContactMechValueMaps(Delegator delegator,String facilityId,boolean showOld,String contactMechTypeId){List<Map<String,Object>>facilityContactMechValueMaps=new LinkedList<Map<String,Object>>();List<GenericValue>allFacilityContactMechs=null;try{List<GenericValue>tempCol=EntityQuery.use(delegator).from(\"FacilityContactMech\").where(\"facilityId\",facilityId).queryList();if(contactMechTypeId!=null){List<GenericValue>tempColTemp=new LinkedList<GenericValue>();for(GenericValue partyContactMech : tempCol){GenericValue contactMech=delegator.getRelatedOne(\"ContactMech\",partyContactMech,false);if(contactMech!=null && contactMechTypeId.equals(contactMech.getString(\"contactMechTypeId\"))){tempColTemp.add(partyContactMech);}}tempCol=tempColTemp;}if(!showOld)tempCol=EntityUtil.filterByDate(tempCol,true);allFacilityContactMechs=tempCol;}catch(GenericEntityException e){Debug.logWarning(e,module);}if(allFacilityContactMechs==null)return facilityContactMechValueMaps;for(GenericValue facilityContactMech : allFacilityContactMechs){GenericValue contactMech=null;try{contactMech=facilityContactMech.getRelatedOne(\"ContactMech\",false);}catch(GenericEntityException e){Debug.logWarning(e,module);}if(contactMech!=null){Map<String,Object>facilityContactMechValueMap=new HashMap<String,Object>();facilityContactMechValueMaps.add(facilityContactMechValueMap);facilityContactMechValueMap.put(\"contactMech\",contactMech);facilityContactMechValueMap.put(\"facilityContactMech\",facilityContactMech);try{facilityContactMechValueMap.put(\"contactMechType\",contactMech.getRelatedOne(\"ContactMechType\",true));}catch(GenericEntityException e){Debug.logWarning(e,module);}try{List<GenericValue>facilityContactMechPurposes=facilityContactMech.getRelated(\"FacilityContactMechPurpose\",null,null,false);if(!showOld)facilityContactMechPurposes=EntityUtil.filterByDate(facilityContactMechPurposes,true);facilityContactMechValueMap.put(\"facilityContactMechPurposes\",facilityContactMechPurposes);}catch(GenericEntityException e){Debug.logWarning(e,module);}try{if(\"POSTAL_ADDRESS\".equals(contactMech.getString(\"contactMechTypeId\"))){facilityContactMechValueMap.put(\"postalAddress\",contactMech.getRelatedOne(\"PostalAddress\",false));}else if(\"TELECOM_NUMBER\".equals(contactMech.getString(\"contactMechTypeId\"))){facilityContactMechValueMap.put(\"telecomNumber\",contactMech.getRelatedOne(\"TelecomNumber\",false));}}catch(GenericEntityException e){Debug.logWarning(e,module);}}}return facilityContactMechValueMaps;}"
  },
  {
    "code_smells": [],
    "source_code": "public RecurrenceRule(GenericValue rule)throws RecurrenceRuleException{this.rule=rule;if(!\"RecurrenceRule\".equals(rule.getEntityName())){throw new RecurrenceRuleException(\"Invalid RecurrenceRule Value object.\");}init();}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getUserPasswordDefault(){return userPasswordDefault;}"
  },
  {
    "code_smells": [],
    "source_code": "public ModelMenuCondition(ModelMenuItem modelMenuItem,Element conditionElement){this.passStyleExdr=FlexibleStringExpander.getInstance(conditionElement.getAttribute(\"pass-style\"));this.failStyleExdr=FlexibleStringExpander.getInstance(conditionElement.getAttribute(\"disabled-style\"));this.condition=AbstractModelCondition.DEFAULT_CONDITION_FACTORY.newInstance(modelMenuItem,conditionElement);}"
  },
  {
    "code_smells": [],
    "source_code": "private static void closeStream(final Channel closeable){if(closeable!=null){try{closeable.close();}catch(IOException e){}}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public BatchResponsePart executeChangeSet(final BatchHandler handler,final List<ODataRequest>requests)throws ODataException{List<ODataResponse>responses=new ArrayList<ODataResponse>();try{oDataJPAContext.getODataJPATransaction().begin();for(ODataRequest request : requests){oDataJPAContext.setODataContext(getContext());ODataResponse response=handler.handleRequest(request);if(response.getStatus().getStatusCode()>=HttpStatusCodes.BAD_REQUEST.getStatusCode()){oDataJPAContext.getODataJPATransaction().rollback();List<ODataResponse>errorResponses=new ArrayList<ODataResponse>(1);errorResponses.add(response);return BatchResponsePart.responses(errorResponses).changeSet(false).build();}responses.add(response);}oDataJPAContext.getODataJPATransaction().commit();return BatchResponsePart.responses(responses).changeSet(true).build();}catch(Exception e){throw new ODataException(\"Error on processing request content:\"+e.getMessage(),e);}finally{close(true);}}"
  },
  {
    "code_smells": [],
    "source_code": "static void copy(final InputStream input,final OutputStream output){if(output==null || input==null){return;}try{ByteBuffer inBuffer=ByteBuffer.allocate(8192);ReadableByteChannel ic=Channels.newChannel(input);WritableByteChannel oc=Channels.newChannel(output);while(ic.read(inBuffer)>0){inBuffer.flip();oc.write(inBuffer);inBuffer.rewind();}}catch(IOException e){throw new ODataRuntimeException(\"Error on reading request content\");}finally{closeStream(input);closeStream(output);}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private EntityCollection createETStreamOnComplexProp(Edm edm,OData odata){EntityCollection entityCollection=new EntityCollection();Link readLink=new Link();readLink.setRel(Constants.NS_MEDIA_READ_LINK_REL);readLink.setHref(\"readLink\");Entity entity=new Entity();entity.addProperty(createPrimitive(\"PropertyStream\",createImage(\"darkturquoise\")));readLink.setInlineEntity(entity);Link readLink1=new Link();readLink1.setRel(Constants.NS_MEDIA_READ_LINK_REL);readLink1.setHref(\"readLink\");entity=new Entity();entity.addProperty(createPrimitive(\"PropertyEntityStream\",createImage(\"darkturquoise\")));readLink1.setInlineEntity(entity);entityCollection.getEntities().add(new Entity().addProperty(createPrimitive(\"PropertyInt16\",Short.MAX_VALUE)).addProperty(createPrimitive(\"PropertyInt32\",Integer.MAX_VALUE)).addProperty(new Property(null,\"PropertyEntityStream\",ValueType.PRIMITIVE,readLink1)).addProperty(createComplex(\"PropertyCompWithStream\",ComplexTypeProvider.nameCTWithStreamProp.getFullQualifiedNameAsString(),new Property(null,\"PropertyStream\",ValueType.PRIMITIVE,readLink),createComplex(\"PropertyComp\",ComplexTypeProvider.nameCTTwoPrim.getFullQualifiedNameAsString(),createPrimitive(\"PropertyInt16\",(short)333),createPrimitive(\"PropertyString\",\"TEST123\")))));Link editLink=new Link();editLink.setRel(Constants.NS_MEDIA_EDIT_LINK_REL);editLink.setHref(\"http://mediaserver:1234/editLink\");editLink.setMediaETag(\"eTag\");editLink.setType(\"image/jpeg\");entity=new Entity();entity.addProperty(createPrimitive(\"PropertyStream\",createImage(\"royalblue\")));editLink.setInlineEntity(entity);Link editLink2=new Link();editLink2.setRel(Constants.NS_MEDIA_EDIT_LINK_REL);editLink2.setHref(\"http://mediaserver:1234/editLink\");editLink2.setMediaETag(\"eTag\");editLink2.setType(\"image/jpeg\");entity=new Entity();entity.addProperty(createPrimitive(\"PropertyEntityStream\",createImage(\"royalblue\")));editLink2.setInlineEntity(entity);entityCollection.getEntities().add(new Entity().addProperty(createPrimitive(\"PropertyInt16\",(short)7)).addProperty(createPrimitive(\"PropertyInt32\",(Integer)10)).addProperty(new Property(null,\"PropertyEntityStream\",ValueType.PRIMITIVE,editLink2)).addProperty(createComplex(\"PropertyCompWithStream\",ComplexTypeProvider.nameCTWithStreamProp.getFullQualifiedNameAsString(),new Property(null,\"PropertyStream\",ValueType.PRIMITIVE,editLink),createComplex(\"PropertyComp\",ComplexTypeProvider.nameCTTwoPrim.getFullQualifiedNameAsString(),createPrimitive(\"PropertyInt16\",(short)333),createPrimitive(\"PropertyString\",\"TEST123\")))));setEntityType(entityCollection,edm.getEntityType(EntityTypeProvider.nameETStreamOnComplexProp));createEntityId(edm,odata,\"ESStreamOnComplexProp\",entityCollection);createOperations(\"ESStreamOnComplexProp\",entityCollection,EntityTypeProvider.nameETStreamOnComplexProp);return entityCollection;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void crawl(File dirRoot){LOG.info(String.format(\"Start crawling dir: %s\",dirRoot));ingestStatus.clear();loadAndValidateActions();setupIngester();if(dirRoot==null || !dirRoot.exists()){throw new IllegalArgumentException(\"dir root is null or non existant!\");}Stack<File>stack=new Stack<File>();stack.push(dirRoot.isDirectory()? dirRoot : dirRoot.getParentFile());while(!stack.isEmpty()){File dir=(File)stack.pop();LOG.log(Level.INFO,\"Crawling \"+dir);File[]productFiles;productFiles=isCrawlForDirs()? dir.listFiles(DIR_FILTER): dir.listFiles(FILE_FILTER);if(productFiles!=null){for(File productFile : productFiles){ingestStatus.add(handleFile(productFile));}}if(!isNoRecur()){File[]subdirs=dir.listFiles(DIR_FILTER);if(subdirs!=null){for(File subdir : subdirs){stack.push(subdir);}}}}LOG.info(String.format(\"Finished crawling dir: %s\",dirRoot));}"
  },
  {
    "code_smells": [],
    "source_code": "public static Map<String,Object>getXmlRpcElementHashTable(Element element){Map<String,Object>elementHash=new Hashtable<String,Object>();elementHash.put(\"id\",element.getElementId());elementHash.put(\"name\",element.getElementName());elementHash.put(\"dcElement\",element.getDCElement()!=null ? element.getDCElement(): \"\");elementHash.put(\"description\",element.getDescription()!=null ? element.getDescription(): \"\");return elementHash;}"
  },
  {
    "code_smells": [],
    "source_code": "@XmlElementWrapper(name=\"references\")@XmlElement(name=\"reference\")public List<ReferenceResource>getReferenceResources(){return referenceResources;}"
  },
  {
    "code_smells": [],
    "source_code": "public AvroRpcResourceManager(int port){this.port=port;List<String>propertiesFiles=new ArrayList<>();if(System.getProperty(\"org.apache.oodt.cas.resource.properties\")!=null){propertiesFiles.add(System.getProperty(\"org.apache.oodt.cas.resource.properties\"));}configurationManager=ConfigurationManagerFactory.getConfigurationManager(Component.RESOURCE_MANAGER,propertiesFiles);}"
  },
  {
    "code_smells": [],
    "source_code": "private List getCurrentBindings()throws NamingException{List names;try{Registry registry=getRegistry();names=Arrays.asList(registry.list());}catch(RemoteException ex){names=Collections.EMPTY_LIST;}return names;}"
  },
  {
    "code_smells": [],
    "source_code": "public void streamStarted(LogEvent event){for(Object listener1 : listeners){LogListener listener=(LogListener)listener1;listener.streamStarted(event);}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void reloadExpectedTimeAndConfig(SLACalcStatus slaCalc)throws JPAExecutorException{SLARegistrationBean regBean=SLARegistrationQueryExecutor.getInstance().get(SLARegQuery.GET_SLA_EXPECTED_VALUE_CONFIG,slaCalc.getId());if(regBean.getExpectedDuration()>0){slaCalc.getSLARegistrationBean().setExpectedDuration(regBean.getExpectedDuration());}if(regBean.getExpectedEnd()!=null){slaCalc.getSLARegistrationBean().setExpectedEnd(regBean.getExpectedEnd());}if(regBean.getExpectedStart()!=null){slaCalc.getSLARegistrationBean().setExpectedStart(regBean.getExpectedStart());}if(regBean.getSLAConfigMap().containsKey(OozieClient.SLA_DISABLE_ALERT)){slaCalc.getSLARegistrationBean().addToSLAConfigMap(OozieClient.SLA_DISABLE_ALERT,regBean.getSLAConfigMap().get(OozieClient.SLA_DISABLE_ALERT));}if(regBean.getNominalTime()!=null){slaCalc.getSLARegistrationBean().setNominalTime(regBean.getNominalTime());}}"
  },
  {
    "code_smells": [],
    "source_code": "public ApplicationException(final String message){super(message);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void stop(BundleContext context)throws Exception{instance=null;super.stop(context);}"
  },
  {
    "code_smells": [],
    "source_code": "public ProjectModel getModel(String projectName){ProjectModel projectModel=models.get(projectName);if(projectModel==null){projectModel=new ProjectModel(projectName);models.put(projectName,projectModel);}return projectModel;}"
  },
  {
    "code_smells": [],
    "source_code": "public void threadSingletonServiceAdded(@Observes ComponentAdded<ThreadSingletonService>componentAdded){if(componentAdded.getComponent()!=this){return;}contextThreadListener=new OWBContextThreadListener();ThreadContext.addThreadContextListener(contextThreadListener);}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")public<T extends Enum<T>>T get(final String property,final T defaultValue){final String value=properties.getProperty(property);if(value==null || value.equals(\"\"))return parent.get(property,defaultValue);if(defaultValue==null)throw new IllegalArgumentException(\"Must supply a default for property \"+property);final Class<T>enumType=(Class<T>)defaultValue.getClass();try{return log(property,valueOf(enumType,value.toUpperCase()));}catch(IllegalArgumentException e){warn(property,value);return parent.get(property,defaultValue);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isParent(final ClassLoader supposedParent,final ClassLoader supposedChild){ClassLoader parent=supposedChild;while(parent!=null){if(parent==supposedParent){return true;}parent=parent.getParent();}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean hasCmpPersistenceUnit(final Persistence persistence){for(final PersistenceUnit unit : persistence.getPersistenceUnit()){if(unit.getName().startsWith(\"cmp\")){return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setPortStartup(final int portStartup){this.portStartup=portStartup;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private Invocation next(){if(interceptors.hasNext()){final Interceptor interceptor=interceptors.next();final Object nextInstance=interceptor.getInstance();final Method nextMethod=interceptor.getMethod();if(nextMethod.getParameterTypes().length==1 && nextMethod.getParameterTypes()[0]==InvocationContext.class){return new InterceptorInvocation(nextInstance,nextMethod,this);}else{return new LifecycleInvocation(nextInstance,nextMethod,this,parameters);}}else if(method!=null){final Object[]methodParameters;if(operation.equals(Operation.TIMEOUT)&& method.getParameterTypes().length==0){methodParameters=new Object[0];}else{methodParameters=parameters;}return new BeanInvocation(target,method,methodParameters);}else{return new NoOpInvocation();}}"
  },
  {
    "code_smells": [],
    "source_code": "public void open(final boolean remove){if(remove){rolePermissionsMap.clear();unchecked=null;excluded=null;}state=OPEN;}"
  },
  {
    "code_smells": [],
    "source_code": "public List<Description>getDescriptions(){if(descriptions==null){descriptions=new ArrayList<Description>();}return this.descriptions;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static void copyDirectory(final File srcDir,final File destDir)throws IOException{if(srcDir==null){throw new NullPointerException(\"Source must not be null\");}if(destDir==null){throw new NullPointerException(\"Destination must not be null\");}if(!srcDir.exists()){throw new FileNotFoundException(\"Source '\"+srcDir+\"' does not exist\");}if(!srcDir.isDirectory()){throw new IOException(\"Source '\"+srcDir+\"' exists but is not a directory\");}if(srcDir.getCanonicalPath().equals(destDir.getCanonicalPath())){throw new IOException(\"Source '\"+srcDir+\"' and destination '\"+destDir+\"' are the same\");}List<String>exclusionList=null;if(destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())){final File[]srcFiles=srcDir.listFiles();if(srcFiles!=null && srcFiles.length>0){exclusionList=new ArrayList<>(srcFiles.length);for(final File srcFile : srcFiles){final File copiedFile=new File(destDir,srcFile.getName());exclusionList.add(copiedFile.getCanonicalPath());}}}doCopyDirectory(srcDir,destDir,exclusionList);}"
  },
  {
    "code_smells": [],
    "source_code": "public Object setProperty(final String key,final String value,final boolean isExternalProperty){if(isExternalProperty){System.setProperty(key,value);}return internalProperties.setProperty(key,value);}"
  },
  {
    "code_smells": [],
    "source_code": "public DescriptiveStatistics(int window){setWindowSize(window);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object instantiate(String className)throws ReflectionException,MBeanException{return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getQueryString(){return delegate.getClass().getName()+\" doesn't support getQueryString()method: '\"+delegate.toString()+\"'\";}"
  },
  {
    "code_smells": [],
    "source_code": "public void addHttpFilter(HttpListener listener,String regex){synchronized(filterRegistry){if(!filterRegistry.containsKey(regex)){filterRegistry.put(regex,new ArrayList<HttpListener>());}filterRegistry.get(regex).add(listener);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Managed public void flush(){stats.flushes.record();poolVersion.incrementAndGet();}"
  },
  {
    "code_smells": [],
    "source_code": "protected ResultSet executeQuery(Connection conn,PreparedStatement stmnt,SQLBuffer sql)throws SQLException{return stmnt.executeQuery();}"
  },
  {
    "code_smells": [],
    "source_code": "public static void getIdColumns(FieldMapping fmd,List cols){Column[]pkCols=((ValueMappingImpl)fmd.getValue()).getColumns();for(int j=0;j<pkCols.length;j++){Column newCol=new Column();newCol.copy(pkCols[j]);cols.add(newCol);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void appendXmlComparison1(SQLBuffer buf,String op,FilterValue lhs,FilterValue rhs){boolean castrhs=false;Class<?>rc=Filters.wrap(rhs.getType());int type=0;if(rhs.isConstant()){type=getJDBCType(JavaTypes.getTypeCode(rc),false);castrhs=true;}appendXmlExists(buf,lhs);buf.append(\" \").append(op).append(\" \");buf.append(\"$\");if(castrhs)buf.append(\"Parm\");else rhs.appendTo(buf);buf.append(\"]' PASSING \");appendXmlVar(buf,lhs);buf.append(\",\");if(castrhs)appendCast(buf,rhs,type);else rhs.appendTo(buf);buf.append(\" AS \\\"\");if(castrhs)buf.append(\"Parm\");else rhs.appendTo(buf);buf.append(\"\\\")\");}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "protected SQLBuffer toBulkOperation(ClassMapping mapping,Select sel,JDBCStore store,Object[]params,Map updateParams){SQLBuffer sql=new SQLBuffer(this);if(updateParams==null){if(requiresTargetForDelete){sql.append(\"DELETE \");SQLBuffer deleteTargets=getDeleteTargets(sel);sql.append(deleteTargets);sql.append(\" FROM \");}else{sql.append(\"DELETE FROM \");}}else sql.append(\"UPDATE \");sel.addJoinClassConditions();Collection<String>selectedTables=getSelectTableAliases(sel);if(selectedTables.size()==1 && supportsSubselect && allowsAliasInBulkClause){SQLBuffer from;if(sel.getFromSelect()!=null)from=getFromSelect(sel,false);else from=getFrom(sel,false);sql.append(from);appendUpdates(sel,store,sql,params,updateParams,allowsAliasInBulkClause);SQLBuffer where=sel.getWhere();if(where!=null && !where.isEmpty()){sql.append(\" WHERE \");sql.append(where);}return sql;}Table table=mapping.getTable();String tableName=getFullName(table,false);if(sel.getWhere()==null || sel.getWhere().isEmpty()){sql.append(tableName);appendUpdates(sel,store,sql,params,updateParams,false);return sql;}if(!supportsSubselect || !supportsCorrelatedSubselect)return null;Column[]pks=mapping.getPrimaryKeyColumns();sel.clearSelects();sel.setDistinct(true);if(pks.length==1){sel.select(pks[0]);sql.append(tableName);appendUpdates(sel,store,sql,params,updateParams,false);sql.append(\" WHERE \").append(pks[0]).append(\" IN(\").append(sel.toSelect(false,null)).append(\")\");}else{sel.clearSelects();sel.setDistinct(false);sel.select(\"1\",null);Column[]cols=table.getPrimaryKey().getColumns();SQLBuffer buf=new SQLBuffer(this);buf.append(\"(\");for(int i=0;i<cols.length;i++){if(i>0)buf.append(\" AND \");buf.append(sel.getColumnAlias(cols[i])).append(\"=\").append(table).append(catalogSeparator).append(cols[i]);}buf.append(\")\");sel.where(buf,null);sql.append(tableName);appendUpdates(sel,store,sql,params,updateParams,false);sql.append(\" WHERE EXISTS(\").append(sel.toSelect(false,null)).append(\")\");}return sql;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected void refreshInternal(Collection objs,OpCallbacks call){if(objs==null || objs.isEmpty())return;List<Exception>exceps=null;try{Collection<OpenJPAStateManager>load=null;StateManagerImpl sm;Object obj;for(Iterator<?>itr=objs.iterator();itr.hasNext();){obj=itr.next();if(obj==null)continue;try{sm=getStateManagerImpl(obj,true);if((processArgument(OpCallbacks.OP_REFRESH,obj,sm,call)& OpCallbacks.ACT_RUN)==0)continue;if(sm!=null){if(sm.isDetached())throw newDetachedException(obj,\"refresh\");else if(sm.beforeRefresh(true)){if(load==null)load=new ArrayList<>(objs.size());load.add(sm);}int level=_fc.getReadLockLevel();int timeout=_fc.getLockTimeout();_lm.refreshLock(sm,level,timeout,null);sm.readLocked(level,level);}else if(assertPersistenceCapable(obj).pcIsDetached()==Boolean.TRUE)throw newDetachedException(obj,\"refresh\");}catch(OpenJPAException ke){exceps=add(exceps,ke);}}if(load!=null){Collection<Object>failed=_store.loadAll(load,null,StoreManager.FORCE_LOAD_REFRESH,_fc,null);if(failed!=null && !failed.isEmpty())exceps=add(exceps,newObjectNotFoundException(failed));for(Iterator<OpenJPAStateManager>itr=load.iterator();itr.hasNext();){sm=(StateManagerImpl)itr.next();if(failed!=null && failed.contains(sm.getId()))continue;try{sm.afterRefresh();sm.load(_fc,StateManagerImpl.LOAD_FGS,null,null,false);}catch(OpenJPAException ke){exceps=add(exceps,ke);}}}for(Iterator<?>itr=objs.iterator();itr.hasNext();){try{sm=getStateManagerImpl(itr.next(),true);if(sm!=null && !sm.isDetached())fireLifecycleEvent(sm.getManagedInstance(),null,sm.getMetaData(),LifecycleEvent.AFTER_REFRESH);}catch(OpenJPAException ke){exceps=add(exceps,ke);}}}catch(OpenJPAException ke){throw ke;}catch(RuntimeException re){throw new GeneralException(re);}throwNestedExceptions(exceps,false);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Expression matches(Value v1,Value v2,String single,String multi,String esc){return new MatchesExpression((Val)v1,(Val)v2,single,multi,esc,true);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void valueChanged(Value val){if(val!=null && val.matches(\"DataCacheTimeout\")){_cacheTimeout=Integer.MIN_VALUE;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object copy(Object paramObject){return new HashSet((Collection)paramObject);}"
  },
  {
    "code_smells": [],
    "source_code": "public HeaderPanel(String id,String appName){super(id);setOutputMarkupPlaceholderTag(true);add(new Label(\"appName\",Strings.isEmpty(appName)? \"&nbsp;\" : appName).setEscapeModelStrings(false));}"
  },
  {
    "code_smells": [],
    "source_code": "private static int getPageRowCountLimit(Configuration conf){return conf.getInt(PAGE_ROW_COUNT_LIMIT,ParquetProperties.DEFAULT_PAGE_ROW_COUNT_LIMIT);}"
  },
  {
    "code_smells": [],
    "source_code": "protected Builder(InputFile file){this.readSupport=null;this.file=checkNotNull(file,\"file\");this.path=null;if(file instanceof HadoopInputFile){this.conf=((HadoopInputFile)file).getConfiguration();}else{this.conf=new Configuration();}optionsBuilder=HadoopReadOptions.builder(conf);}"
  },
  {
    "code_smells": [],
    "source_code": "public BufferedProtocolReadToWrite(StructType thriftType,FieldIgnoredHandler errorHandler){super();this.thriftType=thriftType;this.errorHandler=errorHandler;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void process(Operator operator,List<COSBase>arguments)throws MissingOperandException{if(arguments.size()<6){throw new MissingOperandException(operator,arguments);}if(!checkArrayTypesClass(arguments,COSNumber.class)){return;}COSNumber a=(COSNumber)arguments.get(0);COSNumber b=(COSNumber)arguments.get(1);COSNumber c=(COSNumber)arguments.get(2);COSNumber d=(COSNumber)arguments.get(3);COSNumber e=(COSNumber)arguments.get(4);COSNumber f=(COSNumber)arguments.get(5);Matrix matrix=new Matrix(a.floatValue(),b.floatValue(),c.floatValue(),d.floatValue(),e.floatValue(),f.floatValue());context.setTextMatrix(matrix);context.setTextLineMatrix(matrix.clone());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<E>subList(int fromIndex,int toIndex){return actual.subList(fromIndex,toIndex);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void closePath(){linePath.closePath();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private ClearCacheResponse(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry)throws com.google.protobuf.InvalidProtocolBufferException{initFields();int mutable_bitField0_=0;com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder();try{boolean done=false;while(!done){int tag=input.readTag();switch(tag){case 0: done=true;break;default:{if(!parseUnknownField(input,unknownFields,extensionRegistry,tag)){done=true;}break;}case 8:{bitField0_ |=0x00000001;unfreedBytes_=input.readInt64();break;}}}}catch(com.google.protobuf.InvalidProtocolBufferException e){throw e.setUnfinishedMessage(this);}catch(java.io.IOException e){throw new com.google.protobuf.InvalidProtocolBufferException(e.getMessage()).setUnfinishedMessage(this);}finally{this.unknownFields=unknownFields.build();makeExtensionsImmutable();}}"
  },
  {
    "code_smells": [],
    "source_code": "public static org.apache.phoenix.coprocessor.generated.MetaDataProtos.CreateFunctionRequest parseFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry)throws java.io.IOException{return PARSER.parseFrom(input,extensionRegistry);}"
  },
  {
    "code_smells": [],
    "source_code": "@java.lang.Override protected java.lang.Object writeReplace()throws java.io.ObjectStreamException{return super.writeReplace();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Test public void testGroupByOrderPreservingDescSort()throws Exception{Properties props=PropertiesUtil.deepCopy(TEST_PROPERTIES);Connection conn=DriverManager.getConnection(getUrl(),props);String tableName=generateUniqueName();conn.createStatement().execute(\"CREATE TABLE \"+tableName+\"(k1 char(1)not null,k2 char(1)not null,\"+\" constraint pk primary key(k1,k2))split on('ac','jc','nc')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('a','a')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('a','b')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('a','c')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('a','d')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('j','a')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('j','b')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('j','c')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('j','d')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('n','a')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('n','b')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('n','c')\");conn.createStatement().execute(\"UPSERT INTO \"+tableName+\" VALUES('n','d')\");conn.commit();QueryBuilder queryBuilder=new QueryBuilder().setSelectExpression(\"K1,COUNT(*)\").setSelectColumns(Lists.newArrayList(\"K1\")).setFullTableName(tableName).setGroupByClause(\"K1\").setOrderByClause(\"K1 DESC\");ResultSet rs=executeQuery(conn,queryBuilder);assertTrue(rs.next());assertEquals(\"n\",rs.getString(1));assertEquals(4,rs.getLong(2));assertTrue(rs.next());assertEquals(\"j\",rs.getString(1));assertEquals(4,rs.getLong(2));assertTrue(rs.next());assertEquals(\"a\",rs.getString(1));assertEquals(4,rs.getLong(2));assertFalse(rs.next());String expectedPhoenixPlan=\"CLIENT PARALLEL 1-WAY REVERSE FULL SCAN OVER \"+tableName+\"\\n\"+\" SERVER FILTER BY FIRST KEY ONLY\\n\"+\" SERVER AGGREGATE INTO ORDERED DISTINCT ROWS BY[K1]\";validateQueryPlan(conn,queryBuilder,expectedPhoenixPlan,null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void testImmutableKeywordAndProperty()throws Exception{Properties props=PropertiesUtil.deepCopy(TEST_PROPERTIES);String immutableDataTableFullName=SchemaUtil.getTableName(\"\",generateUniqueName());String mutableDataTableFullName=SchemaUtil.getTableName(\"\",generateUniqueName());try(Connection conn=DriverManager.getConnection(getUrl(),props)){Statement stmt=conn.createStatement();try{String ddl=\"CREATE IMMUTABLE TABLE \"+immutableDataTableFullName+\"(a_string varchar not null,col1 integer\"+\" CONSTRAINT pk PRIMARY KEY(a_string))IMMUTABLE_ROWS=true\";stmt.execute(ddl);fail();}catch(SQLException e){assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(),e.getErrorCode());}try{String ddl=\"CREATE IMMUTABLE TABLE \"+mutableDataTableFullName+\"(a_string varchar not null,col1 integer\"+\" CONSTRAINT pk PRIMARY KEY(a_string))IMMUTABLE_ROWS=false\";stmt.execute(ddl);fail();}catch(SQLException e){assertEquals(SQLExceptionCode.IMMUTABLE_TABLE_PROPERTY_INVALID.getErrorCode(),e.getErrorCode());}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void testJoinWithLocalIndex()throws Exception{Properties props=PropertiesUtil.deepCopy(TEST_PROPERTIES);Connection conn=DriverManager.getConnection(getUrl(),props);try{String query=\"select phone,i.name from \"+getTableName(conn,JOIN_SUPPLIER_TABLE_FULL_NAME)+\" s join \"+getTableName(conn,JOIN_ITEM_TABLE_FULL_NAME)+\" i on s.\\\"supplier_id\\\"=i.\\\"supplier_id\\\" where s.name='S1' and i.name<'T6'\";PreparedStatement statement=conn.prepareStatement(query);ResultSet rs=statement.executeQuery();assertTrue(rs.next());assertEquals(rs.getString(1),\"888-888-1111\");assertTrue(rs.next());assertEquals(rs.getString(1),\"888-888-1111\");assertFalse(rs.next());rs=conn.createStatement().executeQuery(\"EXPLAIN \"+query);assertPlansEqual(plans[24],QueryUtil.getExplainPlan(rs));query=\"select phone,max(i.name)from \"+getTableName(conn,JOIN_SUPPLIER_TABLE_FULL_NAME)+\" s join \"+getTableName(conn,JOIN_ITEM_TABLE_FULL_NAME)+\" i on s.\\\"supplier_id\\\"=i.\\\"supplier_id\\\" where s.name='S1' and i.name<'T6' group by phone\";statement=conn.prepareStatement(query);rs=statement.executeQuery();assertTrue(rs.next());assertEquals(rs.getString(1),\"888-888-1111\");assertEquals(rs.getString(2),\"T2\");assertFalse(rs.next());rs=conn.createStatement().executeQuery(\"EXPLAIN \"+query);assertPlansEqual(plans[25],QueryUtil.getExplainPlan(rs));query=\"select max(phone),max(i.name)from \"+getTableName(conn,JOIN_SUPPLIER_TABLE_FULL_NAME)+\" s left join \"+getTableName(conn,JOIN_ITEM_TABLE_FULL_NAME)+\" i on s.\\\"supplier_id\\\"=i.\\\"supplier_id\\\" and i.name<'T6' where s.name<='S3'\";statement=conn.prepareStatement(query);rs=statement.executeQuery();assertTrue(rs.next());assertEquals(rs.getString(1),\"888-888-3333\");assertEquals(rs.getString(2),\"T4\");assertFalse(rs.next());rs=conn.createStatement().executeQuery(\"EXPLAIN \"+query);assertPlansEqual(plans[26],QueryUtil.getExplainPlan(rs));}finally{conn.close();}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static IndexFailurePolicy getFailurePolicy(RegionCoprocessorEnvironment env)throws IOException{Configuration conf=env.getConfiguration();try{IndexFailurePolicy committer=conf.getClass(INDEX_FAILURE_POLICY_CONF_KEY,PhoenixIndexFailurePolicy.class,IndexFailurePolicy.class).newInstance();return committer;}catch(InstantiationException e){throw new IOException(e);}catch(IllegalAccessException e){throw new IOException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "private List<HRegionLocation>getRegionLocationsFromManifest(SnapshotManifest manifest){List<SnapshotRegionManifest>regionManifests=manifest.getRegionManifests();Preconditions.checkNotNull(regionManifests);List<RegionInfo>regionInfos=Lists.newArrayListWithCapacity(regionManifests.size());List<HRegionLocation>hRegionLocations=Lists.newArrayListWithCapacity(regionManifests.size());for(SnapshotRegionManifest regionManifest : regionManifests){RegionInfo regionInfo=ProtobufUtil.toRegionInfo(regionManifest.getRegionInfo());if(isValidRegion(regionInfo)){regionInfos.add(regionInfo);}}regionInfos.sort(RegionInfo.COMPARATOR);for(RegionInfo regionInfo : regionInfos){hRegionLocations.add(new HRegionLocation(regionInfo,null));}return hRegionLocations;}"
  },
  {
    "code_smells": [],
    "source_code": "private PDatum getParam(int index)throws SQLException{if(index<=0 || index>params.length){throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_INDEX_OUT_OF_BOUND).setMessage(\"The index is \"+index+\".Must be between 1 and \"+params.length).build().buildException();}PDatum param=params[index-1];if(param==EMPTY_DATUM){throw new SQLExceptionInfo.Builder(SQLExceptionCode.PARAM_VALUE_UNBOUND).setMessage(\"Parameter at index \"+index+\" is unbound\").build().buildException();}return param;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int compareTo(Cost other){if(isUnknown()&& other.isUnknown()){return 0;}else if(isUnknown()&& !other.isUnknown()){return 1;}else if(!isUnknown()&& other.isUnknown()){return-1;}double d=this.io-other.io;return d==0 ? 0 :(d>0 ? 1 :-1);}"
  },
  {
    "code_smells": [],
    "source_code": "public static byte[]getTableKeyFromFullName(String fullTableName){int index=fullTableName.indexOf(QueryConstants.NAME_SEPARATOR);if(index<0){index=fullTableName.indexOf(QueryConstants.NAMESPACE_SEPARATOR);if(index<0){return getTableKey(null,null,fullTableName);}}String schemaName=fullTableName.substring(0,index);String tableName=fullTableName.substring(index+1);return getTableKey(null,schemaName,tableName);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public PigServer(PigContext context,boolean connect)throws ExecException{this.pigContext=context;currDAG=new Graph(false);jobName=pigContext.getProperties().getProperty(PigContext.JOB_NAME,PigContext.JOB_NAME_PREFIX+\":DefaultJobName\");if(connect){pigContext.connect();}this.filter=new BlackAndWhitelistFilter(this);addHadoopProperties();addJarsFromProperties();markPredeployedJarsFromProperties();if(ScriptState.get()==null){ScriptState.start(pigContext.getExecutionEngine().instantiateScriptState());}PigStats.start(pigContext.getExecutionEngine().instantiatePigStats());String auditId=PigATSClient.getPigAuditId(pigContext);String callerId=(String)pigContext.getProperties().get(PigConfiguration.PIG_LOG_TRACE_ID);log.info(\"Pig Script ID for the session: \"+auditId);if(callerId!=null){log.info(\"Caller ID for session: \"+callerId);}if(Boolean.parseBoolean(pigContext.getProperties().getProperty(PigConfiguration.PIG_ATS_ENABLED))){if(Boolean.parseBoolean(pigContext.getProperties().getProperty(\"yarn.timeline-service.enabled\",\"false\"))){PigATSClient.ATSEvent event=new PigATSClient.ATSEvent(auditId,callerId);try{PigATSClient.getInstance().logEvent(event);}catch(Exception e){log.warn(\"Error posting to ATS: \",e);}}else{log.warn(\"ATS is disabled since\"+\" yarn.timeline-service.enabled set to false\");}}Class callerContextClass=null;try{callerContextClass=Class.forName(\"org.apache.hadoop.ipc.CallerContext\");}catch(ClassNotFoundException e){}if(callerContextClass!=null){try{Class callerContextBuilderClass=Class.forName(\"org.apache.hadoop.ipc.CallerContext$Builder\");Constructor callerContextBuilderConstruct=callerContextBuilderClass.getConstructor(String.class);Object builder=callerContextBuilderConstruct.newInstance(auditId);Method builderBuildMethod=builder.getClass().getMethod(\"build\");Object hdfsContext=builderBuildMethod.invoke(builder);Method callerContextSetCurrentMethod=callerContextClass.getMethod(\"setCurrent\",hdfsContext.getClass());callerContextSetCurrentMethod.invoke(callerContextClass,hdfsContext);}catch(Exception e){throw new ExecException(e);}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void removeAndReconnect(MapReduceOper mr,MapReduceOper newMR)throws VisitorException{List<MapReduceOper>mapperSuccs=getPlan().getSuccessors(mr);List<MapReduceOper>mapperPreds=getPlan().getPredecessors(mr);ArrayList<MapReduceOper>succsCopy=null;ArrayList<MapReduceOper>predsCopy=null;if(mapperSuccs!=null){succsCopy=new ArrayList<MapReduceOper>(mapperSuccs);}if(mapperPreds!=null){predsCopy=new ArrayList<MapReduceOper>(mapperPreds);}getPlan().remove(mr);if(succsCopy!=null){for(MapReduceOper succ : succsCopy){try{getPlan().connect(newMR,succ);}catch(PlanException e){int errCode=2133;String msg=\"Internal Error.Unable to connect map plan with successors for optimization.\";throw new OptimizerException(msg,errCode,PigException.BUG,e);}}}if(predsCopy!=null){for(MapReduceOper pred : predsCopy){if(newMR.getOperatorKey().equals(pred.getOperatorKey())){continue;}try{getPlan().connect(pred,newMR);}catch(PlanException e){int errCode=2134;String msg=\"Internal Error.Unable to connect map plan with predecessors for optimization.\";throw new OptimizerException(msg,errCode,PigException.BUG,e);}}}mergeMROperProperties(mr,newMR);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private static Class<?>stringToClass(String klass)throws FrontendException{if(\"string\".equalsIgnoreCase(klass)){return String.class;}else if(\"int\".equalsIgnoreCase(klass)){return Integer.TYPE;}else if(\"double\".equalsIgnoreCase(klass)){return Double.TYPE;}else if(\"float\".equalsIgnoreCase(klass)){return Float.TYPE;}else if(\"long\".equalsIgnoreCase(klass)){return Long.TYPE;}else if(\"double[]\".equalsIgnoreCase(klass)){return DOUBLE_ARRAY_CLASS;}else if(\"int[]\".equalsIgnoreCase(klass)){return INT_ARRAY_CLASS;}else if(\"long[]\".equalsIgnoreCase(klass)){return LONG_ARRAY_CLASS;}else if(\"float[]\".equalsIgnoreCase(klass)){return FLOAT_ARRAY_CLASS;}else if(\"string[]\".equalsIgnoreCase(klass)){return STRING_ARRAY_CLASS;}else{throw new FrontendException(\"unable to find matching class for \"+klass);}}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"rawtypes\")protected void incSpillCount(Enum counter,long numRecsSpilled){PigStatusReporter reporter=PigStatusReporter.getInstance();if(reporter!=null && reporter.getCounter(counter)!=null){reporter.getCounter(counter).increment(numRecsSpilled);}else{}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public long spill(){if(mContents.size()==0)return 0;long spilled=0;synchronized(mContents){DataOutputStream out=null;try{out=getSpillFile();}catch(IOException ioe){warn(\"Unable to create tmp file to spill to disk\",PigWarning.UNABLE_TO_CREATE_FILE_TO_SPILL,ioe);return 0;}try{Iterator<Tuple>i=mContents.iterator();while(i.hasNext()){SEDES.writeDatum(out,i.next(),DataType.TUPLE);spilled++;if((spilled & 0x3fff)==0)reportProgress();}out.flush();out.close();out=null;mContents.clear();}catch(Throwable e){mSpillFiles.remove(mSpillFiles.size()-1);warn(\"Unable to spill contents to disk\",PigWarning.UNABLE_TO_SPILL,e);return 0;}finally{if(out!=null){try{out.close();}catch(IOException e){warn(\"Error closing spill\",PigWarning.UNABLE_TO_CLOSE_SPILL_FILE,e);}}}}incSpillCount(PigCounters.SPILLABLE_MEMORY_MANAGER_SPILL_COUNT);return spilled;}"
  },
  {
    "code_smells": [],
    "source_code": "public static Schema newBagSchema(String bagName,String tupleName,List<String>fieldNames,List<Byte>dataTypes)throws FrontendException{checkParameters(fieldNames,dataTypes);Schema tupleSchema=newTupleSchema(tupleName,fieldNames,dataTypes);Schema.FieldSchema bagField=new Schema.FieldSchema(bagName,tupleSchema,DataType.BAG);return new Schema(bagField);}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean is64bitJVM(){String arch=System.getProperties().getProperty(\"sun.arch.data.model\",System.getProperty(\"com.ibm.vm.bitmode\"));return arch!=null && arch.equals(\"64\");}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void getDictionaryIds(int[]inDocIds,int inStartPos,int inDocIdsSize,int[]outDictionaryIds,int outStartPos){_reader.readValues(inDocIds,inStartPos,inDocIdsSize,outDictionaryIds,outStartPos);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static ImmutableDictionaryReader loadDictionary(PinotDataBuffer dictionaryBuffer,ColumnMetadata metadata,boolean loadOnHeap){FieldSpec.DataType dataType=metadata.getDataType();if(loadOnHeap){String columnName=metadata.getColumnName();LOGGER.info(\"Loading on-heap dictionary for column:{}\",columnName);}int length=metadata.getCardinality();switch(dataType){case INT: return(loadOnHeap)? new OnHeapIntDictionary(dictionaryBuffer,length): new IntDictionary(dictionaryBuffer,length);case LONG: return(loadOnHeap)? new OnHeapLongDictionary(dictionaryBuffer,length): new LongDictionary(dictionaryBuffer,length);case FLOAT: return(loadOnHeap)? new OnHeapFloatDictionary(dictionaryBuffer,length): new FloatDictionary(dictionaryBuffer,length);case DOUBLE: return(loadOnHeap)? new OnHeapDoubleDictionary(dictionaryBuffer,length): new DoubleDictionary(dictionaryBuffer,length);case STRING: int numBytesPerValue=metadata.getColumnMaxLength();byte paddingByte=(byte)metadata.getPaddingCharacter();return loadOnHeap ? new OnHeapStringDictionary(dictionaryBuffer,length,numBytesPerValue,paddingByte): new StringDictionary(dictionaryBuffer,length,numBytesPerValue,paddingByte);case BYTES: numBytesPerValue=metadata.getColumnMaxLength();return new BytesDictionary(dictionaryBuffer,length,numBytesPerValue);default: throw new IllegalStateException(\"Illegal data type for dictionary: \"+dataType);}}"
  },
  {
    "code_smells": [],
    "source_code": "@GET @Path(\"/create\")public String createMetricConfig(@QueryParam(\"dataset\")String dataset,@QueryParam(\"name\")String name,@QueryParam(\"datatype\")String metricType,@QueryParam(\"active\")boolean active,@QueryParam(\"derived\")boolean derived,@QueryParam(\"derivedFunctionType\")String derivedFunctionType,@QueryParam(\"numerator\")String numerator,@QueryParam(\"denominator\")String denominator,@QueryParam(\"derivedMetricExpression\")String derivedMetricExpression,@QueryParam(\"inverseMetric\")boolean inverseMetric,@QueryParam(\"cellSizeExpression\")String cellSizeExpression,@QueryParam(\"rollupThreshold\")Double rollupThreshold){try{MetricConfigDTO metricConfigDTO=new MetricConfigDTO();populateMetricConfig(metricConfigDTO,dataset,name,metricType,active,derived,derivedFunctionType,numerator,denominator,derivedMetricExpression,inverseMetric,cellSizeExpression,rollupThreshold);Long id=metricConfigDao.save(metricConfigDTO);metricConfigDTO.setId(id);return JsonResponseUtil.buildResponseJSON(metricConfigDTO).toString();}catch(Exception e){LOG.warn(\"Failed to create metric:{}\",name,e);return JsonResponseUtil.buildErrorResponseJSON(\"Failed to create metric:\"+name+\" Message:\"+e.getMessage()).toString();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<String>getPropertyNames(){return Collections.EMPTY_LIST;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){if(length>0){items=new Object[items.length];length=0;modificationCount++;if(listListeners!=null){listListeners.listCleared(this);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int add(final T item){int index=-1;if(comparator==null){index=getLength();}else{index=Collections.binarySearch(list,item,comparator);if(index<0){index=-(index+1);}}list.add(index,item);listListeners.itemInserted(this,index);return index;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @UnsupportedOperation public void clear(){throw new UnsupportedOperationException(ERROR_MSG);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Component getNextComponent(final Container container,final Component component,final FocusTraversalDirection direction){Utils.checkNull(container,\"container\");Utils.checkNull(direction,\"direction\");Component nextComponent=null;int n=container.getLength();if(n>0){switch(direction){case FORWARD: if(component==null){nextComponent=container.get(0);}else{int index=container.indexOf(component);if(index==-1){throw new IllegalArgumentException(\"Component is not a child of the container.\");}if(index<n-1){nextComponent=container.get(index+1);}else{if(wrap){nextComponent=container.get(0);}}}break;case BACKWARD: if(component==null){nextComponent=container.get(n-1);}else{int index=container.indexOf(component);if(index==-1){throw new IllegalArgumentException(\"Component is not a child of the container.\");}if(index>0){nextComponent=container.get(index-1);}else{if(wrap){nextComponent=container.get(n-1);}}}break;default: break;}}return nextComponent;}"
  },
  {
    "code_smells": [],
    "source_code": "private void checkPostedFormData(){if(getMethod().equals(\"POST\")){String contentType=getContentType();if(contentType==null || contentType.equals(\"application/x-www-form-urlencoded\")){throw new IllegalStateException(\"User request HTTP POST data is of type \"+\"application/x-www-form-urlencoded.\"+\"This data has been already processed \"+\"by the portlet-container and is available \"+\"as request parameters.\");}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setLocale(Locale locale){if(locale!=null){responseContext.setLocale(locale);if(canSetLocaleEncoding){String encoding=getPortletWindow().getPortletDefinition().getApplication().getLocaleEncodingMappings().get(locale);if(encoding!=null){setCharacterEncoding(encoding);canSetLocaleEncoding=true;}}}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void handleDefaultEscapeXML(){PortletConfig portletConfig=(PortletConfig)pageContext.getRequest().getAttribute(Constants.PORTLET_CONFIG);Map<String,String[]>containerRuntimeOptions=portletConfig.getContainerRuntimeOptions();if(containerRuntimeOptions!=null){String[]result=containerRuntimeOptions.get(Constants.ESCAPE_XML_RUNTIME_OPTION);if(result!=null){if(result.length>0){setEscapeXml(result[0]);}}}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public int setPath(Path2D path){Rectangle2D bounds=path.getBounds2D();PathIterator it=path.getPathIterator(null);List<byte[]>segInfo=new ArrayList<>();List<Point2D.Double>pntInfo=new ArrayList<>();boolean isClosed=false;int numPoints=0;while(!it.isDone()){double[]vals=new double[6];int type=it.currentSegment(vals);switch(type){case PathIterator.SEG_MOVETO: pntInfo.add(new Point2D.Double(vals[0],vals[1]));segInfo.add(SEGMENTINFO_MOVETO);numPoints++;break;case PathIterator.SEG_LINETO: pntInfo.add(new Point2D.Double(vals[0],vals[1]));segInfo.add(SEGMENTINFO_LINETO);segInfo.add(SEGMENTINFO_ESCAPE);numPoints++;break;case PathIterator.SEG_CUBICTO: pntInfo.add(new Point2D.Double(vals[0],vals[1]));pntInfo.add(new Point2D.Double(vals[2],vals[3]));pntInfo.add(new Point2D.Double(vals[4],vals[5]));segInfo.add(SEGMENTINFO_CUBICTO);segInfo.add(SEGMENTINFO_ESCAPE2);numPoints++;break;case PathIterator.SEG_QUADTO: LOG.log(POILogger.WARN,\"SEG_QUADTO is not supported\");break;case PathIterator.SEG_CLOSE: pntInfo.add(pntInfo.get(0));segInfo.add(SEGMENTINFO_LINETO);segInfo.add(SEGMENTINFO_ESCAPE);segInfo.add(SEGMENTINFO_LINETO);segInfo.add(SEGMENTINFO_CLOSE);isClosed=true;numPoints++;break;default: LOG.log(POILogger.WARN,\"Ignoring invalid segment type \"+type);break;}it.next();}if(!isClosed){segInfo.add(SEGMENTINFO_LINETO);}segInfo.add(SEGMENTINFO_END);AbstractEscherOptRecord opt=getEscherOptRecord();opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__SHAPEPATH,0x4));EscherArrayProperty verticesProp=new EscherArrayProperty((short)(EscherProperties.GEOMETRY__VERTICES+0x4000),false,null);verticesProp.setNumberOfElementsInArray(pntInfo.size());verticesProp.setNumberOfElementsInMemory(pntInfo.size());verticesProp.setSizeOfElements(8);for(int i=0;i<pntInfo.size();i++){Point2D.Double pnt=pntInfo.get(i);byte[]data=new byte[8];LittleEndian.putInt(data,0,Units.pointsToMaster(pnt.getX()-bounds.getX()));LittleEndian.putInt(data,4,Units.pointsToMaster(pnt.getY()-bounds.getY()));verticesProp.setElement(i,data);}opt.addEscherProperty(verticesProp);EscherArrayProperty segmentsProp=new EscherArrayProperty((short)(EscherProperties.GEOMETRY__SEGMENTINFO+0x4000),false,null);segmentsProp.setNumberOfElementsInArray(segInfo.size());segmentsProp.setNumberOfElementsInMemory(segInfo.size());segmentsProp.setSizeOfElements(0x2);for(int i=0;i<segInfo.size();i++){byte[]seg=segInfo.get(i);segmentsProp.setElement(i,seg);}opt.addEscherProperty(segmentsProp);opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__RIGHT,Units.pointsToMaster(bounds.getWidth())));opt.addEscherProperty(new EscherSimpleProperty(EscherProperties.GEOMETRY__BOTTOM,Units.pointsToMaster(bounds.getHeight())));opt.sortProperties();setAnchor(bounds);return numPoints;}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void testHtml()throws Exception{HSSFWorkbook workbook;try{workbook=ExcelToHtmlUtils.loadXls(child);}catch(Exception exc){return;}ExcelToHtmlConverter excelToHtmlConverter=new ExcelToHtmlConverter(XMLHelper.getDocumentBuilderFactory().newDocumentBuilder().newDocument());excelToHtmlConverter.processWorkbook(workbook);StringWriter stringWriter=new StringWriter();Transformer transformer=TransformerFactory.newInstance().newTransformer();transformer.setOutputProperty(OutputKeys.ENCODING,\"utf-8\");transformer.setOutputProperty(OutputKeys.INDENT,\"no\");transformer.setOutputProperty(OutputKeys.METHOD,\"html\");transformer.transform(new DOMSource(excelToHtmlConverter.getDocument()),new StreamResult(stringWriter));assertNotNull(stringWriter.toString());}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void testBug56655a()throws IOException{try(Workbook wb=_testDataProvider.createWorkbook()){Sheet sheet=wb.createSheet();setCellFormula(sheet,0,0,\"B1*C1\");sheet.getRow(0).createCell(1).setCellValue(\"A\");setCellFormula(sheet,1,0,\"B1*C1\");sheet.getRow(1).createCell(1).setCellValue(\"A\");setCellFormula(sheet,0,3,\"SUMIFS(A:A,A:A,A2)\");wb.getCreationHelper().createFormulaEvaluator().evaluateAll();assertEquals(CellType.ERROR,getCell(sheet,0,0).getCachedFormulaResultType());assertEquals(FormulaError.VALUE.getCode(),getCell(sheet,0,0).getErrorCellValue());assertEquals(CellType.ERROR,getCell(sheet,1,0).getCachedFormulaResultType());assertEquals(FormulaError.VALUE.getCode(),getCell(sheet,1,0).getErrorCellValue());assertEquals(CellType.ERROR,getCell(sheet,0,3).getCachedFormulaResultType());assertEquals(FormulaError.VALUE.getCode(),getCell(sheet,0,3).getErrorCellValue());}}"
  },
  {
    "code_smells": [],
    "source_code": "public void testGetColumnWidthString()throws IOException{Workbook wb=new HSSFWorkbook();Sheet sheet=wb.createSheet(\"sheet\");Row row=sheet.createRow(0);sheet.createRow(1);sheet.createRow(2);Cell cell=row.createCell(0);cell.setCellValue(\"sometext\");assertTrue(\"Having some width for rows with actual cells\",SheetUtil.getColumnWidth(sheet,0,true)>0);assertEquals(\"Not having any widht for rows with all empty cells\",-1.0,SheetUtil.getColumnWidth(sheet,0,true,1,2));wb.close();}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean isValid(Document xml)throws SAXException{try{String language=\"http://www.w3.org/2001/XMLSchema\";SchemaFactory factory=SchemaFactory.newInstance(language);Source source=new DOMSource(map.getSchema());Schema schema=factory.newSchema(source);Validator validator=schema.newValidator();validator.validate(new DOMSource(xml));return true;}catch(IOException e){LOG.log(POILogger.ERROR,\"document is not valid\",e);}return false;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Test public void writeRead()throws IOException{try(XSSFWorkbook workbook=XSSFTestDataSamples.openSampleWorkbook(\"WithVariousData.xlsx\")){XSSFSheet sheet1=workbook.getSheetAt(0);XSSFSheet sheet2=workbook.getSheetAt(1);assertTrue(sheet1.hasComments());assertFalse(sheet2.hasComments());Row r5=sheet1.getRow(4);Comment cc5=r5.getCell(2).getCellComment();cc5.setAuthor(\"Apache POI\");cc5.setString(new XSSFRichTextString(\"Hello!\"));Row r2s2=sheet2.createRow(2);Cell c1r2s2=r2s2.createCell(1);assertNull(c1r2s2.getCellComment());Drawing<?>dg=sheet2.createDrawingPatriarch();Comment cc2=dg.createCellComment(new XSSFClientAnchor());cc2.setAuthor(\"Also POI\");cc2.setString(new XSSFRichTextString(\"A new comment\"));c1r2s2.setCellComment(cc2);try(XSSFWorkbook workbookBack=XSSFTestDataSamples.writeOutAndReadBack(workbook)){sheet1=workbookBack.getSheetAt(0);sheet2=workbookBack.getSheetAt(1);assertNotNull(sheet1.getRow(4).getCell(2).getCellComment());assertNotNull(sheet1.getRow(6).getCell(2).getCellComment());assertNotNull(sheet2.getRow(2).getCell(1).getCellComment());assertEquals(\"Apache POI\",sheet1.getRow(4).getCell(2).getCellComment().getAuthor());assertEquals(\"Nick Burch\",sheet1.getRow(6).getCell(2).getCellComment().getAuthor());assertEquals(\"Also POI\",sheet2.getRow(2).getCell(1).getCellComment().getAuthor());assertEquals(\"Hello!\",sheet1.getRow(4).getCell(2).getCellComment().getString().getString());}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public XSSFRichTextString createRichTextString(String text){XSSFRichTextString rt=new XSSFRichTextString(text);rt.setStylesTableReference(workbook.getStylesSource());return rt;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static void main(String[]args)throws IOException{try(XSSFWorkbook wb=new XSSFWorkbook()){XSSFSheet sheet=wb.createSheet(\"linechart\");final int NUM_OF_ROWS=3;final int NUM_OF_COLUMNS=10;Row row;Cell cell;for(int rowIndex=0;rowIndex<NUM_OF_ROWS;rowIndex++){row=sheet.createRow((short)rowIndex);for(int colIndex=0;colIndex<NUM_OF_COLUMNS;colIndex++){cell=row.createCell((short)colIndex);cell.setCellValue(colIndex*(rowIndex+1.0));}}XSSFDrawing drawing=sheet.createDrawingPatriarch();XSSFClientAnchor anchor=drawing.createAnchor(0,0,0,0,0,5,10,15);XSSFChart chart=drawing.createChart(anchor);XDDFChartLegend legend=chart.getOrAddLegend();legend.setPosition(LegendPosition.TOP_RIGHT);XDDFCategoryAxis bottomAxis=chart.createCategoryAxis(AxisPosition.BOTTOM);bottomAxis.setTitle(\"x\");XDDFValueAxis leftAxis=chart.createValueAxis(AxisPosition.LEFT);leftAxis.setTitle(\"f(x)\");leftAxis.setCrosses(AxisCrosses.AUTO_ZERO);XDDFDataSource<Double>xs=XDDFDataSourcesFactory.fromNumericCellRange(sheet,new CellRangeAddress(0,0,0,NUM_OF_COLUMNS-1));XDDFNumericalDataSource<Double>ys1=XDDFDataSourcesFactory.fromNumericCellRange(sheet,new CellRangeAddress(1,1,0,NUM_OF_COLUMNS-1));XDDFNumericalDataSource<Double>ys2=XDDFDataSourcesFactory.fromNumericCellRange(sheet,new CellRangeAddress(2,2,0,NUM_OF_COLUMNS-1));XDDFLineChartData data=(XDDFLineChartData)chart.createData(ChartTypes.LINE,bottomAxis,leftAxis);XDDFLineChartData.Series series1=(XDDFLineChartData.Series)data.addSeries(xs,ys1);series1.setTitle(\"2x\",null);series1.setSmooth(false);series1.setMarkerStyle(MarkerStyle.STAR);XDDFLineChartData.Series series2=(XDDFLineChartData.Series)data.addSeries(xs,ys2);series2.setTitle(\"3x\",null);series2.setSmooth(true);series2.setMarkerSize((short)6);series2.setMarkerStyle(MarkerStyle.TRIANGLE);chart.plot(data);solidLineSeries(data,0,PresetColor.CHARTREUSE);solidLineSeries(data,1,PresetColor.TURQUOISE);try(FileOutputStream fileOut=new FileOutputStream(\"ooxml-line-chart.xlsx\")){wb.write(fileOut);}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@SuppressWarnings(\"raw\")private static void simpleGenericNameOf(StringBuilder sb,Type type){if(type instanceof Class){sb.append(((Class)type).getSimpleName());}else if(type instanceof ParameterizedType){ParameterizedType pt=(ParameterizedType)type;simpleGenericNameOf(sb,pt.getRawType());sb.append(\"<\");boolean atLeastOne=false;for(Type typeArgument : pt.getActualTypeArguments()){if(atLeastOne){sb.append(\",\");}simpleGenericNameOf(sb,typeArgument);atLeastOne=true;}sb.append(\">\");}else if(type instanceof GenericArrayType){GenericArrayType gat=(GenericArrayType)type;simpleGenericNameOf(sb,gat.getGenericComponentType());sb.append(\"[]\");}else if(type instanceof TypeVariable){TypeVariable tv=(TypeVariable)type;sb.append(tv.getName());}else if(type instanceof WildcardType){WildcardType wt=(WildcardType)type;sb.append(\"? extends \");boolean atLeastOne=false;for(Type typeArgument : wt.getUpperBounds()){if(atLeastOne){sb.append(\",\");}simpleGenericNameOf(sb,typeArgument);atLeastOne=true;}}else{throw new IllegalArgumentException(\"Don't know how to deal with type:\"+type);}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void endObject()throws JSONException{writer.endObject();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object invoke(Object proxy,Method method,Object[]args)throws Throwable{CircuitBreaker circuitBreaker=serviceCircuitBreaker.circuitBreaker();try{if(!circuitBreaker.isOn()){throw circuitBreaker.lastThrowable();}Object result=next.invoke(proxy,method,args);circuitBreaker.success();return result;}catch(Throwable throwable){circuitBreaker.throwable(throwable);throw throwable;}}"
  },
  {
    "code_smells": [],
    "source_code": "void updateEntity(UnitOfWork current){try{entity=current.get(entity);}catch(NoSuchEntityException e){entity=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public static Class<?>createProxyClass(ClassLoader mainTypeClassLoader,Class<?>[]interfaces){ClassLoader effectiveClassLoader=Thread.currentThread().getContextClassLoader();if(effectiveClassLoader==null){effectiveClassLoader=mainTypeClassLoader;}return Proxy.getProxyClass(effectiveClassLoader,interfaces);}"
  },
  {
    "code_smells": [],
    "source_code": "public void clearProxy(){proxy=null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void activate()throws ActivationException{activation.activate(applicationModel.newActivatorsInstance(),layerInstances);}"
  },
  {
    "code_smells": [],
    "source_code": "@GET @ApiOperation(value=\"Downloads Pulsar Function file data\",hidden=true)@Path(\"/download\")public StreamingOutput downloadFunction(@QueryParam(\"path\")final String path){return functions.downloadFunction(path);}"
  },
  {
    "code_smells": [],
    "source_code": "@POST @Path(\"/{tenant}/{namespace}/subscribeRate\")@ApiOperation(value=\"Set subscribe-rate throttling for all topics of the namespace\")@ApiResponses(value={@ApiResponse(code=403,message=\"Don't have admin permission\")})public void setSubscribeRate(@PathParam(\"tenant\")String tenant,@PathParam(\"namespace\")String namespace,SubscribeRate subscribeRate){validateNamespaceName(tenant,namespace);internalSetSubscribeRate(subscribeRate);}"
  },
  {
    "source_code": "private boolean hasDataFromHttp(){return false;}",
    "code_smells": "class C{private boolean hasDataFromHttp(){return false;}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static boolean isBelowLoadLevel(SystemResourceUsage usage,float thresholdPercentage){return(usage.bandwidthOut.percentUsage()<thresholdPercentage && usage.bandwidthIn.percentUsage()<thresholdPercentage && usage.cpu.percentUsage()<thresholdPercentage && usage.directMemory.percentUsage()<thresholdPercentage);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "CompletableFuture<MessageId>getLastMessageIdAsync(){if(getState()==State.Closing || getState()==State.Closed){return FutureUtil.failedFuture(new PulsarClientException.AlreadyClosedException(\"Consumer was already closed\"));}AtomicLong opTimeoutMs=new AtomicLong(client.getConfiguration().getOperationTimeoutMs());Backoff backoff=new Backoff(100,TimeUnit.MILLISECONDS,opTimeoutMs.get()*2,TimeUnit.MILLISECONDS,0,TimeUnit.MILLISECONDS);CompletableFuture<MessageId>getLastMessageIdFuture=new CompletableFuture<>();internalGetLastMessageIdAsync(backoff,opTimeoutMs,getLastMessageIdFuture);return getLastMessageIdFuture;}"
  },
  {
    "code_smells": [],
    "source_code": "int getPartitionIndex(){return partitionIndex;}"
  },
  {
    "code_smells": [],
    "source_code": "public void onDischargeSuccess(){cleanup();if(declare==null){request.onSuccess();}else if(declare.isComplete()){if(declare.getFailureCause()==null){request.onSuccess();}else{request.onFailure(declare.getFailureCause());}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Provider createProvider(URI remoteURI,ProviderFutureFactory futureFactory)throws Exception{CompositeData composite=URISupport.parseComposite(remoteURI);Map<String,String>options=composite.getParameters();Map<String,String>filtered=PropertyUtil.filterProperties(options,FAILOVER_OPTION_PREFIX);Map<String,String>nested=PropertyUtil.filterProperties(filtered,FAILOVER_NESTED_OPTION_PREFIX_ADDON);Map<String,String>providerOptions=PropertyUtil.filterProperties(options,\"provider.\");if(futureFactory==null){futureFactory=ProviderFutureFactory.create(providerOptions);if(!providerOptions.isEmpty()){String msg=\"\"+\" Not all Provider options could be applied during Failover Provider creation.\"+\" Check the options are spelled correctly.\"+\" Unused parameters=[\"+providerOptions+\"].\"+\" This provider instance cannot be started.\";throw new IllegalArgumentException(msg);}}FailoverProvider provider=new FailoverProvider(composite.getComponents(),nested,futureFactory);Map<String,String>unused=PropertyUtil.setProperties(provider,filtered);if(!unused.isEmpty()){String msg=\"\"+\" Not all options could be set on the Failover provider.\"+\" Check the options are spelled correctly.\"+\" Unused parameters=[\"+unused+\"].\"+\" This Provider cannot be started.\";throw new IllegalArgumentException(msg);}return provider;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getTrustedCaDb(){return _trustedCaDb;}"
  },
  {
    "code_smells": [],
    "source_code": "public BooleanLessEqual(final List expr)throws QmfException{super(2,expr);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public final String getType(){return ConfiguredObjectTypeRegistry.getType(_clazz);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void writeToBuffer(QpidByteBuffer buffer){_type.writeToBuffer(_value,buffer);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void open(){Collection<LinkDefinition<Source,Target>>links=_linkStore.openAndLoad(new LinkStoreUpdaterImpl());for(LinkDefinition<Source,Target>link : links){ConcurrentMap<LinkKey,Link_1_0<S,T>>linkRegistry=getLinkRegistry(link.getRole());LinkDefinition<S,T>definition=(LinkDefinition<S,T>)link;linkRegistry.put(new LinkKey(link),new LinkImpl<>(definition,this));}}"
  },
  {
    "code_smells": [],
    "source_code": "public QmfEvent createUnsubscribeEvent(){QmfEvent unsubscribe=new QmfEvent(_unsubscribeSchema);unsubscribe.setSeverity(\"info\");unsubscribe.setValue(\"dest\",getStringValue(\"name\"));return unsubscribe;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Content getMessageContent(final long messageId,final long limit,boolean returnJson,boolean decompressBeforeLimiting){final MessageContentFinder messageFinder=new MessageContentFinder(messageId);visit(messageFinder);if(messageFinder.isFound()){return createMessageContent(messageFinder.getMessageReference(),returnJson,limit,decompressBeforeLimiting);}else{return null;}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public boolean makeAcquisitionUnstealable(final MessageInstanceConsumer<?>consumer){EntryState state=_state;if(state instanceof StealableConsumerAcquiredState &&((StealableConsumerAcquiredState)state).getConsumer()==consumer){UnstealableConsumerAcquiredState unstealableState=((StealableConsumerAcquiredState)state).getUnstealableState();boolean updated=_stateUpdater.compareAndSet(this,state,unstealableState);if(updated){notifyStateChange(state,unstealableState);}return updated;}return state instanceof UnstealableConsumerAcquiredState &&((UnstealableConsumerAcquiredState)state).getConsumer()==consumer;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public static RuleSet parse(final Reader configReader,EventLoggerProvider eventLogger){RuleSetCreator ruleSetCreator=new RuleSetCreator();int line=0;try(Reader fileReader=configReader){LOGGER.debug(\"About to load ACL file\");StreamTokenizer tokenizer=new StreamTokenizer(new BufferedReader(fileReader));tokenizer.resetSyntax();tokenizer.commentChar(COMMENT);tokenizer.eolIsSignificant(true);tokenizer.ordinaryChar('=');tokenizer.ordinaryChar(CONTINUATION);tokenizer.quoteChar('\"');tokenizer.quoteChar('\\'');tokenizer.whitespaceChars('\\u0000','\\u0020');tokenizer.wordChars('a','z');tokenizer.wordChars('A','Z');tokenizer.wordChars('0','9');tokenizer.wordChars('_','_');tokenizer.wordChars('-','-');tokenizer.wordChars('.','.');tokenizer.wordChars('*','*');tokenizer.wordChars('@','@');tokenizer.wordChars(':',':');Stack<String>stack=new Stack<>();int current;do{current=tokenizer.nextToken();line=tokenizer.lineno()-1;switch(current){case StreamTokenizer.TT_EOF: case StreamTokenizer.TT_EOL: if(stack.isEmpty()){break;}String first=stack.firstElement();stack.removeElementAt(0);if(stack.isEmpty()){throw new IllegalConfigurationException(String.format(NOT_ENOUGH_TOKENS_MSG,line));}Integer number=null;if(first!=null && first.matches(\"\\\\d+\")){number=Integer.valueOf(first);first=stack.firstElement();stack.removeElementAt(0);}if(ACL.equalsIgnoreCase(first)){parseAcl(number,stack,ruleSetCreator,line);}else if(number==null){if(\"GROUP\".equalsIgnoreCase(first)){throw new IllegalConfigurationException(String.format(\"GROUP keyword not supported at \"+\"line %d.Groups should defined \"+\"via a Group Provider,not in \"+\"the ACL file.\",line));}else if(CONFIG.equalsIgnoreCase(first)){parseConfig(stack,ruleSetCreator,line);}else{throw new IllegalConfigurationException(String.format(UNRECOGNISED_INITIAL_MSG,first,line));}}else{throw new IllegalConfigurationException(String.format(NUMBER_NOT_ALLOWED_MSG,first,line));}stack.clear();break;case StreamTokenizer.TT_NUMBER: stack.push(Integer.toString(Double.valueOf(tokenizer.nval).intValue()));break;case StreamTokenizer.TT_WORD: stack.push(tokenizer.sval);break;default: if(tokenizer.ttype==CONTINUATION){int next=tokenizer.nextToken();line=tokenizer.lineno()-1;if(next==StreamTokenizer.TT_EOL){break;}throw new IllegalConfigurationException(String.format(PREMATURE_CONTINUATION_MSG,line+1));}else if(tokenizer.ttype=='\\'' || tokenizer.ttype=='\"'){stack.push(tokenizer.sval);}else{stack.push(Character.toString((char)tokenizer.ttype));}}}while(current!=StreamTokenizer.TT_EOF);if(!stack.isEmpty()){throw new IllegalConfigurationException(String.format(PREMATURE_EOF_MSG,line));}}catch(IllegalArgumentException iae){throw new IllegalConfigurationException(String.format(PARSE_TOKEN_FAILED_MSG,line),iae);}catch(IOException ioe){throw new IllegalConfigurationException(CANNOT_LOAD_MSG,ioe);}return ruleSetCreator.createRuleSet(eventLogger);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public UUID[]remove(final ConfiguredObjectRecord...objects){assertState(State.OPEN);List<UUID>removed=new ArrayList<UUID>();for(ConfiguredObjectRecord record : objects){if(_configuredObjectRecords.remove(record.getId())!=null){removed.add(record.getId());}}return removed.toArray(new UUID[removed.size()]);}"
  },
  {
    "code_smells": [],
    "source_code": "private UUID cacheIfNecessary(final UUID candidate){UUID existing=_uuids.putIfAbsent(candidate,candidate);return existing==null ? candidate : existing;}"
  },
  {
    "code_smells": [],
    "source_code": "private void validateNodeAutoCreationPolicy(final NodeAutoCreationPolicy policy){String pattern=policy.getPattern();if(pattern==null){throw new IllegalArgumentException(\"The 'pattern' attribute of a NodeAutoCreationPolicy MUST be supplied: \"+policy);}try{Pattern.compile(pattern);}catch(PatternSyntaxException e){throw new IllegalArgumentException(\"The 'pattern' attribute of a NodeAutoCreationPolicy MUST be a valid \"+\"Java Regular Expression Pattern,the value '\"+pattern+\"' is not: \"+policy);}String nodeType=policy.getNodeType();Class<? extends ConfiguredObject>sourceClass=null;for(Class<? extends ConfiguredObject>childClass : getModel().getChildTypes(getCategoryClass())){if(childClass.getSimpleName().equalsIgnoreCase(nodeType.trim())){sourceClass=childClass;break;}}if(sourceClass==null){throw new IllegalArgumentException(\"The node type of a NodeAutoCreationPolicy must be a valid child type \"+\"of a VirtualHost,'\"+nodeType+\"' is not.\");}if(policy.isCreatedOnConsume()&& !MessageSource.class.isAssignableFrom(sourceClass)){throw new IllegalArgumentException(\"A NodeAutoCreationPolicy which creates nodes on consume must have a \"+\"nodeType which implements MessageSource,'\"+nodeType+\"' does not.\");}if(policy.isCreatedOnPublish()&& !MessageDestination.class.isAssignableFrom(sourceClass)){throw new IllegalArgumentException(\"A NodeAutoCreationPolicy which creates nodes on publish must have a \"+\"nodeType which implements MessageDestination,'\"+nodeType+\"' does not.\");}if(!(policy.isCreatedOnConsume()|| policy.isCreatedOnPublish())){throw new IllegalArgumentException(\"A NodeAutoCreationPolicy must create on consume,create on publish or both.\");}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public ListenableFuture<Void>recover(QueueManagingVirtualHost<?>virtualHost){EventLogger eventLogger=virtualHost.getEventLogger();MessageStore store=virtualHost.getMessageStore();MessageStore.MessageStoreReader storeReader=store.newMessageStoreReader();MessageStoreLogSubject logSubject=new MessageStoreLogSubject(virtualHost.getName(),store.getClass().getSimpleName());Map<Queue<?>,Integer>queueRecoveries=new TreeMap<>();Map<Long,ServerMessage<?>>recoveredMessages=new HashMap<>();Map<Long,StoredMessage<?>>unusedMessages=new TreeMap<>();Map<UUID,Integer>unknownQueuesWithMessages=new HashMap<>();Map<Queue<?>,Integer>queuesWithUnknownMessages=new HashMap<>();eventLogger.message(logSubject,MessageStoreMessages.RECOVERY_START());storeReader.visitMessages(new MessageVisitor(recoveredMessages,unusedMessages));eventLogger.message(logSubject,TransactionLogMessages.RECOVERY_START(null,false));try{storeReader.visitMessageInstances(new MessageInstanceVisitor(virtualHost,store,queueRecoveries,recoveredMessages,unusedMessages,unknownQueuesWithMessages,queuesWithUnknownMessages));}finally{if(!unknownQueuesWithMessages.isEmpty()){unknownQueuesWithMessages.forEach((queueId,count)->{LOGGER.info(\"Discarded{}entry(s)associated with queue id '{}' as a queue with this \"+\"id does not appear in the configuration.\",count,queueId);});}if(!queuesWithUnknownMessages.isEmpty()){queuesWithUnknownMessages.forEach((queue,count)->{LOGGER.info(\"Discarded{}entry(s)associated with queue '{}' as the referenced message \"+\"does not exist.\",count,queue.getName());});}}for(Map.Entry<Queue<?>,Integer>entry : queueRecoveries.entrySet()){Queue<?>queue=entry.getKey();Integer deliveredCount=entry.getValue();eventLogger.message(logSubject,TransactionLogMessages.RECOVERED(deliveredCount,queue.getName()));eventLogger.message(logSubject,TransactionLogMessages.RECOVERY_COMPLETE(queue.getName(),true));queue.completeRecovery();}for(Queue<?>q : virtualHost.getChildren(Queue.class)){if(!queueRecoveries.containsKey(q)){q.completeRecovery();}}storeReader.visitDistributedTransactions(new DistributedTransactionVisitor(virtualHost,eventLogger,logSubject,recoveredMessages,unusedMessages));for(StoredMessage<?>m : unusedMessages.values()){LOGGER.debug(\"Message id '{}' is orphaned,removing\",m.getMessageNumber());m.remove();}if(unusedMessages.size()>0){LOGGER.info(\"Discarded{}orphaned message(s).\",unusedMessages.size());}eventLogger.message(logSubject,TransactionLogMessages.RECOVERY_COMPLETE(null,false));eventLogger.message(logSubject,MessageStoreMessages.RECOVERED(recoveredMessages.size()-unusedMessages.size()));eventLogger.message(logSubject,MessageStoreMessages.RECOVERY_COMPLETE());return Futures.immediateFuture(null);}"
  },
  {
    "code_smells": [],
    "source_code": "public Interaction open()throws Exception{return _interaction.sendPerformative(new ConnectionOpenBody(AMQShortString.valueOf(_openVirtualHost),null,false));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<RangerPolicy>getServicePolicies(Long serviceId,SearchFilter filter)throws Exception{if(LOG.isDebugEnabled()){LOG.debug(\"==>ServiceDBStore.getServicePolicies(\"+serviceId+\")\");}XXService service=daoMgr.getXXService().getById(serviceId);if(service==null){throw new Exception(\"service does not exist-id='\"+serviceId);}List<RangerPolicy>ret=getServicePolicies(service,filter);if(LOG.isDebugEnabled()){LOG.debug(\"<==ServiceDBStore.getServicePolicies(\"+serviceId+\"): policy-count=\"+(ret==null ? 0 : ret.size()));}return ret;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setRememberMeServices(RememberMeServices rememberMeServices){if(logger.isDebugEnabled()){logger.debug(\"setRememberMeServices()enter: rememberMeServices=\"+rememberMeServices.toString());}super.setRememberMeServices(rememberMeServices);}"
  },
  {
    "code_smells": [],
    "source_code": "protected T createEntityObject(){try{return tEntityClass.newInstance();}catch(Throwable e){logger.error(\"Error instantiating entity class.tEntityClass=\"+tEntityClass.toString(),e);}return null;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public static byte[]getIP(){try{Enumeration allNetInterfaces=NetworkInterface.getNetworkInterfaces();InetAddress ip=null;byte[]internalIP=null;while(allNetInterfaces.hasMoreElements()){NetworkInterface netInterface=(NetworkInterface)allNetInterfaces.nextElement();Enumeration addresses=netInterface.getInetAddresses();while(addresses.hasMoreElements()){ip=(InetAddress)addresses.nextElement();if(ip!=null && ip instanceof Inet4Address){byte[]ipByte=ip.getAddress();if(ipByte.length==4){if(ipCheck(ipByte)){if(!isInternalIP(ipByte)){return ipByte;}else if(internalIP==null){internalIP=ipByte;}}}}}}if(internalIP!=null){return internalIP;}else{throw new RuntimeException(\"Can not get local ip\");}}catch(Exception e){throw new RuntimeException(\"Can not get local ip\",e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"OffsetMovedEvent[consumerGroup=\"+consumerGroup+\",messageQueue=\"+messageQueue+\",offsetRequest=\"+offsetRequest+\",offsetNew=\"+offsetNew+\"]\";}"
  },
  {
    "code_smells": [],
    "source_code": "@RequestMapping(value=\"/producerConnection.query\",method={RequestMethod.GET})@ResponseBody public Object producerConnection(@RequestParam String producerGroup,@RequestParam String topic){ProducerConnection producerConnection=producerService.getProducerConnection(producerGroup,topic);producerConnection.setConnectionSet(ConnectionInfo.buildConnectionInfoHashSet(producerConnection.getConnectionSet()));return producerConnection;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override @MultiMQAdminCmdMethod public Map<String,ConsumerGroupRollBackStat>resetOffset(ResetOffsetRequest resetOffsetRequest){Map<String,ConsumerGroupRollBackStat>groupRollbackStats=Maps.newHashMap();for(String consumerGroup : resetOffsetRequest.getConsumerGroupList()){try{Map<MessageQueue,Long>rollbackStatsMap=mqAdminExt.resetOffsetByTimestamp(resetOffsetRequest.getTopic(),consumerGroup,resetOffsetRequest.getResetTime(),resetOffsetRequest.isForce());ConsumerGroupRollBackStat consumerGroupRollBackStat=new ConsumerGroupRollBackStat(true);List<RollbackStats>rollbackStatsList=consumerGroupRollBackStat.getRollbackStatsList();for(Map.Entry<MessageQueue,Long>rollbackStatsEntty : rollbackStatsMap.entrySet()){RollbackStats rollbackStats=new RollbackStats();rollbackStats.setRollbackOffset(rollbackStatsEntty.getValue());rollbackStats.setQueueId(rollbackStatsEntty.getKey().getQueueId());rollbackStats.setBrokerName(rollbackStatsEntty.getKey().getBrokerName());rollbackStatsList.add(rollbackStats);}groupRollbackStats.put(consumerGroup,consumerGroupRollBackStat);}catch(MQClientException e){if(ResponseCode.CONSUMER_NOT_ONLINE==e.getResponseCode()){try{ConsumerGroupRollBackStat consumerGroupRollBackStat=new ConsumerGroupRollBackStat(true);List<RollbackStats>rollbackStatsList=mqAdminExt.resetOffsetByTimestampOld(consumerGroup,resetOffsetRequest.getTopic(),resetOffsetRequest.getResetTime(),true);consumerGroupRollBackStat.setRollbackStatsList(rollbackStatsList);groupRollbackStats.put(consumerGroup,consumerGroupRollBackStat);continue;}catch(Exception err){logger.error(\"op=resetOffset_which_not_online_error\",err);}}else{logger.error(\"op=resetOffset_error\",e);}groupRollbackStats.put(consumerGroup,new ConsumerGroupRollBackStat(false,e.getMessage()));}catch(Exception e){logger.error(\"op=resetOffset_error\",e);groupRollbackStats.put(consumerGroup,new ConsumerGroupRollBackStat(false,e.getMessage()));}}return groupRollbackStats;}"
  },
  {
    "code_smells": [],
    "source_code": "public RocketmqLog4jAppender(){}"
  },
  {
    "code_smells": [],
    "source_code": "private byte[]headerEncode(){this.makeCustomHeaderToNet();if(SerializeType.ROCKETMQ==serializeTypeCurrentRPC){return RocketMQSerializable.rocketMQProtocolEncode(this);}else{return RemotingSerializable.encode(this);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int getDefaultBackgroundColor(){return 0;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override boolean innerToOuter(){return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void emitPackageContents(IPackageDefinition definition){IASScope containedScope=definition.getContainedScope();ITypeDefinition type=findType(containedScope.getAllLocalDefinitions());if(type==null)return;write(\"function($exports\");exportWriter.queueExports(type,false);write(\"){\");indentPush();writeNewline();write(\"\\\"use strict\\\";\");writeNewline();ITypeNode tnode=findTypeNode(definition.getNode());if(tnode!=null){getWalker().walk(tnode);}indentPop();writeNewline();write(\"}\");}"
  },
  {
    "code_smells": [],
    "source_code": "public void emitBindableImplementsConstructorCode(boolean popIndent){writeNewline(\"//Compiler generated Binding support implementation:\");String dispatcherClass=getEmitter().formatQualifiedName(DISPATCHER_CLASS_QNAME);write(ASEmitterTokens.THIS);write(ASEmitterTokens.MEMBER_ACCESS);write(BINDABLE_DISPATCHER_NAME);write(ASEmitterTokens.SPACE);write(ASEmitterTokens.EQUAL);write(ASEmitterTokens.SPACE);write(ASEmitterTokens.NEW);write(ASEmitterTokens.SPACE);write(dispatcherClass);write(ASEmitterTokens.PAREN_OPEN);write(ASEmitterTokens.THIS);write(ASEmitterTokens.PAREN_CLOSE);writeNewline(ASEmitterTokens.SEMICOLON);if(popIndent)writeNewline(\"\",false);else writeNewline();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void startElement(final String uri,final String localName,final String qname,final Attributes attributes)throws SAXException{if(contextStack.size()==0){if(!qname.equals(rootElement)){throw new SAXConfigurationException(new ConfigurationException.IncorrectElement(rootElement,qname,this.source,locator.getLineNumber()),locator);}String all=attributes.getValue(\"includeAllClasses\");if(\"true\".equals(all))allClasses=true;contextStack.push(qname);return;}else{if(qname.equals(\"classEntry\")){String path=attributes.getValue(\"path\");includedClasses.add(path);}else if(qname.equals(\"namespaceManifestEntry\")){String manifest=attributes.getValue(\"manifest\");String namespace=attributes.getValue(\"namespace\");fbArgs.add(\"-namespace\");fbArgs.add(namespace);String mf=contextPath+\"/\"+manifest;File f=new File(mf);if(!f.exists()){mf=contextPath+\"/src/\"+manifest;}fbArgs.add(mf);fbArgs.add(\"-include-namespaces\");fbArgs.add(namespace);}}}"
  },
  {
    "code_smells": [],
    "source_code": "private static int[][]getCoordinates(List<ShapeRecord>records){int[][]coordinates=new int[records.size()][2];ShapeRecord record;for(int i=0;i<records.size();i++){record=records.get(i);if(record instanceof StyleChangeRecord){StyleChangeRecord scr=(StyleChangeRecord)record;coordinates[i][0]=scr.getMoveDeltaX();coordinates[i][1]=scr.getMoveDeltaY();}else if(record instanceof StraightEdgeRecord){StraightEdgeRecord ser=(StraightEdgeRecord)record;coordinates[i][0]=coordinates[i-1][0]+ser.getDeltaX();coordinates[i][1]=coordinates[i-1][1]+ser.getDeltaY();}else if(record instanceof CurvedEdgeRecord){CurvedEdgeRecord cer=(CurvedEdgeRecord)record;coordinates[i][0]=coordinates[i-1][0]+cer.getControlDeltaX()+cer.getAnchorDeltaX();coordinates[i][1]=coordinates[i-1][1]+cer.getControlDeltaY()+cer.getAnchorDeltaY();}}return coordinates;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public IMXMLEventSpecifierNode getEventSpecifierNode(String name){return eventNodeMap!=null ? eventNodeMap.get(name): null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String getName(){return IASLanguageConstants.XMLList;}"
  },
  {
    "code_smells": [],
    "source_code": "protected FileNode createFileNode(IFileSpecification specification){final DeferFunctionBody deferFunctionBody;if(!isInvisible()&& specification instanceof FileSpecification)deferFunctionBody=DeferFunctionBody.ENABLED;else deferFunctionBody=DeferFunctionBody.DISABLED;final IASProject flashProject;if(getProject()instanceof IASProject)flashProject=(IASProject)getProject();else flashProject=null;return ASParser.parseFile(specification,getFileSpecificationGetter(),EnumSet.of(PostProcessStep.CALCULATE_OFFSETS),this.getProject().getProjectConfigVariables(),true,this.getProject().isAssetEmbeddingSupported(),includedFiles,deferFunctionBody,flashProject,this);}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getACZK(Configuration conf){return conf.get(AC_ZK_PROP);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public CloseableIteration<BindingSet,QueryEvaluationException>evaluate(BindingSet bindings)throws QueryEvaluationException{return evaluate(Collections.singleton(bindings));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public double probabilityOfAttributeValueGivenClass(double attVal,int classVal){DoubleVector obs=this.attValDistPerClass.get(classVal);return obs!=null ?(obs.getValue((int)attVal)+1.0)/(obs.sumOfValues()+obs.numValues()): 0.0;}"
  },
  {
    "code_smells": [],
    "source_code": "PartitionReceiverHandlerImpl(SystemStreamPartition ssp,Counter eventReadRate,Counter eventByteReadRate,SamzaHistogram readLatency,Counter readErrors,Interceptor interceptor,int maxEventCount){this.ssp=ssp;this.eventReadRate=eventReadRate;this.eventByteReadRate=eventByteReadRate;this.readLatency=readLatency;this.errorRate=readErrors;this.interceptor=interceptor;this.maxEventCount=maxEventCount;}"
  },
  {
    "source_code": "private V get(K key){try{return getAsync(key).get();}catch(InterruptedException | ExecutionException e){throw new SamzaException(\"GET failed for \"+key,e);}}",
    "code_smells": "class C{private V get(K key){try{return getAsync(key).get();}catch(InterruptedException | ExecutionException e){throw new SamzaException(\"GET failed for \"+key,e);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void write(org.apache.thrift.protocol.TProtocol prot,list_roles_privileges_result struct)throws org.apache.thrift.TException{TTupleProtocol oprot=(TTupleProtocol)prot;BitSet optionals=new BitSet();if(struct.isSetSuccess()){optionals.set(0);}oprot.writeBitSet(optionals,1);if(struct.isSetSuccess()){struct.success.write(oprot);}}"
  },
  {
    "code_smells": [],
    "source_code": "public list_sentry_privileges_by_user_and_itsgroups_args(TListSentryPrivilegesRequest request){this();this.request=request;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private void grantOrRevokeRoleOnGroup(List<HivePrincipal>hivePrincipals,List<String>roles,HivePrincipal grantorPrinc,boolean isGrant)throws HiveAuthzPluginException,HiveAccessControlException{try{sentryClient=getSentryClient();Set<String>groups=Sets.newHashSet();for(HivePrincipal principal : hivePrincipals){if(principal.getType()!=HivePrincipalType.GROUP){String msg=SentryHiveConstants.GRANT_REVOKE_NOT_SUPPORTED_FOR_PRINCIPAL+principal.getType();throw new HiveAuthzPluginException(msg);}groups.add(principal.getName());}for(String roleName : roles){if(isGrant){sentryClient.grantRoleToGroups(grantorPrinc.getName(),roleName,groups);}else{sentryClient.revokeRoleFromGroups(grantorPrinc.getName(),roleName,groups);}}}catch(SentryAccessDeniedException e){HiveOperation hiveOp=isGrant ? HiveOperation.GRANT_ROLE : HiveOperation.REVOKE_ROLE;executeOnFailureHooks(hiveOp,e);}catch(SentryUserException e){String msg=\"Error when sentryClient grant/revoke role:\"+e.getMessage();executeOnErrorHooks(msg,e);}finally{if(sentryClient!=null){sentryClient.close();}}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void write(org.apache.thrift.protocol.TProtocol oprot,handle_hms_notification_result struct)throws org.apache.thrift.TException{struct.validate();oprot.writeStructBegin(STRUCT_DESC);oprot.writeFieldStop();oprot.writeStructEnd();}"
  },
  {
    "code_smells": [],
    "source_code": "public void setFieldValue(_Fields field,Object value){switch(field){case TYPE: if(value==null){unsetType();}else{setType((TPrivilegePrincipalType)value);}break;case VALUE: if(value==null){unsetValue();}else{setValue((String)value);}break;}}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean isPrivilegeForResource(TSentryPrivilege tSentryPrivilege,Resource resource){final java.util.Iterator<TAuthorizable>authorizablesIterator=tSentryPrivilege.getAuthorizablesIterator();while(authorizablesIterator.hasNext()){TAuthorizable tAuthorizable=authorizablesIterator.next();if(tAuthorizable.getType().equals(resource.resourceType().name())){return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@VisibleForTesting Set<MPath>getMAuthzPaths(long authzSnapshotID,String authzObj)throws Exception{return tm.executeTransactionWithRetry(pm->{MAuthzPathsMapping mapping=null;pm.setDetachAllOnCommit(true);mapping=getMAuthzPathsMappingCore(pm,authzSnapshotID,authzObj);if(mapping!=null){Set<MPath>paths=mapping.getPathsPersisted();return paths;}else{return Collections.emptySet();}});}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public boolean equals(TListSentryPrivilegesRequest that){if(that==null)return false;boolean this_present_protocol_version=true;boolean that_present_protocol_version=true;if(this_present_protocol_version || that_present_protocol_version){if(!(this_present_protocol_version && that_present_protocol_version))return false;if(this.protocol_version!=that.protocol_version)return false;}boolean this_present_requestorUserName=true && this.isSetRequestorUserName();boolean that_present_requestorUserName=true && that.isSetRequestorUserName();if(this_present_requestorUserName || that_present_requestorUserName){if(!(this_present_requestorUserName && that_present_requestorUserName))return false;if(!this.requestorUserName.equals(that.requestorUserName))return false;}boolean this_present_roleName=true && this.isSetRoleName();boolean that_present_roleName=true && that.isSetRoleName();if(this_present_roleName || that_present_roleName){if(!(this_present_roleName && that_present_roleName))return false;if(!this.roleName.equals(that.roleName))return false;}boolean this_present_authorizableHierarchy=true && this.isSetAuthorizableHierarchy();boolean that_present_authorizableHierarchy=true && that.isSetAuthorizableHierarchy();if(this_present_authorizableHierarchy || that_present_authorizableHierarchy){if(!(this_present_authorizableHierarchy && that_present_authorizableHierarchy))return false;if(!this.authorizableHierarchy.equals(that.authorizableHierarchy))return false;}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void clear(){this.status=null;this.privileges=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ConcurrentCompositeConfiguration createLocalConfig(){MicroserviceConfigLoader loader=new MicroserviceConfigLoader();loader.loadAndSort();if(localConfig.size()>0){ConfigModel model=new ConfigModel();model.setConfig(localConfig);loader.getConfigModels().add(model);}LOGGER.info(\"create local config:\");for(ConfigModel configModel : loader.getConfigModels()){LOGGER.info(\"{}.\",configModel.getUrl());}ConcurrentCompositeConfiguration config=ConfigUtil.createLocalConfig(loader.getConfigModels());ConfigUtil.setMicroserviceConfigLoader(config,loader);return config;}"
  },
  {
    "code_smells": [],
    "source_code": "private void routeToBackend(RoutingContext context,Hcr hcr,String userId){Map<String,String>pathParams=context.pathParams();String microserviceName=pathParams.get(\"param0\");String pathVersion=pathParams.get(\"param1\");String path=context.request().path().substring(prefix.length()+1);EncryptEdgeInvocation edgeInvocation=new EncryptEdgeInvocation(new EncryptContext(hcr,userId));edgeInvocation.setVersionRule(versionMapper.getOrCreate(pathVersion).getVersionRule());edgeInvocation.init(microserviceName,context,path,httpServerFilters);edgeInvocation.edgeInvoke();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public InputStream getInputStream()throws IOException{return new FileInputStream(file);}"
  },
  {
    "code_smells": [],
    "source_code": "@PostMapping(\"fromAttribute\")public String fromAttribute(@RequestAttribute(\"input\")String inputs,@RequestAttribute(value=\"input2\")String inputs2,@RequestAttribute(name=\"input3\")String inputs3){return inputs+\",\"+inputs2+\",\"+inputs3;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Object getValue(final String columnLabel,final Class<?>type)throws SQLException{Object result;if(Object.class==type){result=decrypt(columnLabel,resultSet.getObject(columnLabel));}else if(boolean.class==type){result=decrypt(columnLabel,resultSet.getBoolean(columnLabel));}else if(byte.class==type){result=decrypt(columnLabel,resultSet.getByte(columnLabel));}else if(short.class==type){result=decrypt(columnLabel,resultSet.getShort(columnLabel));}else if(int.class==type){result=decrypt(columnLabel,resultSet.getInt(columnLabel));}else if(long.class==type){result=decrypt(columnLabel,resultSet.getLong(columnLabel));}else if(float.class==type){result=decrypt(columnLabel,resultSet.getFloat(columnLabel));}else if(double.class==type){result=decrypt(columnLabel,resultSet.getDouble(columnLabel));}else if(String.class==type){result=decrypt(columnLabel,resultSet.getString(columnLabel));}else if(BigDecimal.class==type){result=decrypt(columnLabel,resultSet.getBigDecimal(columnLabel));}else if(byte[].class==type){result=resultSet.getBytes(columnLabel);}else if(Date.class==type){result=resultSet.getDate(columnLabel);}else if(Time.class==type){result=resultSet.getTime(columnLabel);}else if(Timestamp.class==type){result=resultSet.getTimestamp(columnLabel);}else if(URL.class==type){result=resultSet.getURL(columnLabel);}else if(Blob.class==type){result=resultSet.getBlob(columnLabel);}else if(Clob.class==type){result=resultSet.getClob(columnLabel);}else if(SQLXML.class==type){result=resultSet.getSQLXML(columnLabel);}else if(Reader.class==type){result=resultSet.getCharacterStream(columnLabel);}else{result=decrypt(columnLabel,resultSet.getObject(columnLabel));}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "private void appendSchemaPlaceholder(final SQLBuilder sqlBuilder,final SchemaToken schemaToken,final int count){String schemaName=originalSQL.substring(schemaToken.getStartIndex(),schemaToken.getStopIndex()+1);sqlBuilder.appendPlaceholder(new SchemaPlaceholder(schemaName.toLowerCase(),schemaToken.getTableName().toLowerCase()));appendRest(sqlBuilder,count,schemaToken.getStopIndex()+1);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static String normalizePath(String path){int index=-1;int pathlen=path.length();int size=0;if(pathlen>0 && path.charAt(0)!='/'){size++;}while((index=path.indexOf('/',index+1))!=-1){if(index+1<pathlen && path.charAt(index+1)!='/'){size++;}}String[]seglist=new String[size];boolean[]include=new boolean[size];int current=0;int index2=0;index=(pathlen>0 && path.charAt(0)=='/')? 1 : 0;while((index2=path.indexOf('/',index+1))!=-1){seglist[current++]=path.substring(index,index2);index=index2+1;}if(current<size){seglist[current]=path.substring(index);}for(int i=0;i<size;i++){include[i]=true;if(seglist[i].equals(\"..\")){int remove=i-1;while(remove>-1 && !include[remove]){remove--;}if(remove>-1 && !seglist[remove].equals(\"..\")){include[remove]=false;include[i]=false;}}else if(seglist[i].equals(\".\")){include[i]=false;}}StringBuilder newpath=new StringBuilder();if(path.startsWith(\"/\")){newpath.append('/');}for(int i=0;i<seglist.length;i++){if(include[i]){newpath.append(seglist[i]);newpath.append('/');}}if(!path.endsWith(\"/\")&& seglist.length>0 && include[seglist.length-1]){newpath.deleteCharAt(newpath.length()-1);}String result=newpath.toString();index=result.indexOf(':');index2=result.indexOf('/');if(index!=-1 &&(index<index2 || index2==-1)){newpath.insert(0,\"./\");result=newpath.toString();}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public void destroy(){if(cacheManagerImplicitlyCreated){try{net.sf.ehcache.CacheManager cacheMgr=getCacheManager();cacheMgr.shutdown();}catch(Throwable t){if(log.isWarnEnabled()){log.warn(\"Unable to cleanly shutdown implicitly created CacheManager instance.\"+\"Ignoring(shutting down)...\",t);}}finally{this.manager=null;this.cacheManagerImplicitlyCreated=false;}}}"
  },
  {
    "code_smells": [],
    "source_code": "public Collection fromRealm(String realmName){if(realmPrincipals==null || realmPrincipals.isEmpty()){return Collections.EMPTY_SET;}Set principals=realmPrincipals.get(realmName);if(principals==null || principals.isEmpty()){principals=Collections.EMPTY_SET;}return Collections.unmodifiableSet(principals);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setAllowedColumns(final Set<Column>inclusion){ArgumentChecks.ensureNonNull(\"inclusion\",inclusion);columns.clear();columns.addAll(inclusion);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected boolean containsAllNamedAxes(final String[]axisNames){if(axisNames!=null){next: for(final String name : axisNames){for(final CoordinateAxis axis : netcdfCS.getCoordinateAxes()){if(name.equalsIgnoreCase(axis.getShortName())){continue next;}}return false;}}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public MathTransform createMathTransform(final MathTransformFactory factory,final ParameterValueGroup values)throws ParameterNotFoundException{return MathTransforms.linear(TensorParameters.WKT1.toMatrix(values));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Timestamp getTimestamp(int columnIndex)throws SQLException{throw unsupportedOperation(\"getTimestamp\",columnIndex);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void assertNotClosed()throws SQLConnectionClosedException{this.statement.assertNotClosed();if(this.isClosed){throw new SQLConnectionClosedException(format(Level.WARNING,\"excp.closed_resultset\",this.sql,getFile().getName()),this.sql,getFile());}}"
  },
  {
    "code_smells": [],
    "source_code": "final void startFollowing(final List<Relation>following)throws InternalDataStoreException{for(int i=following.size();--i>=0;){if(following.get(i)==this){throw new InternalDataStoreException(Errors.format(Errors.Keys.CircularReference));}}following.add(this);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "TreeNodeChildren(final TreeNode parent,final Object metadata,final PropertyAccessor accessor){this.parent=parent;this.metadata=metadata;this.accessor=accessor;this.children=new TreeNode[accessor.count()];if(parent.table.valuePolicy==ValueExistencePolicy.COMPACT){TitleProperty an=accessor.implementation.getAnnotation(TitleProperty.class);if(an==null){Class<?>implementation=parent.table.standard.getImplementation(accessor.type);if(implementation!=null){an=implementation.getAnnotation(TitleProperty.class);}}if(an!=null){final int index=accessor.indexOf(an.name(),false);final Class<?>type=accessor.type(index,TypeValuePolicy.ELEMENT_TYPE);if(type!=null && !parent.isMetadata(type)&& type==accessor.type(index,TypeValuePolicy.PROPERTY_TYPE)){titleProperty=index;return;}}}titleProperty=-1;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @SuppressWarnings(\"CloneDoesntCallSuperClone\")public final Matrix clone(){return Matrices.copy(this);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public V setValue(final V value){if(value!=null){throw new UnsupportedOperationException();}final V old=get();dispose();return old;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@SuppressWarnings(\"unchecked\")private void extractDataAndSave(IBatchDAO batchDAO){if(logger.isDebugEnabled()){logger.debug(\"Extract data and save\");}long startTime=System.currentTimeMillis();try{HistogramMetric.Timer timer=prepareLatency.createTimer();List batchAllCollection=new LinkedList();try{List<PersistenceWorker>persistenceWorkers=new ArrayList<>();persistenceWorkers.addAll(IndicatorProcess.INSTANCE.getPersistentWorkers());persistenceWorkers.addAll(RecordProcess.INSTANCE.getPersistentWorkers());persistenceWorkers.addAll(TopNProcess.INSTANCE.getPersistentWorkers());persistenceWorkers.forEach(worker->{if(logger.isDebugEnabled()){logger.debug(\"extract{}worker data and save\",worker.getClass().getName());}if(worker.flushAndSwitch()){List<?>batchCollection=worker.buildBatchCollection();if(logger.isDebugEnabled()){logger.debug(\"extract{}worker data size:{}\",worker.getClass().getName(),batchCollection.size());}batchAllCollection.addAll(batchCollection);}});if(debug){logger.info(\"build batch persistence duration:{}ms\",System.currentTimeMillis()-startTime);}}finally{timer.finish();}HistogramMetric.Timer executeLatencyTimer=executeLatency.createTimer();try{batchDAO.batchPersistence(batchAllCollection);}finally{executeLatencyTimer.finish();}}catch(Throwable e){errorCounter.inc();logger.error(e.getMessage(),e);}finally{if(logger.isDebugEnabled()){logger.debug(\"persistence data save finish\");}}if(debug){logger.info(\"batch persistence duration:{}ms\",System.currentTimeMillis()-startTime);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<Cookie>parse(Header header,CookieOrigin origin)throws MalformedCookieException{List<Cookie>cookies=super.parse(header,origin);for(Cookie cookie : cookies){if(cookie.getName().equals(StickyCookieHolder.COOKIE_NAME)){StickyCookieHolder.setTestStickySessionCookie(cookie);}}return cookies;}"
  },
  {
    "source_code": "private BooleanConsumer andThen(BooleanConsumer after){Objects.requireNonNull(after);return(boolean t)->{accept(t);after.accept(t);};}",
    "code_smells": "class C{private BooleanConsumer andThen(BooleanConsumer after){Objects.requireNonNull(after);return(boolean t)->{accept(t);after.accept(t);};}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void streamObjects(Consumer<Object>cons){Object val=getObject();if(exists()){cons.accept(val);}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void setup(Http2SolrClient http2Client){HttpAuthenticationStore authenticationStore=new HttpAuthenticationStore();authenticationStore.addAuthentication(createSPNEGOAuthentication());http2Client.getHttpClient().setAuthenticationStore(authenticationStore);http2Client.getProtocolHandlers().put(new WWWAuthenticationProtocolHandler(http2Client.getHttpClient()));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object doWork(Object first,Object second)throws IOException{if(null==first){throw new IOException(String.format(Locale.ROOT,\"Unable to %s(...)with a null numerator\",constructingFactory.getFunctionName(getClass())));}if(null==second){throw new IOException(String.format(Locale.ROOT,\"Unable to %s(...)with a null denominator\",constructingFactory.getFunctionName(getClass())));}BigDecimal numerator=(BigDecimal)first;BigDecimal denominator=(BigDecimal)second;if(0==denominator.compareTo(BigDecimal.ZERO)){throw new IOException(String.format(Locale.ROOT,\"Unable to %s(...)with a 0 denominator\",constructingFactory.getFunctionName(getClass())));}return numerator.divide(denominator,MathContext.DECIMAL64);}"
  },
  {
    "code_smells": [],
    "source_code": "public FieldAnalysisRequest setFieldTypes(List<String>fieldTypes){this.fieldTypes=fieldTypes;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void securityConfEdited(){cores.securityNodeChanged();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private ShardHandler getAndPrepShardHandler(SolrQueryRequest req,ResponseBuilder rb){ShardHandler shardHandler=null;CoreContainer cc=req.getCore().getCoreContainer();boolean isZkAware=cc.isZooKeeperAware();rb.isDistrib=req.getParams().getBool(DISTRIB,isZkAware);if(!rb.isDistrib){final String shards=req.getParams().get(ShardParams.SHARDS);rb.isDistrib=((shards!=null)&&(shards.indexOf('/')>0));}if(rb.isDistrib){shardHandler=shardHandlerFactory.getShardHandler();shardHandler.prepDistributed(rb);if(!rb.isDistrib){shardHandler=null;}}if(isZkAware){String shardsTolerant=req.getParams().get(ShardParams.SHARDS_TOLERANT);boolean requireZkConnected=shardsTolerant!=null && shardsTolerant.equals(ShardParams.REQUIRE_ZK_CONNECTED);ZkController zkController=cc.getZkController();boolean zkConnected=zkController!=null && !zkController.getZkClient().getConnectionManager().isLikelyExpired();if(requireZkConnected && false==zkConnected){throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\"ZooKeeper is not connected\");}else{NamedList<Object>headers=rb.rsp.getResponseHeader();if(headers!=null){headers.add(\"zkConnected\",zkConnected);}}}return shardHandler;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void deleteDocByQuery(String query){if(docBuilder!=null){docBuilder.writer.deleteByQuery(query);}}"
  },
  {
    "code_smells": [],
    "source_code": "void doAdd(int line,String[]vals,SolrInputDocument doc,AddUpdateCommand template)throws IOException{for(int i=0;i<vals.length;i++){if(adders[i]==null)continue;String val=vals[i];adders[i].add(doc,line,i,val);}for(String fname : literals.keySet()){String val=literals.get(fname);doc.addField(fname,val);}if(rowId!=null){doc.addField(rowId,line+rowIdOffset);}template.solrDoc=doc;processor.processAdd(template);}"
  },
  {
    "code_smells": [],
    "source_code": "private void registerReporter(String registry,String name,String tag,SolrMetricReporter reporter)throws Exception{try{if(!reportersLock.tryLock(10,TimeUnit.SECONDS)){throw new Exception(\"Could not obtain lock to modify reporters registry: \"+registry);}}catch(InterruptedException e){throw new Exception(\"Interrupted while trying to obtain lock to modify reporters registry: \"+registry);}try{Map<String,SolrMetricReporter>perRegistry=reporters.get(registry);if(perRegistry==null){perRegistry=new HashMap<>();reporters.put(registry,perRegistry);}if(tag!=null && !tag.isEmpty()){name=name+\"@\"+tag;}SolrMetricReporter oldReporter=perRegistry.get(name);if(oldReporter!=null){log.info(\"Replacing existing reporter '\"+name+\"' in registry '\"+registry+\"': \"+oldReporter.toString());oldReporter.close();}perRegistry.put(name,reporter);}finally{reportersLock.unlock();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int docFreq()throws IOException{return te.docFreq();}"
  },
  {
    "code_smells": [],
    "source_code": "void migrateGlobal(int[]counts,long[]segCounts,int subIndex,OrdinalMap map){final LongValues ordMap=map.getGlobalOrds(subIndex);counts[0]+=(int)(segCounts[0]>>32);for(int ord=1;ord<=segmentSSDV.getValueCount();ord++){int count=(int)(segCounts[ord]>>32);if(count!=0){counts[1+(int)ordMap.get(ord-1)]+=count;}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Weight createWeight(IndexSearcher searcher,org.apache.lucene.search.ScoreMode scoreMode,float boost)throws IOException{SolrRequestInfo info=SolrRequestInfo.getRequestInfo();CoreContainer container=info.getReq().getCore().getCoreContainer();final SolrCore fromCore=container.getCore(fromIndex);if(fromCore==null){throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\"Cross-core join: no such core \"+fromIndex);}RefCounted<SolrIndexSearcher>fromHolder=null;fromHolder=fromCore.getRegisteredSearcher();final Query joinQuery;try{joinQuery=JoinUtil.createJoinQuery(fromField,true,toField,fromQuery,fromHolder.get(),this.scoreMode);}finally{fromCore.close();fromHolder.decref();}return joinQuery.rewrite(searcher.getIndexReader()).createWeight(searcher,scoreMode,boost);}"
  },
  {
    "code_smells": [],
    "source_code": "public PeerSyncWithLeader(SolrCore core,String leaderUrl,int nUpdates){this.core=core;this.leaderUrl=leaderUrl;this.nUpdates=nUpdates;this.doFingerprint=!\"true\".equals(System.getProperty(\"solr.disableFingerprint\"));this.uhandler=core.getUpdateHandler();this.ulog=uhandler.getUpdateLog();HttpClient httpClient=core.getCoreContainer().getUpdateShardHandler().getDefaultHttpClient();this.clientToLeader=new HttpSolrClient.Builder(leaderUrl).withHttpClient(httpClient).build();this.updater=new PeerSync.Updater(msg(),core);core.getCoreMetricManager().registerMetricProducer(SolrInfoBean.Category.REPLICATION.toString(),this);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void doDeleteById(DeleteUpdateCommand cmd)throws IOException{setupRequest(cmd);boolean dropCmd=false;if(!forwardToLeader){dropCmd=versionDelete(cmd);}if(dropCmd){return;}doDistribDeleteById(cmd);if(returnVersions && rsp!=null && cmd.getIndexedId()!=null && idField!=null){if(deleteResponse==null){deleteResponse=new NamedList<>(1);rsp.add(\"deletes\",deleteResponse);}if(scratch==null)scratch=new CharsRefBuilder();idField.getType().indexedToReadable(cmd.getIndexedId(),scratch);deleteResponse.add(scratch.toString(),cmd.getVersion());}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void doDefensiveChecks(DistribPhase phase){boolean isReplayOrPeersync=(updateCommand.getFlags()&(UpdateCommand.REPLAY | UpdateCommand.PEER_SYNC))!=0;if(isReplayOrPeersync)return;String from=req.getParams().get(DISTRIB_FROM);ClusterState clusterState=zkController.getClusterState();DocCollection docCollection=clusterState.getCollection(collection);Slice mySlice=docCollection.getSlice(cloudDesc.getShardId());boolean localIsLeader=cloudDesc.isLeader();if(DistribPhase.FROMLEADER==phase && localIsLeader && from!=null){String fromShard=req.getParams().get(DISTRIB_FROM_PARENT);if(fromShard!=null){if(mySlice.getState()==Slice.State.ACTIVE){throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\"Request says it is coming from parent shard leader but we are in active state\");}Slice fromSlice=docCollection.getSlice(fromShard);DocRouter.Range parentRange=fromSlice.getRange();if(parentRange==null)parentRange=new DocRouter.Range(Integer.MIN_VALUE,Integer.MAX_VALUE);if(mySlice.getRange()!=null && !mySlice.getRange().isSubsetOf(parentRange)){throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\"Request says it is coming from parent shard leader but parent hash range is not superset of my range\");}}else{String fromCollection=req.getParams().get(DISTRIB_FROM_COLLECTION);if(fromCollection==null){log.error(\"Request says it is coming from leader,but we are the leader: \"+req.getParamString());SolrException solrExc=new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\"Request says it is coming from leader,but we are the leader\");solrExc.setMetadata(\"cause\",\"LeaderChanged\");throw solrExc;}}}int count=0;while(((isLeader && !localIsLeader)||(isSubShardLeader && !localIsLeader))&& count<5){count++;localIsLeader=cloudDesc.isLeader();try{Thread.sleep(500);}catch(InterruptedException e){Thread.currentThread().interrupt();}}if((isLeader && !localIsLeader)||(isSubShardLeader && !localIsLeader)){log.error(\"ClusterState says we are the leader,but locally we don't think so\");throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\"ClusterState says we are the leader(\"+zkController.getBaseUrl()+\"/\"+req.getCore().getName()+\"),but locally we don't think so.Request came from \"+from);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void finish()throws IOException{if(logDebug){log.debug(\"PRE_UPDATE FINISH \"+req);}if(next!=null)next.finish();if(log.isInfoEnabled()){log.info(getLogStringAndClearRspToLog());}if(log.isWarnEnabled()&& slowUpdateThresholdMillis>=0){final long elapsed=(long)req.getRequestTimer().getTime();if(elapsed>=slowUpdateThresholdMillis){log.warn(\"slow: \"+getLogStringAndClearRspToLog());}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public UpdateIndexAuthorizationProcessor getInstance(SolrQueryRequest req,SolrQueryResponse rsp,UpdateRequestProcessor next){return new UpdateIndexAuthorizationProcessor(req,rsp,next);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public Option[]getOptions(){return new Option[]{OptionBuilder.withArgName(\"HOST\").hasArg().isRequired(false).withDescription(\"Address of the Zookeeper ensemble;defaults to: \"+ZK_HOST).create(\"zkHost\"),OptionBuilder.withArgName(\"CONFIG\").hasArg().isRequired(false).withDescription(\"Autoscaling config file,defaults to the one deployed in the cluster.\").withLongOpt(\"config\").create(\"a\"),OptionBuilder.withDescription(\"Show calculated suggestions\").withLongOpt(\"suggestions\").create(\"s\"),OptionBuilder.withDescription(\"Show ClusterState(collections layout)\").withLongOpt(\"clusterState\").create(\"c\"),OptionBuilder.withDescription(\"Show calculated diagnostics\").withLongOpt(\"diagnostics\").create(\"d\"),OptionBuilder.withDescription(\"Show sorted nodes with diagnostics\").withLongOpt(\"sortedNodes\").create(\"n\"),OptionBuilder.withDescription(\"Redact node and collection names(original names will be consistently randomized)\").withLongOpt(\"redact\").create(\"r\"),OptionBuilder.withDescription(\"Show summarized collection & node statistics.\").create(\"stats\"),OptionBuilder.withDescription(\"Turn on all options to get all available information.\").create(\"all\")};}"
  },
  {
    "code_smells": [],
    "source_code": "public void track(final File file,final Object marker){track(file,marker,null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Map<String,List<Integer>>getColumnInfoForQuery(String query){String rawQuery=query.replace(SUBSTITUTE_TOKEN,\"(1=0)\");return getColumnInfoForRawQuery(rawQuery);}"
  },
  {
    "code_smells": [],
    "source_code": "protected static void copyBlobStoreKeys(BlobStore bsFrom,Subject whoFrom,BlobStore bsTo,Subject whoTo)throws AuthorizationException,KeyAlreadyExistsException,IOException,KeyNotFoundException{Iterable<String>lfsKeys=()->bsFrom.listKeys();for(String key : lfsKeys){ReadableBlobMeta readable_meta=bsFrom.getBlobMeta(key,whoFrom);SettableBlobMeta meta=readable_meta.get_settable();InputStream in=bsFrom.getBlob(key,whoFrom);bsTo.createBlob(key,in,meta,whoTo);}}"
  },
  {
    "code_smells": [],
    "source_code": "@org.apache.storm.thrift.annotation.Nullable public static _Fields findByThriftId(int fieldId){switch(fieldId){case 1: return KEY;case 2: return USER_NAME;case 3: return EXPIRATION_TIME_MILLIS;default: return null;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public java.lang.String toString(){java.lang.StringBuilder sb=new java.lang.StringBuilder(\"SupervisorInfo(\");boolean first=true;sb.append(\"time_secs:\");sb.append(this.time_secs);first=false;if(!first)sb.append(\",\");sb.append(\"hostname:\");if(this.hostname==null){sb.append(\"null\");}else{sb.append(this.hostname);}first=false;if(is_set_assignment_id()){if(!first)sb.append(\",\");sb.append(\"assignment_id:\");if(this.assignment_id==null){sb.append(\"null\");}else{sb.append(this.assignment_id);}first=false;}if(is_set_used_ports()){if(!first)sb.append(\",\");sb.append(\"used_ports:\");if(this.used_ports==null){sb.append(\"null\");}else{sb.append(this.used_ports);}first=false;}if(is_set_meta()){if(!first)sb.append(\",\");sb.append(\"meta:\");if(this.meta==null){sb.append(\"null\");}else{sb.append(this.meta);}first=false;}if(is_set_scheduler_meta()){if(!first)sb.append(\",\");sb.append(\"scheduler_meta:\");if(this.scheduler_meta==null){sb.append(\"null\");}else{sb.append(this.scheduler_meta);}first=false;}if(is_set_uptime_secs()){if(!first)sb.append(\",\");sb.append(\"uptime_secs:\");sb.append(this.uptime_secs);first=false;}if(is_set_version()){if(!first)sb.append(\",\");sb.append(\"version:\");if(this.version==null){sb.append(\"null\");}else{sb.append(this.version);}first=false;}if(is_set_resources_map()){if(!first)sb.append(\",\");sb.append(\"resources_map:\");if(this.resources_map==null){sb.append(\"null\");}else{sb.append(this.resources_map);}first=false;}if(is_set_server_port()){if(!first)sb.append(\",\");sb.append(\"server_port:\");sb.append(this.server_port);first=false;}sb.append(\")\");return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public SimpleFileNameFormat withTimeFormat(String timeFormat){try{new SimpleDateFormat(timeFormat);}catch(Exception e){throw new IllegalArgumentException(\"invalid timeFormat: \"+e.getMessage());}this.timeFormat=timeFormat;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public static void logAccess(Integer requestId,InetAddress remoteAddress,Principal principal,String operation,String stormName,String accessResult){if(stormName!=null && accessResult!=null){LOG.info(accessLogBase+\" storm-name:{}access result:{}\",requestId,remoteAddress,principal,operation,stormName,accessResult);}else if(accessResult!=null){LOG.info(accessLogBase+\" access result:{}\",requestId,remoteAddress,principal,operation,accessResult);}else{LOG.info(accessLogBase+\" storm-name:{}\",requestId,remoteAddress,principal,operation,stormName);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void handleControlMessage(ChannelHandlerContext ctx,ControlMessage controlMessage)throws Exception{Channel channel=ctx.channel();KerberosSaslNettyClient saslNettyClient=getChannelSaslClient(channel);if(controlMessage==ControlMessage.SASL_COMPLETE_REQUEST){LOG.debug(\"Server has sent us the SaslComplete message.Allowing normal work to proceed.\");if(!saslNettyClient.isComplete()){String errorMessage=\"Server returned a Sasl-complete message,but as far as we can tell,we are not authenticated yet.\";LOG.error(errorMessage);throw new Exception(errorMessage);}ctx.pipeline().remove(this);this.client.channelReady(channel);ctx.fireChannelRead(controlMessage);}else{LOG.warn(\"Unexpected control message:{}\",controlMessage);}}"
  },
  {
    "code_smells": [],
    "source_code": "private Integer findRankOf(Rankable r){Object tag=r.getObject();for(int rank=0;rank<rankedItems.size();rank++){Object cur=rankedItems.get(rank).getObject();if(cur.equals(tag)){return rank;}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getOutputName(){if(this.prefix==null){return this.localName;}else{return this.prefix+\":\"+this.localName;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void doSmapText(Node n){String text=n.getText();int index=0;int next=0;int lineCount=1;int skippedLines=0;boolean slashStarSeen=false;boolean beginning=true;while((next=text.indexOf('\\n',index))>-1){if(beginning){String line=text.substring(index,next).trim();if(!slashStarSeen && line.startsWith(\"/*\")){slashStarSeen=true;}if(slashStarSeen){skippedLines++;int endIndex=line.indexOf(\"*/\");if(endIndex>=0){slashStarSeen=false;if(endIndex<line.length()-2){skippedLines--;beginning=false;}}}else if(line.length()==0 || line.startsWith(\"//\")){skippedLines++;}else{beginning=false;}}lineCount++;index=next+1;}doSmap(n,lineCount,1,skippedLines);}"
  },
  {
    "code_smells": [],
    "source_code": "public BundleConfigurationProvider(String filename,Bundle bundle,BundleContext bundleContext){super(filename,false);this.bundle=bundle;this.bundleContext=bundleContext;}"
  },
  {
    "code_smells": [],
    "source_code": "public int delete(IdEntity object)throws CreateException{if(object==null){throw new CreateException(\"Cannot delete null object\");}return delete(object.getClass(),object.getId());}"
  },
  {
    "code_smells": [],
    "source_code": "public PropertiesVocabSource(Properties prop){assert(prop!=null);this.prop=prop;vocabs=readVocab(prop);}"
  },
  {
    "code_smells": [],
    "source_code": "public Decorator getDecorator(HttpServletRequest req,Page page){if(\"none\".equals(req.getAttribute(\"decorator\"))){return null;}return super.getDecorator(req,page);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Iterator<SAML2IdPTO>iterator(final long first,final long count){List<SAML2IdPTO>list=restClient.list();Collections.sort(list,comparator);return list.subList((int)first,(int)first+(int)count).iterator();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int countExecutions(final String taskKey){return getService(ReportService.class).listExecutions(new ExecQuery.Builder().key(taskKey).page(1).size(1).build()).getTotalCount();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String call()throws Exception{ThreadContext.setApplication(application);ThreadContext.setSession(session);try{final ResourceTO resource=resourceRestClient.read(key);return String.format(\"{\\\"status\\\": \\\"%s\\\",\\\"target\\\": \\\"%s\\\"}\",resourceRestClient.check(resource).getLeft()? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE,key);}catch(Exception e){LOG.warn(\"Error checking connection for{}\",key,e);return String.format(\"{\\\"status\\\": \\\"%s\\\",\\\"target\\\": \\\"%s\\\"}\",TopologyNode.Status.FAILURE,key);}finally{ThreadContext.detach();}}"
  },
  {
    "code_smells": [],
    "source_code": "private ConnIdSpecialName(){}"
  },
  {
    "code_smells": [],
    "source_code": "@PreAuthorize(\"hasRole('\"+StandardEntitlement.REPORT_TEMPLATE_DELETE+\"')\")public ReportTemplateTO delete(final String key){ReportTemplate reportTemplate=reportTemplateDAO.find(key);if(reportTemplate==null){LOG.error(\"Could not find report template '\"+key+\"'\");throw new NotFoundException(key);}List<Report>reports=reportDAO.findByTemplate(reportTemplate);if(!reports.isEmpty()){SyncopeClientException sce=SyncopeClientException.build(ClientExceptionType.InUse);sce.getElements().addAll(reports.stream().map(Entity::getKey).collect(Collectors.toList()));throw sce;}ReportTemplateTO deleted=getReportTemplateTO(key);reportTemplateDAO.delete(key);return deleted;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<PlainSchema>findByKeyword(final String keyword){TypedQuery<PlainSchema>query=entityManager().createQuery(\"SELECT e FROM \"+JPAPlainSchema.class.getSimpleName()+\" e\"+\" WHERE e.id LIKE :keyword\",PlainSchema.class);query.setParameter(\"keyword\",keyword);return query.getResultList();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void delete(final String key){ReportExec execution=find(key);if(execution==null){return;}delete(execution);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setIntValues(final Item orgUnitItem,final Attribute attr,final RealmTO realmTO){List<Object>values=null;if(attr!=null){values=attr.getValue();for(ItemTransformer transformer : MappingUtils.getItemTransformers(orgUnitItem)){values=transformer.beforePull(orgUnitItem,realmTO,values);}}if(values!=null && !values.isEmpty()&& values.get(0)!=null){switch(orgUnitItem.getIntAttrName()){case \"name\": realmTO.setName(values.get(0).toString());break;case \"fullpath\": String parentFullPath=StringUtils.substringBeforeLast(values.get(0).toString(),\"/\");Realm parent=realmDAO.findByFullPath(parentFullPath);if(parent==null){LOG.warn(\"Could not find Realm with path{},ignoring\",parentFullPath);}else{realmTO.setParent(parent.getFullPath());}break;default:}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public PrivilegeTO getPrivilegeTO(final Privilege privilege){PrivilegeTO privilegeTO=new PrivilegeTO();privilegeTO.setKey(privilege.getKey());privilegeTO.setDescription(privilege.getDescription());privilegeTO.setApplication(privilege.getApplication().getKey());privilegeTO.setSpec(privilege.getSpec());return privilegeTO;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object that){if(!(that instanceof PlanningCoCodingGroup))return false;PlanningCoCodingGroup thatgrp=(PlanningCoCodingGroup)that;return Arrays.equals(_colIndexes,thatgrp._colIndexes);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static void countCompiledInstructions(ProgramBlock pb,ExplainCounts counts,boolean MR,boolean CP,boolean SP){if(pb instanceof WhileProgramBlock){WhileProgramBlock tmp=(WhileProgramBlock)pb;countCompiledInstructions(tmp.getPredicate(),counts,MR,CP,SP);for(ProgramBlock pb2 : tmp.getChildBlocks())countCompiledInstructions(pb2,counts,MR,CP,SP);}else if(pb instanceof IfProgramBlock){IfProgramBlock tmp=(IfProgramBlock)pb;countCompiledInstructions(tmp.getPredicate(),counts,MR,CP,SP);for(ProgramBlock pb2 : tmp.getChildBlocksIfBody())countCompiledInstructions(pb2,counts,MR,CP,SP);for(ProgramBlock pb2 : tmp.getChildBlocksElseBody())countCompiledInstructions(pb2,counts,MR,CP,SP);}else if(pb instanceof ForProgramBlock){ForProgramBlock tmp=(ForProgramBlock)pb;countCompiledInstructions(tmp.getFromInstructions(),counts,MR,CP,SP);countCompiledInstructions(tmp.getToInstructions(),counts,MR,CP,SP);countCompiledInstructions(tmp.getIncrementInstructions(),counts,MR,CP,SP);for(ProgramBlock pb2 : tmp.getChildBlocks())countCompiledInstructions(pb2,counts,MR,CP,SP);}else if(pb instanceof FunctionProgramBlock){FunctionProgramBlock fpb=(FunctionProgramBlock)pb;for(ProgramBlock pb2 : fpb.getChildBlocks())countCompiledInstructions(pb2,counts,MR,CP,SP);}else{countCompiledInstructions(pb.getInstructions(),counts,MR,CP,SP);}}"
  },
  {
    "code_smells": [],
    "source_code": "private int calculateFanout(int remainInputChunks,int inputNum,int outputNum,int startIdx){int computedFanout=Math.min(remainInputChunks,defaultFanout);if(checkIfCanBeUnbalancedMerged(inputNum-(startIdx+computedFanout),outputNum+1)){int candidateFanout=computedFanout;while(checkIfCanBeUnbalancedMerged(inputNum-(startIdx+candidateFanout),outputNum+1)){candidateFanout--;}int beforeFanout=computedFanout;if(computedFanout>candidateFanout+1){computedFanout=candidateFanout+1;info(LOG,\"Fanout reduced for unbalanced merge: \"+beforeFanout+\"->\"+computedFanout);}}return computedFanout;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void resizeInstructions(){byte[]b=code.data;int u,v,label;int i,j;int[]allIndexes=new int[0];int[]allSizes=new int[0];boolean[]resize;int newOffset;resize=new boolean[code.length];int state=3;do{if(state==3){state=2;}u=0;while(u<b.length){int opcode=b[u]& 0xFF;int insert=0;switch(ClassWriter.TYPE[opcode]){case ClassWriter.NOARG_INSN: case ClassWriter.IMPLVAR_INSN: u+=1;break;case ClassWriter.LABEL_INSN: if(opcode>201){opcode=opcode<218 ? opcode-49 : opcode-20;label=u+readUnsignedShort(b,u+1);}else{label=u+readShort(b,u+1);}newOffset=getNewOffset(allIndexes,allSizes,u,label);if(newOffset<Short.MIN_VALUE || newOffset>Short.MAX_VALUE){if(!resize[u]){if(opcode==Opcodes.GOTO || opcode==Opcodes.JSR){insert=2;}else{insert=5;}resize[u]=true;}}u+=3;break;case ClassWriter.LABELW_INSN: u+=5;break;case ClassWriter.TABL_INSN: if(state==1){newOffset=getNewOffset(allIndexes,allSizes,0,u);insert=-(newOffset & 3);}else if(!resize[u]){insert=u & 3;resize[u]=true;}u=u+4-(u & 3);u+=4*(readInt(b,u+8)-readInt(b,u+4)+1)+12;break;case ClassWriter.LOOK_INSN: if(state==1){newOffset=getNewOffset(allIndexes,allSizes,0,u);insert=-(newOffset & 3);}else if(!resize[u]){insert=u & 3;resize[u]=true;}u=u+4-(u & 3);u+=8*readInt(b,u+4)+8;break;case ClassWriter.WIDE_INSN: opcode=b[u+1]& 0xFF;if(opcode==Opcodes.IINC){u+=6;}else{u+=4;}break;case ClassWriter.VAR_INSN: case ClassWriter.SBYTE_INSN: case ClassWriter.LDC_INSN: u+=2;break;case ClassWriter.SHORT_INSN: case ClassWriter.LDCW_INSN: case ClassWriter.FIELDORMETH_INSN: case ClassWriter.TYPE_INSN: case ClassWriter.IINC_INSN: u+=3;break;case ClassWriter.ITFMETH_INSN: case ClassWriter.INDYMETH_INSN: u+=5;break;default: u+=4;break;}if(insert!=0){int[]newIndexes=new int[allIndexes.length+1];int[]newSizes=new int[allSizes.length+1];System.arraycopy(allIndexes,0,newIndexes,0,allIndexes.length);System.arraycopy(allSizes,0,newSizes,0,allSizes.length);newIndexes[allIndexes.length]=u;newSizes[allSizes.length]=insert;allIndexes=newIndexes;allSizes=newSizes;if(insert>0){state=3;}}}if(state<3){--state;}}while(state!=0);ByteVector newCode=new ByteVector(code.length);u=0;while(u<code.length){int opcode=b[u]& 0xFF;switch(ClassWriter.TYPE[opcode]){case ClassWriter.NOARG_INSN: case ClassWriter.IMPLVAR_INSN: newCode.putByte(opcode);u+=1;break;case ClassWriter.LABEL_INSN: if(opcode>201){opcode=opcode<218 ? opcode-49 : opcode-20;label=u+readUnsignedShort(b,u+1);}else{label=u+readShort(b,u+1);}newOffset=getNewOffset(allIndexes,allSizes,u,label);if(resize[u]){if(opcode==Opcodes.GOTO){newCode.putByte(200);}else if(opcode==Opcodes.JSR){newCode.putByte(201);}else{newCode.putByte(opcode<=166 ?((opcode+1)^ 1)-1 : opcode ^ 1);newCode.putShort(8);newCode.putByte(200);newOffset-=3;}newCode.putInt(newOffset);}else{newCode.putByte(opcode);newCode.putShort(newOffset);}u+=3;break;case ClassWriter.LABELW_INSN: label=u+readInt(b,u+1);newOffset=getNewOffset(allIndexes,allSizes,u,label);newCode.putByte(opcode);newCode.putInt(newOffset);u+=5;break;case ClassWriter.TABL_INSN: v=u;u=u+4-(v & 3);newCode.putByte(Opcodes.TABLESWITCH);newCode.putByteArray(null,0,(4-newCode.length % 4)% 4);label=v+readInt(b,u);u+=4;newOffset=getNewOffset(allIndexes,allSizes,v,label);newCode.putInt(newOffset);j=readInt(b,u);u+=4;newCode.putInt(j);j=readInt(b,u)-j+1;u+=4;newCode.putInt(readInt(b,u-4));for(;j>0;--j){label=v+readInt(b,u);u+=4;newOffset=getNewOffset(allIndexes,allSizes,v,label);newCode.putInt(newOffset);}break;case ClassWriter.LOOK_INSN: v=u;u=u+4-(v & 3);newCode.putByte(Opcodes.LOOKUPSWITCH);newCode.putByteArray(null,0,(4-newCode.length % 4)% 4);label=v+readInt(b,u);u+=4;newOffset=getNewOffset(allIndexes,allSizes,v,label);newCode.putInt(newOffset);j=readInt(b,u);u+=4;newCode.putInt(j);for(;j>0;--j){newCode.putInt(readInt(b,u));u+=4;label=v+readInt(b,u);u+=4;newOffset=getNewOffset(allIndexes,allSizes,v,label);newCode.putInt(newOffset);}break;case ClassWriter.WIDE_INSN: opcode=b[u+1]& 0xFF;if(opcode==Opcodes.IINC){newCode.putByteArray(b,u,6);u+=6;}else{newCode.putByteArray(b,u,4);u+=4;}break;case ClassWriter.VAR_INSN: case ClassWriter.SBYTE_INSN: case ClassWriter.LDC_INSN: newCode.putByteArray(b,u,2);u+=2;break;case ClassWriter.SHORT_INSN: case ClassWriter.LDCW_INSN: case ClassWriter.FIELDORMETH_INSN: case ClassWriter.TYPE_INSN: case ClassWriter.IINC_INSN: newCode.putByteArray(b,u,3);u+=3;break;case ClassWriter.ITFMETH_INSN: case ClassWriter.INDYMETH_INSN: newCode.putByteArray(b,u,5);u+=5;break;default: newCode.putByteArray(b,u,4);u+=4;break;}}if(frameCount>0){if(compute==FRAMES){frameCount=0;stackMap=null;previousFrame=null;frame=null;Frame f=new Frame();f.owner=labels;Type[]args=Type.getArgumentTypes(descriptor);f.initInputFrame(cw,access,args,maxLocals);visitFrame(f);Label l=labels;while(l!=null){u=l.position-3;if((l.status & Label.STORE)!=0 ||(u>=0 && resize[u])){getNewOffset(allIndexes,allSizes,l);visitFrame(l.frame);}l=l.successor;}}else{cw.invalidFrames=true;}}Handler h=firstHandler;while(h!=null){getNewOffset(allIndexes,allSizes,h.start);getNewOffset(allIndexes,allSizes,h.end);getNewOffset(allIndexes,allSizes,h.handler);h=h.next;}for(i=0;i<2;++i){ByteVector bv=i==0 ? localVar : localVarType;if(bv!=null){b=bv.data;u=0;while(u<bv.length){label=readUnsignedShort(b,u);newOffset=getNewOffset(allIndexes,allSizes,0,label);writeShort(b,u,newOffset);label+=readUnsignedShort(b,u+2);newOffset=getNewOffset(allIndexes,allSizes,0,label)-newOffset;writeShort(b,u+2,newOffset);u+=10;}}}if(lineNumber!=null){b=lineNumber.data;u=0;while(u<lineNumber.length){writeShort(b,u,getNewOffset(allIndexes,allSizes,0,readUnsignedShort(b,u)));u+=4;}}Attribute attr=cattrs;while(attr!=null){Label[]labels=attr.getLabels();if(labels!=null){for(i=labels.length-1;i>=0;--i){getNewOffset(allIndexes,allSizes,labels[i]);}}attr=attr.next;}code=newCode;}"
  },
  {
    "code_smells": [],
    "source_code": "void set(final String name,final String desc,final Handle bsm,final Object[]bsmArgs){this.type='y';this.strVal1=name;this.strVal2=desc;this.objVal3=bsm;this.objVals=bsmArgs;int hashCode='y'+name.hashCode()*desc.hashCode()*bsm.hashCode();for(Object bsmArg : bsmArgs){hashCode*=bsmArg.hashCode();}this.hashCode=0x7FFFFFFF & hashCode;}"
  },
  {
    "code_smells": [],
    "source_code": "private void declareFrameTypes(final int n,final Object[]o){for(int i=0;i<n;++i){if(o[i]instanceof Label){declareLabel((Label)o[i]);}}}"
  },
  {
    "code_smells": [],
    "source_code": "private static Field getLabelField(final String name){try{Field f=Label.class.getDeclaredField(name);f.setAccessible(true);return f;}catch(NoSuchFieldException e){return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Expr visitDatetime_literal(@NotNull Datetime_literalContext ctx){if(checkIfExist(ctx.time_literal())){return visitTime_literal(ctx.time_literal());}else if(checkIfExist(ctx.date_literal())){return visitDate_literal(ctx.date_literal());}else if(checkIfExist(ctx.interval_literal())){return visitInterval_literal(ctx.interval_literal());}else{return visitTimestamp_literal(ctx.timestamp_literal());}}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasJoinQual(){return joinSpec.hasPredicates();}"
  },
  {
    "code_smells": [],
    "source_code": "public Object visit(Context ctx,Stack<Expr>stack,Expr expr)throws TajoException{if(expr instanceof UnaryOperator){preHook(ctx,stack,expr);visitUnaryOperator(ctx,stack,(UnaryOperator)expr);postHook(ctx,stack,expr,null);}else if(expr instanceof BinaryOperator){preHook(ctx,stack,expr);visitBinaryOperator(ctx,stack,(BinaryOperator)expr);postHook(ctx,stack,expr,null);}else{super.visit(ctx,stack,expr);}if(expr!=null && ctx.targetType==expr.getType()){ctx.set.add(expr);}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@VisibleForTesting public static Optional<Tablespace>removeTablespaceForTest(String name){Tablespace existing=null;synchronized(SPACES_URIS_MAP){URI uri=SPACES_URIS_MAP.remove(name);if(uri!=null){existing=TABLE_SPACES.remove(uri);}}return Optional.ofNullable(existing);}"
  },
  {
    "code_smells": [],
    "source_code": "public void visit(SQLBuilderContext context,LogicalNode node,Stack<LogicalNode>stack){stack.push(node);switch(node.getType()){case SCAN: visitScan(context,(ScanNode)node,stack);break;case GROUP_BY: visitGroupBy(context,(GroupbyNode)node,stack);break;case SELECTION: visitFilter(context,(SelectionNode)node,stack);break;case PROJECTION: visitProjection(context,(ProjectionNode)node,stack);break;case TABLE_SUBQUERY: visitDerivedSubquery(context,(TableSubQueryNode)node,stack);break;default: throw new TajoRuntimeException(new UnsupportedException(\"plan node '\"+node.getType().name()+\"'\"));}stack.pop();}"
  },
  {
    "code_smells": [],
    "source_code": "public Html5MarkupModel(boolean useApostropheForAttributes){super(useApostropheForAttributes);}"
  },
  {
    "code_smells": [],
    "source_code": "public static Asset2 toAsset2(final Asset asset){if(asset instanceof Asset2)return(Asset2)asset;return new Asset2(){public boolean isInvariant(){return false;}public Resource getResource(){return asset.getResource();}public String toClientURL(){return asset.toClientURL();}@Override public String toString(){return asset.toString();}};}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object invoke(Object proxy,Method method,Object[]args)throws Throwable{if(args==null){String attributeName=method.getName();if(attributes.containsKey(attributeName)){return attributes.get(attributeName);}}throw new RuntimeException(String.format(\"Annotation proxy for class %s does not handle method %s.\",annotationType.getName(),method));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int getSize(){return size;}"
  },
  {
    "code_smells": [],
    "source_code": "public Printer visitMethodTypeAnnotation(final int typeRef,final TypePath typePath,final String descriptor,final boolean visible){throw new UnsupportedOperationException(UNSUPPORTED_OPERATION);}"
  },
  {
    "code_smells": [],
    "source_code": "public String getPassword(){final UsernamePassword userPass=getUserPass();final String pw=userPass.getPasswordAsString();userPass.resetPassword();return pw;}"
  },
  {
    "code_smells": [],
    "source_code": "public LiteralType getLiteral(){return literal;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void actionPerformed(ActionEvent e){DefaultMutableTreeNode node=getSelectedNode();String newValue;if(example!=null && example.length()>0)newValue=example;else newValue=NEW_VALUE;@SuppressWarnings(\"unused\")DefaultMutableTreeNode added=addPojo(node,newValue,0);setStatus(\"Added new value.Edit value on right.\",null);}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getRequiredAPIElements(int iRequestType){String strElements=\"\";switch(iRequestType){case Resource.REQUEST_FULL_PREVIEW: strElements+=\"created-at,updated-at,internal-pack-items,external-pack-items,tags,comments,\";case Resource.REQUEST_FULL_LISTING: strElements+=\"owner,\";case Resource.REQUEST_SHORT_LISTING: strElements+=\"id,title,description,privileges\";}return(strElements);}"
  },
  {
    "code_smells": [],
    "source_code": "@Private public static<T>T createClazzInstance(String className)throws TezReflectionException{Class<?>clazz=getClazz(className);@SuppressWarnings(\"unchecked\")T instance=(T)getNewInstance(clazz);return instance;}"
  },
  {
    "code_smells": [],
    "source_code": "public InputInitializerCallback(InitializerWrapper initializer,EventHandler eventHandler,TezVertexID vertexID){this.initializer=initializer;this.eventHandler=eventHandler;this.vertexID=vertexID;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onVertexManagerEventReceived(VertexManagerEvent vmEvent)throws Exception{if(LOG.isDebugEnabled()){LOG.debug(\"onVertexManagerEventReceived is invoked in NoOpVertexManager,vertex=\"+getContext().getVertexName());}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void toSummaryProtoStream(OutputStream outputStream)throws IOException{ProtoUtils.toSummaryEventProto(dagID,commitStartTime,getEventType(),null).writeDelimitedTo(outputStream);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void verifyReply(String base64Hash,String msg,SecretKey key)throws IOException{byte[]hash=Base64.decodeBase64(base64Hash.getBytes(Charsets.UTF_8));boolean res=verifyHash(hash,msg.getBytes(Charsets.UTF_8),key);if(res!=true){throw new IOException(\"Verification of the hashReply failed\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public int writeLength()throws IOException{int length=0;int mapIdLength=Text.encode(mapId).limit();length+=mapIdLength;length+=WritableUtils.getVIntSize(mapIdLength);length+=WritableUtils.getVIntSize(compressedLength);length+=WritableUtils.getVIntSize(uncompressedLength);length+=WritableUtils.getVIntSize(forReduce);return length;}"
  },
  {
    "code_smells": [],
    "source_code": "private String getMetadataFullAffiliations(List<Author>authorList){List<Affiliation>unique=new ArrayList<Affiliation>();StringBuilder metAffils=new StringBuilder();for(Author a : authorList){for(Affiliation af : a.getAffiliations()){if(!unique.contains(af)){unique.add(af);}}}metAffils.append(\"[\");for(Affiliation af : unique){metAffils.append(af.toString());metAffils.append(\",\");}metAffils.append(metAffils.deleteCharAt(metAffils.length()-1));metAffils.append(\"]\");return metAffils.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "private void handleHeaderFooter(Range[]ranges,String type,HWPFDocument document,PicturesSource pictures,PicturesTable pictureTable,XHTMLContentHandler xhtml)throws SAXException,IOException,TikaException{if(countParagraphs(ranges)>0){xhtml.startElement(\"div\",\"class\",type);ListManager listManager=new ListManager(document);for(Range r : ranges){if(r!=null){for(int i=0;i<r.numParagraphs();i++){Paragraph p=r.getParagraph(i);i+=handleParagraph(p,0,r,document,FieldsDocumentPart.HEADER,pictures,pictureTable,listManager,xhtml);}}}xhtml.endElement(\"div\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getImageMagickPath(){return imageMagickPath;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override GraphSONMapper.Builder configureBuilder(final GraphSONMapper.Builder builder){return builder.addCustomModule(new GremlinServerModule()).typeInfo(TypeInfo.NO_TYPES);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<A>GraphTraversalSource withSideEffect(final String key,final Supplier<A>initialValue,final BinaryOperator<A>reducer){return(GraphTraversalSource)TraversalSource.super.withSideEffect(key,initialValue,reducer);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public PreparedStatement prepareStatement(final String sql,final int resultSetType,final int resultSetConcurrency)throws SQLException{if(null==pstmtPool){throw new SQLException(\"Statement pool is null-closed or invalid PoolingConnection.\");}try{return pstmtPool.borrowObject(createKey(sql,resultSetType,resultSetConcurrency));}catch(final NoSuchElementException e){throw new SQLException(\"MaxOpenPreparedStatements limit reached\",e);}catch(final RuntimeException e){throw e;}catch(final Exception e){throw new SQLException(\"Borrow prepareStatement from pool failed\",e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){if(this==obj){return true;}if(!super.equals(obj)){return false;}if(getClass()!=obj.getClass()){return false;}ContextResourceLink other=(ContextResourceLink)obj;if(factory==null){if(other.factory!=null){return false;}}else if(!factory.equals(other.factory)){return false;}if(global==null){if(other.global!=null){return false;}}else if(!global.equals(other.global)){return false;}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "private static void orderFragments(Set<WebXml>orderedFragments,Set<WebXml>unordered){Set<WebXml>addedThisRound=new HashSet<>();Set<WebXml>addedLastRound=new HashSet<>();while(unordered.size()>0){Iterator<WebXml>source=unordered.iterator();while(source.hasNext()){WebXml fragment=source.next();for(WebXml toRemove : addedLastRound){fragment.getAfterOrdering().remove(toRemove.getName());}if(fragment.getAfterOrdering().isEmpty()){addedThisRound.add(fragment);orderedFragments.add(fragment);source.remove();}}if(addedThisRound.size()==0){throw new IllegalArgumentException(sm.getString(\"webXml.mergeConflictOrder\"));}addedLastRound.clear();addedLastRound.addAll(addedThisRound);addedThisRound.clear();}}"
  },
  {
    "code_smells": [],
    "source_code": "public JavaCharStream(java.io.InputStream dstream,String encoding,int startline,int startcolumn,int buffersize)throws java.io.UnsupportedEncodingException{this(encoding==null ? new java.io.InputStreamReader(dstream): new java.io.InputStreamReader(dstream,encoding),startline,startcolumn,buffersize);}"
  },
  {
    "code_smells": [],
    "source_code": "public static String adjustRelativePath(String path)throws FileNotFoundException{if(path==null || path.length()==0){return path;}String newPath=path;File f=new File(newPath);if(!f.isAbsolute()){newPath=System.getProperty(Constants.CATALINA_BASE_PROP)+File.separator+newPath;f=new File(newPath);}if(!f.exists()){throw new FileNotFoundException(sm.getString(\"sslHostConfig.fileNotFound\",newPath));}return newPath;}"
  },
  {
    "code_smells": [],
    "source_code": "public String submit(){invocation.getMethodParameters().clear();for(ParameterInfo info : methodParameters){invocation.getMethodParameters().add(info.getValue());}methodParameters.clear();methodParameters=null;return \"ejb-invoker?faces-redirect=true\";}"
  },
  {
    "code_smells": [],
    "source_code": "private ArgumentProcessor getProcessor(Class<? extends ArgumentProcessor>processorClass){ArgumentProcessor processor;try{processor=processorClass.getConstructor().newInstance();}catch(Exception e){throw new BuildException(\"The argument processor class\"+processorClass.getName()+\" could not be instantiated with a default constructor\",e);}return processor;}"
  },
  {
    "code_smells": [],
    "source_code": "protected boolean supportsNonFileResources(){return getClass().equals(Tar.class);}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isTypeSystemIndexDefIncluded(){return typeSystemIndexDefIncluded;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void run(){mTableViewer.getTree().selectAll();mTableViewer.setSelection(mTableViewer.getSelection());}"
  },
  {
    "code_smells": [],
    "source_code": "public void initializeDefaultPreferences(){IPreferenceStore store=CasEditorIdePlugin.getDefault().getPreferenceStore();store.setDefault(CasEditorIdePreferenceConstants.CAS_IMPORT_WIZARD_LAST_USED_LANG,CAS.DEFAULT_LANGUAGE_NAME);store.setDefault(CasEditorIdePreferenceConstants.CAS_IMPORT_WIZARD_LAST_USED_ENCODINGS,Charset.defaultCharset().displayName());store.setDefault(CasEditorIdePreferenceConstants.CAS_EDITOR_REMEMBER_TYPESYSTEM,true);}"
  },
  {
    "code_smells": [],
    "source_code": "public InstrumentationFacility getInstrumentationFacility(){return getRootContext().getInstrumentationFacility();}"
  },
  {
    "code_smells": [],
    "source_code": "static private String getText(String text){int start=text.indexOf(\"<TEXT>\");int end=text.indexOf(\"</TEXT>\");if(start!=-1 && end!=-1){return text.substring(start+6,end);}else{return text;}}"
  },
  {
    "code_smells": [],
    "source_code": "public Map<String,Object>getPropertyMapping(String property,String itemType){Map<String,Map<String,Object>>mappings=knownMappings.get(itemType);Map<String,Object>result=getPropertyMapping(property,mappings);if(result==null){mappings=getPropertiesMapping(itemType);knownMappings.put(itemType,mappings);result=getPropertyMapping(property,mappings);}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Set<String>getCounterNames()throws Exception{Set<String>names=new TreeSet<String>(CASE_INSENSITIVE_ORDER);Set<String>nameSet=cast(getDictionaryAsSet(getApplicationRef(),Schema.DICTIONARY_COUNTERS));names.addAll(nameSet);return names;}"
  },
  {
    "code_smells": [],
    "source_code": "@Inject public CandidateIdFilter(final EntityCollectionManagerFactory entityCollectionManagerFactory,final EntityIndexFactory entityIndexFactory,final IndexLocationStrategyFactory indexLocationStrategyFactory,final IndexProducer indexProducer){this.entityCollectionManagerFactory=entityCollectionManagerFactory;this.entityIndexFactory=entityIndexFactory;this.indexLocationStrategyFactory=indexLocationStrategyFactory;this.indexProducer=indexProducer;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int getMaxVersion(){int max=0;for(DataMigration entityMigration : entityDataMigrations){max=Math.max(max,entityMigration.getMaxVersion());}return max;}"
  },
  {
    "code_smells": [],
    "source_code": "public static<S,T>HashMapBuilder<S,T>hashMap(S key,T value){return new HashMapBuilder<S,T>().map(key,value);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Collection<Class>getMessageTypes(){return new ArrayList(){{add(QueueGetRequest.class);add(QueueInitRequest.class);add(QueueRefreshRequest.class);add(QueueTimeoutRequest.class);add(ShardCheckRequest.class);}};}"
  },
  {
    "code_smells": [],
    "source_code": "public String getToken(){return token;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void println(char x)throws IOException{getEnclosingWriter().println(x);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void init(){super.init();this.introspector=new Introspector(this.log);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public boolean matchesAllInstances(SequenceType testST){Quantifier stq=sequenceType.getQuantifier();ItemType it=sequenceType.getItemType();if(stq.isSubQuantifier(testST.getQuantifier())){if(it instanceof AnyItemType){return true;}else if(it.isAtomicType()&& testST.getItemType().isAtomicType()){AtomicType ait=(AtomicType)it;AtomicType testIT=(AtomicType)testST.getItemType();if(BuiltinTypeRegistry.INSTANCE.isBuiltinTypeId(testIT.getTypeId())){SchemaType vType=BuiltinTypeRegistry.INSTANCE.getSchemaTypeById(testIT.getTypeId());while(vType!=null && vType.getTypeId()!=ait.getTypeId()){vType=vType.getBaseType();}return vType!=null;}}else if(it instanceof NodeType && testST.getItemType()instanceof NodeType){NodeType nt=(NodeType)it;NodeKind kind=nt.getNodeKind();NodeType testNT=(NodeType)testST.getItemType();NodeKind testKind=testNT.getNodeKind();if(kind==NodeKind.ANY || kind==testKind){return true;}}return false;}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public void addAdditionalQualifier(Class<? extends Annotation>qualifier){if(!additionalQualifiers.contains(qualifier)){additionalQualifiers.add(qualifier);}}"
  },
  {
    "code_smells": [],
    "source_code": "Provision resolve(){if(pageId!=null){IRequestablePage stored=getPageSource().getPageInstance(pageId);if(stored!=null &&(pageClass==null || pageClass.equals(stored.getClass()))){page=stored;if(renderCount!=null && page.getRenderCount()!=renderCount)throw new StalePageException(page);}failedToFindStoredPage=page==null;}return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public Bytes getFileMaxSize(){return fileMaxSize;}"
  },
  {
    "code_smells": [],
    "source_code": "protected boolean makeContentVisible(){if(getWebRequest().isAjax()==false){return false;}else{return shown;}}"
  },
  {
    "code_smells": [],
    "source_code": "public long getTo(){if(getOf()==0){return 0;}return Math.min(getOf(),getFrom()+pageable.getItemsPerPage()-1);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void onReAdd(){if(this.fence!=null){incrementFenceCount();}super.onReAdd();}"
  },
  {
    "code_smells": [],
    "source_code": "public FilteredHeaderItem(HeaderItem wrapped,String filterName){this.wrapped=wrapped;this.filterName=filterName;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void onConfigure(){super.onConfigure();dequeue();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected final Iterator<IModel<T>>getItemModels(long offset,long count){return new ModelIterator<T>(internalGetDataProvider(),offset,count);}"
  },
  {
    "code_smells": [],
    "source_code": "public void supportSessionSerialization(ISerializer serializer){this.serializer=Args.notNull(serializer,\"serializer\");}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setContentLength(final int length){setIntHeader(\"Content-Length\",length);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public List<String>getSuffixes(){return Arrays.asList(\"css\");}"
  },
  {
    "code_smells": [],
    "source_code": "protected final void doSelect(final int index){String value=getChoiceValueForIndex(index);assignValueToFormComponent(formComponent,value);}"
  },
  {
    "code_smells": [],
    "source_code": "public static Behavior findBehavior(Component component,Class<? extends Behavior>behaviorClass){for(Behavior behavior : component.getBehaviors(behaviorClass)){return behavior;}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public WikiPage setRealPage(WikiPage page){WikiPage old=m_realPage;m_realPage=page;updateCommand(m_command.getRequestContext());return old;}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean exists(Group group){String index=group.getName();try{findGroup(index);return true;}catch(NoSuchPrincipalException e){return false;}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override public WikiPage getPageInfo(String page,int version)throws ProviderException{int latest=findLatestVersion(page);int realVersion;WikiPage p=null;if(version==WikiPageProvider.LATEST_VERSION || version==latest ||(version==1 && latest==-1)){realVersion=(latest>=0)? latest : 1;p=super.getPageInfo(page,WikiPageProvider.LATEST_VERSION);if(p!=null){p.setVersion(realVersion);}}else{realVersion=version;File dir=findOldPageDir(page);if(!dir.exists()|| !dir.isDirectory()){return null;}File file=new File(dir,version+FILE_EXT);if(file.exists()){p=new WikiPage(m_engine,page);p.setLastModified(new Date(file.lastModified()));p.setVersion(version);}}if(p!=null){try{Properties props=getPageProperties(page);String author=props.getProperty(realVersion+\".author\");if(author==null){Properties props2=getHeritagePageProperties(page);author=props2.getProperty(WikiPage.AUTHOR);}if(author!=null){p.setAuthor(author);}String changenote=props.getProperty(realVersion+\".changenote\");if(changenote!=null)p.setAttribute(WikiPage.CHANGENOTE,changenote);setCustomProperties(p,props);}catch(IOException e){log.error(\"Cannot get author for page\"+page+\": \",e);}}return p;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public Map<String,String>listLanguages(PageContext pageContext){Map<String,String>resultMap=new LinkedHashMap<>();String clientLanguage=((HttpServletRequest)pageContext.getRequest()).getLocale().toString();List<String>entries=ClassUtil.classpathEntriesUnder(DIRECTORY);for(String name : entries){if(name.equals(I18NRESOURCE_EN)||(name.startsWith(I18NRESOURCE_PREFIX)&& name.endsWith(I18NRESOURCE_SUFFIX))){if(name.equals(I18NRESOURCE_EN)){name=I18NRESOURCE_EN_ID;}else{name=name.substring(I18NRESOURCE_PREFIX.length(),name.lastIndexOf(I18NRESOURCE_SUFFIX));}Locale locale=new Locale(name.substring(0,2),((name.indexOf(\"_\")==-1)? \"\" : name.substring(3,5)));String defaultLanguage=\"\";if(clientLanguage.startsWith(name)){defaultLanguage=LocaleSupport.getLocalizedMessage(pageContext,I18NDEFAULT_LOCALE);}resultMap.put(name,locale.getDisplayName(locale)+\" \"+defaultLanguage);}}return resultMap;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setOutputProperty(String name,String value)throws IllegalArgumentException{synchronized(m_reentryGuard){if(null==m_outputFormat){m_outputFormat=(OutputProperties)getStylesheet().getOutputComposed().clone();}if(!OutputProperties.isLegalPropertyKey(name))throw new IllegalArgumentException(XSLMessages.createMessage(XSLTErrorResources.ER_OUTPUT_PROPERTY_NOT_RECOGNIZED,new Object[]{name}));m_outputFormat.setProperty(name,value);}}"
  },
  {
    "code_smells": [],
    "source_code": "public Type typeCheck(SymbolTable stable)throws TypeCheckError{if(argumentCount()>0){argument().typeCheck(stable);}return _type=Type.Real;}"
  },
  {
    "code_smells": [],
    "source_code": "public BranchInstruction GE(boolean tozero){return tozero ?(BranchInstruction)new IFGE(null):(BranchInstruction)new IF_ICMPGE(null);}"
  },
  {
    "source_code": "static ClassLoader findClassLoader()throws ConfigurationError{ClassLoader context=SecuritySupport.getContextClassLoader();ClassLoader system=SecuritySupport.getSystemClassLoader();ClassLoader chain=system;while(true){if(context==chain){ClassLoader current=ObjectFactory.class.getClassLoader();chain=system;while(true){if(current==chain){return system;}if(chain==null){break;}chain=SecuritySupport.getParentClassLoader(chain);}return current;}if(chain==null){break;}chain=SecuritySupport.getParentClassLoader(chain);};return context;}",
    "code_smells": [
      "LongMethod"
    ]
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "static Class findProviderClass(String className,ClassLoader cl,boolean doFallback)throws ClassNotFoundException,ConfigurationError{SecurityManager security=System.getSecurityManager();try{if(security!=null){final int lastDot=className.lastIndexOf('.');String packageName=className;if(lastDot!=-1)packageName=className.substring(0,lastDot);security.checkPackageAccess(packageName);}}catch(SecurityException e){throw e;}Class providerClass;if(cl==null){providerClass=Class.forName(className);}else{try{providerClass=cl.loadClass(className);}catch(ClassNotFoundException x){if(doFallback){ClassLoader current=ObjectFactory.class.getClassLoader();if(current==null){providerClass=Class.forName(className);}else if(cl!=current){cl=current;providerClass=cl.loadClass(className);}else{throw x;}}else{throw x;}}}return providerClass;}"
  },
  {
    "code_smells": [],
    "source_code": "public XMLString getStringValue(int nodeHandle){nodes.readSlot(nodeHandle,gotslot);int nodetype=gotslot[0]& 0xFF;String value=null;switch(nodetype){case TEXT_NODE: case COMMENT_NODE: case CDATA_SECTION_NODE: value=m_char.getString(gotslot[2],gotslot[3]);break;case PROCESSING_INSTRUCTION_NODE: case ATTRIBUTE_NODE: case ELEMENT_NODE: case ENTITY_REFERENCE_NODE: default: break;}return m_xsf.newstr(value);}"
  },
  {
    "code_smells": [],
    "source_code": "public final Text splitText(int offset)throws DOMException{throw new DTMDOMException(DOMException.NOT_SUPPORTED_ERR);}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean equals(ExtendedType other){try{return other.nodetype==this.nodetype && other.localName.equals(this.localName)&& other.namespace.equals(this.namespace);}catch(NullPointerException e){return false;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public int next(){final int startNode=_startNode;if(_startNode==NULL){return NULL;}int node=_currentNode;int expType;final int nodeType=_nodeType;if(nodeType!=DTM.ELEMENT_NODE){do{node++;expType=_exptype2(node);if(NULL==expType || _parent2(node)<startNode && startNode!=node){_currentNode=NULL;return END;}}while(expType!=nodeType);}else if(startNode==DTMDefaultBase.ROOTNODE){do{node++;expType=_exptype2(node);if(NULL==expType){_currentNode=NULL;return END;}}while(expType<DTM.NTYPES || m_extendedTypes[expType].getNodeType()!=DTM.ELEMENT_NODE);}else{do{node++;expType=_exptype2(node);if(NULL==expType || _parent2(node)<startNode && startNode!=node){_currentNode=NULL;return END;}}while(expType<DTM.NTYPES || m_extendedTypes[expType].getNodeType()!=DTM.ELEMENT_NODE);}_currentNode=node;return returnNode(makeNodeHandle(node));}"
  },
  {
    "source_code": "public static boolean isValidNmtoken(String nmtoken){if(nmtoken.length()==0)return false;for(int i=0;i<nmtoken.length();i++){char ch=nmtoken.charAt(i);if(!isName(ch)){return false;}}return true;}",
    "code_smells": []
  },
  {
    "code_smells": [],
    "source_code": "public int peek(int n){try{return m_map[m_firstFree-(1+n)];}catch(ArrayIndexOutOfBoundsException e){throw new EmptyStackException();}}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasAttribute(String name){error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);return false;}"
  },
  {
    "code_smells": [],
    "source_code": "private static final int twoDigit(CharSequence str,int index){char ch1=str.charAt(index);char ch2=str.charAt(index+1);if(!isDigit(ch1)|| !isDigit(ch2))return 100;return digitVal(ch1)*10+digitVal(ch2);}"
  },
  {
    "code_smells": [],
    "source_code": "public org.apache.xmlbeans.samples.validation.todolist.ItemType insertNewItem(int i){synchronized(monitor()){check_orphaned();org.apache.xmlbeans.samples.validation.todolist.ItemType target=null;target=(org.apache.xmlbeans.samples.validation.todolist.ItemType)get_store().insert_element_user(ITEM$0,i);return target;}}"
  },
  {
    "code_smells": [],
    "source_code": "public int getRoot(){if(null!=m_iter)return m_iter.getRoot();else{return DTM.NULL;}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void setOp(int opPos,int value){m_opMap.setElementAt(value,opPos);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public List<String>getTraceback(){return traceback;}"
  },
  {
    "code_smells": [],
    "source_code": "protected boolean validateToken(String token){try{SignedJWT signed=SignedJWT.parse(token);boolean sigValid=validateSignature(signed);if(!sigValid){LOGGER.warn(\"Signature of JWT token could not be verified.Please check the public key\");return false;}boolean expValid=validateExpiration(signed);if(!expValid){LOGGER.warn(\"Expiration time validation of JWT token failed.\");return false;}String currentUser=(String)org.apache.shiro.SecurityUtils.getSubject().getPrincipal();if(currentUser==null){return true;}String cookieUser=signed.getJWTClaimsSet().getSubject();if(!cookieUser.equals(currentUser)){return false;}return true;}catch(ParseException ex){LOGGER.info(\"ParseException in validateToken\",ex);return false;}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public JsonGenerator(LogIterator iter){servers=new HashSet<Integer>();Pattern stateChangeP=Pattern.compile(\"-(LOOKING|FOLLOWING|LEADING)\");Pattern newElectionP=Pattern.compile(\"New election.My id=(\\\\d+),Proposed zxid=(\\\\d+)\");Pattern receivedProposalP=Pattern.compile(\"Notification:(\\\\d+)\\\\(n.leader\\\\),(\\\\d+)\\\\(n.zxid\\\\),(\\\\d+)\\\\(n.round\\\\),.+\\\\(n.state\\\\),(\\\\d+)\\\\(n.sid\\\\),.+\\\\(my state\\\\)\");Pattern exceptionP=Pattern.compile(\"xception\");root=new JSONObject();Matcher m=null;JSONArray events=new JSONArray();root.put(\"events\",events);long starttime=Long.MAX_VALUE;long endtime=0;int leader=0;long curEpoch=0;boolean newEpoch=false;while(iter.hasNext()){LogEntry ent=iter.next();if(ent.getTimestamp()<starttime){starttime=ent.getTimestamp();}if(ent.getTimestamp()>endtime){endtime=ent.getTimestamp();}if(ent.getType()==LogEntry.Type.TXN){events.add(txnEntry((TransactionEntry)ent));}else{Log4JEntry e=(Log4JEntry)ent;servers.add(e.getNode());if((m=stateChangeP.matcher(e.getEntry())).find()){JSONObject stateChange=new JSONObject();stateChange.put(\"type\",\"stateChange\");stateChange.put(\"time\",e.getTimestamp());stateChange.put(\"server\",e.getNode());stateChange.put(\"state\",m.group(1));events.add(stateChange);if(m.group(1).equals(\"LEADING\")){leader=e.getNode();}}else if((m=newElectionP.matcher(e.getEntry())).find()){Iterator<Integer>iterator=servers.iterator();long zxid=Long.valueOf(m.group(2));int count=(int)zxid;int epoch=(int)Long.rotateRight(zxid,32);if(leader!=0 && epoch>curEpoch){JSONObject stateChange=new JSONObject();stateChange.put(\"type\",\"stateChange\");stateChange.put(\"time\",e.getTimestamp());stateChange.put(\"server\",leader);stateChange.put(\"state\",\"INIT\");events.add(stateChange);leader=0;}while(iterator.hasNext()){int dst=iterator.next();if(dst!=e.getNode()){JSONObject msg=new JSONObject();msg.put(\"type\",\"postmessage\");msg.put(\"src\",e.getNode());msg.put(\"dst\",dst);msg.put(\"time\",e.getTimestamp());msg.put(\"zxid\",m.group(2));msg.put(\"count\",count);msg.put(\"epoch\",epoch);events.add(msg);}}}else if((m=receivedProposalP.matcher(e.getEntry())).find()){int src=Integer.valueOf(m.group(4));long zxid=Long.valueOf(m.group(2));int dst=e.getNode();long epoch2=Long.valueOf(m.group(3));int count=(int)zxid;int epoch=(int)Long.rotateRight(zxid,32);if(leader!=0 && epoch>curEpoch){JSONObject stateChange=new JSONObject();stateChange.put(\"type\",\"stateChange\");stateChange.put(\"time\",e.getTimestamp());stateChange.put(\"server\",leader);stateChange.put(\"state\",\"INIT\");events.add(stateChange);leader=0;}if(src!=dst){JSONObject msg=new JSONObject();msg.put(\"type\",\"delivermessage\");msg.put(\"src\",src);msg.put(\"dst\",dst);msg.put(\"time\",e.getTimestamp());msg.put(\"zxid\",zxid);msg.put(\"epoch\",epoch);msg.put(\"count\",count);msg.put(\"epoch2\",epoch2);events.add(msg);}}else if((m=exceptionP.matcher(e.getEntry())).find()){JSONObject ex=new JSONObject();ex.put(\"type\",\"exception\");ex.put(\"server\",e.getNode());ex.put(\"time\",e.getTimestamp());ex.put(\"text\",e.getEntry());events.add(ex);}}JSONObject ex=new JSONObject();ex.put(\"type\",\"text\");ex.put(\"time\",ent.getTimestamp());String txt=ent.toString();ex.put(\"text\",txt);events.add(ex);}root.put(\"starttime\",starttime);root.put(\"endtime\",endtime);JSONArray serversarray=new JSONArray();root.put(\"servers\",serversarray);Iterator<Integer>iterator=servers.iterator();while(iterator.hasNext()){serversarray.add(iterator.next());}}"
  },
  {
    "code_smells": [],
    "source_code": "public byte[]element()throws NoSuchElementException,KeeperException,InterruptedException{Map<Long,String>orderedChildren;while(true){try{orderedChildren=orderedChildren(null);}catch(KeeperException.NoNodeException e){throw new NoSuchElementException();}if(orderedChildren.size()==0)throw new NoSuchElementException();for(String headNode : orderedChildren.values()){if(headNode!=null){try{return zookeeper.getData(dir+\"/\"+headNode,false,null);}catch(KeeperException.NoNodeException e){}}}}}"
  },
  {
    "code_smells": [],
    "source_code": "public long getLastProcessedZxid(){return provider.getLastProcessedZxid();}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "static String replaceSubstitution(String base,Pattern from,String to,boolean repeat){Matcher match=from.matcher(base);if(repeat){return match.replaceAll(to);}else{return match.replaceFirst(to);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setProceedOnError(boolean b){options.proceedOnError=b;}"
  },
  {
    "code_smells": [],
    "source_code": "private static final void getPathComponents(String path,ArrayList<String>list){if(path!=null){StringTokenizer tok=new StringTokenizer(path,File.pathSeparator);while(tok.hasMoreTokens()){String name=tok.nextToken();File file=new File(name);if(file.exists())list.add(name);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void showSourceLine(ISourceLocation sourceLocation,boolean highlight){try{showSourceLine(sourceLocation.getSourceFile().getAbsolutePath(),sourceLocation.getLine(),highlight);}catch(NullPointerException npe){Ajde.getDefault().getIdeUIAdapter().displayStatusInformation(\" no corresponding source line to seek to\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public final Thread start(){if(!init){throw new IllegalStateException(\"not initialized\");}synchronized(this){if(started){throw new IllegalStateException(\"already started\");}started=true;}try{process=Runtime.getRuntime().exec(command);}catch(IOException e){stop(e,Integer.MIN_VALUE);return null;}errStream=new FileUtil.Pipe(process.getErrorStream(),System.err);if(null!=errSnoop){errStream.setSnoop(errSnoop);}outStream=new FileUtil.Pipe(process.getInputStream(),System.out);if(null!=outSnoop){outStream.setSnoop(outSnoop);}inStream=new FileUtil.Pipe(System.in,process.getOutputStream());Runnable processRunner=new Runnable(){@Override public void run(){Throwable thrown=null;int result=Integer.MIN_VALUE;try{new Thread(errStream).start();new Thread(outStream).start();new Thread(inStream).start();process.waitFor();result=process.exitValue();}catch(Throwable e){thrown=e;}finally{stop(thrown,result);}}};Thread result=new Thread(processRunner,label);result.start();return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean is14VMOrGreater(){return 1.4<=vmVersion;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private static boolean handleAspectAnnotation(RuntimeAnnos runtimeAnnotations,AjAttributeStruct struct){AnnotationGen aspect=getAnnotation(runtimeAnnotations,AjcMemberMaker.ASPECT_ANNOTATION);if(aspect!=null){boolean extendsAspect=false;if(!\"java.lang.Object\".equals(struct.enclosingType.getSuperclass().getName())){if(!struct.enclosingType.getSuperclass().isAbstract()&& struct.enclosingType.getSuperclass().isAspect()){reportError(\"cannot extend a concrete aspect\",struct);return false;}extendsAspect=struct.enclosingType.getSuperclass().isAspect();}NameValuePair aspectPerClause=getAnnotationElement(aspect,VALUE);final PerClause perClause;if(aspectPerClause==null){if(!extendsAspect){perClause=new PerSingleton();}else{perClause=new PerFromSuper(struct.enclosingType.getSuperclass().getPerClause().getKind());}}else{String perX=aspectPerClause.getValue().stringifyValue();if(perX==null || perX.length()<=0){perClause=new PerSingleton();}else{perClause=parsePerClausePointcut(perX,struct);}}if(perClause==null){return false;}else{perClause.setLocation(struct.context,-1,-1);AjAttribute.Aspect aspectAttribute=new AjAttribute.Aspect(perClause);struct.ajAttributes.add(aspectAttribute);FormalBinding[]bindings=new org.aspectj.weaver.patterns.FormalBinding[0];final IScope binding;binding=new BindingScope(struct.enclosingType,struct.context,bindings);aspectAttribute.setResolutionScope(binding);return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "private void doAggressiveInner(LazyClassGen gen){if(!hasGeneratedInner){if(kind==PerClause.PEROBJECT){UnresolvedType interfaceTypeX=AjcMemberMaker.perObjectInterfaceType(aspectType);LazyClassGen interfaceGen=new LazyClassGen(interfaceTypeX.getName(),\"java.lang.Object\",null,Constants.ACC_INTERFACE+Constants.ACC_PUBLIC+Constants.ACC_ABSTRACT,new String[0],getWorld());interfaceGen.addMethodGen(makeMethodGen(interfaceGen,AjcMemberMaker.perObjectInterfaceGet(aspectType)));interfaceGen.addMethodGen(makeMethodGen(interfaceGen,AjcMemberMaker.perObjectInterfaceSet(aspectType)));gen.addGeneratedInner(interfaceGen);}hasGeneratedInner=true;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object visit(AnnotationPointcut node,Object data){hasDynamicContent=true;return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static TypePattern read(VersionedDataInputStream s,ISourceContext c)throws IOException{AnnotationTypePattern annPatt=AnnotationTypePattern.read(s,c);AnyWithAnnotationTypePattern ret=new AnyWithAnnotationTypePattern(annPatt);ret.readLocation(c,s);return ret;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void postRead(ResolvedType enclosingType){typePattern.postRead(enclosingType);}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean equals(Object other){if(!(other instanceof ThrowsPattern)){return false;}ThrowsPattern o=(ThrowsPattern)other;boolean ret=o.required.equals(this.required)&& o.forbidden.equals(this.forbidden);return ret;}"
  },
  {
    "code_smells": [],
    "source_code": "PackageState(String value){this.value=value;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setActive(boolean active){this.active=active;}"
  },
  {
    "code_smells": [],
    "source_code": "@JsonCreator public UsernamePasswordAuthentication(@JsonProperty(\"username\")String username,@JsonProperty(\"password\")String password){this.password=password;this.username=username;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Value.Derived public Stacks stacks(){return new ReactorStacks(getConnectionContext(),getRootV2(),getTokenProvider());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Mono<ListMembersResponse>listMembers(ListMembersRequest request){return get(request,ListMembersResponse.class,builder->builder.pathSegment(\"Groups\",request.getGroupId(),\"members\")).checkpoint();}"
  },
  {
    "code_smells": [],
    "source_code": "@JsonCreator public static TlsConfiguration from(String s){switch(s.toLowerCase()){case \"none\": return NONE;case \"simple\": return SIMPLE;case \"external\": return EXTERNAL;default: throw new IllegalArgumentException(String.format(\"Unknown TLS Configuration type: %s\",s));}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getLabel(){return label;}"
  },
  {
    "code_smells": [],
    "source_code": "private void finishIndyCall(Handle bsmHandle,String methodName,String sig,int numberOfArguments,Object...bsmArgs){CompileStack compileStack=controller.getCompileStack();OperandStack operandStack=controller.getOperandStack();controller.getMethodVisitor().visitInvokeDynamicInsn(methodName,sig,bsmHandle,bsmArgs);operandStack.replace(ClassHelper.OBJECT_TYPE,numberOfArguments);compileStack.popLHS();}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean disjoint(Iterable left,Iterable right){Collection leftCol=asCollection(left);Collection rightCol=asCollection(right);if(leftCol.isEmpty()|| rightCol.isEmpty())return true;Collection pickFrom=new TreeSet(new NumberAwareComparator());pickFrom.addAll(rightCol);for(final Object o : leftCol){if(pickFrom.contains(o))return false;}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public static double multiply(int op1,float op2){if(instance.int_multiply){return multiplySlow(op1,op2);}else{return((double)op1)*((double)op2);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected static boolean typeCheckMethodsWithGenerics(ClassNode receiver,ClassNode[]arguments,MethodNode candidateMethod){if(isUsingUncheckedGenerics(receiver)){return true;}if(CLASS_Type.equals(receiver)&& receiver.isUsingGenerics()&& !candidateMethod.getDeclaringClass().equals(receiver)&& !(candidateMethod instanceof ExtensionMethodNode)){return typeCheckMethodsWithGenerics(receiver.getGenericsTypes()[0].getType(),arguments,candidateMethod);}GenericsType[]genericsTypes=candidateMethod.getGenericsTypes();boolean methodUsesGenerics=(genericsTypes!=null && genericsTypes.length>0);boolean isExtensionMethod=candidateMethod instanceof ExtensionMethodNode;if(isExtensionMethod && methodUsesGenerics){ClassNode[]dgmArgs=new ClassNode[arguments.length+1];dgmArgs[0]=receiver;System.arraycopy(arguments,0,dgmArgs,1,arguments.length);MethodNode extensionMethodNode=((ExtensionMethodNode)candidateMethod).getExtensionMethodNode();return typeCheckMethodsWithGenerics(extensionMethodNode.getDeclaringClass(),dgmArgs,extensionMethodNode,true);}else{return typeCheckMethodsWithGenerics(receiver,arguments,candidateMethod,false);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){int hash=getClass().hashCode();hash=hash*31+(traverse ? 1 : 0);return hash;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ContentProvider newInstance(LegendData lgData)throws ChartException{LegendItemType itemType=lgData.lg.getItemType();if(itemType.getValue()==LegendItemType.CATEGORIES){return new CategoryContentProvider(lgData);}else if(itemType.getValue()==LegendItemType.SERIES){return new ValueContentProvider(lgData);}else{throw new ChartException(ChartEnginePlugin.ID,ChartException.GENERATION,\"exception.illegal.rendering.legend.itemtype\",new Object[]{itemType},Messages.getResourceBundle(lgData.rtc.getULocale()));}}"
  },
  {
    "code_smells": [],
    "source_code": "public static final double computeWidth(IDisplayServer xs,Label la){final ITextMetrics itm=xs.getTextMetrics(la);try{return computeWidth(itm,la);}finally{itm.dispose();}}"
  },
  {
    "code_smells": [],
    "source_code": "public EReference getRadarSeries_LineAttributes(){return(EReference)radarSeriesEClass.getEStructuralFeatures().get(1);}"
  },
  {
    "code_smells": [],
    "source_code": "public EList<Trigger>getTriggers(){if(triggers==null){triggers=new EObjectContainmentEList<Trigger>(Trigger.class,this,ComponentPackage.MARKER_RANGE__TRIGGERS);}return triggers;}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized static ColorPalette getInstance(){if(instance==null){instance=new ColorPalette();}return instance;}"
  },
  {
    "code_smells": [],
    "source_code": "public void removeModifyListener(ModifyListener listener){checkWidget();if(listener==null)SWT.error(SWT.ERROR_NULL_ARGUMENT);removeListener(SWT.Modify,listener);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void widgetSelected(SelectionEvent e){Object widget=e.widget;if(widget==btnVisible){fireValueChangedEvent(GanttLineAttributesComposite.VISIBILITY_CHANGED_EVENT,Boolean.valueOf(btnVisible.getSelectionState()==ChartCheckbox.STATE_SELECTED),(btnVisible.getSelectionState()==ChartCheckbox.STATE_GRAYED)? ChartUIExtensionUtil.PROPERTY_UNSET : ChartUIExtensionUtil.PROPERTY_UPDATE);if(isDisposed()){return;}boolean bEnableUI=context.getUIFactory().canEnableUI(btnVisible);if(bEnableStyles){lblStyle.setEnabled(bEnableUI);cmbStyle.setEnabled(bEnableUI);}if(bEnableWidths){lblWidth.setEnabled(bEnableUI);iscWidth.setEnabled(bEnableUI);}if(bEnableColor){lblColor.setEnabled(bEnableUI);cmbColor.setEnabled(bEnableUI);}}}"
  },
  {
    "code_smells": [],
    "source_code": "private void fireEvent(Event event){for(int i=0;i<vListeners.size();i++){vListeners.get(i).handleEvent(event);}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "protected void createButtonGroup(Group grpTop){btnAdd=new Button(grpTop,SWT.NONE);{btnAdd.setText(Messages.getString(\"LineSeriesMarkerSheet.Label.Add\"));btnAdd.addSelectionListener(this);}newMarkerEditor=new MarkerEditorComposite(grpTop,createMarker(),getContext(),getDefaultMarker());if(markerTypeSet!=null){newMarkerEditor.setSupportedMarkerTypes(markerTypeSet);}if(outlineText!=null){newMarkerEditor.setOutlineText(outlineText);}btnRemove=new Button(grpTop,SWT.NONE);{btnRemove.setText(Messages.getString(\"LineSeriesMarkerSheet.Label.Remove\"));btnRemove.addSelectionListener(this);}btnUp=new Button(grpTop,SWT.ARROW | SWT.UP);{btnUp.setToolTipText(Messages.getString(\"PaletteEditorComposite.Lbl.Up\"));btnUp.addSelectionListener(this);}btnDown=new Button(grpTop,SWT.ARROW | SWT.DOWN);{btnDown.setToolTipText(Messages.getString(\"PaletteEditorComposite.Lbl.Down\"));btnDown.addSelectionListener(this);}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public boolean mkdirs(){return file.mkdirs();}"
  },
  {
    "code_smells": [],
    "source_code": "public IAggrFunction getAggregation(String name){return name!=null ?(IAggrFunction)aggrMap.get(name.toUpperCase()): null;}"
  },
  {
    "code_smells": [],
    "source_code": "public IBaseDataSetEventHandler getEventHandler(){return this.source.getEventHandler();}"
  },
  {
    "code_smells": [],
    "source_code": "private void retrySetNullParamValue(ParameterName paramName,int paramIndex,int parameterType,Exception lastException)throws DataException{switch(parameterType){case Types.CHAR:{setString(paramName,paramIndex,null);return;}case Types.DECIMAL:{setBigDecimal(paramName,paramIndex,null);return;}case Types.DATE:{setDate(paramName,paramIndex,null);return;}case Types.TIME:{setTime(paramName,paramIndex,null);return;}case Types.TIMESTAMP:{setTimestamp(paramName,paramIndex,null);return;}case Types.JAVA_OBJECT:{setObject(paramName,paramIndex,null);return;}default://$NON-NLS-1$ getLogger().//$NON-NLS-1$ logp(//$NON-NLS-1$ Level.SEVERE,//$NON-NLS-1$ sm_className,\"retrySetNullParamValue\",\"Input parameter value is null;not able to retry,throws exception from underlying ODA driver.\");throwSetParamValueLastException(lastException,\"retrySetNullParamValue\");}}"
  },
  {
    "code_smells": [],
    "source_code": "private void checkValid(){if(!valid)return;if(cursor==maxLength-1)valid=false;}"
  },
  {
    "code_smells": [],
    "source_code": "public void onRow(boolean populateValue,FactTableRow factTableRow)throws DataException{for(int aggrIndex=0;aggrIndex<this.functions.length;aggrIndex++){Accumulator acc=this.accumulators.get(aggrIndex);acc.onRow(new Object[]{factTableRow.getMeasures()[aggrIndex]});if(populateValue){acc.finish();currentRoundAggrValue[aggrIndex]=acc.getValue();acc.start();}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void parse()throws ParseException{try{parser.open(templateDir);}catch(FileNotFoundException e){return;}parseElement();}"
  },
  {
    "code_smells": [],
    "source_code": "public Object calculate(Object value){if(value==null){return new Double(-1);}if(intervalStart==null){return new Double(Math.floor(this.dateTimeUtil.diffYear(defaultStart,(Date)value)/getDateIntervalRange()));}else{if(this.dateTimeUtil.diffYear((Date)intervalStart,(Date)value)<0){return new Double(-1);}else{return new Double(Math.floor(this.dateTimeUtil.diffYear((Date)intervalStart,(Date)value)/getDateIntervalRange()));}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private ICompletionProposal[]getRelevantProposals(ITextViewer viewer,int offset)throws BadLocationException{if(lastProposals!=null){ArrayList relevantProposals=new ArrayList(10);String word=(findWord(viewer,offset-1)).toLowerCase();for(int n=0;n<lastProposals.length;n++){if(stripQuotes(lastProposals[n].getDisplayString().toLowerCase()).startsWith(word)){CompletionProposal proposal=new CompletionProposal(lastProposals[n].getDisplayString(),offset-word.length(),word.length(),lastProposals[n].getDisplayString().length());relevantProposals.add(proposal);}}if(relevantProposals.size()>0){return(ICompletionProposal[])relevantProposals.toArray(new ICompletionProposal[]{});}}return null;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "protected boolean doAction()throws Exception{if(Policy.TRACING_ACTIONS){}DataSourceHandle handle=(DataSourceHandle)getSelection();DataSourceEditor dialog=new AdvancedDataSourceEditor(PlatformUI.getWorkbench().getDisplay().getActiveShell(),handle);return(dialog.open()==IDialogConstants.OK_ID);}"
  },
  {
    "code_smells": [],
    "source_code": "public ColumnDefn(ResultSetColumnHandle rsHandle,ColumnHintHandle colHintHandle){this.rsColumnHandle=rsHandle;this.columnHintHandle=colHintHandle;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void rollback(){data.setAlias(originalAlias);data.setRealDisplayName(originalDisplayName);data.setDisplayNameKey(originalDisplayNameKey);}"
  },
  {
    "code_smells": [],
    "source_code": "public Point computeSize(int wHint,int hHint,boolean changed){checkWidget();Point e=getTotalSize(image,text);if(wHint==SWT.DEFAULT){e.x+=leftMargin+rightMargin;}else{e.x=wHint;}if(hHint==SWT.DEFAULT){e.y+=topMargin+bottomMargin;}else{e.y=hHint;}return e;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "protected void buildContent(){IDescriptorProvider nameProvider=new TextPropertyDescriptorProvider(IDesignElementModel.NAME_PROP,ReportDesignConstants.VARIABLE_ELEMENT);TextSection nameSection=new TextSection(nameProvider.getDisplayName(),container,true);nameSection.setProvider(nameProvider);nameSection.setLayoutNum(6);nameSection.setWidth(500);addSection(PageSectionId.VARIABLE_NAME,nameSection);ComboPropertyDescriptorProvider variableTypeProvider=new ComboPropertyDescriptorProvider(IVariableElementModel.TYPE_PROP,ReportDesignConstants.VARIABLE_ELEMENT);variableTypeProvider.enableReset(true);ComboSection variableTypeSection=new ComboSection(variableTypeProvider.getDisplayName(),container,true);variableTypeSection.setProvider(variableTypeProvider);variableTypeSection.setLayoutNum(6);variableTypeSection.setWidth(500);addSection(PageSectionId.VARIABLE_TYPE,variableTypeSection);ExpressionPropertyDescriptorProvider variableValueProvider=new ExpressionPropertyDescriptorProvider(IVariableElementModel.VALUE_PROP,ReportDesignConstants.VARIABLE_ELEMENT);ExpressionSection variableValueSection=new ExpressionSection(variableValueProvider.getDisplayName(),container,true);variableValueSection.setMulti(false);variableValueSection.setProvider(variableValueProvider);variableValueSection.setWidth(500);variableValueSection.setLayoutNum(6);addSection(PageSectionId.VARIABLE_VALUE,variableValueSection);}"
  },
  {
    "code_smells": [],
    "source_code": "public void addElementEvent(DesignElementHandle focus,NotificationEvent ev){ModelEventInfo event=new ModelEventInfo(focus,ev);eventList.add(event);}"
  },
  {
    "code_smells": [],
    "source_code": "private DataSetHandle getDataSet(ScalarParameterHandle handle){if(!isSingle()){if(handle!=null && handle.getDataSet()!=null){return handle.getDataSet();}return null;}return inputParameterGroup.getDataSet();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void okPressed(){if(canSelect){setResult(selectedColumnName);if(inputElement instanceof DataItemHandle){try{((DataItemHandle)inputElement).setResultSetColumn(selectedColumnName);}catch(SemanticException e){ExceptionHandler.handle(e);}}}if(getSelectColumnHandle()!=null && ExtendedDataModelUIAdapterHelper.isBoundToExtendedData(inputElement)){DataModelAdapterStatus status=DataModelAdapterUtil.validateRelativeTimePeriod(inputElement,getSelectColumnHandle());if(status.getStatus()==DataModelAdapterStatus.Status.FAIL){MessageDialog.openError(UIUtil.getDefaultShell(),null,status.getMessage());return;}}super.okPressed();}"
  },
  {
    "code_smells": [],
    "source_code": "public void inputChanged(Viewer viewer,Object oldInput,Object newInput){if(viewer==subCategoryTable){functionTable.setInput(null);}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public void run(IAction action){if(!preGenerate()){return;}IFile file=getSelectedFile();if(file!=null){String url=file.getLocation().toOSString();Map options=new HashMap();options.put(WebViewer.RESOURCE_FOLDER_KEY,ReportPlugin.getDefault().getResourceFolder(file.getProject()));options.put(WebViewer.SERVLET_NAME_KEY,WebViewer.VIEWER_DOCUMENT);Object adapter=ElementAdapterManager.getAdapter(action,IPreviewAction.class);if(adapter instanceof IPreviewAction){IPreviewAction delegate=(IPreviewAction)adapter;delegate.setProperty(IPreviewConstants.REPORT_PREVIEW_OPTIONS,options);delegate.setProperty(IPreviewConstants.REPORT_FILE_PATH,url);delegate.run();return;}try{WebViewer.display(url,options);}catch(Exception e){ExceptionUtil.handle(e);return;}}else{action.setEnabled(false);}}"
  },
  {
    "code_smells": [],
    "source_code": "private Key[]getKeys(){Key[]keys=new Key[]{PREF_RESOURCE};return keys;}"
  },
  {
    "code_smells": [],
    "source_code": "private void setDataType(StyleEntry entry,Object value,String dataLocale){ULocale locale=getLocale(dataLocale);setDataType(entry,value,locale);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void openHyperlink(HyperlinkInfo info){if(info==null){return;}writer.openTag(\"w:hlink\");if(HyperlinkInfo.BOOKMARK==info.getType()){writer.attribute(\"w:bookmark\",info.getUrl());}else if(HyperlinkInfo.HYPERLINK==info.getType()){writer.attribute(\"w:dest\",info.getUrl());if(info.getBookmark()!=null){writer.attribute(\"w:bookmark\",info.getBookmark());}}if(info.getTooltip()!=null){writer.attribute(\"w:screenTip\",info.getTooltip());}}"
  },
  {
    "code_smells": [],
    "source_code": "public TextArea(ITextContent textContent,int offset,int baseLevel,int runLevel,FontInfo fontInfo){super(textContent);this.textContent=textContent;this.fi=fontInfo;height=(int)(fi.getWordHeight()*PDFConstants.LAYOUT_TO_PDF_RATIO);baseLine=this.fi.getBaseline();this.offset=offset;this.runLevel=runLevel;this.lineBreak=false;removePadding();removeBorder();removeMargin();}"
  },
  {
    "code_smells": [],
    "source_code": "private void createImageMapContainer(int x,int y,int width,int height,IHyperlinkAction link){ReportContent reportContent=(ReportContent)image.getReportContent();IContainerContent mapContent=reportContent.createContainerContent();mapContent.setHyperlinkAction(link);BlockContainerArea area=(BlockContainerArea)AreaFactory.createBlockContainer(mapContent);area.setPosition(x,y);area.setWidth(width);area.setHeight(height);root.addChild(area);}"
  },
  {
    "code_smells": [],
    "source_code": "public void endContainer(IContainerContent container)throws BirtException{_endContainer(container);}"
  },
  {
    "code_smells": [],
    "source_code": "public void visitOdaMeasure(OdaMeasure obj){DesignVisitorImpl.this.visitOdaMeasure(obj.handle(module));}"
  },
  {
    "code_smells": [],
    "source_code": "private ColorHandle doGetColorHandle(String memberName){return new ColorHandle(getElementHandle(),StructureContextUtil.createStructureContext(this,memberName));}"
  },
  {
    "code_smells": [],
    "source_code": "public String getLayoutString(){StringBuffer sb=new StringBuffer();sb.append(\"table \"+table.getFullName()+\" layout: \\r\\n\");sb.append(getHeader().getLayoutString());sb.append(getGroupHeaders().getLayoutString());sb.append(getDetail().getLayoutString());sb.append(getGroupFooters().getLayoutString());sb.append(getFooter().getLayoutString());sb.append(\"\\r\\n\");return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public String getBirtFilterExprDisplayName(){return birtFilterDisplayName;}"
  },
  {
    "code_smells": [],
    "source_code": "CssRecord(Module module,DesignElement element,CssStyleSheet css,boolean add,int pos){this.module=module;this.element=element;this.css=css;this.add=add;this.position=pos;}"
  },
  {
    "code_smells": [],
    "source_code": "public Object getProperty(String name){FactoryPropertyHandle factoryPropHandle=style.getFactoryPropertyHandle(name);if(factoryPropHandle==null)return null;return factoryPropHandle.getValue();}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isValidReferenceForCompoundElement(Module module,DesignElement element){ElementRefValue refValue=(ElementRefValue)element.getLocalProperty(module,IDesignElementModel.EXTENDS_PROP);if(refValue==null)return true;if(element.getDefn().isContainer()&& !refValue.isResolved())return false;DesignElement parent=element.getExtendsElement();while(parent!=null){if(!isValidReferenceForCompoundElement(parent.getRoot(),parent))return false;parent=parent.getExtendsElement();}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "private static String stripNamespace(String name,String namespace){if(name==null || namespace==null)return name;String tmpNamespace=StringUtil.extractNamespace(name);if(tmpNamespace==null)return name;if(!namespace.equalsIgnoreCase(tmpNamespace))return name;return StringUtil.extractName(name);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public CachingBuildActionExecuter<T>addProgressListener(org.gradle.tooling.events.ProgressListener listener,OperationType...operationTypes){this.cacheKey.markInvalid();this.delegate.addProgressListener(listener,operationTypes);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public static NetworkConfig createStandardFromStream(InputStream inStream){LOGGER.config(\"Creating standard network configuration properties from stream\");standard=new NetworkConfig();try{standard.load(inStream);}catch(IOException e){LOGGER.log(Level.WARNING,\"cannot load properties from stream:{0}\",e.getMessage());}return standard;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void processRTTmeasurement(long measuredRTT,Exchange exchange,int retransmissionCount){RemoteEndpoint endpoint=getRemoteEndpoint(exchange);int rtoType=endpoint.getExchangeEstimatorState(exchange);endpoint.setBlindStrong(false);endpoint.setBlindWeak(false);updateEstimator(measuredRTT,rtoType,endpoint);}"
  },
  {
    "code_smells": [],
    "source_code": "public CertificateMessage(X509Certificate[]certificateChain,InetSocketAddress peerAddress){super(peerAddress);if(certificateChain==null){throw new NullPointerException(\"Certificate chain must not be null\");}else{setCertificateChain(certificateChain);calculateLength();}}"
  },
  {
    "code_smells": [],
    "source_code": "public ContentHandle getContent(Node node)throws IOException{ContentHandle result=peekContent(node);if(result!=null){return result;}if(outstore!=null){installNpmModule(node);return outstore.getContent(node);}else{return stores[0].getContent(node);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public void main(List<JCCompilationUnit>trees){timer.startTask(\"prepareForTypeChecking\");prepareForTypeChecking(trees);timer.endTask();List<JCCompilationUnit>javaTrees=List.nil();List<JCCompilationUnit>ceylonTrees=List.nil();for(JCCompilationUnit tree : trees){if(tree instanceof CeylonCompilationUnit)ceylonTrees=ceylonTrees.prepend(tree);else javaTrees=javaTrees.prepend(tree);}timer.startTask(\"Enter on Java trees\");boolean needsModelReset=isBootstrap;if(!javaTrees.isEmpty()){setupImportedPackagesForJavaTrees(javaTrees);hasJavaAndCeylonSources=true;needsModelReset=true;}if(!compiler.isAddModuleTrees()){setupImportedPackagesForJavaTrees(ceylonTrees);}if(isBootstrap || hasJavaAndCeylonSources){super.main(trees);}List<JCCompilationUnit>packageInfo=completeCeylonTrees(trees);trees=trees.prependList(packageInfo);ceylonTrees=ceylonTrees.prependList(packageInfo);if(compiler.isHadRunTwiceException()){needsModelReset=true;}if(needsModelReset){resetAndRunEnterAgain(trees);}else{timer.startTask(\"Enter on Ceylon trees\");try{sourceLanguage.push(Language.CEYLON);super.main(ceylonTrees);}finally{sourceLanguage.pop();}timer.endTask();}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @TypeInfo(\"ceylon.language.meta.model::CallableConstructor<Type,Arguments>|ceylon.language::Null\")public CallableConstructor<Type,Arguments>getDefaultConstructor(){if(hasConstructors()|| hasEnumerated()){Object ctor=getConstructor($reifiedArguments,\"\");if(ctor instanceof CallableConstructor){return((CallableConstructor<Type,Arguments>)ctor);}else{return null;}}else{return new ClassInitializerConstructor<>(this);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int length(){return 2;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "Type asTuple(){final Type result;if(types.size()==0){result=unit.getEmptyType();}else{final Type sequentialType;if(variadic){Part part=new Part(\"Sequence\",Collections.singletonList(getLast()));sequentialType=loadType(\"ceylon.language\",atLeastOne ? \"ceylon.language.Sequence\" : \"ceylon.language.Sequential\",part,null);}else{sequentialType=unit.getEmptyType();}if(variadic && types.size()==1){result=sequentialType;}else{Part part=new Part();Type union=variadic ? getLast(): null;Type tupleType=sequentialType;int makeDefaulted=defaulted;for(int ii=types.size()-(variadic ? 2 : 1);ii>=0;ii--){Type t=types.get(ii);if(union!=null)union=ModelUtil.unionType(union,t,unit);else union=t;part.parameters=Arrays.asList(union,t,tupleType);part.name=\"Tuple\";tupleType=loadType(\"ceylon.language\",\"ceylon.language.Tuple\",part,null);if(makeDefaulted>0){makeDefaulted--;tupleType=union(Arrays.asList(unit.getEmptyType(),tupleType),unit);}}result=tupleType;}}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void configure(){bind(FactoryDao.class).to(JpaFactoryDao.class);bind(RemoveFactoriesBeforeUserRemovedEventSubscriber.class).asEagerSingleton();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "InitializeParams get(String id)throws LanguageServerException{InitializeParams initializeParams=new InitializeParams();LOG.debug(\"Initialize params constructing: started\");Boolean locality=localityRegistry.get(id);LOG.debug(\"Locality:{}\",locality);Integer processId=locality ? ProcessIdProvider.get(): null;initializeParams.setProcessId(processId);LOG.debug(\"Process id:{}\",processId);String projectsRoot=projectsRootRegistry.getOrNull(id);String rootPath;if(projectsRoot!=null){rootPath=projectsRoot;}else{rootPath=Paths.get(rootUri).toAbsolutePath().toString();}initializeParams.setRootPath(rootPath);LOG.debug(\"Root path:{}\",rootPath);String rootUri;if(projectsRoot!=null){rootUri=Paths.get(projectsRoot).toUri().toString();}else{rootUri=this.rootUri.toString();}initializeParams.setRootUri(rootUri);LOG.debug(\"Root URI:{}\",rootUri);ClientCapabilities capabilities=ClientCapabilitiesProvider.get();initializeParams.setCapabilities(capabilities);LOG.debug(\"Client capabilities:{}\",capabilities);String clientName=ClientCapabilitiesProvider.CLIENT_NAME;initializeParams.setClientName(clientName);LOG.debug(\"Client name:{}\",clientName);LOG.debug(\"Initialize params constructing: finished\");return initializeParams;}"
  },
  {
    "code_smells": [],
    "source_code": "public static final JsPromiseError create(final Throwable e){if(e==null){return create();}else{return createFromThrowable(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public SearchResultEntry(String filePath,List<OffsetData>data){this.filePath=filePath;this.data=data;}"
  },
  {
    "code_smells": [],
    "source_code": "public Element replaceWith(NewElement newElement){checkNotRemoved();notPermittedOnRootElement();requireNonNull(newElement,\"Required not null new element\");insertAfter(newElement);final Element inserted=getNextSibling();remove();return inserted;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void init(FilterConfig filterConfig)throws ServletException{}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void actionPerformed(ActionEvent e){final Resource[]resources=appContext.getResources();checkState(resources!=null && resources.length==1 && resources[0]instanceof Container);presenter.showDialog((Container)resources[0]);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Type<GutterClickHandler>getAssociatedType(){return TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public MouseEvent getEvent(){return event;}"
  },
  {
    "code_smells": [],
    "source_code": "private void initializePages(){initialCommandName=editedCommand.getName();pages.forEach(page->{page.edit(editedCommand);page.setDirtyStateListener(()->{updateDirtyState(isDirtyPage());view.setSaveEnabled(isDirtyPage());});});}"
  },
  {
    "code_smells": [],
    "source_code": "public void hide(){view.close();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onSelectionChanged(PreviewNode selectedNode){Either<ResourceChange,TextEdit>data=selectedNode.getData();if(data!=null && data.isLeft()){view.showDiff(null);return;}List<TextEdit>edits=collectTextEditsForSelectedNode(selectedNode);updateContentInCompareWidget(selectedNode,edits);}"
  },
  {
    "code_smells": [],
    "source_code": "@Inject public UsagesNode(@Assisted UsagesResponse response,NodeFactory nodeFactory,PromiseProvider promiseProvider,TreeStyles styles,JavaResources resources){this.response=response;this.nodeFactory=nodeFactory;this.promiseProvider=promiseProvider;this.resources=resources;this.styles=styles;}"
  },
  {
    "code_smells": [],
    "source_code": "private void addConfigPropertyToXML(String name,String value){if(configuration().containsKey(name)){pluginElement.getSingleChild(\"configuration\").getSingleChild(name).setText(value);}else if(configuration.isEmpty()){pluginElement.appendChild(createElement(\"configuration\",createElement(name,value)));}else{pluginElement.getSingleChild(\"configuration\").appendChild(createElement(name,value));}}"
  },
  {
    "code_smells": [],
    "source_code": "public Path removeLastSegments(int count){if(count==0)return this;if(count>=segments.length){return new Path(device,NO_SEGMENTS,separators &(HAS_LEADING | IS_UNC));}checkArgument(count>0);int newSize=segments.length-count;String[]newSegments=new String[newSize];System.arraycopy(this.segments,0,newSegments,0,newSize);return new Path(device,newSegments,separators &(HAS_LEADING | IS_UNC));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){if(this==obj){return true;}if(!(obj instanceof StatusMessage)){return false;}StatusMessage that=(StatusMessage)obj;return Objects.equals(message,that.message)&& Objects.equals(type,that.type)&& isAccessible==that.isAccessible;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String hoverBackgroundColor(){return \"rgba(215,215,215,0.12)\";}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public boolean hasMatchingKey(Node model1,Node model2){return keyProvider.getKey(model1).equals(keyProvider.getKey(model2));}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void onNodeSelected(TreeNodeElement<D>node,SignalEvent event){getSelectionModel().setTreeActive(true);selectNode(node.getData(),event,true);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static int getSiblingIndexWithClassName(Element element,String className){int index=0;while(element!=null){element=(Element)element.getPreviousSibling();if(element!=null && Elements.hasClassName(className,element)){++index;}}return index;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public String toString(){return \"ExecInfo{\"+\"id='\"+id+'\\''+\",container=\"+container+\",processConfig=\"+processConfig+\",openStdout='\"+openStdout+'\\''+\",openStderr='\"+openStderr+'\\''+\",openStdin='\"+openStdin+'\\''+\",running='\"+running+'\\''+\",exitCode='\"+exitCode+'\\''+'}';}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object o){if(this==o){return true;}if(!(o instanceof Key)){return false;}Key key=(Key)o;return annotationType.equals(key.annotationType)&& type.equals(key.type);}"
  },
  {
    "code_smells": [],
    "source_code": "private String resolve(String template)throws TemplateNotFoundException{try(Reader reader=new InputStreamReader(IoUtil.getResource(template))){return CharStreams.toString(reader);}catch(IOException e){throw new TemplateNotFoundException(e.getMessage(),e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected SystemPermissionsImpl getEntity(String userId,String instanceId)throws NotFoundException,ServerException{try{final List<SystemPermissionsImpl>existent=doGetByUser(userId);if(existent.isEmpty()){throw new NotFoundException(format(\"System permissions for user '%s' not found\",userId));}return existent.get(0);}catch(RuntimeException e){throw new ServerException(e.getMessage(),e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean hasNext(){return this.next;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean accept(Object anObject){return !this.collection.contains(anObject);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean allSatisfy(Predicate<? super T>predicate){return this.delegate.allSatisfy(new SelectAllSatisfyPredicate<>(this.predicate,predicate));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int size(){return 4;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public MutableList<V>toSortedList(){return this.getMutableMap().toSortedList();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public MutableSet<T>symmetricDifference(SetIterable<? extends T>setB){return this.getDelegate().symmetricDifference(setB);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean hasNext(){return this.currentIndex!=CodePointAdapter.this.adapted.length();}"
  },
  {
    "code_smells": [],
    "source_code": "public static<T>boolean removeIf(List<T>list,Predicate<? super T>predicate,Procedure<? super T>procedure){boolean changed=false;for(int i=0;i<list.size();i++){T each=list.get(i);if(predicate.accept(each)){procedure.value(each);list.remove(i--);changed=true;}}return changed;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "void cleanup(){for(final BundleWire requiredWire : requiredWires.getAllValues()){final ConciergeBundleWiring bw=((ConciergeBundleWire)requiredWire).providerWiring;if(bw!=null){bw.inUseSet.remove(revision);}}for(final BundleWire hostWire : providedWires.lookup(HostNamespace.HOST_NAMESPACE)){final ConciergeBundleWiring bw=((ConciergeBundleWire)hostWire).requirerWiring;if(bw!=null){bw.inUseSet.remove(revision);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public double[]getAnglesDegrees(){double[]angles=new double[]{Math.toDegrees(ang[0]),Math.toDegrees(ang[1])};return angles;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static Dataset[]generateCoordinates(Dataset angles,final double[]geometricParameters){if(geometricParameters.length!=PARAMETERS)throw new IllegalArgumentException(\"Need \"+PARAMETERS+\" parameters\");Dataset[]coords=new Dataset[2];DoubleDataset x=DatasetFactory.zeros(DoubleDataset.class,angles.getShape());DoubleDataset y=DatasetFactory.zeros(DoubleDataset.class,angles.getShape());coords[0]=x;coords[1]=y;final double ca=Math.cos(geometricParameters[2]);final double sa=Math.sin(geometricParameters[2]);final IndexIterator it=angles.getIterator();int i=0;while(it.hasNext()){final double t=angles.getElementDoubleAbs(it.index);final double ct=Math.cos(t);final double st=Math.sin(t);x.setAbs(i,geometricParameters[3]+geometricParameters[0]*ca*ct-geometricParameters[1]*sa*st);y.setAbs(i,geometricParameters[4]+geometricParameters[0]*sa*ct+geometricParameters[1]*ca*st);i++;}return coords;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public DataNode setBend_angle_x(IDataset bend_angle_x){return setDataset(NX_BEND_ANGLE_X,bend_angle_x);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public IDataset getComposition(){return getDataset(NX_COMPOSITION);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected UnresolvedPlaceholderException doBuild(final DittoHeaders dittoHeaders,@Nullable final String message,@Nullable final String description,@Nullable final Throwable cause,@Nullable final URI href){return new UnresolvedPlaceholderException(dittoHeaders,message,description,cause,href);}"
  },
  {
    "code_smells": [],
    "source_code": "@Nonnull @Override public RetrieveFeaturesLiveCommandAnswerBuilder answer(){return RetrieveFeaturesLiveCommandAnswerBuilderImpl.newInstance(this);}"
  },
  {
    "code_smells": [],
    "source_code": "public ImageFigure(){this(null,PositionConstants.CENTER);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void visit(DirectedGraph dg){CompoundDirectedGraph graph=(CompoundDirectedGraph)dg;NodeList roots=new NodeList();for(int i=0;i<graph.nodes.size();i++){Object node=graph.nodes.get(i);if(node instanceof Subgraph){Subgraph s=(Subgraph)node;Insets padding=dg.getPadding(s);s.head=new SubgraphBoundary(s,padding,0);s.tail=new SubgraphBoundary(s,padding,2);Edge headToTail=new Edge(s.head,s.tail);headToTail.weight=10;graph.edges.add(headToTail);graph.containment.add(headToTail);graph.subgraphs.add(s);if(s.getParent()==null)roots.add(s);if(s.members.size()==2)graph.edges.add(new Edge(s.head,s.tail));}}buildNestingTreeIndices(roots,0);convertSubgraphEndpoints(graph);addContainmentEdges(graph);replaceSubgraphsWithBoundaries(graph);}"
  },
  {
    "code_smells": [],
    "source_code": "public void copy(VisualizationResource otherResource){if(otherResource==null){return;}super.copy(otherResource);this.file=otherResource.file;this.path=otherResource.path;this.properties.clear();for(int i=0;i<otherResource.properties.size();i++){this.properties.add((VizEntry)otherResource.getProperties().get(i).clone());}this.isPicture=otherResource.isPicture;fileSetTitle=otherResource.fileSetTitle;host=otherResource.host;childrenResources.clear();childrenResources=(ArrayList<IVizResource>)otherResource.childrenResources.clone();fileSet=Arrays.copyOf(otherResource.fileSet,otherResource.fileSet.length);}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean labelNextToPort(final LPort dummyPort,final boolean placeNextToPortIfPossible){return placeNextToPortIfPossible && dummyPort.getIncomingEdges().isEmpty()&& dummyPort.getOutgoingEdges().isEmpty();}"
  },
  {
    "code_smells": [],
    "source_code": "public ThreeCornerLoopLabelPositionGenerator(final SelfLoopNode slNode){super(slNode);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public IAnnulusWedgeCriteria create(){switch(this){case LEAF_NUMBER: return new AnnulusWedgeByLeafs();case NODE_SIZE: return new AnnulusWedgeByNodeSpace();default: throw new IllegalArgumentException(\"No implementation is available for the layout option \"+this.toString());}}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mT__122()throws RecognitionException{try{int _type=T__122;int _channel=DEFAULT_TOKEN_CHANNEL;{match('|');}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void rule__MdCategory__Group_4_0__1__Impl()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getMdCategoryAccess().getLabelAssignment_4_0_1());}{pushFollow(FOLLOW_2);rule__MdCategory__LabelAssignment_4_0_1();state._fsp--;if(state.failed)return;}if(state.backtracking==0){after(grammarAccess.getMdCategoryAccess().getLabelAssignment_4_0_1());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void rule__XWhileExpression__Group__0__Impl()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0());}{}if(state.backtracking==0){after(grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0());}}}}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public static Bundle[]getFragments(Bundle bundle){if(packageAdmin==null)throw new IllegalStateException(\"Not started\");return packageAdmin.getFragments(bundle);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object other){if(other instanceof Vector3D){Vector3D o=(Vector3D)other;Point tmp=this.toPoint();if(tmp==null){return o.toPoint()==null;}return tmp.equals(o.toPoint());}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void test_contains_Point_BottomConcavePentagonTangentPoints(){assertFalse(\"This point is outside the pentagon\",CONCAVE_PENTAGON.contains(new Point(-1,4)));assertTrue(\"This point is inside the pentagon\",CONCAVE_PENTAGON.contains(new Point(1,4)));assertTrue(\"This point is inside the pentagon\",CONCAVE_PENTAGON.contains(new Point(5,4)));assertFalse(\"This point is outside the pentagon\",CONCAVE_PENTAGON.contains(new Point(9,4)));}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void test_getSize(){forRectangles(new IAction(){@Override public void action(Rectangle rect,Point tl,Point br){assertEquals(new Dimension(br.x-tl.x,br.y-tl.y),rect.getSize());}});}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object convertValue(final ActionFields e,final String value){if(STATUS.equals(e)){return convertStatusValue(value);}return value;}"
  },
  {
    "code_smells": [],
    "source_code": "private Pattern getPatternFindAnyCharacter(){final String regexCharacters=characters.stream().map(RegexChar::getRegExp).collect(Collectors.joining());final String regularExpression=String.format(\".*[%s]+.*\",regexCharacters);return Pattern.compile(regularExpression);}"
  },
  {
    "code_smells": [],
    "source_code": "public ActionCreatedEvent(){}"
  },
  {
    "code_smells": [],
    "source_code": "public void displayWarning(final String message){notificationMessage.showNotification(SPUIStyleDefinitions.SP_NOTIFICATION_WARNING_MESSAGE_STYLE,null,message,true);}"
  },
  {
    "code_smells": [],
    "source_code": "public MqttQoS getQos(){return qos;}"
  },
  {
    "code_smells": [],
    "source_code": "public final int getPort(){return port;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void get(final String tenantId,final String type,final String authId,final JsonObject clientContext,final Span span,final Handler<AsyncResult<CredentialsResult<JsonObject>>>resultHandler){Objects.requireNonNull(tenantId);Objects.requireNonNull(type);Objects.requireNonNull(authId);Objects.requireNonNull(resultHandler);final JsonObject data=getSingleCredentials(tenantId,authId,type,clientContext,span);if(data==null){resultHandler.handle(Future.succeededFuture(CredentialsResult.from(HttpURLConnection.HTTP_NOT_FOUND)));}else{resultHandler.handle(Future.succeededFuture(CredentialsResult.from(HttpURLConnection.HTTP_OK,data.copy(),CacheDirective.noCacheDirective())));}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Test public void checkAlternativeConstructor(){MasterDetailsPair mDetailsP;DataComponent dComponent;String MasterType1=\"TypeOne!\";dComponent=new DataComponent();dComponent.setName(MasterType1);IEntry entry=new StringEntry();dComponent.addEntry(entry);mDetailsP=new MasterDetailsPair(MasterType1,dComponent);assertEquals(MasterType1,mDetailsP.getMaster());assertTrue(dComponent.equals(mDetailsP.getDetails()));mDetailsP=new MasterDetailsPair(null,dComponent);assertNull(mDetailsP.getMaster());assertTrue(dComponent.equals(mDetailsP.getDetails()));mDetailsP=new MasterDetailsPair(MasterType1,null);assertEquals(MasterType1,mDetailsP.getMaster());assertNull(mDetailsP.getDetails());mDetailsP=new MasterDetailsPair(null,null);assertNull(mDetailsP.getMaster());assertNull(mDetailsP.getDetails());}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void checkEquality(){HeatExchanger component=new HeatExchanger();component.setInnerRadius(2.0);component.setLength(3.0);component.setNumElements(4);HeatExchanger equalComponent=new HeatExchanger();equalComponent.setInnerRadius(2.0);equalComponent.setLength(3.0);equalComponent.setNumElements(4);HeatExchanger transComponent=new HeatExchanger();transComponent.setInnerRadius(2.0);transComponent.setLength(3.0);transComponent.setNumElements(4);HeatExchanger unequalComponent=new HeatExchanger();assertFalse(component.equals(unequalComponent));assertFalse(unequalComponent.equals(component));assertFalse(component==null);assertFalse(component.equals(11));assertFalse(\"House Lannister\".equals(component));assertTrue(component.equals(component));assertTrue(component.equals(equalComponent)&& equalComponent.equals(component));if(component.equals(transComponent)&& transComponent.equals(equalComponent)){assertTrue(component.equals(equalComponent));}else{fail();}assertEquals(component.hashCode(),component.hashCode());assertEquals(component.hashCode(),equalComponent.hashCode());assertFalse(component.hashCode()==unequalComponent.hashCode());return;}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean notifyContent(ByteBuffer buffer){try{return listener.onContent(request,FCGI.StreamType.STD_OUT,buffer);}catch(Throwable x){if(LOG.isDebugEnabled())LOG.debug(\"Exception while invoking listener \"+listener,x);return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "public void directUpgrade(){if(state!=State.PREFACE)throw new IllegalStateException();prefaceParser.directUpgrade();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public AsyncContextEvent(Context context,AsyncContextState asyncContext,HttpChannelState state,Request baseRequest,ServletRequest request,ServletResponse response){super(null,request,response,null);_context=context;_asyncContext=asyncContext;_state=state;if(baseRequest.getAttribute(AsyncContext.ASYNC_REQUEST_URI)==null){String uri=(String)baseRequest.getAttribute(RequestDispatcher.FORWARD_REQUEST_URI);if(uri!=null){baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,uri);baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_CONTEXT_PATH));baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getAttribute(RequestDispatcher.FORWARD_SERVLET_PATH));baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getAttribute(RequestDispatcher.FORWARD_PATH_INFO));baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getAttribute(RequestDispatcher.FORWARD_QUERY_STRING));}else{baseRequest.setAttribute(AsyncContext.ASYNC_REQUEST_URI,baseRequest.getRequestURI());baseRequest.setAttribute(AsyncContext.ASYNC_CONTEXT_PATH,baseRequest.getContextPath());baseRequest.setAttribute(AsyncContext.ASYNC_SERVLET_PATH,baseRequest.getServletPath());baseRequest.setAttribute(AsyncContext.ASYNC_PATH_INFO,baseRequest.getPathInfo());baseRequest.setAttribute(AsyncContext.ASYNC_QUERY_STRING,baseRequest.getQueryString());}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return String.format(\"%s[i=%s,cb=%s]\",super.toString(),_info,_callback);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void findScheduler()throws Exception{if(_scheduler==null){if(_sessionIdManager instanceof DefaultSessionIdManager){_scheduler=((DefaultSessionIdManager)_sessionIdManager).getServer().getBean(Scheduler.class);}if(_scheduler==null){_scheduler=new ScheduledExecutorScheduler(String.format(\"Session-HouseKeeper-%x\",hashCode()),false);_ownScheduler=true;_scheduler.start();if(LOG.isDebugEnabled())LOG.debug(\"Using own scheduler for scavenging\");}else if(!_scheduler.isStarted())throw new IllegalStateException(\"Shared scheduler not started\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public BaseHome()throws IOException{this(new String[0]);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void failed(Throwable x){completeExceptionally(x);}"
  },
  {
    "code_smells": [],
    "source_code": "@ManagedAttribute(value=\"idletimeout in MS\",readonly=true)public long getIdleTimeoutMs(){if(_idleTimeUnit==null)return 0;return _idleTimeUnit.toMillis(_idleTime);}"
  },
  {
    "code_smells": [],
    "source_code": "public void setAsyncWriteTimeout(long ms){assertLessThan(\"AsyncWriteTimeout\",ms,\"IdleTimeout\",idleTimeout);this.asyncWriteTimeout=ms;}"
  },
  {
    "code_smells": [],
    "source_code": "@Deprecated public void setExecutor(Executor executor){this.httpClient.setExecutor(executor);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void copyHeaders(WebSocketFrame copy){finRsvOp=copy.finRsvOp;masked=copy.masked;mask=null;if(copy.mask!=null)mask=Arrays.copyOf(copy.mask,copy.mask.length);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return String.format(\"%s[requested=\\\"%s\\\",negotiated=\\\"%s\\\"]\",getClass().getSimpleName(),configRequested.getParameterizedName(),configNegotiated.getParameterizedName());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ByteBuffer getPayload(){if(!delegate.hasPayload()){return null;}return delegate.getPayload().asReadOnlyBuffer();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private static boolean resolveGenericRef(GenericRef ref,Class<?>clazz,Type type){if(type instanceof Class){if(type==ref.ifaceClass){ref.setGenericFromType(type,0);return true;}else{return resolveGenericRef(ref,type);}}if(type instanceof ParameterizedType){ParameterizedType ptype=(ParameterizedType)type;Type rawType=ptype.getRawType();if(rawType==ref.ifaceClass){ref.setGenericFromType(ptype.getActualTypeArguments()[0],0);return true;}else{return resolveGenericRef(ref,rawType);}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isPermissionErrorMessage(Throwable caught){if((caught instanceof GwtKapuaException)&& GwtKapuaErrorCode.SUBJECT_UNAUTHORIZED.equals(((GwtKapuaException)caught).getCode())){exitMessage=caught.getLocalizedMessage();return true;}else{return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getUserName(){return userName;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasPermission(String domain,GwtSessionPermissionAction action,GwtSessionPermissionScope targetScope){return hasPermission(new GwtSessionPermission(domain,action,targetScope));}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Override protected void onRender(Element parent,int index){super.onRender(parent,index);setLayout(new FitLayout());setBorders(false);initToolBar();initGrid();ContentPanel devicesBundlesPanel=new ContentPanel();devicesBundlesPanel.setBorders(false);devicesBundlesPanel.setBodyBorder(true);devicesBundlesPanel.setHeaderVisible(false);devicesBundlesPanel.setLayout(new FitLayout());devicesBundlesPanel.setScrollMode(Scroll.AUTO);devicesBundlesPanel.setTopComponent(toolBar);devicesBundlesPanel.add(grid);add(devicesBundlesPanel);initialized=true;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return getSchema()+\"://\"+getDns()+\":\"+getPort();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void delete(KapuaId scopeId,KapuaId groupId)throws KapuaException{ArgumentValidator.notNull(scopeId,\"scopeId\");ArgumentValidator.notNull(groupId,\"groupId\");AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(AuthorizationDomains.GROUP_DOMAIN,Actions.delete,scopeId));if(find(scopeId,groupId)==null){throw new KapuaEntityNotFoundException(Group.TYPE,groupId);}entityManagerSession.onTransactedAction(em->GroupDAO.delete(em,scopeId,groupId));}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void onKapuaEvent(ServiceEvent kapuaEvent)throws KapuaException{if(kapuaEvent==null){}LOG.info(\"GroupService: received kapua event from{},operation{}\",kapuaEvent.getService(),kapuaEvent.getOperation());if(\"account\".equals(kapuaEvent.getService())&& \"delete\".equals(kapuaEvent.getOperation())){deleteGroupByAccountId(kapuaEvent.getScopeId(),kapuaEvent.getEntityId());}}"
  },
  {
    "code_smells": [],
    "source_code": "@Then(\"^I find(\\\\d+)devices?$\")public void checkDeviceListLength(int cnt){Assert.assertNotNull(stepData.get(\"DeviceList\"));Assert.assertEquals(cnt,((DeviceListResultImpl)stepData.get(\"DeviceList\")).getSize());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public KapuaResponseMessage<?,?>publish(KapuaDataMessage requestMessage,Long timeout)throws KapuaException{ArgumentValidator.notNull(requestMessage.getScopeId(),\"scopeId\");ArgumentValidator.notNull(requestMessage.getDeviceId(),\"deviceId\");ArgumentValidator.notNull(requestMessage.getClientId(),\"clientId\");AUTHORIZATION_SERVICE.checkPermission(PERMISSION_FACTORY.newPermission(StreamDomains.STREAM_DOMAIN,Actions.write,requestMessage.getScopeId()));TransportFacade<?,?,TransportMessage<?,?>,?>transportFacade=null;try{Device device=DEVICE_REGISTRY_SERVICE.find(requestMessage.getScopeId(),requestMessage.getDeviceId());if(device==null){throw new KapuaEntityNotFoundException(Device.TYPE,requestMessage.getDeviceId());}String nodeUri=device.getConnection().getServerIp();transportFacade=borrowClient(nodeUri);Translator<KapuaDataMessage,KuraDataMessage>translatorKapuaKura=getTranslator(KapuaDataMessage.class,KuraDataMessage.class);Translator<KuraDataMessage,?>translatorKuraTransport=getTranslator(KuraDataMessage.class,transportFacade.getMessageClass());KuraDataMessage kuraDataMessage=translatorKapuaKura.translate(requestMessage);try{kuraDataMessage.setTimestamp(new Date());transportFacade.sendAsync((TransportMessage<?,?>)translatorKuraTransport.translate(kuraDataMessage));}catch(KapuaException e){throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CLIENT_SEND_ERROR,e,(Object[])null);}}catch(KapuaException ke){throw new KuraMqttDeviceCallException(KuraMqttDeviceCallErrorCodes.CALL_ERROR,ke,(Object[])null);}finally{if(transportFacade!=null){transportFacade.clean();}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public AdvertisingReportEventType getEventType(){return this.eventType;}"
  },
  {
    "code_smells": [],
    "source_code": "public String getDeviceDisplayName(){String displayName=\"\";if(this.properties==null){return displayName;}String deviceDisplayNameOption=(String)this.properties.get(DEVICE_DISPLAY_NAME);if(\"device-name\".equals(deviceDisplayNameOption)){displayName=this.systemService.getDeviceName();}else if(\"hostname\".equals(deviceDisplayNameOption)){displayName=this.systemService.getHostname();}else if(\"custom\".equals(deviceDisplayNameOption)&& this.properties.get(DEVICE_CUSTOM_NAME)instanceof String){displayName=(String)this.properties.get(DEVICE_CUSTOM_NAME);}else if(\"server\".equals(deviceDisplayNameOption)){displayName=\"\";}return displayName;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){final int prime=31;int result=1;result=prime*result+(this.alias==null ? 0 : this.alias.hashCode());result=prime*result+(this.ciphers==null ? 0 : this.ciphers.hashCode());result=prime*result+(this.hostnameVerification ? 1231 : 1237);result=prime*result+(this.keyStore==null ? 0 : this.keyStore.hashCode());result=prime*result+Arrays.hashCode(this.keyStorePassword);result=prime*result+(this.protocol==null ? 0 : this.protocol.hashCode());result=prime*result+(this.sslManagerOpts==null ? 0 : this.sslManagerOpts.hashCode());result=prime*result+(this.trustStore==null ? 0 : this.trustStore.hashCode());return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setBluetoothLeService(BluetoothLeService bluetoothLeService){this.bluetoothLeService=bluetoothLeService;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private void setModalFieldsTooltips(){this.tooltipInput.setTitle(MSGS.firewallPortForwardFormInboundInterfaceToolTip());this.tooltipOutput.setTitle(MSGS.firewallPortForwardFormOutboundInterfaceToolTip());this.tooltipLan.setTitle(MSGS.firewallPortForwardFormLanAddressToolTip());this.tooltipProtocol.setTitle(MSGS.firewallPortForwardFormProtocolToolTip());this.tooltipInternal.setTitle(MSGS.firewallPortForwardFormInternalPortToolTip());this.tooltipExternal.setTitle(MSGS.firewallPortForwardFormExternalPortToolTip());this.tooltipEnable.setTitle(MSGS.firewallPortForwardFormMasqueradingToolTip());this.tooltipPermittedNw.setTitle(MSGS.firewallPortForwardFormPermittedNetworkToolTip());this.tooltipPermittedMac.setTitle(MSGS.firewallPortForwardFormPermittedMacAddressToolTip());this.tooltipSource.setTitle(MSGS.firewallPortForwardFormSourcePortRangeToolTip());this.tooltipInput.reconfigure();this.tooltipOutput.reconfigure();this.tooltipLan.reconfigure();this.tooltipProtocol.reconfigure();this.tooltipExternal.reconfigure();this.tooltipInternal.reconfigure();this.tooltipEnable.reconfigure();this.tooltipPermittedNw.reconfigure();this.tooltipPermittedMac.reconfigure();this.tooltipSource.reconfigure();}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unused\")private String format(String s,Object[]arguments){if(arguments==null){return s;}int i=0;while(i<arguments.length){String delimiter=\"{\"+i+\"}\";while(s.contains(delimiter)){s=s.replace(delimiter,String.valueOf(arguments[i]));}i++;}return s;}"
  },
  {
    "code_smells": [],
    "source_code": "public int getObjectId(){return objectId;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "private void addDataAccessNodes(UaFolderNode rootNode){UaFolderNode dataAccessFolder=new UaFolderNode(getNodeContext(),newNodeId(\"HelloWorld/DataAccess\"),newQualifiedName(\"DataAccess\"),LocalizedText.english(\"DataAccess\"));getNodeManager().addNode(dataAccessFolder);rootNode.addOrganizes(dataAccessFolder);try{AnalogItemNode node=(AnalogItemNode)getNodeFactory().createNode(newNodeId(\"HelloWorld/DataAccess/AnalogValue\"),Identifiers.AnalogItemType,true);node.setBrowseName(newQualifiedName(\"AnalogValue\"));node.setDisplayName(LocalizedText.english(\"AnalogValue\"));node.setDataType(Identifiers.Double);node.setValue(new DataValue(new Variant(3.14d)));node.setEURange(new Range(0.0,100.0));getNodeManager().addNode(node);dataAccessFolder.addOrganizes(node);}catch(UaException e){logger.error(\"Error creating AnalogItemType instance:{}\",e.getMessage(),e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Nullable static Integer doubleToInt32(@Nonnull Double d){long rounded=Math.round(d);if(rounded>=Integer.MIN_VALUE && rounded<=Integer.MAX_VALUE){return(int)rounded;}else{return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Integer getOkResponse(){Optional<Integer>propertyValue=getProperty(DialogConditionType.OK_RESPONSE);return propertyValue.orElse(null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public PropertyNode getMaxNodesPerHistoryUpdateDataNode(){Optional<VariableNode>propertyNode=getPropertyNode(OperationLimitsType.MAX_NODES_PER_HISTORY_UPDATE_DATA);return(PropertyNode)propertyNode.orElse(null);}"
  },
  {
    "code_smells": [],
    "source_code": "private void buildNode1076()throws Exception{UaVariableNode node=new PropertyNode(this.context,NodeId.parse(\"ns=0;i=11692\"),new QualifiedName(0,\"OutputArguments\"),new LocalizedText(\"en\",\"OutputArguments\"),LocalizedText.NULL_VALUE,UInteger.valueOf(0L),UInteger.valueOf(0L),new DataValue(Variant.NULL_VALUE),NodeId.parse(\"ns=0;i=296\"),1,new UInteger[]{},UByte.valueOf(1),UByte.valueOf(1),0.0D,false);node.addReference(new Reference(NodeId.parse(\"ns=0;i=11692\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=11690\"),NodeClass.Method,false));node.addReference(new Reference(NodeId.parse(\"ns=0;i=11692\"),NodeId.parse(\"ns=0;i=40\"),ExpandedNodeId.parse(\"svr=0;i=68\"),NodeClass.VariableType,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=11692\"),NodeId.parse(\"ns=0;i=37\"),ExpandedNodeId.parse(\"svr=0;i=78\"),NodeClass.Object,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=11692\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=11690\"),NodeClass.Method,false));String valueXml;OpcUaXmlStreamDecoder decoder=new OpcUaXmlStreamDecoder(new StringReader(new String(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><ns2:ListOfExtensionObject xmlns=\\\"http://opcfoundation.org/BinarySchema/\\\" xmlns:ns2=\\\"http://opcfoundation.org/UA/2008/02/Types.xsd\\\" xmlns:ns3=\\\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\\\"><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Position</ns2:Name><ns2:DataType><ns2:Identifier>i=9</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\\\"true\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>\")));Object valueObject=decoder.readVariantValue();DataValue value=new DataValue(new Variant(valueObject));node.setValue(value);this.nodeManager.addNode(node);}"
  },
  {
    "code_smells": [],
    "source_code": "private void buildNode462()throws Exception{UaVariableNode node=new PropertyNode(this.context,NodeId.parse(\"ns=0;i=13969\"),new QualifiedName(0,\"InputArguments\"),new LocalizedText(\"en\",\"InputArguments\"),LocalizedText.NULL_VALUE,UInteger.valueOf(0L),UInteger.valueOf(0L),new DataValue(Variant.NULL_VALUE),NodeId.parse(\"ns=0;i=296\"),1,new UInteger[]{},UByte.valueOf(1),UByte.valueOf(1),0.0D,false);node.addReference(new Reference(NodeId.parse(\"ns=0;i=13969\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=13968\"),NodeClass.Method,false));node.addReference(new Reference(NodeId.parse(\"ns=0;i=13969\"),NodeId.parse(\"ns=0;i=40\"),ExpandedNodeId.parse(\"svr=0;i=68\"),NodeClass.VariableType,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=13969\"),NodeId.parse(\"ns=0;i=37\"),ExpandedNodeId.parse(\"svr=0;i=78\"),NodeClass.Object,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=13969\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=13968\"),NodeClass.Method,false));String valueXml;OpcUaXmlStreamDecoder decoder=new OpcUaXmlStreamDecoder(new StringReader(new String(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><ns2:ListOfExtensionObject xmlns=\\\"http://opcfoundation.org/BinarySchema/\\\" xmlns:ns2=\\\"http://opcfoundation.org/UA/2008/02/Types.xsd\\\" xmlns:ns3=\\\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\\\"><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>FileHandle</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\\\"true\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>\")));Object valueObject=decoder.readVariantValue();DataValue value=new DataValue(new Variant(valueObject));node.setValue(value);this.nodeManager.addNode(node);}"
  },
  {
    "code_smells": [],
    "source_code": "private void buildNode515()throws Exception{UaVariableNode node=new PropertyNode(this.context,NodeId.parse(\"ns=0;i=14143\"),new QualifiedName(0,\"InputArguments\"),new LocalizedText(\"en\",\"InputArguments\"),LocalizedText.NULL_VALUE,UInteger.valueOf(0L),UInteger.valueOf(0L),new DataValue(Variant.NULL_VALUE),NodeId.parse(\"ns=0;i=296\"),1,new UInteger[]{},UByte.valueOf(1),UByte.valueOf(1),0.0D,false);node.addReference(new Reference(NodeId.parse(\"ns=0;i=14143\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=14142\"),NodeClass.Method,false));node.addReference(new Reference(NodeId.parse(\"ns=0;i=14143\"),NodeId.parse(\"ns=0;i=40\"),ExpandedNodeId.parse(\"svr=0;i=68\"),NodeClass.VariableType,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=14143\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=14142\"),NodeClass.Method,false));String valueXml;OpcUaXmlStreamDecoder decoder=new OpcUaXmlStreamDecoder(new StringReader(new String(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><ns2:ListOfExtensionObject xmlns=\\\"http://opcfoundation.org/BinarySchema/\\\" xmlns:ns2=\\\"http://opcfoundation.org/UA/2008/02/Types.xsd\\\" xmlns:ns3=\\\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\\\"><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>FileHandle</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\\\"true\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"/></ns2:Argument></ns2:Body></ns2:ExtensionObject><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Position</ns2:Name><ns2:DataType><ns2:Identifier>i=9</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\\\"true\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>\")));Object valueObject=decoder.readVariantValue();DataValue value=new DataValue(new Variant(valueObject));node.setValue(value);this.nodeManager.addNode(node);}"
  },
  {
    "code_smells": [],
    "source_code": "private void buildNode79()throws Exception{UaVariableNode node=new DataTypeDescriptionNode(this.context,NodeId.parse(\"ns=0;i=8567\"),new QualifiedName(0,\"ContentFilter\"),new LocalizedText(\"en\",\"ContentFilter\"),LocalizedText.NULL_VALUE,UInteger.valueOf(0L),UInteger.valueOf(0L),new DataValue(Variant.NULL_VALUE),NodeId.parse(\"ns=0;i=12\"),-1,new UInteger[]{},UByte.valueOf(1),UByte.valueOf(1),0.0D,false);node.addReference(new Reference(NodeId.parse(\"ns=0;i=8567\"),NodeId.parse(\"ns=0;i=39\"),ExpandedNodeId.parse(\"svr=0;i=587\"),NodeClass.Object,false));node.addReference(new Reference(NodeId.parse(\"ns=0;i=8567\"),NodeId.parse(\"ns=0;i=47\"),ExpandedNodeId.parse(\"svr=0;i=8252\"),NodeClass.Variable,false));node.addReference(new Reference(NodeId.parse(\"ns=0;i=8567\"),NodeId.parse(\"ns=0;i=40\"),ExpandedNodeId.parse(\"svr=0;i=69\"),NodeClass.VariableType,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=8567\"),NodeId.parse(\"ns=0;i=47\"),ExpandedNodeId.parse(\"svr=0;i=8252\"),NodeClass.Variable,false));String valueXml;OpcUaXmlStreamDecoder decoder=new OpcUaXmlStreamDecoder(new StringReader(new String(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><ns2:String xmlns=\\\"http://opcfoundation.org/BinarySchema/\\\" xmlns:ns2=\\\"http://opcfoundation.org/UA/2008/02/Types.xsd\\\" xmlns:ns3=\\\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\\\">//xs:element[@name='ContentFilter']</ns2:String>\")));Object valueObject=decoder.readVariantValue();DataValue value=new DataValue(new Variant(valueObject));node.setValue(value);this.nodeManager.addNode(node);}"
  },
  {
    "code_smells": [],
    "source_code": "private void buildNode80()throws Exception{UaVariableNode node=new PropertyNode(this.context,NodeId.parse(\"ns=0;i=12664\"),new QualifiedName(0,\"InputArguments\"),new LocalizedText(\"en\",\"InputArguments\"),LocalizedText.NULL_VALUE,UInteger.valueOf(0L),UInteger.valueOf(0L),new DataValue(Variant.NULL_VALUE),NodeId.parse(\"ns=0;i=296\"),1,new UInteger[]{},UByte.valueOf(1),UByte.valueOf(1),0.0D,false);node.addReference(new Reference(NodeId.parse(\"ns=0;i=12664\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=12663\"),NodeClass.Method,false));node.addReference(new Reference(NodeId.parse(\"ns=0;i=12664\"),NodeId.parse(\"ns=0;i=40\"),ExpandedNodeId.parse(\"svr=0;i=68\"),NodeClass.VariableType,true));node.addReference(new Reference(NodeId.parse(\"ns=0;i=12664\"),NodeId.parse(\"ns=0;i=46\"),ExpandedNodeId.parse(\"svr=0;i=12663\"),NodeClass.Method,false));String valueXml;OpcUaXmlStreamDecoder decoder=new OpcUaXmlStreamDecoder(new StringReader(new String(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?><ns2:ListOfExtensionObject xmlns=\\\"http://opcfoundation.org/BinarySchema/\\\" xmlns:ns2=\\\"http://opcfoundation.org/UA/2008/02/Types.xsd\\\" xmlns:ns3=\\\"http://opcfoundation.org/UA/2011/03/UANodeSet.xsd\\\"><ns2:ExtensionObject><ns2:TypeId><ns2:Identifier>i=297</ns2:Identifier></ns2:TypeId><ns2:Body><ns2:Argument><ns2:Name>Masks</ns2:Name><ns2:DataType><ns2:Identifier>i=7</ns2:Identifier></ns2:DataType><ns2:ValueRank>-1</ns2:ValueRank><ns2:ArrayDimensions/><ns2:Description xsi:nil=\\\"true\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"/></ns2:Argument></ns2:Body></ns2:ExtensionObject></ns2:ListOfExtensionObject>\")));Object valueObject=decoder.readVariantValue();DataValue value=new DataValue(new Variant(valueObject));node.setValue(value);this.nodeManager.addNode(node);}"
  },
  {
    "code_smells": [],
    "source_code": "public UInteger getNodeClassMask(){return nodeClassMask;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ContentFilter decode(UaDecoder decoder)throws UaSerializationException{ContentFilterElement[]elements=decoder.readBuiltinStructArray(\"Elements\",ContentFilterElement.class);return new ContentFilter(elements);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return MoreObjects.toStringHelper(this).add(\"Affected\",affected).add(\"AffectedType\",affectedType).add(\"Verb\",verb).toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public NodeId getTypeId(){return TypeId;}"
  },
  {
    "code_smells": [],
    "source_code": "private static Map<String,String>load(){Map<String,String>attributes=Maps.newConcurrentMap();for(URI uri : uris()){try{attributes.putAll(load(uri.toURL()));}catch(Throwable t){logger.error(\"load(): '{}' failed\",uri,t);}}return attributes;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void registerProjectsToFileBasedWorkspace(Iterable<URI>projectURIs,FileBasedWorkspace workspace)throws N4JSCompileException{Map<String,URI>registeredProjects=new HashMap<>();workspace.getAllProjectLocationsIterator().forEachRemaining(uri->{String projectName=workspace.getProjectDescription(uri).getProjectName();registeredProjects.put(projectName,URIUtils.normalize(uri));});for(URI uri : projectURIs){URI projectURI=URIUtils.normalize(uri);final ProjectDescription projectDescription=projectDescriptionLoader.loadProjectDescriptionAtLocation(projectURI);if(projectDescription==null){throw new N4JSCompileException(\"Cannot load project description for project at \"+projectURI.toFileString()+\".Make sure the project contains a valid package.json file.\");}final String projectName=projectDescription.getProjectName();if(skipRegistering(projectName,projectURI,registeredProjects)){if(logger!=null && logger.isCreateDebugOutput()){logger.debug(\"Skipping already registered project '\"+projectURI+\"'\");}continue;}try{if(logger!=null && logger.isCreateDebugOutput()){logger.debug(\"Registering project '\"+projectURI+\"'\");}workspace.registerProject(projectURI);registeredProjects.put(projectName,projectURI);}catch(N4JSBrokenProjectException e){throw new N4JSCompileException(\"Unable to register project '\"+projectURI+\"'\",e);}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void eSet(int featureID,Object newValue){switch(featureID){case DomPackage.CONTENT_NODE__OWNER: setOwner((Composite)newValue);return;}super.eSet(featureID,newValue);}"
  },
  {
    "code_smells": [],
    "source_code": "public TagTitle getTitle(){return title;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void beginTask(String name,int totalWork){monitor.beginTask(name,totalWork);fireMsgString(name);}"
  },
  {
    "code_smells": [],
    "source_code": "public final void synpred201_InternalN4JSParser_fragment()throws RecognitionException{{{{}{{pushFollow(FOLLOW_2);ruleEqualityOperator();state._fsp--;if(state.failed)return;}}}}}"
  },
  {
    "code_smells": [],
    "source_code": "public WILDCARDElements getWILDCARDAccess(){return pWILDCARD;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void sequence_JSXSpreadAttribute(ISerializationContext context,JSXSpreadAttribute semanticObject){if(errorAcceptor!=null){if(transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION)==ValueTransient.YES)errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.JSX_SPREAD_ATTRIBUTE__EXPRESSION));}SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);feeder.accept(grammarAccess.getJSXSpreadAttributeAccess().getExpressionAssignmentExpressionParserRuleCall_2_0(),semanticObject.getExpression());feeder.finish();}"
  },
  {
    "code_smells": [],
    "source_code": "public Group getGroup_1_1(){return cGroup_1_1;}"
  },
  {
    "code_smells": [],
    "source_code": "private int countN4JSResourcesBuiltIn(ResourceSet resSet){int n=0;for(Resource res : resSet.getResources()){if(isBuiltInResource(res)){n++;}}return n;}"
  },
  {
    "code_smells": [],
    "source_code": "public void markAsToHoist(FunctionDeclaration element){tag(Tag.toHoist,element);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void eUnset(int featureID){switch(featureID){case TypesPackage.TCONSTABLE_ELEMENT__CONST: setConst(CONST_EDEFAULT);return;case TypesPackage.TCONSTABLE_ELEMENT__COMPILE_TIME_VALUE: setCompileTimeValue(COMPILE_TIME_VALUE_EDEFAULT);return;}super.eUnset(featureID);}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__DefaultFormalParameter__HasInitializerAssignmentAssignment_0()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());}{if(state.backtracking==0){before(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());}match(input,EqualsSign,FOLLOW_2);if(state.failed)return;if(state.backtracking==0){after(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());}}if(state.backtracking==0){after(grammarAccess.getDefaultFormalParameterAccess().getHasInitializerAssignmentEqualsSignKeyword_0_0());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mClass()throws RecognitionException{try{int _type=Class;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"class\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mFullStop()throws RecognitionException{try{int _type=FullStop;int _channel=DEFAULT_TOKEN_CHANNEL;{match('.');}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mThis_1()throws RecognitionException{try{int _type=This_1;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"this\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public static Control createCustomAreaWithLink(final Composite parent,final Dialog dialog,final Binary binary){final String binaryLabel=binary.getLabel();final String prefix=\"The requested operation cannot be performed due to invalid '\"+binaryLabel+\"' settings.Check your '\"+binaryLabel+\"' configuration and preferences under the corresponding \";final String link=\"preference page\";final String suffix=\".\";final String text=prefix+link+suffix;final Composite control=new Composite(parent,NONE);control.setLayout(GridLayoutFactory.fillDefaults().create());final GridData gridData=GridDataFactory.fillDefaults().align(LEFT,TOP).grab(true,true).create();control.setLayoutData(gridData);final StyleRange style=new StyleRange();style.underline=true;style.underlineStyle=UNDERLINE_LINK;final StyledText styledText=new StyledText(control,MULTI | READ_ONLY | WRAP);styledText.setWordWrap(true);styledText.setJustify(true);styledText.setText(text);final GridData textGridData=GridDataFactory.fillDefaults().align(FILL,FILL).grab(true,true).create();textGridData.widthHint=TEXT_WIDTH_HINT;textGridData.heightHint=TEXT_HEIGHT_HINT;styledText.setLayoutData(textGridData);styledText.setEditable(false);styledText.setBackground(UIUtils.getSystemColor(COLOR_WIDGET_BACKGROUND));final int[]ranges={text.indexOf(link),link.length()};final StyleRange[]styles={style};styledText.setStyleRanges(ranges,styles);styledText.addMouseListener(new MouseAdapter(){@Override public void mouseDown(final MouseEvent event){try{final int offset=styledText.getOffsetAtPoint(new Point(event.x,event.y));final StyleRange actualStyle=offset>=0 ? styledText.getStyleRangeAtOffset(offset): null;if(null!=actualStyle && actualStyle.underline && UNDERLINE_LINK==actualStyle.underlineStyle){dialog.close();final PreferenceDialog preferenceDialog=createPreferenceDialogOn(UIUtils.getShell(),BinariesPreferencePage.ID,FILTER_IDS,null);if(null!=preferenceDialog){preferenceDialog.open();}}}catch(final IllegalArgumentException e){}}});return control;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void norm1_AnnotatedExpression__Group_1_1__0__Impl()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0());}{}if(state.backtracking==0){after(grammarAccess.getAnnotatedExpressionAccess().getFunctionExpressionAnnotationListAction_1_1_0());}}}}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void norm1_LogicalORExpression__Group_1_0_0__1()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FOLLOW_2);norm1_LogicalORExpression__Group_1_0_0__1__Impl();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void norm3_RelationalExpression__Group__1__Impl()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getRelationalExpressionAccess().getGroup_1());}loop421: do{int alt421=2;int LA421_0=input.LA(1);if((LA421_0==GreaterThanSign)){int LA421_2=input.LA(2);if(((LA421_2>=Intersection && LA421_2<=Implements)||(LA421_2>=Promisify && LA421_2<=Abstract)||(LA421_2>=External && LA421_2<=Function)||(LA421_2>=Private && LA421_2<=Delete)|| LA421_2==Public || LA421_2==Static ||(LA421_2>=Target && LA421_2<=Await)|| LA421_2==Class ||(LA421_2>=False && LA421_2<=Super)|| LA421_2==Union || LA421_2==This ||(LA421_2>=From && LA421_2<=Void)||(LA421_2>=Get && LA421_2<=Set)|| LA421_2==PlusSignPlusSign || LA421_2==HyphenMinusHyphenMinus || LA421_2==SolidusEqualsSign || LA421_2==As || LA421_2==Of || LA421_2==ExclamationMark || LA421_2==LeftParenthesis || LA421_2==PlusSign || LA421_2==HyphenMinus || LA421_2==Solidus ||(LA421_2>=LessThanSign && LA421_2<=EqualsSign)||(LA421_2>=CommercialAt && LA421_2<=LeftSquareBracket)|| LA421_2==LeftCurlyBracket || LA421_2==Tilde || LA421_2==RULE_DOUBLE ||(LA421_2>=RULE_HEX_INT && LA421_2<=RULE_LEGACY_OCTAL_INT)|| LA421_2==RULE_SCIENTIFIC_INT || LA421_2==RULE_IDENTIFIER || LA421_2==RULE_STRING ||(LA421_2>=RULE_TEMPLATE_HEAD && LA421_2<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)|| LA421_2==RULE_INT)){alt421=1;}}else if((LA421_0==Instanceof || LA421_0==LessThanSignEqualsSign || LA421_0==In || LA421_0==LessThanSign)){alt421=1;}switch(alt421){case 1:{pushFollow(FOLLOW_126);norm3_RelationalExpression__Group_1__0();state._fsp--;if(state.failed)return;}break;default: break loop421;}}while(true);if(state.backtracking==0){after(grammarAccess.getRelationalExpressionAccess().getGroup_1());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__FunctionTypeExpressionOLD__Group__9()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FOLLOW_2);rule__FunctionTypeExpressionOLD__Group__9__Impl();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mAsteriskEqualsSign()throws RecognitionException{try{int _type=AsteriskEqualsSign;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"*=\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void synpred200_InternalN4JSParser_fragment()throws RecognitionException{{{{{pushFollow(FOLLOW_2);ruleEqualityOperator();state._fsp--;if(state.failed)return;}}}}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Optional<URI>getProjectDescriptionLocation(){if(checkExists()&&((getLocation().isPlatformResource()&& URIUtils.isPlatformResourceUriPointingToProject(getLocation()))|| isExternal())){return fromNullable(getLocation().appendSegment(IN4JSProject.PACKAGE_JSON));}else{return absent();}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public void delete(UserInfo user)throws CoreException{JSONObject sites=getSites(user);if(!sites.has(getId())){return;}sites.remove(getId());user.setProperty(SiteConfigurationConstants.KEY_SITE_CONFIGURATIONS,sites.toString());OrionConfiguration.getMetaStore().updateUser(user);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public Builder mergeFrom(com.google.protobuf.CodedInputStream input,com.google.protobuf.ExtensionRegistryLite extensionRegistry)throws java.io.IOException{com.google.protobuf.UnknownFieldSet.Builder unknownFields=com.google.protobuf.UnknownFieldSet.newBuilder(this.getUnknownFields());while(true){int tag=0;try{tag=input.readTag();}catch(Exception e){}switch(tag){case 0: this.setUnknownFields(unknownFields.build());onChanged();return this;default:{if(!parseUnknownField(input,unknownFields,extensionRegistry,tag)){this.setUnknownFields(unknownFields.build());onChanged();return this;}break;}case 10:{bitField0_ |=0x00000001;message_=input.readBytes();break;}case 16:{int rawValue=input.readEnum();org.eclipse.orion.server.cf.loggregator.LoggregatorMessage.Message.MessageType value=org.eclipse.orion.server.cf.loggregator.LoggregatorMessage.Message.MessageType.valueOf(rawValue);if(value==null){unknownFields.mergeVarintField(2,rawValue);}else{bitField0_ |=0x00000002;messageType_=value;}break;}case 24:{bitField0_ |=0x00000004;timestamp_=input.readSInt64();break;}case 34:{bitField0_ |=0x00000008;appId_=input.readBytes();break;}case 50:{bitField0_ |=0x00000010;sourceId_=input.readBytes();break;}case 58:{ensureDrainUrlsIsMutable();drainUrls_.add(input.readBytes());break;}case 66:{bitField0_ |=0x00000040;sourceName_=input.readBytes();break;}}}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "protected boolean downloadLog(HttpServletRequest request,HttpServletResponse response,ILogService logService,String appenderName)throws ServletException{FileAppender<ILoggingEvent>appender=logService.getFileAppender(appenderName);if(appender==null){String msg=NLS.bind(\"Appender not found:{0}\",appenderName);final ServerStatus error=new ServerStatus(IStatus.ERROR,HttpServletResponse.SC_NOT_FOUND,msg,null);return statusHandler.handleRequest(request,response,error);}File logFile=new File(appender.getFile());try{LogUtils.provideLogFile(logFile,response);}catch(Exception ex){String msg=NLS.bind(\"An error occured when looking for log{0}.\",logFile.getName());final ServerStatus error=new ServerStatus(IStatus.ERROR,HttpServletResponse.SC_INTERNAL_SERVER_ERROR,msg,ex);LogHelper.log(error);return statusHandler.handleRequest(request,response,error);}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public String deleteMapping(final String channelId,final String name){if(!this.idToNameMap.containsEntry(channelId,name)){return null;}this.nameToIdMap.remove(name);this.idToNameMap.remove(channelId,name);final Collection<String>names=this.model.getNameMap().get(channelId);if(names!=null){names.remove(name);}return channelId;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){final int prime=31;int result=1;result=prime*result+(this.predicate==null ? 0 : this.predicate.hashCode());return result;}"
  },
  {
    "code_smells": [],
    "source_code": "private void processImportBundle(final BundleInformation result,final Attributes ma){for(final AttributedValue av : emptyNull(Headers.parseList(ma.getValue(Constants.REQUIRE_BUNDLE)))){final String name=av.getValue();final String vs=av.getAttributes().get(\"bundle-version\");VersionRange vr=null;if(vs!=null){vr=new VersionRange(vs);}final boolean optional=\"optional\".equals(av.getAttributes().get(\"resolution\"));final boolean reexport=\"reexport\".equals(av.getAttributes().get(\"visibility\"));result.getBundleRequirements().add(new BundleRequirement(name,vr,optional,reexport));}}"
  },
  {
    "code_smells": [],
    "source_code": "public Optional<UserEntity>getUser(final String userId){return Optional.ofNullable(this.userMap.get(userId));}"
  },
  {
    "code_smells": [],
    "source_code": "public InstantTypeAdapter(final DateTimeFormatter formatter){this.formatter=formatter.withLocale(Locale.US);}"
  },
  {
    "code_smells": [],
    "source_code": "public static SignatureProcessor payloadSize(){return new SignatureProcessor(){private long archiveSize;@Override public void init(final long archiveSize){this.archiveSize=archiveSize;}@Override public void feedHeader(final ByteBuffer header){}@Override public void feedPayloadData(final ByteBuffer data){}@Override public void finish(final Header<RpmSignatureTag>signature){signature.putSize(this.archiveSize,RpmSignatureTag.PAYLOAD_SIZE,RpmSignatureTag.LONGARCHIVESIZE);}};}"
  },
  {
    "code_smells": [],
    "source_code": "protected MqttDeliveryToken restoreToken(MqttPublish message){final String methodName=\"restoreToken\";MqttDeliveryToken token;synchronized(tokens){String key=Integer.toString(message.getMessageId());if(this.tokens.containsKey(key)){token=(MqttDeliveryToken)this.tokens.get(key);log.fine(CLASS_NAME,methodName,\"302\",new Object[]{key,message,token});}else{token=new MqttDeliveryToken(logContext);token.internalTok.setKey(key);this.tokens.put(key,token);log.fine(CLASS_NAME,methodName,\"303\",new Object[]{key,message,token});}}return token;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected byte[]getVariableHeader()throws MqttException{try{ByteArrayOutputStream baos=new ByteArrayOutputStream();DataOutputStream outputStream=new DataOutputStream(baos);outputStream.writeShort(msgId);byte[]identifierValueFieldsByteArray=this.properties.encodeProperties();outputStream.write(identifierValueFieldsByteArray);outputStream.flush();return baos.toByteArray();}catch(IOException ioe){throw new MqttException(ioe);}}"
  },
  {
    "code_smells": [],
    "source_code": "public QueueCursor(int capacity){this(capacity,false);}"
  },
  {
    "code_smells": [],
    "source_code": "public IRIFunction(ValueExpr arg){super(arg);}"
  },
  {
    "code_smells": [],
    "source_code": "public BufferedGroupingRDFHandler(RDFHandler...handlers){this(DEFAULT_BUFFER_SIZE,handlers);}"
  },
  {
    "code_smells": [],
    "source_code": "public String[]getPath(final TreeItem swtTreeItem){return Display.syncExec(new ResultRunnable<String[]>(){@Override public String[]run(){org.eclipse.swt.widgets.TreeItem swttiDummy=swtTreeItem;LinkedList<String>items=new LinkedList<String>();while(swttiDummy!=null){items.addFirst(swttiDummy.getText());swttiDummy=swttiDummy.getParentItem();}return items.toArray(new String[0]);}});}"
  },
  {
    "code_smells": [],
    "source_code": "public String addVariableOnClasspath(String name,String value,boolean overwriteIfExists){log.info(\"Adding variable on Classpath: \"+name+\"=\"+value);activateLibrariesTab();getLibraryTree().getItem(\"Classpath\").select();return addVariableShared(name,value,overwriteIfExists);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean appliesToPartially(GenerationSimpleRule rule,int i){if(rule instanceof ButtonRule &&((((ButtonRule)rule).getStyle()& SWT.CHECK)!=0)){if(i==0){bRule=(ButtonRule)rule;}if(bRule.equals(rule)){return true;}return false;}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "private BundleEvent initializeEvent(Bundle bundle){switch(bundle.getState()){case Bundle.INSTALLED: return new BundleEvent(BundleEvent.INSTALLED,bundle);case Bundle.RESOLVED: return new BundleEvent(BundleEvent.RESOLVED,bundle);default: return new BundleEvent(BundleEvent.STARTED,bundle);}}"
  },
  {
    "code_smells": [],
    "source_code": "private static String getInputLabel(TranslationProvider i18nProvider,Bundle bundle,String moduleTypeUID,String inputName,String defaultLabel,Locale locale){String key=I18nUtil.stripConstantOr(defaultLabel,()->inferInputKey(moduleTypeUID,inputName,\"label\"));return i18nProvider.getText(bundle,key,defaultLabel,locale);}"
  },
  {
    "code_smells": [],
    "source_code": "public SunZodiac getZodiac(Calendar calendar){int year=calendar.get(Calendar.YEAR);List<SunZodiac>zodiacs=zodiacsByYear.get(year);if(zodiacs==null){zodiacs=calculateZodiacs(year);zodiacsByYear.clear();zodiacsByYear.put(year,zodiacs);}for(SunZodiac zodiac : zodiacs){if(zodiac.isValid(calendar)){return zodiac;}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public SensorEnum getSensorType(Short sensorIndex){if(sensorIndex!=null){DeviceSensorValue devSenVal=getDeviceSensorValue(sensorIndex);return devSenVal!=null ? devSenVal.getSensorType(): null;}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean supportsSensorType(SensorEnum sensorType){if(sensorType!=null){return getSensorTypes().contains(sensorType);}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public LifxLightStateChanger(LifxLightContext context,LifxLightCommunicationHandler communicationHandler){this.logId=context.getLogId();this.product=context.getProduct();this.fadeTime=context.getConfiguration().getFadeTime();this.pendingLightState=context.getPendingLightState();this.scheduler=context.getScheduler();this.communicationHandler=communicationHandler;}"
  },
  {
    "code_smells": [],
    "source_code": "public Double[]getPrecipitation(){return precipitation;}"
  },
  {
    "code_smells": [],
    "source_code": "SetAudioVolume(int zone,int volume,int min,int max){super(\"setAudioVolume\",\"1.1\");long scaled_volume=scaleVolume(volume,min,max);params=new Param[]{new Param(scaled_volume,zone)};}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setState(State state){if(isAcceptedState(acceptedDataTypes,state)){super.setState(state);}else{logSetTypeError(state);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return getType()+\"=\"+getIdentifier();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void removeProfileTypeProvider(ProfileTypeProvider profileTypeProvider){profileTypeProviders.remove(profileTypeProvider);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static String executeUrl(String httpMethod,String url,Properties httpHeaders,InputStream content,String contentType,int timeout)throws IOException{final ProxyParams proxyParams=prepareProxyParams();return executeUrl(httpMethod,url,httpHeaders,content,contentType,timeout,proxyParams.proxyHost,proxyParams.proxyPort,proxyParams.proxyUser,proxyParams.proxyPassword,proxyParams.nonProxyHosts);}"
  },
  {
    "code_smells": [],
    "source_code": "private URI map(String pathWithScheme){java.net.URI javaNetUri=toURI(pathWithScheme,clientLocation);logger.trace(\"Going to map path{}\",javaNetUri);URI ret=URI.createURI(toPathAsInXtext212(javaNetUri));logger.trace(\"Mapped path{}to{}\",pathWithScheme,ret);return ret;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "static public Object postUpdate(String itemName,String stateString){ItemRegistry registry=ScriptServiceUtil.getItemRegistry();EventPublisher publisher=ScriptServiceUtil.getEventPublisher();if(publisher!=null && registry!=null){try{Item item=registry.getItem(itemName);State state=TypeParser.parseState(item.getAcceptedDataTypes(),stateString);if(state!=null){publisher.post(ItemEventFactory.createStateEvent(itemName,state));}else{}}catch(ItemNotFoundException e){}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void caseTRParen(@SuppressWarnings(\"unused\")TRParen node){this.index=9;}"
  },
  {
    "code_smells": [],
    "source_code": "public CordovaCLIResult version(final IProgressMonitor monitor)throws CoreException{final CordovaCLIStreamListener streamListener=new CordovaCLIStreamListener();IProcess process=startShell(streamListener,monitor,getLaunchConfiguration(\"cordova-version\"));String cordovaCommand=\"cordova-version\\n\";sendCordovaCommand(process,cordovaCommand,monitor);CordovaCLIResult result=new CordovaCLIResult(streamListener.getMessage());return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setStackTraceTexts(String[]texts){if(texts==null){this.texts=null;}else{this.texts=texts.clone();}}"
  },
  {
    "code_smells": [],
    "source_code": "public static Class<Float[]>call(Float[]param){return Float[].class;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public void unitKept(IInstallableUnit unit){super.unitKept(unit);logger.debug(\" Keeping unit \"+unit.getId()+\"/\"+unit.getVersion());}"
  },
  {
    "code_smells": [],
    "source_code": "ProductVersionExpansionRun(P2TargetPlatform targetPlatform,File productFile){this.targetPlatform=targetPlatform;this.productFile=productFile;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean removeInstallableUnits(Collection<IInstallableUnit>installableUnits){throw new UnsupportedOperationException();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private Object getApplicationToRun(String[]args)throws CoreException{String configuredApplication=getConfiguredApplication(args);if(configuredApplication==null){configuredApplication=DEFAULT_APP_3_0;}else{}IExtension extension=Platform.getExtensionRegistry().getExtension(Platform.PI_RUNTIME,Platform.PT_APPLICATIONS,configuredApplication);if(extension==null){return null;}IConfigurationElement[]elements=extension.getConfigurationElements();if(elements.length>0){IConfigurationElement[]runs=elements[0].getChildren(\"run\");if(runs.length>0){return runs[0].createExecutableExtension(\"class\");}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public Collection<String>getAdded(){return added;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){final int prime=31;int result=1;result=prime*result+((model==null)? 0 : model.hashCode());result=prime*result+((parent==null)? 0 : parent.hashCode());result=prime*result+((propertyValue==null)? 0 : propertyValue.hashCode());return result;}"
  },
  {
    "code_smells": [],
    "source_code": "private Generator getGenerator(String serviceKey){List<Generator>generators=this.registeredGeneratorsRepository.findByGeneratorKey(serviceKey);if(!generators.isEmpty()){return generators.get(0);}else{return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mKW_Import()throws RecognitionException{try{int _type=KW_Import;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"import\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void transform(XtendConstructor source,JvmGenericType container){JvmConstructor constructor=typesFactory.createJvmConstructor();container.getMembers().add(constructor);associator.associatePrimary(source,constructor);JvmVisibility visibility=source.getVisibility();constructor.setSimpleName(container.getSimpleName());constructor.setVisibility(visibility);for(XtendParameter parameter : source.getParameters()){translateParameter(constructor,parameter);}copyAndFixTypeParameters(source.getTypeParameters(),constructor);for(JvmTypeReference exception : source.getExceptions()){constructor.getExceptions().add(jvmTypesBuilder.cloneWithProxies(exception));}translateAnnotationsTo(source.getAnnotations(),constructor);setBody(constructor,source.getExpression());jvmTypesBuilder.copyDocumentationTo(source,constructor);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public Future<?>monitorUntil(final ActiveAnnotationContext ctx,final CancelIndicator cancelIndicator,final Function0<? extends Boolean>isFinished){Future<?>_xblockexpression=null;{final Runnable _function=()->{try{while((!(isFinished.apply()).booleanValue())){{boolean _isCanceled=cancelIndicator.isCanceled();if(_isCanceled){CompilationUnitImpl _compilationUnit=ctx.getCompilationUnit();_compilationUnit.setCanceled(true);return;}Thread.sleep(100);}}}catch(Throwable _e){throw Exceptions.sneakyThrow(_e);}};final Runnable r=_function;Future<?>_xtrycatchfinallyexpression=null;try{_xtrycatchfinallyexpression=this.pool.submit(r);}catch(final Throwable _t){if(_t instanceof RejectedExecutionException){final RejectedExecutionException e=(RejectedExecutionException)_t;AnnotationProcessor.CancellationObserver.log.debug(e.getMessage(),e);new Thread(r).start();}else{throw Exceptions.sneakyThrow(_t);}}_xblockexpression=_xtrycatchfinallyexpression;}return _xblockexpression;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public byte[]getByteArrayValue(final String name){Object _value=this.getValue(name);return((byte[])_value);}"
  },
  {
    "code_smells": [],
    "source_code": "public ParserRule getJvmUpperBoundAndedRule(){return getJvmUpperBoundAndedAccess().getRule();}"
  },
  {
    "code_smells": [],
    "source_code": "public InternalXtendLexer(){;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setVisible(boolean visible){if(visible){if(isInitialName)setPageComplete(false);else setPageComplete(validatePage(true));updatePreview();textField.setFocus();}super.setVisible(visible);}"
  },
  {
    "code_smells": [],
    "source_code": "public static Iterator<EObject>getNonDerivedContents(EObject eObject){EClassImpl.FeatureSubsetSupplier featureSupplier=(EClassImpl.FeatureSubsetSupplier)eObject.eClass().getEAllStructuralFeatures();EStructuralFeature[]eStructuralFeatures=featureSupplier.containments();return(eStructuralFeatures==null ? EContentsEList.<EObject>emptyContentsEList(): new EContentsEList<EObject>(eObject,eStructuralFeatures){@Override protected ListIterator<EObject>newResolvingListIterator(){return new ResolvingFeatureIteratorImpl<EObject>(eObject,eStructuralFeatures){@Override protected boolean isIncluded(EStructuralFeature eStructuralFeature){return !eStructuralFeature.isDerived();}};}}).iterator();}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "protected JvmField createField(Field field){JvmField result;int modifiers=field.getModifiers();if(!field.isEnumConstant()){result=TypesFactory.eINSTANCE.createJvmField();}else result=TypesFactory.eINSTANCE.createJvmEnumerationLiteral();String fieldName=field.getName();result.internalSetIdentifier(field.getDeclaringClass().getName()+\".\"+fieldName);result.setSimpleName(fieldName);result.setFinal(Modifier.isFinal(modifiers));result.setStatic(Modifier.isStatic(modifiers));result.setTransient(Modifier.isTransient(modifiers));result.setVolatile(Modifier.isVolatile(modifiers));setVisibility(result,modifiers);Type fieldType=null;try{fieldType=field.getGenericType();}catch(GenericSignatureFormatError error){logSignatureFormatError(field.getDeclaringClass());fieldType=field.getType();}catch(MalformedParameterizedTypeException error){logSignatureFormatError(field.getDeclaringClass());fieldType=field.getType();}result.setType(createTypeReference(fieldType));createAnnotationValues(field,result);return result;}"
  },
  {
    "code_smells": [],
    "source_code": "protected String getArrayComponentTypeSimpleName(String typeName){int idx=typeName.indexOf('[');if(idx!=-1){return getSimpleName(typeName.substring(0,idx));}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public Model createModel(){ModelImpl model=new ModelImpl();return model;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public int specialStateTransition(int s,IntStream _input)throws NoViableAltException{TokenStream input=(TokenStream)_input;int _s=s;switch(s){case 0: int LA102_1=input.LA(1);int index102_1=input.index();input.rewind();s=-1;if((synpred145_InternalDomainmodel())){s=77;}else if((true)){s=2;}input.seek(index102_1);if(s>=0)return s;break;}if(state.backtracking>0){state.failed=true;return-1;}NoViableAltException nvae=new NoViableAltException(getDescription(),102,_s,input);error(nvae);throw nvae;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean eIsSet(int featureID){switch(featureID){case AsubpackagePackage.AMODEL__ELEMENTS: return elements!=null && !elements.isEmpty();}return super.eIsSet(featureID);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void configure(Binder binder){properties=tryBindProperties(binder,\"org/eclipse/xtext/grammarinheritance/BaseInheritanceTestLanguage.properties\");super.configure(binder);}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mT__15()throws RecognitionException{try{int _type=T__15;int _channel=DEFAULT_TOKEN_CHANNEL;{match('{');}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void entryRuleXBasicForLoopExpression()throws RecognitionException{try{{if(state.backtracking==0){before(grammarAccess.getXBasicForLoopExpressionRule());}pushFollow(FOLLOW_1);ruleXBasicForLoopExpression();state._fsp--;if(state.failed)return;if(state.backtracking==0){after(grammarAccess.getXBasicForLoopExpressionRule());}match(input,EOF,FOLLOW_2);if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__XIfExpression__Group__6()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FOLLOW_2);rule__XIfExpression__Group__6__Impl();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final Boolean entryRuleType()throws RecognitionException{Boolean current=false;Boolean iv_ruleType=null;try{{markComposite(elementTypeProvider.getTypeElementType());pushFollow(FOLLOW_1);iv_ruleType=ruleType();state._fsp--;current=iv_ruleType;match(input,EOF,FOLLOW_2);}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{}return current;}"
  },
  {
    "code_smells": [],
    "source_code": "public Condition getLeft(){return left;}"
  },
  {
    "code_smells": [],
    "source_code": "public IGrammarAwareElementType getExtendsNsURIEObject_EObjectKeyword_2_0_0ElementType(){return ExtendsNsURIEObject_EObjectKeyword_2_0_0_ELEMENT_TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public static IGrammarAwareElementType createModel_Group_5ElementType(){return new IGrammarAwareElementType(\"Model_Group_5_ELEMENT_TYPE\",Bug289515TestLanguageLanguage.INSTANCE,GRAMMAR_ACCESS.getModelAccess().getGroup_5());}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override public String getDisplayName(){return AssignmentsTestLanguageLanguage.INSTANCE.getDisplayName();}"
  },
  {
    "code_smells": [],
    "source_code": "public DatatypeRulesTestLanguageSwitch(){if(modelPackage==null){modelPackage=DatatypeRulesTestLanguagePackage.eINSTANCE;}}"
  },
  {
    "code_smells": [],
    "source_code": "public IGrammarAwareElementType getPRFNamed_RefAssignment_1_0_1ElementType(){return PRFNamed_RefAssignment_1_0_1_ELEMENT_TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public PsiInternalExBacktrackingBug325745TestLanguageParser(TokenStream input,RecognizerSharedState state){super(input,state);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected InternalExBacktrackingBug325745TestLanguageParser createParser(XtextTokenStream stream){return new InternalExBacktrackingBug325745TestLanguageParser(stream,getGrammarAccess());}"
  },
  {
    "code_smells": [],
    "source_code": "public SerializerOptions(boolean format,boolean validateConcreteSyntax){super();this.formatting=format;this.validateConcreteSyntax=validateConcreteSyntax;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch(featureID){case ComplexrewritetestPackage.ADD__ADD_OPERANDS: return((InternalEList<?>)getAddOperands()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}"
  },
  {
    "code_smells": [],
    "source_code": "public final EObject ruleModel()throws RecognitionException{EObject current=null;Token lv_name_0_0=null;enterRule();try{{{{lv_name_0_0=(Token)match(input,RULE_ID,FollowSets000.FOLLOW_2);newLeafNode(lv_name_0_0,grammarAccess.getModelAccess().getNameIDTerminalRuleCall_0());if(current==null){current=createModelElement(grammarAccess.getModelRule());}setWithLastConsumed(current,\"name\",lv_name_0_0,\"org.eclipse.xtext.common.Terminals.ID\");}}}leaveRule();}catch(RecognitionException re){recover(input,re);appendSkippedTokens();}finally{}return current;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public IScope getScope(EObject context,EReference reference){if(reference==SequencertestPackage.Literals.NULL_CROSS_REF__REF)return new AbstractScope(IScope.NULLSCOPE,false){@Override public Iterable<IEObjectDescription>getElements(EObject object){return Collections.singletonList(getSingleElement(object));}@Override public IEObjectDescription getSingleElement(EObject object){return EObjectDescription.create(\"null\",null);}@Override protected Iterable<IEObjectDescription>getAllLocalElements(){throw new UnsupportedOperationException();}};return super.getScope(context,reference);}"
  },
  {
    "code_smells": [],
    "source_code": "public T caseNestedTypeTest(NestedTypeTest object){return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public static IGrammarAwareElementType createModel_NodeExclusionListAlternatives_8_2_0ElementType(){return new IGrammarAwareElementType(\"Model_NodeExclusionListAlternatives_8_2_0_ELEMENT_TYPE\",ContextFinderTestLanguageLanguage.INSTANCE,GRAMMAR_ACCESS.getModelAccess().getNodeExclusionListAlternatives_8_2_0());}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mT__60()throws RecognitionException{try{int _type=T__60;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"kwp3\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void sequence_Fragment1_FragmentCaller(ISerializationContext context,FragmentCallerType semanticObject){if(errorAcceptor!=null){if(transientValues.isValueTransient(semanticObject,SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1)==ValueTransient.YES)errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL1));if(transientValues.isValueTransient(semanticObject,SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL)==ValueTransient.YES)errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__FRAG_VAL));if(transientValues.isValueTransient(semanticObject,SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL)==ValueTransient.YES)errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,SequencertestPackage.Literals.FRAGMENT_CALLER_TYPE__VAL));}SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);feeder.accept(grammarAccess.getFragmentCallerAccess().getVal1IDTerminalRuleCall_1_0(),semanticObject.getVal1());feeder.accept(grammarAccess.getFragment1Access().getFragValIDTerminalRuleCall_0(),semanticObject.getFragVal());feeder.accept(grammarAccess.getFragmentCallerAccess().getValIDTerminalRuleCall_3_0(),semanticObject.getVal());feeder.finish();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void entryRuleCallExpression()throws RecognitionException{int entryRuleCallExpression_StartIndex=input.index();try{if(state.backtracking>0 && alreadyParsedRule(input,73)){return;}{if(state.backtracking==0){before(grammarAccess.getCallExpressionRule());}pushFollow(FollowSets000.FOLLOW_1);ruleCallExpression();state._fsp--;if(state.failed)return;if(state.backtracking==0){after(grammarAccess.getCallExpressionRule());}match(input,EOF,FollowSets000.FOLLOW_2);if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{if(state.backtracking>0){memoize(input,73,entryRuleCallExpression_StartIndex);}}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__WithContextExpression__Group_3__0()throws RecognitionException{int rule__WithContextExpression__Group_3__0_StartIndex=input.index();int stackSize=keepStackSize();try{if(state.backtracking>0 && alreadyParsedRule(input,692)){return;}{pushFollow(FollowSets000.FOLLOW_9);rule__WithContextExpression__Group_3__0__Impl();state._fsp--;if(state.failed)return;pushFollow(FollowSets000.FOLLOW_2);rule__WithContextExpression__Group_3__1();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{if(state.backtracking>0){memoize(input,692,rule__WithContextExpression__Group_3__0_StartIndex);}restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__FeatureOfThis__Group__1__Impl()throws RecognitionException{int rule__FeatureOfThis__Group__1__Impl_StartIndex=input.index();int stackSize=keepStackSize();try{if(state.backtracking>0 && alreadyParsedRule(input,769)){return;}{{if(state.backtracking==0){before(grammarAccess.getFeatureOfThisAccess().getFeatureNameAssignment_1());}{pushFollow(FollowSets000.FOLLOW_2);rule__FeatureOfThis__FeatureNameAssignment_1();state._fsp--;if(state.failed)return;}if(state.backtracking==0){after(grammarAccess.getFeatureOfThisAccess().getFeatureNameAssignment_1());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{if(state.backtracking>0){memoize(input,769,rule__FeatureOfThis__Group__1__Impl_StartIndex);}restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public IGrammarAwareElementType getModelElementType(){return Model_ELEMENT_TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public IGrammarAwareElementType getClosureExpression_VerticalLineKeyword_2_0_0ElementType(){return ClosureExpression_VerticalLineKeyword_2_0_0_ELEMENT_TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public IGrammarAwareElementType getCallExpression_LeftParenthesisKeyword_1_1ElementType(){return CallExpression_LeftParenthesisKeyword_1_1_ELEMENT_TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public IGrammarAwareElementType getInfixExpression_NameIDTerminalRuleCall_1_0_2_0ElementType(){return InfixExpression_NameIDTerminalRuleCall_1_0_2_0_ELEMENT_TYPE;}"
  },
  {
    "code_smells": [],
    "source_code": "public static IGrammarAwareElementType createWithExpression_Alternatives_2ElementType(){return new IGrammarAwareElementType(\"WithExpression_Alternatives_2_ELEMENT_TYPE\",SimpleBeeLangTestLanguageLanguage.INSTANCE,GRAMMAR_ACCESS.getWithExpressionAccess().getAlternatives_2());}"
  },
  {
    "code_smells": [],
    "source_code": "public final Boolean ruleValueLiteral()throws RecognitionException{Boolean current=false;int ruleValueLiteral_StartIndex=input.index();Token lv_value_0_0=null;try{if(state.backtracking>0 && alreadyParsedRule(input,108)){return current;}{{{if(state.backtracking==0){markLeaf(elementTypeProvider.getValueLiteral_ValueSTRINGTerminalRuleCall_0ElementType());}lv_value_0_0=(Token)match(input,RULE_STRING,FOLLOW_2);if(state.failed)return current;if(state.backtracking==0){if(!current){associateWithSemanticElement();current=true;}}if(state.backtracking==0){doneLeaf(lv_value_0_0);}}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{if(state.backtracking>0){memoize(input,108,ruleValueLiteral_StartIndex);}}return current;}"
  },
  {
    "code_smells": [],
    "source_code": "public final boolean synpred9_PsiInternalSimpleBeeLangTestLanguage(){state.backtracking++;int start=input.mark();try{synpred9_PsiInternalSimpleBeeLangTestLanguage_fragment();}catch(RecognitionException re){System.err.println(\"impossible: \"+re);}boolean success=!state.failed;input.rewind(start);state.backtracking--;state.failed=false;return success;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Adapter defaultCase(EObject object){return createEObjectAdapter();}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__Action__OperatorAssignment_2_2()throws RecognitionException{int stackSize=keepStackSize();try{{{before(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0());{pushFollow(FOLLOW_2);rule__Action__OperatorAlternatives_2_2_0();state._fsp--;}after(grammarAccess.getActionAccess().getOperatorAlternatives_2_2_0());}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void eUnset(int featureID){switch(featureID){case BacktrackingContentAssistTestPackage.PREFIX_EXP__OP: setOp(OP_EDEFAULT);return;case BacktrackingContentAssistTestPackage.PREFIX_EXP__SOURCE: setSource((Expression)null);return;}super.eUnset(featureID);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected EClass eStaticClass(){return Bug287941TestLanguagePackage.Literals.REFERENCE_ALIAS_WHERE_ENTRY;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean eIsSet(int featureID){switch(featureID){case Bug347012TestLanguagePackage.MY_BINDING__NAME: return NAME_EDEFAULT==null ? name!=null : !NAME_EDEFAULT.equals(name);case Bug347012TestLanguagePackage.MY_BINDING__TYPE: return TYPE_EDEFAULT==null ? type!=null : !TYPE_EDEFAULT.equals(type);case Bug347012TestLanguagePackage.MY_BINDING__EXPRESSION: return expression!=null;}return super.eIsSet(featureID);}"
  },
  {
    "code_smells": [],
    "source_code": "public EAttribute getThirdLevelB1_Name(){return(EAttribute)thirdLevelB1EClass.getEStructuralFeatures().get(0);}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__Object__Group__4()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FollowSets000.FOLLOW_9);rule__Object__Group__4__Impl();state._fsp--;if(state.failed)return;pushFollow(FollowSets000.FOLLOW_2);rule__Object__Group__5();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__Model__NameAssignment_1_9_1()throws RecognitionException{int stackSize=keepStackSize();try{{{before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_9_1_0());match(input,RULE_ID,FollowSets000.FOLLOW_2);after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_9_1_0());}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__ParserRuleParameters__Group_1_2__1()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FollowSets000.FOLLOW_2);rule__ParserRuleParameters__Group_1_2__1__Impl();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__MandatoryModel__Group__2()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FollowSets000.FOLLOW_6);rule__MandatoryModel__Group__2__Impl();state._fsp--;if(state.failed)return;pushFollow(FollowSets000.FOLLOW_2);rule__MandatoryModel__Group__3();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final boolean synpred87_InternalBacktrackingContentAssistTestLanguage(){state.backtracking++;int start=input.mark();try{synpred87_InternalBacktrackingContentAssistTestLanguage_fragment();}catch(RecognitionException re){System.err.println(\"impossible: \"+re);}boolean success=!state.failed;input.rewind(start);state.backtracking--;state.failed=false;return success;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mT__15()throws RecognitionException{try{int _type=T__15;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"@desc\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void mRULE_ML_COMMENT()throws RecognitionException{try{int _type=RULE_ML_COMMENT;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"/*\");loop7: do{int alt7=2;int LA7_0=input.LA(1);if((LA7_0=='*')){int LA7_1=input.LA(2);if((LA7_1=='/')){alt7=2;}else if(((LA7_1>='\\u0000' && LA7_1<='.')||(LA7_1>='0' && LA7_1<='\\uFFFF'))){alt7=1;}}else if(((LA7_0>='\\u0000' && LA7_0<=')')||(LA7_0>='+' && LA7_0<='\\uFFFF'))){alt7=1;}switch(alt7){case 1:{matchAny();}break;default: break loop7;}}while(true);match(\"*/\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "public final EObject ruleScenario1()throws RecognitionException{EObject current=null;EObject this_Scenario1_0=null;enterRule();try{{if(state.backtracking==0){newCompositeNode(grammarAccess.getScenario1Access().getScenario1ParserRuleCall());}pushFollow(FollowSets000.FOLLOW_2);this_Scenario1_0=superScenario1();state._fsp--;if(state.failed)return current;if(state.backtracking==0){current=this_Scenario1_0;afterParserOrEnumRuleCall();}}if(state.backtracking==0){leaveRule();}}catch(RecognitionException re){recover(input,re);appendSkippedTokens();}finally{}return current;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void synpred7_InternalParametersTestLanguageEx_fragment()throws RecognitionException{{{pushFollow(FollowSets000.FOLLOW_2);ruleIdOrKeyword();state._fsp--;if(state.failed)return;}}}"
  },
  {
    "code_smells": [],
    "source_code": "public ParserRule getCollectionTypeIdentifierRule(){return getCollectionTypeIdentifierAccess().getRule();}"
  },
  {
    "code_smells": [],
    "source_code": "public RuleCall getInitExpressionExpressionParserRuleCall_4_0(){return cInitExpressionExpressionParserRuleCall_4_0;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ParserRule getRule(){return rule;}"
  },
  {
    "code_smells": [],
    "source_code": "protected Bug288734TestLanguageRuntimeModule createRuntimeModule(){return new Bug288734TestLanguageRuntimeModule(){@Override public ClassLoader bindClassLoaderToInstance(){return Bug288734TestLanguageInjectorProvider.class.getClassLoader();}};}"
  },
  {
    "code_smells": [],
    "source_code": "public Class<? extends ContentAssistContext.Factory>bindContentAssistContext$Factory(){return DelegatingContentAssistContextFactory.class;}"
  },
  {
    "code_smells": [],
    "source_code": "public void completeUnary_Source(EObject model,Assignment assignment,ContentAssistContext context,ICompletionProposalAcceptor acceptor){completeRuleCall(((RuleCall)assignment.getTerminal()),context,acceptor);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch(featureID){case ImportUriUiPackage.IMPORT__IMPORT_URI: return getImportURI();}return super.eGet(featureID,resolve,coreType);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void sequence(ISerializationContext context,EObject semanticObject){EPackage epackage=semanticObject.eClass().getEPackage();ParserRule rule=context.getParserRule();Action action=context.getAssignedAction();Set<Parameter>parameters=context.getEnabledBooleanParameters();if(epackage==Bug250313Package.eINSTANCE)switch(semanticObject.eClass().getClassifierID()){case Bug250313Package.CHILD1: sequence_Child1(context,(Child1)semanticObject);return;case Bug250313Package.CHILD2: sequence_Child2(context,(Child2)semanticObject);return;case Bug250313Package.MODEL: sequence_Model(context,(Model)semanticObject);return;}if(errorAcceptor!=null)errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject,context));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected EClass eStaticClass(){return DomainmodelPackage.Literals.OPERATION;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mT__66()throws RecognitionException{try{int _type=T__66;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"if\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__XSynchronizedExpression__Group__1()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FOLLOW_66);rule__XSynchronizedExpression__Group__1__Impl();state._fsp--;if(state.failed)return;pushFollow(FOLLOW_2);rule__XSynchronizedExpression__Group__2();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public int specialStateTransition(int s,IntStream _input)throws NoViableAltException{TokenStream input=(TokenStream)_input;int _s=s;switch(s){case 0: int LA21_1=input.LA(1);int index21_1=input.index();input.rewind();s=-1;if((synpred42_InternalEntities())){s=3;}else if((true)){s=5;}input.seek(index21_1);if(s>=0)return s;break;case 1: int LA21_2=input.LA(1);int index21_2=input.index();input.rewind();s=-1;if((synpred42_InternalEntities())){s=3;}else if((true)){s=5;}input.seek(index21_2);if(s>=0)return s;break;}if(state.backtracking>0){state.failed=true;return-1;}NoViableAltException nvae=new NoViableAltException(getDescription(),21,_s,input);error(nvae);throw nvae;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final EObject entryRuleXMultiplicativeExpression()throws RecognitionException{EObject current=null;EObject iv_ruleXMultiplicativeExpression=null;try{{if(state.backtracking==0){newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule());}pushFollow(FOLLOW_1);iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression();state._fsp--;if(state.failed)return current;if(state.backtracking==0){current=iv_ruleXMultiplicativeExpression;}match(input,EOF,FOLLOW_2);if(state.failed)return current;}}catch(RecognitionException re){recover(input,re);appendSkippedTokens();}finally{}return current;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__XCastedExpression__Group__1()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FOLLOW_2);rule__XCastedExpression__Group__1__Impl();state._fsp--;if(state.failed)return;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public int specialStateTransition(int s,IntStream _input)throws NoViableAltException{TokenStream input=(TokenStream)_input;int _s=s;switch(s){case 0: int LA60_0=input.LA(1);int index60_0=input.index();input.rewind();s=-1;if((LA60_0==RULE_ID)){s=1;}else if((LA60_0==14)){s=2;}else if((LA60_0==39)&&(synpred33_InternalXbaseWithAnnotations())){s=3;}else if(((LA60_0>=RULE_STRING && LA60_0<=RULE_DECIMAL)||(LA60_0>=18 && LA60_0<=19)|| LA60_0==26 ||(LA60_0>=42 && LA60_0<=43)|| LA60_0==48 || LA60_0==55 || LA60_0==59 || LA60_0==61 ||(LA60_0>=65 && LA60_0<=67)||(LA60_0>=70 && LA60_0<=82)|| LA60_0==84)){s=4;}input.seek(index60_0);if(s>=0)return s;break;case 1: int LA60_1=input.LA(1);int index60_1=input.index();input.rewind();s=-1;if((synpred33_InternalXbaseWithAnnotations())){s=3;}else if((true)){s=4;}input.seek(index60_1);if(s>=0)return s;break;case 2: int LA60_2=input.LA(1);int index60_2=input.index();input.rewind();s=-1;if((synpred33_InternalXbaseWithAnnotations())){s=3;}else if((true)){s=4;}input.seek(index60_2);if(s>=0)return s;break;}if(state.backtracking>0){state.failed=true;return-1;}NoViableAltException nvae=new NoViableAltException(getDescription(),60,_s,input);error(nvae);throw nvae;}"
  },
  {
    "code_smells": [],
    "source_code": "private String getRawReturnType(JvmOperation singleOperation){JvmTypeReference returnType=singleOperation.getReturnType();if(returnType==null)return null;JvmType rawType=returnType.getType();if(rawType==null){return null;}return rawType.getQualifiedName();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void appendDefaultLiteral(ITreeAppendable b,LightweightTypeReference type){if(type!=null && type.isPrimitive()){Primitive primitiveKind=type.getPrimitiveKind();switch(primitiveKind){case Boolean: b.append(\"false\");break;default: b.append(\"0\");break;}}else{b.append(\"null\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public Iterable<JvmMember>getMembersToBeCompiled(final JvmDeclaredType type){if(type instanceof JvmEnumerationType){return _getMembersToBeCompiled((JvmEnumerationType)type);}else if(type instanceof JvmGenericType){return _getMembersToBeCompiled((JvmGenericType)type);}else if(type!=null){return _getMembersToBeCompiled(type);}else{throw new IllegalArgumentException(\"Unhandled parameter types: \"+Arrays.<Object>asList(type).toString());}}"
  },
  {
    "code_smells": [],
    "source_code": "public PublicResolvedTypes(final DefaultReentrantTypeResolver resolver){super(resolver,CancelIndicator.NullImpl);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final EObject ruleXOtherOperatorExpression()throws RecognitionException{EObject current=null;EObject this_XAdditiveExpression_0=null;EObject lv_rightOperand_3_0=null;enterRule();try{{{if(state.backtracking==0){newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0());}pushFollow(FOLLOW_14);this_XAdditiveExpression_0=ruleXAdditiveExpression();state._fsp--;if(state.failed)return current;if(state.backtracking==0){current=this_XAdditiveExpression_0;afterParserOrEnumRuleCall();}loop11: do{int alt11=2;alt11=dfa11.predict(input);switch(alt11){case 1:{{{{if(state.backtracking==0){current=forceCreateModelElementAndSet(grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),current);}}{{if(state.backtracking==0){if(current==null){current=createModelElement(grammarAccess.getXOtherOperatorExpressionRule());}}if(state.backtracking==0){newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0());}pushFollow(FOLLOW_4);ruleOpOther();state._fsp--;if(state.failed)return current;if(state.backtracking==0){afterParserOrEnumRuleCall();}}}}}{{if(state.backtracking==0){newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0());}pushFollow(FOLLOW_14);lv_rightOperand_3_0=ruleXAdditiveExpression();state._fsp--;if(state.failed)return current;if(state.backtracking==0){if(current==null){current=createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());}set(current,\"rightOperand\",lv_rightOperand_3_0,\"org.eclipse.xtext.xbase.Xbase.XAdditiveExpression\");afterParserOrEnumRuleCall();}}}}break;default: break loop11;}}while(true);}}if(state.backtracking==0){leaveRule();}}catch(RecognitionException re){recover(input,re);appendSkippedTokens();}finally{}return current;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void mT__74()throws RecognitionException{try{int _type=T__74;int _channel=DEFAULT_TOKEN_CHANNEL;{match(\"null\");}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__XBasicForLoopExpression__Group__8__Impl()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());}match(input,56,FOLLOW_2);if(state.failed)return;if(state.backtracking==0){after(grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__XShortClosure__Group_0__0__Impl()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getXShortClosureAccess().getGroup_0_0());}{pushFollow(FOLLOW_2);rule__XShortClosure__Group_0_0__0();state._fsp--;if(state.failed)return;}if(state.backtracking==0){after(grammarAccess.getXShortClosureAccess().getGroup_0_0());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void ruleXDoWhileExpression()throws RecognitionException{int stackSize=keepStackSize();try{{{if(state.backtracking==0){before(grammarAccess.getXDoWhileExpressionAccess().getGroup());}{pushFollow(FOLLOW_2);rule__XDoWhileExpression__Group__0();state._fsp--;if(state.failed)return;}if(state.backtracking==0){after(grammarAccess.getXDoWhileExpressionAccess().getGroup());}}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public final void mRULE_STRING()throws RecognitionException{try{int _type=RULE_STRING;int _channel=DEFAULT_TOKEN_CHANNEL;{int alt15=2;int LA15_0=input.LA(1);if((LA15_0=='\\\"')){alt15=1;}else if((LA15_0=='\\'')){alt15=2;}else{NoViableAltException nvae=new NoViableAltException(\"\",15,0,input);throw nvae;}switch(alt15){case 1:{match('\\\"');loop11: do{int alt11=3;int LA11_0=input.LA(1);if((LA11_0=='\\\\')){alt11=1;}else if(((LA11_0>='\\u0000' && LA11_0<='!')||(LA11_0>='#' && LA11_0<='[')||(LA11_0>=']' && LA11_0<='\\uFFFF'))){alt11=2;}switch(alt11){case 1:{match('\\\\');matchAny();}break;case 2:{if((input.LA(1)>='\\u0000' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF')){input.consume();}else{MismatchedSetException mse=new MismatchedSetException(null,input);recover(mse);throw mse;}}break;default: break loop11;}}while(true);int alt12=2;int LA12_0=input.LA(1);if((LA12_0=='\\\"')){alt12=1;}switch(alt12){case 1:{match('\\\"');}break;}}break;case 2:{match('\\'');loop13: do{int alt13=3;int LA13_0=input.LA(1);if((LA13_0=='\\\\')){alt13=1;}else if(((LA13_0>='\\u0000' && LA13_0<='&')||(LA13_0>='(' && LA13_0<='[')||(LA13_0>=']' && LA13_0<='\\uFFFF'))){alt13=2;}switch(alt13){case 1:{match('\\\\');matchAny();}break;case 2:{if((input.LA(1)>='\\u0000' && input.LA(1)<='&')||(input.LA(1)>='(' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='\\uFFFF')){input.consume();}else{MismatchedSetException mse=new MismatchedSetException(null,input);recover(mse);throw mse;}}break;default: break loop13;}}while(true);int alt14=2;int LA14_0=input.LA(1);if((LA14_0=='\\'')){alt14=1;}switch(alt14){case 1:{match('\\'');}break;}}break;}}state.type=_type;state.channel=_channel;}finally{}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public JvmIdentifiableElement getFeature(){return description.getElementOrProxy();}"
  },
  {
    "code_smells": [],
    "source_code": "protected IType[]getAllSuperTypes(IType type)throws JavaModelException{ITypeHierarchy th=type.newTypeHierarchy(new NullProgressMonitor());IType[]superTypes=th.getAllSuperclasses(type);return superTypes;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Check public void checkNoForwardReferences(XExpression fieldInitializer){JvmIdentifiableElement container=logicalContainerProvider.getLogicalContainer(fieldInitializer);if(container instanceof JvmField){JvmField field=(JvmField)container;boolean staticField=field.isStatic();JvmDeclaredType declaredType=field.getDeclaringType();if(declaredType==null){return;}Collection<JvmField>illegalFields=Sets.newHashSet();for(int i=declaredType.getMembers().size()-1;i>=0;i--){JvmMember member=declaredType.getMembers().get(i);if(member instanceof JvmField){if(((JvmField)member).isStatic()==staticField){illegalFields.add((JvmField)member);}}if(member==field)break;}TreeIterator<EObject>iterator=EcoreUtil2.eAll(fieldInitializer);while(iterator.hasNext()){EObject object=iterator.next();if(object instanceof XFeatureCall){JvmIdentifiableElement feature=((XFeatureCall)object).getFeature();if(illegalFields.contains(((XFeatureCall)object).getFeature())){error(\"Cannot reference the field '\"+feature.getSimpleName()+\"' before it is defined\",object,null,INSIGNIFICANT_INDEX,ILLEGAL_FORWARD_REFERENCE);}}else if(isLocalClassSemantics(object)){iterator.prune();}}}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private boolean deriveTypeHierarchyFromOverridden(ParserRule rule,Grammar grammar)throws TransformationException{AbstractRule parentRule=GrammarUtil.findRuleForName(grammar,rule.getName());if(parentRule!=null){if(parentRule!=rule && parentRule instanceof ParserRule){ParserRule casted=(ParserRule)parentRule;if(casted.isFragment()!=rule.isFragment()){if(rule.isFragment()){throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,\"A fragment rule cannot override a production rule.\",rule);}else{throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,\"Only fragment rule can override other fragment rules.\",rule);}}if(casted.isWildcard()!=rule.isWildcard()){if(rule.isWildcard()){throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,\"A wildcard fragment rule cannot override a typed fragment rule.\",rule);}else{throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,\"Only wildcard fragment rules can override other wildcard fragments.\",rule);}}if(rule.isFragment()&& !rule.isWildcard()&& parentRule.getType()!=null){if(rule.getType().getClassifier()!=parentRule.getType().getClassifier()){throw new TransformationException(TransformationErrorCode.InvalidFragmentOverride,\"Overriding fragment rules cannot redeclare their type.\",rule.getType());}}checkParameterLists(rule,casted);}if(parentRule.getType()!=null && parentRule!=rule){if(parentRule.getType().getClassifier()instanceof EDataType)throw new TransformationException(TransformationErrorCode.InvalidSupertype,\"Cannot inherit from datatype rule and return another type.\",rule.getType());EClassifierInfo parentTypeInfo=eClassifierInfos.getInfoOrNull(parentRule.getType());if(parentTypeInfo==null)throw new TransformationException(TransformationErrorCode.InvalidSupertype,\"Cannot determine return type of overridden rule.\",rule.getType());addSuperType(rule,rule.getType(),parentTypeInfo);return true;}}return false;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public<T extends Object>List<NamedSerializationContexts<T>>getNamedContexts(final SerializationContextMap<T>map){final ArrayList<NamedSerializationContexts<T>>result=CollectionLiterals.<NamedSerializationContexts<T>>newArrayList();final HashMap<String,Integer>names=CollectionLiterals.<String,Integer>newHashMap();List<SerializationContextMap.Entry<T>>_values=map.values();for(final SerializationContextMap.Entry<T>e : _values){Set<EClass>_types=e.getTypes();for(final EClass t : _types){{final List<ISerializationContext>ctx=e.getContexts(t);String _xifexpression=null;if((t==null)){_xifexpression=\"\";}else{_xifexpression=t.getName();}String _plus=(_xifexpression+\"_\");String _significantGrammarElement=this.getSignificantGrammarElement(ctx);final String name=(_plus+_significantGrammarElement);final Integer dup=names.get(name);String _xifexpression_1=null;if((dup==null)){String _xblockexpression=null;{names.put(name,Integer.valueOf(1));_xblockexpression=name;}_xifexpression_1=_xblockexpression;}else{String _xblockexpression_1=null;{names.put(name,Integer.valueOf(((dup).intValue()+1)));_xblockexpression_1=((name+\"_\")+dup);}_xifexpression_1=_xblockexpression_1;}final String unique=_xifexpression_1;T _value=e.getValue();NamedSerializationContexts<T>_namedSerializationContexts=new NamedSerializationContexts<T>(unique,t,ctx,_value);result.add(_namedSerializationContexts);}}}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__Disjunction__Group_1__0()throws RecognitionException{int stackSize=keepStackSize();try{{pushFollow(FollowSets000.FOLLOW_26);rule__Disjunction__Group_1__0__Impl();state._fsp--;pushFollow(FollowSets000.FOLLOW_2);rule__Disjunction__Group_1__1();state._fsp--;}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public final void rule__GeneratedMetamodel__EPackageAssignment_2()throws RecognitionException{int stackSize=keepStackSize();try{{{before(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0());{before(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1());match(input,RULE_STRING,FollowSets000.FOLLOW_2);after(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageSTRINGTerminalRuleCall_2_0_1());}after(grammarAccess.getGeneratedMetamodelAccess().getEPackageEPackageCrossReference_2_0());}}}catch(RecognitionException re){reportError(re);recover(input,re);}finally{restoreStackSize(stackSize);}return;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean needsTychoBuild(){return(this.needsMavenBuild()&& this.runtimeProject.isEclipsePluginProject());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){ByteArrayOutputStream baos=new ByteArrayOutputStream();writeTo(baos);return baos.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Value emitFloatConvert(FloatConvert op,Value inputVal){PlatformKind resultPlatformKind=getFloatConvertResultKind(op);LIRKind resultLirKind=LIRKind.combine(inputVal).changeType(resultPlatformKind);Variable result=getLIRGen().newVariable(resultLirKind);getLIRGen().append(new AArch64FloatConvertOp(op,result,asAllocatable(inputVal)));return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Pair<String,String>toCSVFormat(long value){return toCSVFormatHelper(value);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean isNotEmpty(){return size>0;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void emitNullCheck(Value address,LIRFrameState state){if(address.getValueKind().getPlatformKind()==AArch64Kind.DWORD){CompressEncoding encoding=config.getOopEncoding();Value uncompressed=emitUncompress(address,encoding,false);append(new AArch64Move.NullCheckOp(asAddressValue(uncompressed),state));}else{super.emitNullCheck(address,state);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void visitFullInfopointNode(FullInfopointNode i){if(i.getState()!=null && i.getState().bci==BytecodeFrame.AFTER_BCI){i.getDebug().log(\"Ignoring InfopointNode for AFTER_BCI\");}else{super.visitFullInfopointNode(i);}}"
  },
  {
    "code_smells": [],
    "source_code": "public ProfileBranchNode(ResolvedJavaMethod method,int freqLog,int probabilityLog,int bci,int targetBci){super(TYPE,method,freqLog,probabilityLog);assert targetBci<=bci;this.branchCondition=null;this.bci=bci;this.targetBci=targetBci;}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void run0()throws Throwable{runTest(\"test\",-1);}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void run2()throws Throwable{runTest(\"test\",2);}"
  },
  {
    "code_smells": [],
    "source_code": "@Test public void run5()throws Throwable{runTest(\"test\",-5);}"
  },
  {
    "code_smells": [],
    "source_code": "public static String test(int arg)throws NoSuchMethodException{if(arg==0){return Class_getMethod02.class.getMethod(\"test\").getName();}else if(arg==1){return Class_getMethod02.class.getMethod(\"test\",int.class).getName();}else if(arg==2){return Class_getMethod02.class.getMethod(\"main\").getName();}else if(arg==3){return Class_getMethod02.class.getMethod(\"main\",String[].class).getName();}else if(arg==4){return Class_getMethod02.class.getMethod(\"<init>\").getName();}else if(arg==5){return Class_getMethod02.class.getMethod(\"<clinit>\").getName();}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unused\")public static boolean test(int i,int time)throws InterruptedException{waitTime=time;final Thread thread=new Thread();synchronized(thread){thread.setDaemon(true);thread.start();while(!thread.wait1Condition){thread.wait(10000);}}synchronized(start){thread.interrupt();thread.sentInterrupt=true;}synchronized(end){while(!thread.wait2Condition){end.wait(10000);}}return thread.interrupted;}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isVirtualStackSlot(Value value){assert value!=null;return value instanceof VirtualStackSlot;}"
  },
  {
    "code_smells": [],
    "source_code": "public LoadDataOp(AllocatableValue result,DataPointerConstant data){super(TYPE);this.result=result;this.data=data;}"
  },
  {
    "code_smells": [],
    "source_code": "private static void emitStackMove(CompilationResultBuilder crb,AArch64MacroAssembler masm,AllocatableValue result,Value input){try(ScratchRegister r1=masm.getScratchRegister()){try(ScratchRegister r2=masm.getScratchRegister()){Register rscratch1=r1.getRegister();Register rscratch2=r2.getRegister();PlatformKind kind=input.getPlatformKind();final int size=kind.getSizeInBytes()*Byte.SIZE;crb.blockComment(\"[stack->stack copy]\");AArch64Address src=loadStackSlotAddress(crb,masm,asStackSlot(input),rscratch2);masm.ldr(size,rscratch1,src);AArch64Address dst=loadStackSlotAddress(crb,masm,asStackSlot(result),rscratch2);masm.str(size,rscratch1,dst);}}}"
  },
  {
    "code_smells": [],
    "source_code": "protected ZeroNullConversionOp(LIRInstructionClass<? extends ZeroNullConversionOp>type,AllocatableValue result,AllocatableValue input){super(type);this.result=result;this.input=input;}"
  },
  {
    "code_smells": [],
    "source_code": "public static ValueNode create(ValueNode forValue,ConstantReflectionProvider constantReflection){if(forValue instanceof NewArrayNode){NewArrayNode newArray=(NewArrayNode)forValue;return newArray.length();}ValueNode length=readArrayLength(forValue,constantReflection);if(length!=null){return length;}return new ArrayLengthNode(forValue);}"
  },
  {
    "code_smells": [],
    "source_code": "private static void registerUnaryMath(Registration r,String name,UnaryOperation operation){r.register1(name,Double.TYPE,new InvocationPlugin(){@Override public boolean apply(GraphBuilderContext b,ResolvedJavaMethod targetMethod,Receiver receiver,ValueNode value){b.push(JavaKind.Double,b.append(UnaryMathIntrinsicNode.create(value,operation)));return true;}});}"
  },
  {
    "code_smells": [],
    "source_code": "@SVMToHotSpot(OnFailure)@Override public void onFailure(CompilableTruffleAST compilable,String reason,boolean bailout,boolean permanentBailout){JObject hsCompilable=((HSCompilableTruffleAST)compilable).getHandle();JNIEnv env=HotSpotToSVMScope.env();JString hsReason=createHSString(env,reason);callOnFailure(env,getHandle(),hsCompilable,hsReason,bailout,permanentBailout);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void close(){HSObject.invalidate(locals);if(parent==null){if(topScope.get()!=this){throw new IllegalStateException(\"Unexpected JNI scope: \"+topScope.get());}topScope.set(null);objResult=PopLocalFrame(env,objResult);}else{HotSpotToSVMScope top=parent;while(top.parent!=null){top=top.parent;}top.leaf=parent;}HotSpotToSVMEntryPoints.trace(1,\"HS->SVM[exit]: %s\",id);}"
  },
  {
    "code_smells": [],
    "source_code": "public synchronized int countDependencies(){return size;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void remove(){throw new UnsupportedOperationException();}"
  },
  {
    "code_smells": [],
    "source_code": "protected void notifyCannotPerform(){DialogDisplayer.getDefault().notifyLater(new NotifyDescriptor.Message(NbBundle.getMessage(DataSourceAction.class,\"MSG_Cannot_perform_action_in_this_context\"),NotifyDescriptor.ERROR_MESSAGE));}"
  },
  {
    "code_smells": [],
    "source_code": "public static synchronized HeapDumpOnOOMEAction instance(){if(instance==null)instance=new HeapDumpOnOOMEAction();return instance;}"
  },
  {
    "code_smells": [],
    "source_code": "ExternalJavaClass(JavaClass javaClass,boolean retained){allInstancesSize=javaClass.getAllInstancesSize();isArray=javaClass.isArray();instanceSize=javaClass.getInstanceSize();instancesCount=javaClass.getInstancesCount();retainedSizeByClass=retained ? javaClass.getRetainedSizeByClass(): DataType.RETAINED_SIZE.getNotAvailableValue();javaClassId=javaClass.getJavaClassId();name=javaClass.getName();}"
  },
  {
    "code_smells": [],
    "source_code": "public void propertyChange(PropertyChangeEvent evt){if(!evt.getNewValue().equals(Stateful.STATE_AVAILABLE)){((Application)evt.getSource()).removePropertyChangeListener(Stateful.PROPERTY_STATE,this);client.disconnectImpl(false);availabilityListener=null;}}"
  },
  {
    "code_smells": [],
    "source_code": "protected final void setBufferType(int bufferType){if(this.bufferType==bufferType)return;if(bufferType==BUFFER_NONE || bufferType==BUFFER_IMAGE || bufferType==BUFFER_VOLATILE_IMAGE){this.bufferType=bufferType;releaseOffscreenImage();repaintImpl(0,0,getWidth(),getHeight());}else{throw new IllegalArgumentException(\"Unknown buffer type: \"+bufferType);}}"
  },
  {
    "code_smells": [],
    "source_code": "public void paintItem(ChartItem item,List<ItemSelection>highlighted,List<ItemSelection>selected,Graphics2D g,Rectangle dirtyArea,ChartContext context){paint((SynchronousXYItem)item,highlighted,selected,g,dirtyArea,(SynchronousXYChartContext)context);}"
  },
  {
    "code_smells": [],
    "source_code": "public static String fixLibsDirPath(final String libsDirPath,final String args,boolean createTmp){if(createTmp){try{File tmpFile=File.createTempFile(BINARIES_TMP_PREFIX,BINARIES_TMP_EXT);String tmpPath=tmpFile.getAbsolutePath();tmpFile.delete();Runtime.getRuntime().exec(new String[]{\"/bin/ln\",\"-s\",libsDirPath,tmpPath});new File(tmpPath).deleteOnExit();return args.replace(libsDirPath,tmpPath);}catch(IOException ex){throw new RuntimeException(ex);}}else{return args.replaceAll(\"agentpath:(.*?)=(.*?),(.*)\",\"agentpath:\\\"$1\\\"=\\\"$2\\\",$3\");}}"
  },
  {
    "code_smells": [],
    "source_code": "public static boolean isWindows(String osName){return(getOperatingSystem(osName)& OS_WINDOWS_MASK)!=0;}"
  },
  {
    "code_smells": [],
    "source_code": "private String dumpStack(ThreadInfo ti){StringBuilder buffer=new StringBuilder();buffer.append(\"***Thread stack dump:\\n\");for(int i=ti.stackTopIdx;i>=0;i--){DebugInfoCollector collector=new DebugInfoCollector();TimedCPUCCTNode frame=ti.stack[i];RuntimeCCTNodeProcessor.process(frame,collector);buffer.append(collector.getInfo(frame)).append('\\n');}return buffer.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "boolean hasClasses(){Enumeration<? extends FileObject>e=pkg.getData(false);while(e.hasMoreElements())if(e.nextElement().getExt().equalsIgnoreCase(\"class\"))return true;return false;}"
  },
  {
    "code_smells": [],
    "source_code": "void showInThreads(Instance instance){((OverviewControllerUI)getPanel()).showInThreads(instance);}"
  },
  {
    "code_smells": [],
    "source_code": "private static int[]yArr(int...vals){if(vals.length==3){y3arr[0]=vals[0];y3arr[1]=vals[1];y3arr[2]=vals[2];return y3arr;}else{y4arr[0]=vals[0];y4arr[1]=vals[1];y4arr[2]=vals[2];y4arr[3]=vals[3];return y4arr;}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public LongRect getSelectionBounds(ItemSelection selection,ChartContext context){XYItemSelection sel=(XYItemSelection)selection;XYItem item=sel.getItem();int selectedValueIndex=sel.getValueIndex();if(selectedValueIndex==-1 || selectedValueIndex>=item.getValuesCount())return new LongRect(0,0,context.getViewportWidth(),context.getViewportHeight());else return getViewBounds(item,selectedValueIndex,context);}"
  },
  {
    "code_smells": [],
    "source_code": "public void notifyActivated(){resetResults();resetter=Lookup.getDefault().lookup(ObjectsResetter.class);resetter.controller=this;if(getSession().inProgress()&& !currentMode.currentSettingsValid()){final String oldMode=currentMode.getName();final String newMode=allClassesMode.getName();setMode(allClassesMode);SwingUtilities.invokeLater(new Runnable(){public void run(){ProfilerDialogs.displayInfo(Bundle.MethodsFeature_modeReset(oldMode,newMode));}});}}"
  },
  {
    "code_smells": [],
    "source_code": "public JAntiLabel(String text){super(text);}"
  },
  {
    "source_code": "private void appTypeUrlFocusLost(java.awt.event.FocusEvent evt){appTypeUrl.setSelectionEnd(0);}",
    "code_smells": []
  },
  {
    "code_smells": [],
    "source_code": "private void initPluginService(String pluginPath){if(pluginPath.length()>0){try{ClassLoader pluginCL=new URLClassLoader(pathToURLs(pluginPath),JConsolePluginWrapper.class.getClassLoader());ServiceLoader<JConsolePlugin>plugins=ServiceLoader.load(JConsolePlugin.class,pluginCL);for(JConsolePlugin p : plugins){LOGGER.finer(\"JConsole plugin \"+p.getClass().getName()+\" loaded.\");}pluginService=plugins;}catch(ServiceConfigurationError e){LOGGER.warning(\"Fail to load JConsole plugin: \"+e.getMessage());LOGGER.throwing(JConsolePluginWrapper.class.getName(),\"initPluginService\",e);}catch(MalformedURLException e){LOGGER.warning(\"Invalid JConsole plugin path: \"+e.getMessage());LOGGER.throwing(JConsolePluginWrapper.class.getName(),\"initPluginService\",e);}}if(pluginService==null){initEmptyPlugin();}}"
  },
  {
    "code_smells": [],
    "source_code": "public String formatValue(long value,int format){switch(format){case FORMAT_TOOLTIP: case FORMAT_UNITS: return PERCENT_FORMAT.format(value/factor);case FORMAT_DETAILS: case FORMAT_EXPORT: return NUMBER_FORMAT.format(value*100/factor);default: return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public String getMessage(){if(minor==0)return(getMajorString());return(getMajorString()+\"(Mechanism level: \"+getMinorString()+\")\");}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public static Predicate<OperatingSystem>isUnix(){return new Predicate<OperatingSystem>(){@Override public boolean apply(OperatingSystem os){if(os.getFamily()!=null){switch(os.getFamily()){case WINDOWS: return false;}}for(String toMatch : searchStrings(os))if(toMatch!=null && toMatch.toLowerCase().indexOf(\"windows\")!=-1)return false;return true;}@Override public String toString(){return \"isUnix()\";}};}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean equals(Object obj){if(this==obj)return true;if(obj==null || getClass()!=obj.getClass())return false;EmailAlias that=EmailAlias.class.cast(obj);return Objects.equal(this.alias,that.alias);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public DocumentDeleteQuery getQuery(){return query;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean contains(String documentName){requireNonNull(documentName,\"documentName is required\");return documents.containsKey(documentName);}"
  },
  {
    "code_smells": [],
    "source_code": "boolean testnext(int c){if(t.token==c){next();return true;}else return false;}"
  },
  {
    "code_smells": [],
    "source_code": "private void storeFile(History histNew,File file,Repository repo,boolean mergeHistory)throws HistoryException{File cacheFile;try{cacheFile=getCachedFile(file);}catch(ForbiddenSymlinkException e){LOGGER.log(Level.FINER,e.getMessage());return;}History history=histNew;File dir=cacheFile.getParentFile();if(!dir.isDirectory()&& !dir.mkdirs()){throw new HistoryException(\"Unable to create cache directory '\"+dir+\"'.\");}if(mergeHistory && cacheFile.exists()){history=mergeOldAndNewHistory(cacheFile,histNew,repo);}if(history!=null){writeHistoryToFile(dir,history,cacheFile);}else{writeHistoryToFile(dir,histNew,cacheFile);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static File gunzip(File src,File dest){byte[]buffer=new byte[1024];try{GZIPInputStream gzis=new GZIPInputStream(new FileInputStream(src));FileOutputStream out=new FileOutputStream(dest);int len;while((len=gzis.read(buffer))>0){out.write(buffer,0,len);}gzis.close();out.close();}catch(IOException ex){ex.printStackTrace();}return dest;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void finishActivity(Activity activity){checkNotNull(controller);checkState(controller.get()==activity);activity.finish();Stage stage=ActivityLifecycleMonitorRegistry.getInstance().getLifecycleStageOf(activity);switch(stage){case RESUMED: controller.pause().stop().destroy();return;case PAUSED: controller.stop().destroy();return;case STOPPED: controller.destroy();return;default: throw new IllegalStateException(String.format(\"Activity's stage must be RESUMED,PAUSED or STOPPED but was %s.\",stage));}}"
  },
  {
    "code_smells": [],
    "source_code": "public ShadowProviderGenerator(RobolectricModel model,ProcessingEnvironment environment,String shadowPackage,boolean shouldInstrumentPackages,int priority){this.messager=environment.getMessager();this.filer=environment.getFiler();this.model=model;this.shadowPackage=shadowPackage;this.shouldInstrumentPackages=shouldInstrumentPackages;this.priority=priority;}"
  },
  {
    "code_smells": [],
    "source_code": "private ShadowInfo checkShadowPickers(String instrumentedClassName,Class<?>clazz){String shadowPickerClassName=shadowPickers.get(instrumentedClassName);if(shadowPickerClassName==null){return null;}ClassLoader classLoader=clazz.getClassLoader();try{Class<? extends ShadowPicker<?>>shadowPickerClass=(Class<? extends ShadowPicker<?>>)classLoader.loadClass(shadowPickerClassName);ShadowPicker<?>shadowPicker=shadowPickerClass.getDeclaredConstructor().newInstance();Class<?>selectedShadowClass=shadowPicker.pickShadowClass();if(selectedShadowClass==null){return obtainShadowInfo(Object.class,true);}ShadowInfo shadowInfo=obtainShadowInfo(selectedShadowClass);if(!shadowInfo.shadowedClassName.equals(instrumentedClassName)){throw new IllegalArgumentException(\"Implemented class for \"+selectedShadowClass.getName()+\"(\"+shadowInfo.shadowedClassName+\")!=\"+instrumentedClassName);}return shadowInfo;}catch(ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException | InstantiationException e){throw new RuntimeException(\"Failed to resolve shadow picker for \"+instrumentedClassName,e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public final int colorModeWideColorGamut(){return colorMode & COLOR_MODE_WIDE_COLOR_GAMUT_MASK;}"
  },
  {
    "code_smells": [],
    "source_code": "@Implementation protected int getChildCount(){if(children==null){return 0;}return children.size();}"
  },
  {
    "code_smells": [],
    "source_code": "@Implementation(minSdk=M)protected Network getActiveNetwork(){if(defaultNetworkActive){return netIdToNetwork.get(getActiveNetworkInfo().getType());}return null;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Implementation(minSdk=LOLLIPOP)@HiddenApi protected static void nativeGetPointerCoords(long nativePtr,int pointerIndex,int historyPos,PointerCoords outPointerCoordsObj){NativeInput.MotionEvent event=getNativeMotionEvent(nativePtr);int pointerCount=event.getPointerCount();validatePointerIndex(pointerIndex,pointerCount);validatePointerCoords(outPointerCoordsObj);NativeInput.PointerCoords rawPointerCoords;if(historyPos==HISTORY_CURRENT){rawPointerCoords=event.getRawPointerCoords(pointerIndex);}else{int historySize=event.getHistorySize();validateHistoryPos(historyPos,historySize);rawPointerCoords=event.getHistoricalRawPointerCoords(pointerIndex,historyPos);}pointerCoordsFromNative(rawPointerCoords,event.getXOffset(),event.getYOffset(),outPointerCoordsObj);}"
  },
  {
    "code_smells": [],
    "source_code": "@Implementation(minSdk=JELLY_BEAN_MR1)@SuppressWarnings(\"robolectric.ShadowReturnTypeMismatch\")protected static boolean setLocationProviderEnabledForUser(ContentResolver cr,String provider,boolean enabled,int uid){return updateEnabledProviders(cr,provider,enabled);}"
  },
  {
    "code_smells": [],
    "source_code": "@Implementation protected synchronized int checkSlicePermission(Uri uri,int pid,int uid){if(uid==0){return PackageManager.PERMISSION_GRANTED;}Collection<Uri>uris=packageUidsToPermissionGrantedSliceUris.get(uid);if(uris!=null && uris.contains(uri)){return PackageManager.PERMISSION_GRANTED;}return PackageManager.PERMISSION_DENIED;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void declareExchange(final Exchange exchange){try{this.rabbitTemplate.execute(channel->{declareExchanges(channel,exchange);return null;});}catch(AmqpException e){logOrRethrowDeclarationException(exchange,\"exchange\",e);}}"
  },
  {
    "code_smells": [],
    "source_code": "private boolean matchesReturnValue(Class<?>type,Method method,@Nullable Object returnValue){if(returnValue!=null){return ClassUtils.isAssignableValue(type,returnValue);}else if(Object.class==type && void.class==method.getReturnType()){return true;}else{return ClassUtils.isAssignable(type,method.getReturnType());}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean matches(Class<?>clazz){return(this.checkInherited ? AnnotatedElementUtils.hasAnnotation(clazz,this.annotationType): clazz.isAnnotationPresent(this.annotationType));}"
  },
  {
    "code_smells": [],
    "source_code": "public Q build(){@SuppressWarnings(\"unchecked\")Q result=(Q)flow();return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Nullable public static Method findDeclaredMethod(Class<?>clazz,String methodName,Class<?>...paramTypes){try{return clazz.getDeclaredMethod(methodName,paramTypes);}catch(NoSuchMethodException ex){if(clazz.getSuperclass()!=null){return findDeclaredMethod(clazz.getSuperclass(),methodName,paramTypes);}return null;}}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "@Nullable public static PropertyEditor findEditorByConvention(@Nullable Class<?>targetType){if(targetType==null || targetType.isArray()|| unknownEditorTypes.contains(targetType)){return null;}ClassLoader cl=targetType.getClassLoader();if(cl==null){try{cl=ClassLoader.getSystemClassLoader();if(cl==null){return null;}}catch(Throwable ex){if(logger.isDebugEnabled()){logger.debug(\"Could not access system ClassLoader: \"+ex);}return null;}}String editorName=targetType.getName()+\"Editor\";try{Class<?>editorClass=cl.loadClass(editorName);if(!PropertyEditor.class.isAssignableFrom(editorClass)){if(logger.isInfoEnabled()){logger.info(\"Editor class[\"+editorName+\"]does not implement[java.beans.PropertyEditor]interface\");}unknownEditorTypes.add(targetType);return null;}return(PropertyEditor)instantiateClass(editorClass);}catch(ClassNotFoundException ex){if(logger.isTraceEnabled()){logger.trace(\"No property editor[\"+editorName+\"]found for type \"+targetType.getName()+\" according to 'Editor' suffix convention\");}unknownEditorTypes.add(targetType);return null;}}"
  },
  {
    "code_smells": [],
    "source_code": "public TypeMismatchException(@Nullable Object value,@Nullable Class<?>requiredType,@Nullable Throwable cause){super(\"Failed to convert value of type '\"+ClassUtils.getDescriptiveType(value)+\"'\"+(requiredType!=null ? \" to required type '\"+ClassUtils.getQualifiedName(requiredType)+\"'\" : \"\"),cause);this.value=value;this.requiredType=requiredType;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setRetentionDuration(String retentionDuration){this.retentionDuration=retentionDuration;}"
  },
  {
    "code_smells": [],
    "source_code": "private int readOrder(AnnotationMetadata annotationMetadata){Map<String,Object>attributes=annotationMetadata.getAnnotationAttributes(Order.class.getName());Integer order=(attributes!=null)?(Integer)attributes.get(\"value\"): null;return(order!=null)? order : Ordered.LOWEST_PRECEDENCE;}"
  },
  {
    "code_smells": [],
    "source_code": "private AnnotationMetadata getAnnotationMetadata(){if(this.annotationMetadata==null){try{MetadataReader metadataReader=this.metadataReaderFactory.getMetadataReader(this.className);this.annotationMetadata=metadataReader.getAnnotationMetadata();}catch(IOException ex){throw new IllegalStateException(\"Unable to read meta-data for class \"+this.className,ex);}}return this.annotationMetadata;}"
  },
  {
    "code_smells": [],
    "source_code": "@Bean @ConditionalOnSingleCandidate(RabbitTemplate.class)public RabbitMessagingTemplate rabbitMessagingTemplate(RabbitTemplate rabbitTemplate){return new RabbitMessagingTemplate(rabbitTemplate);}"
  },
  {
    "code_smells": [],
    "source_code": "private void reportAvailableDependencies(InitializrServiceMetadata metadata,StringBuilder report){report.append(\"Available dependencies:\").append(NEW_LINE);report.append(\"-----------------------\").append(NEW_LINE);List<Dependency>dependencies=getSortedDependencies(metadata);for(Dependency dependency : dependencies){report.append(dependency.getId()).append(\"-\").append(dependency.getName());if(dependency.getDescription()!=null){report.append(\": \").append(dependency.getDescription());}report.append(NEW_LINE);}}"
  },
  {
    "code_smells": [],
    "source_code": "protected void addRepository(RemoteRepository repository){if(this.repositories.contains(repository)){return;}repository=getPossibleMirror(repository);repository=applyProxy(repository);repository=applyAuthentication(repository);this.repositories.add(0,repository);}"
  },
  {
    "code_smells": [],
    "source_code": "private LogLevel coerceLogLevel(String level){String trimmedLevel=level.trim();if(\"false\".equalsIgnoreCase(trimmedLevel)){return LogLevel.OFF;}return LogLevel.valueOf(trimmedLevel.toUpperCase(Locale.ENGLISH));}"
  },
  {
    "code_smells": [],
    "source_code": "private void addMethod(Method method){addMethodIfPossible(method,\"get\",0,BeanProperty::addGetter);addMethodIfPossible(method,\"is\",0,BeanProperty::addGetter);addMethodIfPossible(method,\"set\",1,BeanProperty::addSetter);}"
  },
  {
    "code_smells": [],
    "source_code": "Listener(CountDownLatch latch){this.latch=latch;}"
  },
  {
    "code_smells": [],
    "source_code": "@Bean public ClassPathFileSystemWatcher classPathFileSystemWatcher(FileSystemWatcherFactory fileSystemWatcherFactory,ClassPathRestartStrategy classPathRestartStrategy){DefaultRestartInitializer restartInitializer=new DefaultRestartInitializer();URL[]urls=restartInitializer.getInitialUrls(Thread.currentThread());if(urls==null){urls=new URL[0];}return new ClassPathFileSystemWatcher(fileSystemWatcherFactory,classPathRestartStrategy,urls);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "protected Server createJettyServer(JettyHttpHandlerAdapter servlet){int port=(getPort()>=0)? getPort(): 0;InetSocketAddress address=new InetSocketAddress(getAddress(),port);Server server=new Server(getThreadPool());server.addConnector(createConnector(address,server));ServletHolder servletHolder=new ServletHolder(servlet);servletHolder.setAsyncSupported(true);ServletContextHandler contextHandler=new ServletContextHandler(server,\"\",false,false);contextHandler.addServlet(servletHolder,\"/\");server.setHandler(addHandlerWrappers(contextHandler));JettyReactiveWebServerFactory.logger.info(\"Server initialized with port: \"+port);if(getSsl()!=null && getSsl().isEnabled()){customizeSsl(server,address);}for(JettyServerCustomizer customizer : getServerCustomizers()){customizer.customize(server);}if(this.useForwardHeaders){new ForwardHeadersCustomizer().customize(server);}return server;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override @NonNull public MethodMetadata getFactoryMethodMetadata(){return this.factoryMethodMetadata;}"
  },
  {
    "code_smells": [],
    "source_code": "private void processInterfaces(ConfigurationClass configClass,SourceClass sourceClass)throws IOException{for(SourceClass ifc : sourceClass.getInterfaces()){Set<MethodMetadata>beanMethods=retrieveBeanMethodMetadata(ifc);for(MethodMetadata methodMetadata : beanMethods){if(!methodMetadata.isAbstract()){configClass.addBeanMethod(new BeanMethod(methodMetadata,configClass));}}processInterfaces(configClass,ifc);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "static ResolvableType forType(@Nullable Type type,@Nullable TypeProvider typeProvider,@Nullable VariableResolver variableResolver){if(type==null && typeProvider!=null){type=SerializableTypeWrapper.forTypeProvider(typeProvider);}if(type==null){return NONE;}if(type instanceof Class){return new ResolvableType(type,typeProvider,variableResolver,(ResolvableType)null);}cache.purgeUnreferencedEntries();ResolvableType resultType=new ResolvableType(type,typeProvider,variableResolver);ResolvableType cachedType=cache.get(resultType);if(cachedType==null){cachedType=new ResolvableType(type,typeProvider,variableResolver,resultType.hash);cache.put(cachedType,cachedType);}resultType.resolved=cachedType.resolved;return resultType;}"
  },
  {
    "code_smells": [],
    "source_code": "public ToStringCreator append(String fieldName,@Nullable Object value){printFieldSeparatorIfNecessary();this.styler.styleField(this.buffer,fieldName,value);return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public ReactiveCassandraBatchOperations delete(Iterable<?>entities,WriteOptions options){assertNotExecuted();Assert.notNull(entities,\"Entities must not be null\");Assert.notNull(options,\"WriteOptions must not be null\");this.batchMonos.add(Mono.just(doDelete(entities,options)));return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Before public void setup()throws Exception{RepositoryFactorySupport factory=new CouchbaseRepositoryFactory(operationsMapping,indexManager);bookRepository=factory.getRepository(BookRepository.class);authorRepository=factory.getRepository(AuthorRepository.class);addressRepository=factory.getRepository(AddressRepository.class);}"
  },
  {
    "code_smells": [],
    "source_code": "PropertySpecifier(String path){Assert.hasText(path,\"Path must not be null/empty!\");this.path=path;this.stringMatcher=null;this.ignoreCase=null;this.valueTransformer=NoOpPropertyValueTransformer.INSTANCE;}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isPartition(){return name().contains(\"PARTITION\");}"
  },
  {
    "code_smells": [],
    "source_code": "private void destroyBeanFactoryLocator(){Optional.ofNullable(getBeanFactoryLocator()).ifPresent(GemfireBeanFactoryLocator::destroy);this.beanFactoryLocator=null;}"
  },
  {
    "code_smells": [],
    "source_code": "public void setInterestPolicy(InterestPolicy interestPolicy){this.interestPolicy=interestPolicy;}"
  },
  {
    "code_smells": [],
    "source_code": "public static EvictionActionType valueOfIgnoreCase(final String name){for(EvictionActionType evictionActionType : values()){if(evictionActionType.name().equalsIgnoreCase(name)){return evictionActionType;}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "@Nullable protected PdxSerializer resolveCustomPdxSerializer(@NonNull PersistentProperty<?>property){Map<?,PdxSerializer>customPdxSerializers=getCustomPdxSerializers();return this.pdxSerializerResolvers.stream().map(it->it.resolve(customPdxSerializers,property)).filter(Objects::nonNull).findFirst().orElse(null);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void beforeStep(StepExecution stepExecution){}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public SecurityConfigurer<I>namenodePrincipal(String principal){if(StringUtils.hasText(principal)){hadoopSecurity.setNamenodePrincipal(principal);}return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public NamedMongoScript(String name,String rawScript){this(name,new ExecutableMongoScript(rawScript));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return description.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Long zRemRangeByScore(byte[]key,double min,double max){return convertAndReturn(delegate.zRemRangeByScore(key,min,max),identityConverter);}"
  },
  {
    "code_smells": [],
    "source_code": "private DeleteCommand(@Nullable ByteBuffer key,List<RecordId>recordIds){super(key);this.recordIds=recordIds;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public byte[]dump(byte[]key){Assert.notNull(key,\"Key must not be null!\");return connection.getClusterCommandExecutor().executeCommandOnSingleNode((JedisClusterCommandCallback<byte[]>)client->client.dump(key),connection.getTopologyProvider().getTopology().getKeyServingMasterNode(key)).getValue();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void killClient(String host,int port){Assert.hasText(host,\"Host for 'CLIENT KILL' must not be 'null' or 'empty'.\");String client=String.format(\"%s:%s\",host,port);try{if(isPipelined()){pipeline(connection.newLettuceStatusResult(getAsyncConnection().clientKill(client)));return;}getConnection().clientKill(client);}catch(Exception e){throw convertLettuceAccessException(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Cursor<T>open(){this.delegate=delegate.open();return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public String toCommandLine(){return preparer.map(it->it.apply(value)).orElseGet(()->value.toString());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public LinkRelation getItemResourceRel(){LinkRelation fallback=domainTypeMapping.getItemResourceRel();if(repositoryAnnotation!=null){String rel=repositoryAnnotation.itemResourceRel();return StringUtils.hasText(rel)? LinkRelation.of(rel): fallback;}return fallback;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Supplier<MultiValueMap<K,V>>supplier(){return()->CollectionUtils.toMultiValueMap(new HashMap<>());}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")private static<T>boolean test(Annotation annotation,String metaAnnotationName,String attribute,Predicate<T>filter){if(annotation.annotationType().getName().equals(metaAnnotationName)){Map<String,Object>attributes=AnnotationUtils.getAnnotationAttributes(annotation);return !attributes.isEmpty()&& filter.test((T)attributes.get(attribute));}MultiValueMap<String,Object>attributes=AnnotatedElementUtils.getAllAnnotationAttributes(annotation.annotationType(),metaAnnotationName);if(attributes==null || attributes.isEmpty()){return false;}List<Object>elementTypes=attributes.get(attribute);for(Object value : elementTypes){if(filter.test((T)value)){return true;}}return false;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean supportsParameter(MethodParameter parameter){if(!super.supportsParameter(parameter)){return false;}Class<?>type=parameter.getParameterType();if(!type.isInterface()){return false;}if(parameter.getParameterAnnotation(ProjectedPayload.class)!=null){return true;}if(AnnotatedElementUtils.findMergedAnnotation(type,ProjectedPayload.class)!=null){return true;}String packageName=ClassUtils.getPackageName(type);return !IGNORED_PACKAGES.stream().anyMatch(it->packageName.startsWith(it));}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override public TypedValue read(EvaluationContext context,@Nullable Object target,String name)throws AccessException{Assert.state(target!=null,\"Target must not be null\");Class<?>type=(target instanceof Class ?(Class<?>)target : target.getClass());if(type.isArray()&& name.equals(\"length\")){if(target instanceof Class){throw new AccessException(\"Cannot access length on array class itself\");}return new TypedValue(Array.getLength(target));}PropertyCacheKey cacheKey=new PropertyCacheKey(type,name,target instanceof Class);InvokerPair invoker=this.readerCache.get(cacheKey);this.lastReadInvokerPair=invoker;if(invoker==null || invoker.member instanceof Method){Method method=(Method)(invoker!=null ? invoker.member : null);if(method==null){method=findGetterForProperty(name,type,target);if(method!=null){Property property=new Property(type,method,null);TypeDescriptor typeDescriptor=new TypeDescriptor(property);invoker=new InvokerPair(method,typeDescriptor);this.lastReadInvokerPair=invoker;this.readerCache.put(cacheKey,invoker);}}if(method!=null){try{ReflectionUtils.makeAccessible(method);Object value=method.invoke(target);return new TypedValue(value,invoker.typeDescriptor.narrow(value));}catch(Exception ex){throw new AccessException(\"Unable to access property '\"+name+\"' through getter method\",ex);}}}if(invoker==null || invoker.member instanceof Field){Field field=(Field)(invoker==null ? null : invoker.member);if(field==null){field=findField(name,type,target);if(field!=null){invoker=new InvokerPair(field,new TypeDescriptor(field));this.lastReadInvokerPair=invoker;this.readerCache.put(cacheKey,invoker);}}if(field!=null){try{ReflectionUtils.makeAccessible(field);Object value=field.get(target);return new TypedValue(value,invoker.typeDescriptor.narrow(value));}catch(Exception ex){throw new AccessException(\"Unable to access field '\"+name+\"'\",ex);}}}throw new AccessException(\"Neither getter method nor field found for property '\"+name+\"'\");}"
  },
  {
    "code_smells": [],
    "source_code": "String toString(boolean appended){if(variables.isEmpty()){return \"\";}StringBuilder builder=new StringBuilder();TemplateVariable previous=null;for(TemplateVariable variable : variables){VariableType type=variable.getType();type=appended && type.equals(REQUEST_PARAM)? REQUEST_PARAM_CONTINUED : type;if(previous==null){builder.append(\"{\").append(type.toString());}else if(!previous.isCombinable(variable)){builder.append(\"}{\").append(type.toString());}else{builder.append(\",\");}previous=variable;builder.append(variable.getName());}return builder.append(\"}\").toString();}"
  },
  {
    "code_smells": [],
    "source_code": "protected D createModelWithId(Object id,T entity){return createModelWithId(id,entity,new Object[0]);}"
  },
  {
    "code_smells": [],
    "source_code": "private Object readTypeToken(TypeToken<?>token,HttpInputMessage inputMessage)throws IOException{Reader json=new InputStreamReader(inputMessage.getBody(),getCharset(inputMessage.getHeaders()));try{return this.gson.fromJson(json,token.getType());}catch(JsonParseException ex){throw new HttpMessageNotReadableException(\"Could not read JSON: \"+ex.getMessage(),ex);}}"
  },
  {
    "code_smells": [],
    "source_code": "@SuppressWarnings(\"unchecked\")public static<T>T getParentOfClass(IModelElement child,Class<T>parentType){if(child!=null){IModelElement parent=child.getElementParent();while(parent!=null){if(parentType.isAssignableFrom(parent.getClass())){return(T)parent;}parent=parent.getElementParent();}}return null;}"
  },
  {
    "code_smells": [],
    "source_code": "public void moveConfigDown(IBeansConfig config){String configName=config.getElementName();if(configNames.contains(configName)){ArrayList<String>newConfigNames=new ArrayList<String>(configNames);int index=newConfigNames.indexOf(configName);if(index<(configNames.size()-1)){newConfigNames.remove(configName);newConfigNames.add(index+1,configName);configNames.clear();configNames.addAll(newConfigNames);notifyListeners();}}}"
  },
  {
    "code_smells": [],
    "source_code": "protected IProject getProject(Object obj){IProject project=null;if(obj instanceof IProject){project=(IProject)obj;}else if(obj instanceof IJavaProject){project=((IJavaProject)obj).getProject();}else if(obj instanceof IAdaptable){project=(IProject)((IAdaptable)obj).getAdapter(IProject.class);}else if(obj instanceof BootDashElement){project=((BootDashElement)obj).getProject();}return project;}"
  },
  {
    "code_smells": [],
    "source_code": "private void onFilter(ExpandableSection expandable,CheckBoxesSection<Dependency>checkboxesSection,String cat){Filter<Dependency>filter=this.filter.getValue();checkboxesSection.applyFilter(filter);boolean isTrivialFilter=filter==null || filter.isTrivial();if(checkboxesSection.isCreated()){boolean hasVisible=checkboxesSection.hasVisible();expandable.setVisible(hasVisible);if(hasVisible){expandable.getExpansionState().setValue(!isTrivialFilter);}}layout();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean select(Viewer viewer,Object parentElement,Object element){if(matcher==null){return true;}else{String label=labelProvider.getText(element);if(match(label)){return true;}else if(element instanceof Describable){String description=((Describable)element).getDescription();return match(description);}return false;}}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean isTeamPrivateMember(){return false;}"
  },
  {
    "code_smells": [],
    "source_code": "public static String getClassVersion(Class clazz){String version=\"unkown\";if(clazz.getPackage().getImplementationVersion()!=null){version=clazz.getPackage().getImplementationVersion();}return version;}"
  },
  {
    "code_smells": [],
    "source_code": "private String getMessage(Exception _e){Throwable e=ExceptionUtil.getDeepestCause(_e);if(e instanceof ValueParseException){String msg=e.getMessage();if(StringUtil.hasText(msg)){return msg;}else{return \"An error occurred: \"+getSimpleError(e);}}else{return ExceptionUtil.getMessage(e);}}"
  },
  {
    "code_smells": [],
    "source_code": "public static String[][]suggestArgumentNamesWithProposals(IJavaProject project,IMethodBinding binding){int nParams=binding.getParameterTypes().length;if(nParams>0){try{IMethod method=(IMethod)binding.getMethodDeclaration().getJavaElement();if(method!=null){String[]parameterNames=method.getParameterNames();if(parameterNames.length==nParams){return suggestArgumentNamesWithProposals(project,parameterNames);}}}catch(JavaModelException e){}}String[][]names=new String[nParams][];for(int i=0;i<names.length;i++){names[i]=new String[]{\"arg\"+i};}return names;}"
  },
  {
    "code_smells": [],
    "source_code": "private void formatElement(IProgressMonitor monitor){FormatProcessorXML formatProcessor=new FormatProcessorXML();formatProcessor.setProgressMonitor(monitor);formatProcessor.getFormatPreferences().setClearAllBlankLines(true);formatProcessor.formatModel(model);CleanupProcessorXML bla=new CleanupProcessorXML();bla.getCleanupPreferences().setCompressEmptyElementTags(true);bla.cleanupModel(model);}"
  },
  {
    "code_smells": [],
    "source_code": "public static void setLocalImageDescriptors(IAction action,String iconName){setImageDescriptors(action,\"lcl16\",iconName);}"
  },
  {
    "code_smells": [],
    "source_code": "public String newlineWithIndent(int indent){StringBuilder buf=new StringBuilder();addNewlineWithIndent(indent,buf);return buf.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "public SqsMessageHandler(AmazonSQSAsync amazonSqs,ResourceIdResolver resourceIdResolver){this(amazonSqs,new DynamicQueueUrlDestinationResolver(amazonSqs,resourceIdResolver));}"
  },
  {
    "code_smells": [],
    "source_code": "public S userFlag(String userFlag){assertReceiver();this.receiver.setUserFlag(userFlag);return _this();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<T>T getValue(Class<T>desiredResultType)throws EvaluationException{return org.springframework.expression.common.ExpressionUtils.convertTypedValue(null,this.typedResultValue,desiredResultType);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @ManagedOperation public void removeChannelMapping(String key){Map<String,String>newChannelMappings=new ConcurrentHashMap<String,String>(this.channelMappings);newChannelMappings.remove(key);this.channelMappings=newChannelMappings;}"
  },
  {
    "code_smells": [],
    "source_code": "public Object aggregate(Collection<Object>results){for(Object o : results){if(o instanceof MessagingException){return new ConsolidatedResultsException(results);}}return results;}"
  },
  {
    "code_smells": [],
    "source_code": "protected void checkClosure(int bite)throws IOException{if(bite<0){logger.debug(\"Socket closed during message assembly\");throw new IOException(\"Socket closed during message assembly\");}}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "@Override protected String getGatewayClassName(Element element){return((StringUtils.hasText(element.getAttribute(\"marshaller\")))? MarshallingWebServiceOutboundGateway.class : SimpleWebServiceOutboundGateway.class).getName();}"
  },
  {
    "code_smells": [],
    "source_code": "@RequestMapping(\"/home\")public String home(Model model){model.addAttribute(\"name\",\"spring\");return \"home\";}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected boolean includeOperation(Method method,String beanKey){PropertyDescriptor pd=BeanUtils.findPropertyForMethod(method);return(pd!=null && hasManagedAttribute(method))|| hasManagedOperation(method);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public<T>List<T>search(Name base,String filter,int searchScope,ContextMapper<T>mapper){return search(base,filter,searchScope,ALL_ATTRIBUTES,mapper);}"
  },
  {
    "code_smells": [],
    "source_code": "@Nullable public Interceptor getEntityInterceptor()throws IllegalStateException,BeansException{if(this.entityInterceptor instanceof Interceptor){return(Interceptor)this.entityInterceptor;}else if(this.entityInterceptor instanceof String){if(this.beanFactory==null){throw new IllegalStateException(\"Cannot get entity interceptor via bean name if no bean factory set\");}String beanName=(String)this.entityInterceptor;return this.beanFactory.getBean(beanName,Interceptor.class);}else{return null;}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "@Override @Nullable public Object invoke(Object proxy,Method method,Object[]args)throws Throwable{if(method.getName().equals(\"equals\")){return(proxy==args[0]);}else if(method.getName().equals(\"hashCode\")){return hashCode();}else if(method.getName().equals(\"toString\")){return \"Shared EntityManager proxy for target factory[\"+this.targetFactory+\"]\";}else if(method.getName().equals(\"getEntityManagerFactory\")){return this.targetFactory;}else if(method.getName().equals(\"getCriteriaBuilder\")|| method.getName().equals(\"getMetamodel\")){try{return EntityManagerFactory.class.getMethod(method.getName()).invoke(this.targetFactory);}catch(InvocationTargetException ex){throw ex.getTargetException();}}else if(method.getName().equals(\"unwrap\")){Class<?>targetClass=(Class<?>)args[0];if(targetClass!=null && targetClass.isInstance(proxy)){return proxy;}}else if(method.getName().equals(\"isOpen\")){return true;}else if(method.getName().equals(\"close\")){return null;}else if(method.getName().equals(\"getTransaction\")){throw new IllegalStateException(\"Not allowed to create transaction on shared EntityManager-\"+\"use Spring transactions or EJB CMT instead\");}EntityManager target=EntityManagerFactoryUtils.doGetTransactionalEntityManager(this.targetFactory,this.properties,this.synchronizedWithTransaction);if(method.getName().equals(\"getTargetEntityManager\")){if(target==null){throw new IllegalStateException(\"No transactional EntityManager available\");}return target;}else if(method.getName().equals(\"unwrap\")){Class<?>targetClass=(Class<?>)args[0];if(targetClass==null){return(target!=null ? target : proxy);}if(target==null){throw new IllegalStateException(\"No transactional EntityManager available\");}}else if(transactionRequiringMethods.contains(method.getName())){if(target==null ||(!TransactionSynchronizationManager.isActualTransactionActive()&& !target.getTransaction().isActive())){throw new TransactionRequiredException(\"No EntityManager with actual transaction available \"+\"for current thread-cannot reliably process '\"+method.getName()+\"' call\");}}boolean isNewEm=false;if(target==null){logger.debug(\"Creating new EntityManager for shared EntityManager invocation\");target=(!CollectionUtils.isEmpty(this.properties)? this.targetFactory.createEntityManager(this.properties): this.targetFactory.createEntityManager());isNewEm=true;}try{Object result=method.invoke(target,args);if(result instanceof Query){Query query=(Query)result;if(isNewEm){Class<?>[]ifcs=ClassUtils.getAllInterfacesForClass(query.getClass(),this.proxyClassLoader);result=Proxy.newProxyInstance(this.proxyClassLoader,ifcs,new DeferredQueryInvocationHandler(query,target));isNewEm=false;}else{EntityManagerFactoryUtils.applyTransactionTimeout(query,this.targetFactory);}}return result;}catch(InvocationTargetException ex){throw ex.getTargetException();}finally{if(isNewEm){EntityManagerFactoryUtils.closeEntityManager(target);}}}"
  },
  {
    "code_smells": [],
    "source_code": "public OperationResponse create(HttpStatus status,HttpHeaders headers,byte[]content){return new StandardOperationResponse(status,augmentHeaders(headers,content),content);}"
  },
  {
    "code_smells": [],
    "source_code": "private Reference getReference(final Attributes attributes){return new Reference(attributes.getValue(DatabaseXmlUtils.LOCAL),attributes.getValue(DatabaseXmlUtils.FOREIGN));}"
  },
  {
    "code_smells": [],
    "source_code": "@CliCommand(value=\"!g\",help=\"Passes a command directly through to the Felix shell infrastructure.\")public void shell(@CliOption(key=\"\",mandatory=false,specifiedDefaultValue=\"help\",unspecifiedDefaultValue=\"help\",help=\"The command to pass to Felix(WARNING: no validation or security checks are performed).\"+\"Default: `help`.\")final String commandLine)throws Exception{perform(commandLine);}"
  },
  {
    "code_smells": [],
    "source_code": "protected void bindMetadataProvider(final MetadataProvider mp){synchronized(lock){Validate.notNull(mp,\"Metadata provider required\");final String mid=mp.getProvidesType();Validate.isTrue(MetadataIdentificationUtils.isIdentifyingClass(mid),\"Metadata provider '%s' violated interface contract by returning '%s'\",mp,mid);Validate.isTrue(!providerMap.containsKey(mid),\"Metadata provider '%s' already is providing metadata for '%s'\",providerMap.get(mid),mid);providers.add(mp);providerMap.put(mid,mp);}}"
  },
  {
    "code_smells": [],
    "source_code": "private File getPath(final LogicalPath logicalPath){final Pom pom=pomManagementService.getPomFromModuleName(logicalPath.getModule());final File moduleRoot=getModuleRoot(logicalPath.getModule(),pom);final String pathRelativeToPom=logicalPath.getPathRelativeToPom(pom);return new File(moduleRoot,pathRelativeToPom);}"
  },
  {
    "code_smells": [],
    "source_code": "@Scheduled(fixedRate=2000)public void processQueues(){for(DeferredResult<String>result : this.responseBodyQueue){result.setResult(\"Deferred result\");this.responseBodyQueue.remove(result);}for(DeferredResult<String>result : this.exceptionQueue){result.setErrorResult(new IllegalStateException(\"DeferredResult error\"));this.exceptionQueue.remove(result);}for(DeferredResult<ModelAndView>result : this.mavQueue){result.setResult(new ModelAndView(\"views/html\",\"javaBean\",new JavaBean(\"bar\",\"apple\")));this.mavQueue.remove(result);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void decide(Authentication authentication,Object object,Collection<ConfigAttribute>configAttributes)throws AccessDeniedException{int deny=0;for(AccessDecisionVoter voter : getDecisionVoters()){int result=voter.vote(authentication,object,configAttributes);if(logger.isDebugEnabled()){logger.debug(\"Voter: \"+voter+\",returned: \"+result);}switch(result){case AccessDecisionVoter.ACCESS_GRANTED: return;case AccessDecisionVoter.ACCESS_DENIED: deny++;break;default: break;}}if(deny>0){throw new AccessDeniedException(messages.getMessage(\"AbstractAccessDecisionManager.accessDenied\",\"Access is denied\"));}checkAllowIfAllAbstainDecisions();}"
  },
  {
    "code_smells": [],
    "source_code": "public void testSynchronizationGlobal()throws Exception{SecurityContextHolder.clearContext();SecurityContextHolder.setStrategyName(SecurityContextHolder.MODE_GLOBAL);loadStartAndWaitForThreads(true,\"Main_\",NUM_THREADS,true,false);assertThat(errors).as(\"Thread errors detected;review log output for details\").isZero();}"
  },
  {
    "code_smells": [],
    "source_code": "public boolean hasAnyScope(String...scopes){boolean result=OAuth2ExpressionUtils.hasAnyScope(authentication,scopes);if(!result){missingScopes.addAll(Arrays.asList(scopes));}return result;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public String toString(){return \"DefaultStateContext[stage=\"+stage+\",message=\"+message+\",messageHeaders=\"+messageHeaders+\",extendedState=\"+extendedState+\",transition=\"+transition+\",stateMachine=\"+stateMachine+\",source=\"+source+\",target=\"+target+\",sources=\"+sources+\",targets=\"+targets+\",exception=\"+exception+\"]\";}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Transaction createTransaction(@Nullable String name,int timeout)throws NotSupportedException,SystemException{if(timeout>=0){this.transactionManager.setTransactionTimeout(timeout);}this.transactionManager.begin();return new ManagedTransactionAdapter(this.transactionManager);}"
  },
  {
    "code_smells": [],
    "source_code": "private static Ciphertext toCiphertext(String ciphertext,@Nullable VaultTransitContext context){return context!=null ? Ciphertext.of(ciphertext).with(context): Ciphertext.of(ciphertext);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public HandlerStrategies.Builder localeContextResolver(LocaleContextResolver localeContextResolver){Assert.notNull(localeContextResolver,\"LocaleContextResolver must not be null\");this.localeContextResolver=localeContextResolver;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "@Nullable private ResourceUrlProvider findResourceUrlProvider(HttpServletRequest request){if(this.resourceUrlProvider!=null){return this.resourceUrlProvider;}return(ResourceUrlProvider)request.getAttribute(ResourceUrlProviderExposingInterceptor.RESOURCE_URL_PROVIDER_ATTR);}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public BindStatus(RequestContext requestContext,String path,boolean htmlEscape)throws IllegalStateException{this.requestContext=requestContext;this.path=path;this.htmlEscape=htmlEscape;String beanName;int dotPos=path.indexOf('.');if(dotPos==-1){beanName=path;this.expression=null;}else{beanName=path.substring(0,dotPos);this.expression=path.substring(dotPos+1);}this.errors=requestContext.getErrors(beanName,false);if(this.errors!=null){if(this.expression!=null){if(\"*\".equals(this.expression)){this.objectErrors=this.errors.getAllErrors();}else if(this.expression.endsWith(\"*\")){this.objectErrors=this.errors.getFieldErrors(this.expression);}else{this.objectErrors=this.errors.getFieldErrors(this.expression);this.value=this.errors.getFieldValue(this.expression);this.valueType=this.errors.getFieldType(this.expression);if(this.errors instanceof BindingResult){this.bindingResult=(BindingResult)this.errors;this.actualValue=this.bindingResult.getRawFieldValue(this.expression);this.editor=this.bindingResult.findEditor(this.expression,null);}else{this.actualValue=this.value;}}}else{this.objectErrors=this.errors.getGlobalErrors();}this.errorCodes=initErrorCodes(this.objectErrors);}else{Object target=requestContext.getModelObject(beanName);if(target==null){throw new IllegalStateException(\"Neither BindingResult nor plain target object for bean name '\"+beanName+\"' available as request attribute\");}if(this.expression!=null && !\"*\".equals(this.expression)&& !this.expression.endsWith(\"*\")){BeanWrapper bw=PropertyAccessorFactory.forBeanPropertyAccess(target);this.value=bw.getPropertyValue(this.expression);this.valueType=bw.getPropertyType(this.expression);this.actualValue=this.value;}this.errorCodes=new String[0];this.errorMessages=new String[0];}if(htmlEscape && this.value instanceof String){this.value=HtmlUtils.htmlEscape((String)this.value);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Nullable public Class<?>getBeanType(){return this.adviceBean.getBeanType();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void handleRequest(HttpServletRequest servletRequest,HttpServletResponse servletResponse)throws ServletException,IOException{ServerHttpRequest request=new ServletServerHttpRequest(servletRequest);ServerHttpResponse response=new ServletServerHttpResponse(servletResponse);try{this.sockJsService.handleRequest(request,response,getSockJsPath(servletRequest),this.webSocketHandler);}catch(Throwable ex){throw new SockJsException(\"Uncaught failure in SockJS request,uri=\"+request.getURI(),ex);}}"
  },
  {
    "code_smells": [],
    "source_code": "private void addJobExecutionListener(){Map<String,JobExecutionListener>listeners=this.beanFactory.getBeansOfType(JobExecutionListener.class);this.jobExecutionListeners.addAll(listeners.values());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected YarnContainer performBuild()throws Exception{YarnContainerFactoryBean fb=new YarnContainerFactoryBean();fb.setContainerRef(ref);fb.setContainerClass(clazz);fb.afterPropertiesSet();YarnContainer container=fb.getObject();if(container instanceof AbstractYarnContainer){((AbstractYarnContainer)container).setConfiguration(configuration);}return container;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public final void run(IProgressMonitor monitor)throws InvocationTargetException,InterruptedException{try{doit(monitor);}catch(InterruptedException e){throw e;}catch(OperationCanceledException e){throw new InterruptedException(\"Canceled by user\");}catch(InvocationTargetException e){throw e;}catch(Throwable e){throw new InvocationTargetException(e);}}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private boolean r_prelude(){int among_var;int v_1;int v_2;int v_3;int v_4;int v_5;v_1=cursor;replab0: while(true){v_2=cursor;lab1: do{bra=cursor;among_var=find_among(a_0,7);if(among_var==0){break lab1;}ket=cursor;switch(among_var){case 0: break lab1;case 1: slice_from(\"\\u00E0\");break;case 2: slice_from(\"\\u00E8\");break;case 3: slice_from(\"\\u00EC\");break;case 4: slice_from(\"\\u00F2\");break;case 5: slice_from(\"\\u00F9\");break;case 6: slice_from(\"qU\");break;case 7: if(cursor>=limit){break lab1;}cursor++;break;}continue replab0;}while(false);cursor=v_2;break replab0;}cursor=v_1;replab2: while(true){v_3=cursor;lab3: do{golab4: while(true){v_4=cursor;lab5: do{if(!(in_grouping(g_v,97,249))){break lab5;}bra=cursor;lab6: do{v_5=cursor;lab7: do{if(!(eq_s(1,\"u\"))){break lab7;}ket=cursor;if(!(in_grouping(g_v,97,249))){break lab7;}slice_from(\"U\");break lab6;}while(false);cursor=v_5;if(!(eq_s(1,\"i\"))){break lab5;}ket=cursor;if(!(in_grouping(g_v,97,249))){break lab5;}slice_from(\"I\");}while(false);cursor=v_4;break golab4;}while(false);cursor=v_4;if(cursor>=limit){break lab3;}cursor++;}continue replab2;}while(false);cursor=v_3;break replab2;}return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public RangeDecoderFromBuffer(int inputSizeMax,ArrayCache arrayCache){buf=arrayCache.getByteArray(inputSizeMax-INIT_SIZE,false);pos=buf.length;}"
  },
  {
    "code_smells": [],
    "source_code": "public static String toString(byte[]b){ByteArrayOutputStream os=new ByteArrayOutputStream();for(int i=0;i<b.length;i++){short value=(short)(b[i]& 0xFF);byte high=(byte)(value>>4);byte low=(byte)(value & 0xF);os.write(Base16.charAt(high));os.write(Base16.charAt(low));}return new String(os.toByteArray());}"
  },
  {
    "code_smells": [],
    "source_code": "void m64(C0 arg){i0++;i1++;i2++;i3++;i4++;i5++;i6++;i7++;i8++;i9++;}"
  },
  {
    "code_smells": [],
    "source_code": "void m54(C17 arg){i0++;i1++;i2++;i3++;i4++;i5++;i6++;i7++;i8++;i9++;}"
  },
  {
    "code_smells": [],
    "source_code": "void m39(C22 arg){i0++;i1++;i2++;i3++;i4++;i5++;i6++;i7++;i8++;i9++;}"
  },
  {
    "code_smells": [],
    "source_code": "void m63(C36 arg){i0++;i1++;i2++;i3++;i4++;i5++;i6++;i7++;i8++;i9++;}"
  },
  {
    "code_smells": [],
    "source_code": "void m1(C7 arg){i0++;i1++;i2++;i3++;i4++;i5++;i6++;i7++;i8++;i9++;}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onComplete(){if(done){return;}done=true;C b=buffer;if(b!=null && !b.isEmpty()){actual.onNext(b);}actual.onComplete();}"
  },
  {
    "code_smells": [],
    "source_code": "@Override @Nullable public Object scanUnsafe(Attr key){if(key==Attr.PARENT)return s;return InnerOperator.super.scanUnsafe(key);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void onSubscribe(Subscription s){if(Operators.validate(this.s,s)){this.s=s;actual.onSubscribe(this);s.request(Long.MAX_VALUE);}}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public Flux<?>flux(){sender=sender(senderOptions());Flux<Person>srcFlux=source().flux();return sender.sendTransactionally(srcFlux.map(p->records(p))).concatMap(r->r).doOnNext(r->log.info(\"Sent record successfully{}\",r)).doOnError(e->log.error(\"Send failed,terminating.\",e)).doOnCancel(()->close());}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public int hashCode(){return Objects.hash(consumer,name,deferredConsumer);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public final Builder sslContext(SslContext sslContext){this.sslContext=Objects.requireNonNull(sslContext,\"sslContext\");return this;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "void getHashes(List<Integer>searchHashes,int bitShift){searchHashes.clear();if(title!=null){searchHashes.add((title.ignoreCaseHash>>>bitShift));}if(person!=null){addHash(person.ignoreCaseHash,searchHashes,bitShift);}if(category!=null){addHash(category.ignoreCaseHash,searchHashes,bitShift);}if(subCategory!=null){addHash(subCategory.ignoreCaseHash,searchHashes,bitShift);}if(chanName.length()>0){addHash(chanName.hashCode(),searchHashes,bitShift);}if(chanNames!=null && chanNames.length>0){for(String chanName : chanNames){addHash(chanName.hashCode(),searchHashes,bitShift);}}if(network!=null){addHash(network.ignoreCaseHash,searchHashes,bitShift);}if(rated!=null){addHash(rated.ignoreCaseHash,searchHashes,bitShift);}if(year!=null){addHash(year.ignoreCaseHash,searchHashes,bitShift);}if(pr!=null){addHash(pr.ignoreCaseHash,searchHashes,bitShift);}if(searchHashes.contains(0))searchHashes.clear();}"
  },
  {
    "code_smells": [],
    "source_code": "public CaptureDeviceInput activateInput(CaptureDeviceInput activateMe)throws EncodingException{super.activateInput(activateMe);if(activeSource!=null && isLoaded()){boolean savePrefsAfter=(activeSource.getBrightness()<0)||(activeSource.getContrast()<0)||(activeSource.getHue()<0)||(activeSource.getSaturation()<0)||(activeSource.getSharpness()<0);synchronized(devlock){setChannel0(pHandle,Integer.toString(activeSource.getIndex()));}int[]defaultColors=updateColors();activeSource.setDefaultColors(defaultColors[0],defaultColors[1],defaultColors[2],defaultColors[3],defaultColors[4]);if(savePrefsAfter)writePrefs();}return activeSource;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "public static int reconfigureNetworking(){if(Sage.getBoolean(NET_CONFIG_WIRED,true)){bringDownWireless();setupNetworking(Sage.get(\"linux/wired_network_port\",\"eth0\"));}else{if(Sage.getBoolean(\"linux/disable_wired_when_wireless_is_enabled\",false))bringDownWired();IOUtils.exec2(\"ifconfig \"+Sage.get(\"linux/wireless_network_port\",\"eth1\")+\" up\");IOUtils.exec2(\"iwconfig \"+Sage.get(\"linux/wireless_network_port\",\"eth1\")+\" essid \"+Sage.get(NET_CONFIG_SSID,\"any\"));String crypto=Sage.get(NET_CONFIG_ENCRYPTION,\"WPA\");if(\"None\".equals(crypto)){IOUtils.exec2(\"iwconfig \"+Sage.get(\"linux/wireless_network_port\",\"eth1\")+\" key off\");}else{String key=Sage.get(NET_CONFIG_ENCRYPTION_KEY,\"\");boolean hexKey=true;for(int i=0;i<key.length();i++){if(Character.digit(key.charAt(i),16)<0){hexKey=false;break;}}if(\"WEP\".equals(crypto)){IOUtils.exec2(\"iwconfig \"+Sage.get(\"linux/wireless_network_port\",\"eth1\")+\" key on\");if(hexKey)IOUtils.exec2(\"iwconfig \"+Sage.get(\"linux/wireless_network_port\",\"eth1\")+\" key \"+Sage.get(NET_CONFIG_ENCRYPTION_KEY,\"\"));else IOUtils.exec2(\"iwconfig \"+Sage.get(\"linux/wireless_network_port\",\"eth1\")+\" key s:\"+Sage.get(NET_CONFIG_ENCRYPTION_KEY,\"\"));}else{}}setupNetworking(Sage.get(\"linux/wireless_network_port\",\"eth1\"));}return 0;}"
  },
  {
    "code_smells": [],
    "source_code": "public static MetaImage getMetaImage(Vector<Object>src){if(src==null)return globalImageCache.get(null);if(globalImageCache.containsKey(src)){MetaImage rv=globalImageCache.get(src);return rv;}{@SuppressWarnings(\"unchecked\")Vector<Object>tmpSrc=(Vector<Object>)src.clone();src=tmpSrc;}if(DEBUG_MI)System.out.println(\"first getMetaImage src=\"+src);MetaImage rv=new MetaImage(src);MetaImage srcImage=(MetaImage)src.get(0);rv.initDataStructures(1);rv.width[0]=srcImage.getWidth(0);rv.height[0]=srcImage.getHeight(0);synchronized(globalImageCache){if(globalImageCache.containsKey(src))return globalImageCache.get(src);globalImageCache.put(src,rv);}if(DEBUG_MI)System.out.println(\"DONE first getMetaImage src=\"+src);return rv;}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "public int getDVDTotalTitles(){if(bdp!=null)return bdp.getNumTitles();return 0;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "private int addManualRecord(Airing recAir,UIClient uiClient){Set<EncoderState>tryUs=new HashSet<EncoderState>(encoderStateMap.values());Iterator<EncoderState>walker=tryUs.iterator();Set<Integer>unifiedStationSet=new HashSet<Integer>();boolean encoderExists=false;while(walker.hasNext()){EncoderState es=walker.next();synchronized(es.stationSet){if(es.stationSet.contains(recAir.stationID)){encoderExists=true;unifiedStationSet.addAll(es.stationSet);walker.remove();break;}}}if(!encoderExists)return VideoFrame.WATCH_FAILED_NO_ENCODERS_HAVE_STATION;int lastSetSize;do{lastSetSize=unifiedStationSet.size();walker=tryUs.iterator();while(walker.hasNext()){EncoderState es=walker.next();synchronized(es.stationSet){if(unifiedStationSet.removeAll(es.stationSet)){unifiedStationSet.addAll(es.stationSet);walker.remove();}}}}while(lastSetSize!=unifiedStationSet.size()&& !tryUs.isEmpty());long defaultStartPadding=Sage.getLong(\"default_mr_start_padding\",0);long defaultStopPadding=Sage.getLong(\"default_mr_stop_padding\",0);long requestedStart=recAir.getStartTime()-defaultStartPadding;long requestedStop=recAir.getEndTime()+defaultStopPadding;long requestedDuration=requestedStop-requestedStart;Airing schedAir=recAir;if(defaultStartPadding!=0 || defaultStopPadding!=0){schedAir=new Airing(0);schedAir.time=requestedStart;schedAir.duration=requestedDuration;schedAir.stationID=recAir.stationID;schedAir.showID=recAir.showID;}Vector<Airing>parallelRecords=new Vector<Airing>();Vector<Airing>lastParallel=null;do{parallelRecords.clear();ManualRecord[]manualMustSee=wiz.getManualRecordsSortedByTime();Vector<ManualRecord>parallelRecurs=new Vector<ManualRecord>();for(int i=0;i<manualMustSee.length;i++){ManualRecord currRec=manualMustSee[i];if(currRec.getContentAiring()==recAir)return VideoFrame.WATCH_OK;if(currRec.getEndTime()<=Sage.time())continue;if(currRec.doRecurrencesOverlap(requestedStart,requestedDuration,0)){parallelRecords.addElement(manualMustSee[i].getSchedulingAiring());if(currRec.recur!=0)parallelRecurs.add(currRec);else parallelRecurs.add(null);}}if(parallelRecords.isEmpty())break;parallelRecords.addElement(schedAir);parallelRecurs.add(null);if(sched.testMultiTunerSchedulingPermutation(parallelRecords))break;for(int i=0;i<parallelRecurs.size();i++){ManualRecord currRecur=parallelRecurs.get(i);if(currRecur==null)continue;for(int j=0;j<parallelRecords.size();j++){if(i==j || parallelRecurs.get(j)==null)continue;ManualRecord otherRecur=parallelRecurs.get(j);if(currRecur.stationID==otherRecur.stationID && currRecur.duration==otherRecur.duration && currRecur.recur==otherRecur.recur && currRecur.isSameRecurrence(otherRecur.startTime)){parallelRecurs.remove(j);parallelRecords.remove(j);j--;}}}parallelRecords.remove(schedAir);for(int i=0;i<parallelRecords.size();i++)if(!unifiedStationSet.contains(parallelRecords.get(i).stationID))parallelRecords.remove(i--);if(lastParallel!=null && parallelRecords.equals(lastParallel))return VideoFrame.WATCH_FAILED_USER_REJECTED_CONFLICT;Object hookRes=(uiClient==null)? null : uiClient.processUIClientHook(\"RecordRequestScheduleConflict\",new Object[]{recAir,parallelRecords});if(!(hookRes instanceof Boolean)|| !((Boolean)hookRes))return VideoFrame.WATCH_FAILED_USER_REJECTED_CONFLICT;lastParallel=new Vector<Airing>(parallelRecords);}while(true);ManualRecord newMR;if(schedAir.getStartTime()<Sage.time()){int[]errorReturn=new int[1];EncoderState es=findBestEncoderForNow(schedAir,true,uiClient,errorReturn);if(es==null){if(errorReturn[0]==0)errorReturn[0]=VideoFrame.WATCH_FAILED_GENERAL_CANT_FIND_ENCODER;return errorReturn[0];}synchronized(this){es=checkForFoundBestEncoderNowRecordSwitch(es,recAir);MediaFile mf=wiz.getFileForAiring(recAir);if(mf!=null)mf.setAcquisitionTech(MediaFile.ACQUISITION_MANUAL);newMR=wiz.addManualRecord(requestedStart,requestedDuration,0,recAir.stationID,\"\",\"\",recAir.id,0);es.forceWatch=newMR.getSchedulingAiring();es.forceProcessed=false;work();}}else newMR=wiz.addManualRecord(requestedStart,requestedDuration,0,recAir.stationID,\"\",\"\",recAir.id,0);PluginEventManager.postEvent(PluginEventManager.MANUAL_RECORD_ADDED,new Object[]{PluginEventManager.VAR_AIRING,newMR.getSchedulingAiring()});return VideoFrame.WATCH_OK;}"
  },
  {
    "code_smells": [],
    "source_code": "public void scanLibrary(boolean waitTillComplete){doThoroughLibScan=true;establishMountPoints();if(!waitTillComplete)libraryImportScan();else{synchronized(importLock){libraryImportScan();while(currentlyImporting){try{importLock.wait(0);}catch(InterruptedException e){}}}}}"
  },
  {
    "code_smells": [],
    "source_code": "public GsonBuilder setFieldNamingStrategy(FieldNamingStrategy fieldNamingStrategy){this.fieldNamingPolicy=fieldNamingStrategy;return this;}"
  },
  {
    "code_smells": [],
    "source_code": "public static void main(String[]args)throws Exception{try(AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(Application.class)){context.getBean(NettyContext.class).onClose().block();}}"
  },
  {
    "code_smells": [],
    "source_code": "public Region signingRegion(){return signingRegion;}"
  },
  {
    "code_smells": [],
    "source_code": "@JsonProperty(value=\"credentialScope\")public void setCredentialScope(CredentialScope credentialScope){this.credentialScope=credentialScope;}"
  },
  {
    "code_smells": [],
    "source_code": "protected MethodSpec.Builder resumeMethodBuilder(){return MethodSpec.methodBuilder(RESUME_METHOD).addModifiers(Modifier.PRIVATE,Modifier.FINAL).addParameter(responseType(),LAST_SUCCESSFUL_PAGE_LITERAL).returns(className()).addCode(CodeBlock.builder().beginControlFlow(\"if($L.$L($L))\",NEXT_PAGE_FETCHER_MEMBER,HAS_NEXT_PAGE_METHOD,LAST_SUCCESSFUL_PAGE_LITERAL).addStatement(\"return new $T($L,$L)\",className(),CLIENT_MEMBER,constructRequestFromLastPage(LAST_SUCCESSFUL_PAGE_LITERAL)).endControlFlow().build()).addJavadoc(CodeBlock.builder().add(\"<p>A helper method to resume the pages in case of unexpected failures.\"+\"The method takes the last successful response page as input and returns an \"+\"instance of{@link $T}that can be used to retrieve the consecutive pages \"+\"that follows the input page.</p>\",className()).build());}"
  },
  {
    "code_smells": [],
    "source_code": "@BeforeClass public static void setUp()throws Exception{s3=s3ClientBuilder().build();s3Async=s3AsyncClientBuilder().build();}"
  },
  {
    "code_smells": [],
    "source_code": "public void info(Supplier<String>msg){if(log.isInfoEnabled()){log.info(msg.get());}}"
  },
  {
    "code_smells": [],
    "source_code": "private static short checkAndCastYear(int year){if(year<1 || year>9999){throw new IllegalArgumentException(String.format(\"Year %s must be between 1 and 9999 inclusive\",year));}return(short)year;}"
  },
  {
    "code_smells": [],
    "source_code": "private static void printCodePointAsFourHexDigits(Appendable out,int c)throws IOException{String s=Integer.toHexString(c);out.append(\"\\\\u\");out.append(ZERO_PADDING[4-s.length()]);out.append(s);}"
  },
  {
    "code_smells": [],
    "source_code": "public SpellCheckerGui(){super();initComponents();this.setTitle(\"Spellchecker Gui\");}"
  },
  {
    "code_smells": [],
    "source_code": "@RequestMapping(\"/ping\")@ResponseBody public String ping(){return \"pong\";}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public void setLink(String elementName,String padName,Link link,Direction direction){elements.get(elementName).setLink(padName,link,direction);}"
  },
  {
    "code_smells": [],
    "source_code": "public Dimension getMinimumSize(int rows){FontMetrics fm=getFontMetrics(getFont());initFontMetrics();return new Dimension(20+fm.stringWidth(\"0123456789abcde\"),getItemHeight()*rows+(2*MARGIN));}"
  },
  {
    "code_smells": [],
    "source_code": "@Override protected void uninstallListeners(JComponent scrollPane){super.uninstallListeners(scrollPane);scrollPane.removePropertyChangeListener(propertyChangeHandler);}"
  },
  {
    "code_smells": [],
    "source_code": "private PhysicalFont findDeferredFont(String name,int style){PhysicalFont physicalFont=findJREDeferredFont(name,style);if(physicalFont!=null){return physicalFont;}else{return findOtherDeferredFont(name,style);}}"
  },
  {
    "code_smells": [],
    "source_code": "public CharsetDecoder newDecoder(){return new Decoder(this,plane);}"
  },
  {
    "code_smells": [],
    "source_code": "protected List<XRGlyphCacheEntry>[]seperateGlyphTypes(List<XRGlyphCacheEntry>glyphList,boolean containsLCDGlyphs){ArrayList<XRGlyphCacheEntry>lcdGlyphs=null;ArrayList<XRGlyphCacheEntry>grayGlyphs=null;for(XRGlyphCacheEntry cacheEntry : glyphList){if(cacheEntry.isGrayscale(containsLCDGlyphs)){if(grayGlyphs==null){grayGlyphs=new ArrayList<>(glyphList.size());}cacheEntry.setGlyphSet(grayGlyphSet);grayGlyphs.add(cacheEntry);}else{if(lcdGlyphs==null){lcdGlyphs=new ArrayList<>(glyphList.size());}cacheEntry.setGlyphSet(lcdGlyphSet);lcdGlyphs.add(cacheEntry);}}@SuppressWarnings({\"unchecked\",\"rawtypes\"})List<XRGlyphCacheEntry>[]tmp=(List<XRGlyphCacheEntry>[])(new List[]{grayGlyphs,lcdGlyphs});return tmp;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void Blit(SurfaceData src,SurfaceData dst,Composite comp,Region clip,int srcx,int srcy,int dstx,int dsty,int w,int h){Raster srcRast=src.getRaster(srcx,srcy,w,h);IntegerComponentRaster icr=(IntegerComponentRaster)srcRast;int[]srcPix=icr.getDataStorage();WritableRaster dstRast=(WritableRaster)dst.getRaster(dstx,dsty,w,h);ColorModel dstCM=dst.getColorModel();Region roi=CustomComponent.getRegionOfInterest(src,dst,clip,srcx,srcy,dstx,dsty,w,h);SpanIterator si=roi.getSpanIterator();Object dstPix=null;int srcScan=icr.getScanlineStride();srcx-=dstx;srcy-=dsty;int[]span=new int[4];while(si.nextSpan(span)){int rowoff=(icr.getDataOffset(0)+(srcy+span[1])*srcScan+(srcx+span[0]));for(int y=span[1];y<span[3];y++){int off=rowoff;for(int x=span[0];x<span[2];x++){dstPix=dstCM.getDataElements(srcPix[off++],dstPix);dstRast.setDataElements(x,y,dstPix);}rowoff+=srcScan;}}}"
  },
  {
    "code_smells": [],
    "source_code": "public void XRCompositeRectangles(XRSurfaceData dst,GrowableRectArray rects){int srcPict=getCurrentSource().picture;for(int i=0;i<rects.getSize();i++){int x=rects.getX(i);int y=rects.getY(i);int width=rects.getWidth(i);int height=rects.getHeight(i);con.renderComposite(compRule,srcPict,XRUtils.None,dst.picture,x,y,0,0,x,y,width,height);}}"
  },
  {
    "code_smells": [],
    "source_code": "public byte getByteAt(long index){return addr.getJByteAt(baseOffset+index);}"
  },
  {
    "code_smells": [],
    "source_code": "private Frame senderForInterpreterFrame(X86RegisterMap map){if(DEBUG){}Address unextendedSP=addressOfStackSlot(INTERPRETER_FRAME_SENDER_SP_OFFSET).getAddressAt(0);Address sp=addressOfStackSlot(SENDER_SP_OFFSET);if(map.getUpdateMap())updateMapWithSavedLink(map,addressOfStackSlot(LINK_OFFSET));return new X86Frame(sp,unextendedSP,getLink(),getSenderPC());}"
  },
  {
    "code_smells": [],
    "source_code": "public Image createImageFromFile(final String file,final double width,final double height){final long image=nativeCreateNSImageFromFileContents(file);nativeSetNSImageSize(image,width,height);return createImage(image,width,height);}"
  },
  {
    "code_smells": [],
    "source_code": "@Override public boolean requestWindowFocus(){CEmbeddedFrame.updateGlobalFocusedWindow(target);target.synthesizeWindowActivation(true);return true;}"
  },
  {
    "code_smells": [],
    "source_code": "public MethodInfo getFailedCompile(){return new MethodInfo(lastFailedMethod.stringValue(),(int)lastFailedType.longValue(),-1);}"
  },
  {
    "code_smells": [
      "FeatureEnvy"
    ],
    "source_code": "private static long openProcessToken(int access){try{return OpenProcessToken(GetCurrentProcess(),access);}catch(WindowsException x){return 0L;}}"
  },
  {
    "code_smells": [],
    "source_code": "public static final String getHexBytes(byte[]bytes,int pos,int len){StringBuilder sb=new StringBuilder();for(int i=pos;i<(pos+len);i++){int b1=(bytes[i]>>4)& 0x0f;int b2=bytes[i]& 0x0f;sb.append(Integer.toHexString(b1));sb.append(Integer.toHexString(b2));sb.append(' ');}return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "HostAddress[]readAddr()throws IOException,KrbApErrException{int numAddrs,addrType,addrLength;numAddrs=readLength4();if(numAddrs>0){List<HostAddress>addrs=new ArrayList<>();for(int i=0;i<numAddrs;i++){addrType=read(2);addrLength=readLength4();if(!(addrLength==4 || addrLength==16)){if(DEBUG){}return null;}byte[]result=new byte[addrLength];for(int j=0;j<addrLength;j++)result[j]=(byte)read(1);addrs.add(new HostAddress(addrType,result));}return addrs.toArray(new HostAddress[addrs.size()]);}return null;}"
  },
  {
    "code_smells": [
      "LongMethod",
      "FeatureEnvy"
    ],
    "source_code": "NativeKeyHolder(P11Key p11Key,long keyID,Session keySession,boolean extractKeyInfo,boolean isTokenObject){this.p11Key=p11Key;this.keyID=keyID;this.refCount=-1;byte[]ki=null;if(isTokenObject){this.ref=null;}else{this.ref=new SessionKeyRef(p11Key,keyID,keySession);Token token=p11Key.token;if(extractKeyInfo){try{if(p11Key.sensitive && nativeKeyWrapperKeyID==0){synchronized(NativeKeyHolder.class){CK_ATTRIBUTE[]wrappingAttributes=token.getAttributes(O_GENERATE,CKO_SECRET_KEY,CKK_AES,new CK_ATTRIBUTE[]{new CK_ATTRIBUTE(CKA_CLASS,CKO_SECRET_KEY),new CK_ATTRIBUTE(CKA_VALUE_LEN,256>>3)});Session wrappingSession=null;try{wrappingSession=token.getObjSession();nativeKeyWrapperKeyID=token.p11.C_GenerateKey(wrappingSession.id(),new CK_MECHANISM(CKM_AES_KEY_GEN),wrappingAttributes);byte[]iv=new byte[16];JCAUtil.getSecureRandom().nextBytes(iv);nativeKeyWrapperMechanism=new CK_MECHANISM(CKM_AES_CBC_PAD,iv);}catch(PKCS11Exception e){}finally{token.releaseSession(wrappingSession);}}}Session opSession=null;try{opSession=token.getOpSession();ki=p11Key.token.p11.getNativeKeyInfo(opSession.id(),keyID,nativeKeyWrapperKeyID,nativeKeyWrapperMechanism);}catch(PKCS11Exception e){}finally{token.releaseSession(opSession);}}catch(PKCS11Exception e){}}}this.nativeKeyInfo=((ki==null || ki.length==0)? null : ki);}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public String toString(){StringBuilder sb=new StringBuilder();sb.append(Constants.INDENT);sb.append(\"kdf: 0x\");sb.append(Functions.toFullHexString(kdf));sb.append(Constants.NEWLINE);sb.append(Constants.INDENT);sb.append(\"pSharedDataLen: \");sb.append(pSharedData.length);sb.append(Constants.NEWLINE);sb.append(Constants.INDENT);sb.append(\"pSharedData: \");sb.append(Functions.toHexString(pSharedData));sb.append(Constants.NEWLINE);sb.append(Constants.INDENT);sb.append(\"pPublicDataLen: \");sb.append(pPublicData.length);sb.append(Constants.NEWLINE);sb.append(Constants.INDENT);sb.append(\"pPublicData: \");sb.append(Functions.toHexString(pPublicData));return sb.toString();}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public void updateState(X509Certificate cert)throws CertificateException,IOException,CertPathValidatorException{if(cert==null){return;}subjectDN=cert.getSubjectX500Principal();X509CertImpl icert=X509CertImpl.toImpl(cert);PublicKey newKey=cert.getPublicKey();if(PKIX.isDSAPublicKeyWithoutParams(newKey)){newKey=BasicChecker.makeInheritedParamsKey(newKey,pubKey);}pubKey=newKey;if(init){init=false;return;}subjKeyId=icert.getSubjectKeyIdentifierExtension();crlSign=RevocationChecker.certCanSignCrl(cert);if(nc!=null){nc.merge(icert.getNameConstraintsExtension());}else{nc=icert.getNameConstraintsExtension();if(nc!=null){nc=(NameConstraintsExtension)nc.clone();}}explicitPolicy=PolicyChecker.mergeExplicitPolicy(explicitPolicy,icert,false);policyMapping=PolicyChecker.mergePolicyMapping(policyMapping,icert);inhibitAnyPolicy=PolicyChecker.mergeInhibitAnyPolicy(inhibitAnyPolicy,icert);certIndex++;remainingCACerts=ConstraintsChecker.mergeBasicConstraints(cert,remainingCACerts);init=false;}"
  },
  {
    "code_smells": [
      "LongMethod"
    ],
    "source_code": "public String toString(){if(subject==null || pubKey==null || interval==null || issuer==null || algId==null || serialNum==null){throw new NullPointerException(\"X.509 cert is incomplete\");}StringBuilder sb=new StringBuilder();sb.append(\"[\\n\");sb.append(\" \"+version.toString()+\"\\n\");sb.append(\" Subject: \"+subject.toString()+\"\\n\");sb.append(\" Signature Algorithm: \"+algId.toString()+\"\\n\");sb.append(\" Key: \"+pubKey.toString()+\"\\n\");sb.append(\" \"+interval.toString()+\"\\n\");sb.append(\" Issuer: \"+issuer.toString()+\"\\n\");sb.append(\" \"+serialNum.toString()+\"\\n\");if(issuerUniqueId!=null){sb.append(\" Issuer Id:\\n\"+issuerUniqueId.toString()+\"\\n\");}if(subjectUniqueId!=null){sb.append(\" Subject Id:\\n\"+subjectUniqueId.toString()+\"\\n\");}if(extensions!=null){Collection<Extension>allExts=extensions.getAllExtensions();Extension[]exts=allExts.toArray(new Extension[0]);sb.append(\"\\nCertificate Extensions: \"+exts.length);for(int i=0;i<exts.length;i++){sb.append(\"\\n[\"+(i+1)+\"]: \");Extension ext=exts[i];try{if(OIDMap.getClass(ext.getExtensionId())==null){sb.append(ext.toString());byte[]extValue=ext.getExtensionValue();if(extValue!=null){DerOutputStream out=new DerOutputStream();out.putOctetString(extValue);extValue=out.toByteArray();HexDumpEncoder enc=new HexDumpEncoder();sb.append(\"Extension unknown: \"+\"DER encoded OCTET string=\\n\"+enc.encodeBuffer(extValue)+\"\\n\");}}else sb.append(ext.toString());}catch(Exception e){sb.append(\",Error parsing this extension\");}}Map<String,Extension>invalid=extensions.getUnparseableExtensions();if(invalid.isEmpty()==false){sb.append(\"\\nUnparseable certificate extensions: \"+invalid.size());int i=1;for(Extension ext : invalid.values()){sb.append(\"\\n[\"+(i++)+\"]: \");sb.append(ext);}}}sb.append(\"\\n]\");return sb.toString();}"
  },
  {
    "code_smells": [],
    "source_code": "private static void setFieldValue(Field field,String value){try{field.set(null,value);}catch(IllegalArgumentException | IllegalAccessException e){throw new Error(\"Unable to access or set message for field \"+field.getName());}}"
  },
  {
    "code_smells": [],
    "source_code": "public void setProp2(String prop2){this.prop2=prop2;}"
  }
]